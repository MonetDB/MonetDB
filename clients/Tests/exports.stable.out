stdout of test 'exports` in directory 'clients` itself:


# 21:40:57 >  
# 21:40:57 >  "/usr/bin/python2" "exports.py" "exports"
# 21:40:57 >  

# gdk
int ALIGNsynced(BAT *b1, BAT *b2);
int ATOMallocate(const char *nme);
void *ATOMdup(int id, const void *val);
uint8_t ATOMelmshift(int sz) __attribute__((__const__));
char *ATOMformat(int id, const void *val);
int ATOMindex(const char *nme);
size_t ATOMlen(int id, const void *v);
str ATOMname(int id);
void *ATOMnil(int id) __attribute__((__malloc__));
int ATOMprint(int id, const void *val, stream *fd);
gdk_return BATappend(BAT *b, BAT *n, BAT *s, bool force) __attribute__((__warn_unused_result__));
void BATassertProps(BAT *b);
atomDesc BATatoms[];
BAT *BATattach(int tt, const char *heapfile, role_t role);
gdk_return BATbandjoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, const void *c1, const void *c2, bool li, bool hi, BUN estimate) __attribute__((__warn_unused_result__));
BAT *BATcalcabsolute(BAT *b, BAT *s, BAT *r);
BAT *BATcalcadd(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r, int tp, bool abort_on_error);
BAT *BATcalcaddcst(BAT *b, const ValRecord *v, BAT *s, BAT *r, int tp, bool abort_on_error);
BAT *BATcalcand(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalcandcst(BAT *b, const ValRecord *v, BAT *s, BAT *r);
gdk_return BATcalcavg(BAT *b, BAT *s, dbl *avg, BUN *vals, int scale);
BAT *BATcalcbetween(BAT *b, BAT *lo, BAT *hi, BAT *s, BAT *slo, BAT *shi, BAT *r, bool symmetric, bool linc, bool hinc, bool nils_false, bool anti);
BAT *BATcalcbetweenbatcst(BAT *b, BAT *lo, const ValRecord *hi, BAT *s, BAT *slo, BAT *r, bool symmetric, bool linc, bool hinc, bool nils_false, bool anti);
BAT *BATcalcbetweencstbat(BAT *b, const ValRecord *lo, BAT *hi, BAT *s, BAT *shi, BAT *r, bool symmetric, bool linc, bool hinc, bool nils_false, bool anti);
BAT *BATcalcbetweencstcst(BAT *b, const ValRecord *lo, const ValRecord *hi, BAT *s, BAT *r, bool symmetric, bool linc, bool hinc, bool nils_false, bool anti);
BAT *BATcalccmp(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalccmpcst(BAT *b, const ValRecord *v, BAT *s, BAT *r);
dbl BATcalccorrelation(BAT *b1, BAT *b2);
dbl BATcalccovariance_population(BAT *b1, BAT *b2);
dbl BATcalccovariance_sample(BAT *b1, BAT *b2);
BAT *BATcalccstadd(const ValRecord *v, BAT *b, BAT *s, BAT *r, int tp, bool abort_on_error);
BAT *BATcalccstand(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalccstcmp(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalccstdiv(const ValRecord *v, BAT *b, BAT *s, BAT *r, int tp, bool abort_on_error);
BAT *BATcalccsteq(const ValRecord *v, BAT *b, BAT *s, BAT *r, bool nil_matches);
BAT *BATcalccstge(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalccstgt(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalccstle(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalccstlsh(const ValRecord *v, BAT *b, BAT *s, BAT *r, bool abort_on_error);
BAT *BATcalccstlt(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalccstmax(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalccstmax_no_nil(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalccstmin(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalccstmin_no_nil(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalccstmod(const ValRecord *v, BAT *b, BAT *s, BAT *r, int tp, bool abort_on_error);
BAT *BATcalccstmul(const ValRecord *v, BAT *b, BAT *s, BAT *r, int tp, bool abort_on_error);
BAT *BATcalccstne(const ValRecord *v, BAT *b, BAT *s, BAT *r, bool nil_matches);
BAT *BATcalccstor(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalccstrsh(const ValRecord *v, BAT *b, BAT *s, BAT *r, bool abort_on_error);
BAT *BATcalccstsub(const ValRecord *v, BAT *b, BAT *s, BAT *r, int tp, bool abort_on_error);
BAT *BATcalccstxor(const ValRecord *v, BAT *b, BAT *s, BAT *r);
BAT *BATcalcdecr(BAT *b, BAT *s, BAT *r, bool abort_on_error);
BAT *BATcalcdiv(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r, int tp, bool abort_on_error);
BAT *BATcalcdivcst(BAT *b, const ValRecord *v, BAT *s, BAT *r, int tp, bool abort_on_error);
BAT *BATcalceq(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r, bool nil_matches);
BAT *BATcalceqcst(BAT *b, const ValRecord *v, BAT *s, BAT *r, bool nil_matches);
BAT *BATcalcge(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalcgecst(BAT *b, const ValRecord *v, BAT *s, BAT *r);
BAT *BATcalcgt(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalcgtcst(BAT *b, const ValRecord *v, BAT *s, BAT *r);
BAT *BATcalcifthencstelse(BAT *b, const ValRecord *c1, BAT *b2);
BAT *BATcalcifthencstelsecst(BAT *b, const ValRecord *c1, const ValRecord *c2);
BAT *BATcalcifthenelse(BAT *b, BAT *b1, BAT *b2);
BAT *BATcalcifthenelsecst(BAT *b, BAT *b1, const ValRecord *c2);
BAT *BATcalcincr(BAT *b, BAT *s, BAT *r, bool abort_on_error);
BAT *BATcalcisnil(BAT *b, BAT *s, BAT *r);
BAT *BATcalcisnotnil(BAT *b, BAT *s, BAT *r);
BAT *BATcalciszero(BAT *b, BAT *s, BAT *r);
BAT *BATcalcle(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalclecst(BAT *b, const ValRecord *v, BAT *s, BAT *r);
BAT *BATcalclsh(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r, bool abort_on_error);
BAT *BATcalclshcst(BAT *b, const ValRecord *v, BAT *s, BAT *r, bool abort_on_error);
BAT *BATcalclt(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalcltcst(BAT *b, const ValRecord *v, BAT *s, BAT *r);
BAT *BATcalcmax(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalcmax_no_nil(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalcmaxcst(BAT *b, const ValRecord *v, BAT *s, BAT *r);
BAT *BATcalcmaxcst_no_nil(BAT *b, const ValRecord *v, BAT *s, BAT *r);
BAT *BATcalcmin(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalcmin_no_nil(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalcmincst(BAT *b, const ValRecord *v, BAT *s, BAT *r);
BAT *BATcalcmincst_no_nil(BAT *b, const ValRecord *v, BAT *s, BAT *r);
BAT *BATcalcmod(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r, int tp, bool abort_on_error);
BAT *BATcalcmodcst(BAT *b, const ValRecord *v, BAT *s, BAT *r, int tp, bool abort_on_error);
BAT *BATcalcmul(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r, int tp, bool abort_on_error);
BAT *BATcalcmulcst(BAT *b, const ValRecord *v, BAT *s, BAT *r, int tp, bool abort_on_error);
BAT *BATcalcne(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r, bool nil_matches);
BAT *BATcalcnecst(BAT *b, const ValRecord *v, BAT *s, BAT *r, bool nil_matches);
BAT *BATcalcnegate(BAT *b, BAT *s, BAT *r);
BAT *BATcalcnot(BAT *b, BAT *s, BAT *r);
BAT *BATcalcor(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalcorcst(BAT *b, const ValRecord *v, BAT *s, BAT *r);
BAT *BATcalcrsh(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r, bool abort_on_error);
BAT *BATcalcrshcst(BAT *b, const ValRecord *v, BAT *s, BAT *r, bool abort_on_error);
BAT *BATcalcsign(BAT *b, BAT *s, BAT *r);
dbl BATcalcstdev_population(dbl *avgp, BAT *b);
dbl BATcalcstdev_sample(dbl *avgp, BAT *b);
BAT *BATcalcsub(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r, int tp, bool abort_on_error);
BAT *BATcalcsubcst(BAT *b, const ValRecord *v, BAT *s, BAT *r, int tp, bool abort_on_error);
dbl BATcalcvariance_population(dbl *avgp, BAT *b);
dbl BATcalcvariance_sample(dbl *avgp, BAT *b);
BAT *BATcalcxor(BAT *b1, BAT *b2, BAT *s1, BAT *s2, BAT *r);
BAT *BATcalcxorcst(BAT *b, const ValRecord *v, BAT *s, BAT *r);
bool BATcheckorderidx(BAT *b);
gdk_return BATclear(BAT *b, bool force);
void BATcommit(BAT *b);
BAT *BATconstant(oid hseq, int tt, const void *val, BUN cnt, role_t role);
BAT *BATconvert(BAT *b, BAT *s, BAT *r, int tp, bool abort_on_error);
BUN BATcount_no_nil(BAT *b);
gdk_return BATdel(BAT *b, BAT *d) __attribute__((__warn_unused_result__));
BAT *BATdense(oid hseq, oid tseq, BUN cnt) __attribute__((__warn_unused_result__));
BAT *BATdiff(BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, bool not_in, BUN estimate);
BAT *BATdiffcand(BAT *a, BAT *b);
gdk_return BATextend(BAT *b, BUN newcap) __attribute__((__warn_unused_result__));
void BATfakeCommit(BAT *b);
gdk_return BATfirstn(BAT **topn, BAT **gids, BAT *b, BAT *cands, BAT *grps, BUN n, bool asc, bool nilslast, bool distinct) __attribute__((__warn_unused_result__));
restrict_t BATgetaccess(BAT *b);
gdk_return BATgroup(BAT **groups, BAT **extents, BAT **histo, BAT *b, BAT *s, BAT *g, BAT *e, BAT *h) __attribute__((__warn_unused_result__));
const char *BATgroupaggrinit(BAT *b, BAT *g, BAT *e, BAT *s, oid *minp, oid *maxp, BUN *ngrpp, struct canditer *ci, BUN *ncand);
gdk_return BATgroupavg(BAT **bnp, BAT **cntsp, BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error, int scale);
BAT *BATgroupcorrelation(BAT *b1, BAT *b2, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupcount(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupcovariance_population(BAT *b1, BAT *b2, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupcovariance_sample(BAT *b1, BAT *b2, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupmax(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupmedian(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupmedian_avg(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupmin(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupprod(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupquantile(BAT *b, BAT *g, BAT *e, BAT *s, int tp, double quantile, bool skip_nils, bool abort_on_error);
BAT *BATgroupquantile_avg(BAT *b, BAT *g, BAT *e, BAT *s, int tp, double quantile, bool skip_nils, bool abort_on_error);
BAT *BATgroupsize(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupstdev_population(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupstdev_sample(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupstr_group_concat(BAT *b, BAT *g, BAT *e, BAT *s, BAT *sep, bool skip_nils, bool abort_on_error, const char *restrict separator);
BAT *BATgroupsum(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupvariance_population(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupvariance_sample(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BUN BATgrows(BAT *b);
gdk_return BAThash(BAT *b);
void BAThseqbase(BAT *b, oid o);
gdk_return BATimprints(BAT *b);
BAT *BATintersect(BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, bool max_one, BUN estimate);
BAT *BATintersectcand(BAT *a, BAT *b);
gdk_return BATjoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, BUN estimate) __attribute__((__warn_unused_result__));
gdk_return BATkey(BAT *b, bool onoff);
bool BATkeyed(BAT *b);
gdk_return BATleftjoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, BUN estimate) __attribute__((__warn_unused_result__));
void *BATmax(BAT *b, void *aggr);
void *BATmax_skipnil(BAT *b, void *aggr, bit skipnil);
BAT *BATmergecand(BAT *a, BAT *b);
void *BATmin(BAT *b, void *aggr);
void *BATmin_skipnil(BAT *b, void *aggr, bit skipnil);
gdk_return BATmode(BAT *b, bool transient);
void BATmsync(BAT *b);
gdk_return BATnegcands(BAT *cands, BAT *odels);
bool BATordered(BAT *b);
bool BATordered_rev(BAT *b);
gdk_return BATorderidx(BAT *b, bool stable);
gdk_return BATouterjoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, BUN estimate) __attribute__((__warn_unused_result__));
gdk_return BATprint(stream *s, BAT *b);
gdk_return BATprintcolumns(stream *s, int argc, BAT *argv[]);
gdk_return BATprod(void *res, int tp, BAT *b, BAT *s, bool skip_nils, bool abort_on_error, bool nil_if_empty);
BAT *BATproject(BAT *restrict l, BAT *restrict r);
BAT *BATproject2(BAT *restrict l, BAT *restrict r1, BAT *restrict r2);
BAT *BATprojectchain(BAT **bats);
gdk_return BATrangejoin(BAT **r1p, BAT **r2p, BAT *l, BAT *rl, BAT *rh, BAT *sl, BAT *sr, bool li, bool hi, bool anti, bool symmetric, BUN estimate) __attribute__((__warn_unused_result__));
gdk_return BATreplace(BAT *b, BAT *p, BAT *n, bool force) __attribute__((__warn_unused_result__));
gdk_return BATroles(BAT *b, const char *tnme);
BAT *BATsample(BAT *b, BUN n);
BAT *BATsample_with_seed(BAT *b, BUN n, unsigned seed);
gdk_return BATsave(BAT *b) __attribute__((__warn_unused_result__));
BAT *BATselect(BAT *b, BAT *s, const void *tl, const void *th, bool li, bool hi, bool anti);
gdk_return BATsemijoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, bool max_one, BUN estimate) __attribute__((__warn_unused_result__));
gdk_return BATsetaccess(BAT *b, restrict_t mode);
void BATsetcapacity(BAT *b, BUN cnt);
void BATsetcount(BAT *b, BUN cnt);
BAT *BATslice(BAT *b, BUN low, BUN high);
gdk_return BATsort(BAT **sorted, BAT **order, BAT **groups, BAT *b, BAT *o, BAT *g, bool reverse, bool nilslast, bool stable) __attribute__((__warn_unused_result__));
gdk_return BATstr_group_concat(ValPtr res, BAT *b, BAT *s, BAT *sep, bool skip_nils, bool abort_on_error, bool nil_if_empty, const char *restrict separator);
gdk_return BATsubcross(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, bool max_one) __attribute__((__warn_unused_result__));
gdk_return BATsum(void *res, int tp, BAT *b, BAT *s, bool skip_nils, bool abort_on_error, bool nil_if_empty);
gdk_return BATthetajoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, int op, bool nil_matches, BUN estimate) __attribute__((__warn_unused_result__));
BAT *BATthetaselect(BAT *b, BAT *s, const void *val, const char *op);
void BATtseqbase(BAT *b, oid o);
void BATundo(BAT *b);
BAT *BATunique(BAT *b, BAT *s);
BBPrec *BBP[N_BBPINIT];
gdk_return BBPaddfarm(const char *dirname, int rolemask);
void BBPclear(bat bid);
BAT *BBPdescriptor(bat b);
int BBPfix(bat b);
bat BBPindex(const char *nme);
void BBPkeepref(bat i);
bat BBPlimit;
void BBPlock(void);
BAT *BBPquickdesc(bat b, bool delaccess);
int BBPreclaim(BAT *b);
int BBPrelease(bat b);
int BBPrename(bat bid, const char *nme);
int BBPretain(bat b);
gdk_return BBPsave(BAT *b);
void BBPshare(bat b);
gdk_return BBPsync(int cnt, bat *subcommit);
int BBPunfix(bat b);
void BBPunlock(void);
gdk_return BUNappend(BAT *b, const void *right, bool force) __attribute__((__warn_unused_result__));
gdk_return BUNdelete(BAT *b, oid o) __attribute__((__warn_unused_result__));
BUN BUNfnd(BAT *b, const void *right);
gdk_return BUNinplace(BAT *b, BUN p, const void *right, bool force) __attribute__((__warn_unused_result__));
BAT *COLcopy(BAT *b, int tt, bool writable, role_t role);
BAT *COLnew(oid hseq, int tltype, BUN capacity, role_t role) __attribute__((__warn_unused_result__));
size_t GDK_mem_maxsize;
size_t GDK_vm_maxsize;
gdk_return GDKanalytical_correlation(BAT *r, BAT *b1, BAT *b2, BAT *s, BAT *e, int tpe);
gdk_return GDKanalytical_covariance_pop(BAT *r, BAT *b1, BAT *b2, BAT *s, BAT *e, int tpe);
gdk_return GDKanalytical_covariance_samp(BAT *r, BAT *b1, BAT *b2, BAT *s, BAT *e, int tpe);
gdk_return GDKanalytical_stddev_pop(BAT *r, BAT *b, BAT *s, BAT *e, int tpe);
gdk_return GDKanalytical_stddev_samp(BAT *r, BAT *b, BAT *s, BAT *e, int tpe);
gdk_return GDKanalytical_str_group_concat(BAT *r, BAT *b, BAT *sep, BAT *s, BAT *e, const char *restrict separator);
gdk_return GDKanalytical_variance_pop(BAT *r, BAT *b, BAT *s, BAT *e, int tpe);
gdk_return GDKanalytical_variance_samp(BAT *r, BAT *b, BAT *s, BAT *e, int tpe);
gdk_return GDKanalyticalavg(BAT *r, BAT *b, BAT *s, BAT *e, int tpe);
gdk_return GDKanalyticalcount(BAT *r, BAT *b, BAT *s, BAT *e, const bit *restrict ignore_nils, int tpe);
gdk_return GDKanalyticaldiff(BAT *r, BAT *b, BAT *p, int tpe);
gdk_return GDKanalyticalfirst(BAT *r, BAT *b, BAT *s, BAT *e, int tpe);
gdk_return GDKanalyticallag(BAT *r, BAT *b, BAT *p, BUN lag, const void *restrict default_value, int tpe);
gdk_return GDKanalyticallast(BAT *r, BAT *b, BAT *s, BAT *e, int tpe);
gdk_return GDKanalyticallead(BAT *r, BAT *b, BAT *p, BUN lead, const void *restrict default_value, int tpe);
gdk_return GDKanalyticalmax(BAT *r, BAT *b, BAT *s, BAT *e, int tpe);
gdk_return GDKanalyticalmin(BAT *r, BAT *b, BAT *s, BAT *e, int tpe);
gdk_return GDKanalyticalnthvalue(BAT *r, BAT *b, BAT *s, BAT *e, BAT *l, const void *restrict bound, int tp1, int tp2);
gdk_return GDKanalyticalntile(BAT *r, BAT *b, BAT *p, BAT *n, int tpe, const void *restrict ntile);
gdk_return GDKanalyticalprod(BAT *r, BAT *b, BAT *s, BAT *e, int tp1, int tp2);
gdk_return GDKanalyticalsum(BAT *r, BAT *b, BAT *s, BAT *e, int tp1, int tp2);
gdk_return GDKanalyticalwindowbounds(BAT *r, BAT *b, BAT *p, BAT *l, const void *restrict bound, int tp1, int tp2, int unit, bool preceding, lng first_half);
int GDKatomcnt;
size_t GDKbatcopy(char *dest, BAT *bat, str colname);
size_t GDKbatcopysize(BAT *bat, str colname);
size_t GDKbatread(char *src, BAT **bat, str *colname);
gdk_return GDKchangesemval(int sem_id, int number, int change);
gdk_return GDKchangesemval_timeout(int sem_id, int number, int change, int timeout_mseconds, bool *succeed);
void GDKclrerr(void);
gdk_return GDKcopyenv(BAT **key, BAT **val, bool writable);
gdk_return GDKcreatedir(const char *nme);
gdk_return GDKcreatesem(int id, int count, int *semid);
int GDKdebug;
_Noreturn void GDKexit(int status);
void GDKexit(int status);
bool GDKexiting(void);
_Noreturn void GDKfatal(_In_z_ _Printf_format_string_ const char *format, ...) __attribute__((__format__(__printf__, 1, 2)));
void GDKfatal(_In_z_ _Printf_format_string_ const char *format, ...) __attribute__((__format__(__printf__, 1, 2)));
jmp_buf GDKfataljump;
bit GDKfataljumpenable;
str GDKfatalmsg;
char *GDKfilepath(int farmid, const char *dir, const char *nme, const char *ext);
void GDKfree(void *blk);
int GDKgetdebug(void);
const char *GDKgetenv(const char *name);
int GDKgetenv_int(const char *name, int def);
bool GDKgetenv_istext(const char *name, const char *text);
bool GDKgetenv_istrue(const char *name);
bool GDKgetenv_isyes(const char *name);
gdk_return GDKgetsem(int sem_id, int count, int *semid);
gdk_return GDKgetsemval(int sem_id, int number, int *semval);
gdk_return GDKinit(struct opt *set, int setlen);
void *GDKinitmmap(size_t id, size_t size, size_t *return_size);
bool GDKinmemory(void);
ATOMIC_TYPE GDKlockcnt;
ATOMIC_TYPE GDKlockcontentioncnt;
MT_Lock *volatile GDKlocklist;
ATOMIC_FLAG GDKlocklistlock;
ATOMIC_TYPE GDKlocksleepcnt;
void GDKlockstatistics(int);
void *GDKmalloc(size_t size) __attribute__((__malloc__)) __attribute__((__alloc_size__(1))) __attribute__((__warn_unused_result__));
size_t GDKmem_cursize(void);
gdk_return GDKmergeidx(BAT *b, BAT **a, int n_ar);
void *GDKmmap(const char *path, int mode, size_t len) __attribute__((__warn_unused_result__));
gdk_return GDKmmapfile(str buffer, size_t max, size_t id);
int GDKms(void);
gdk_return GDKmunmap(void *addr, size_t len);
int GDKnr_threads;
void GDKprepareExit(void);
void GDKqsort(void *restrict h, void *restrict t, const void *restrict base, size_t n, int hs, int ts, int tpe, bool reverse, bool nilslast);
void *GDKrealloc(void *pold, size_t size) __attribute__((__alloc_size__(2))) __attribute__((__warn_unused_result__));
gdk_return GDKreleasemmap(void *ptr, size_t size, size_t id);
gdk_return GDKreleasesem(int sem_id);
void GDKreset(int status);
void GDKsetdebug(int debug);
gdk_return GDKsetenv(const char *name, const char *value);
void GDKsetmallocsuccesscount(lng count);
ssize_t GDKstrFromStr(unsigned char *restrict dst, const unsigned char *restrict src, ssize_t len);
str GDKstrdup(const char *s) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));
str GDKstrndup(const char *s, size_t n) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));
gdk_return GDKtracer_fill_comp_info(BAT *id, BAT *component, BAT *log_level);
gdk_return GDKtracer_flush_buffer(void);
const char *GDKtracer_get_component_level(const char *comp);
void GDKtracer_log(const char *file, const char *func, int lineno, log_level_t lvl, component_t comp, const char *syserr, _In_z_ _Printf_format_string_ const char *format, ...) __attribute__((__format__(__printf__, 7, 8)));
void GDKtracer_reinit_basic(int sig);
gdk_return GDKtracer_reset_adapter(void);
gdk_return GDKtracer_reset_component_level(const char *comp);
gdk_return GDKtracer_reset_flush_level(void);
gdk_return GDKtracer_reset_layer_level(const char *layer);
gdk_return GDKtracer_set_adapter(const char *adapter);
gdk_return GDKtracer_set_component_level(const char *comp, const char *lvl);
gdk_return GDKtracer_set_flush_level(const char *lvl);
gdk_return GDKtracer_set_layer_level(const char *layer, const char *lvl);
gdk_return GDKtracer_stop(void);
size_t GDKuniqueid(size_t offset);
gdk_return GDKupgradevarheap(BAT *b, var_t v, bool copyall, bool mayshare) __attribute__((__warn_unused_result__));
lng GDKusec(void);
const char *GDKversion(void) __attribute__((__const__));
size_t GDKvm_cursize(void);
void *GDKzalloc(size_t size) __attribute__((__malloc__)) __attribute__((__alloc_size__(1))) __attribute__((__warn_unused_result__));
void HASHdestroy(BAT *b);
gdk_return HASHgrowbucket(BAT *b);
BUN HASHlist(Hash *h, BUN i);
BUN HASHprobe(const Hash *h, const void *v);
void HEAP_free(Heap *heap, var_t block);
void HEAP_initialize(Heap *heap, size_t nbytes, size_t nprivate, int alignment);
var_t HEAP_malloc(Heap *heap, size_t nbytes);
gdk_return HEAPextend(Heap *h, size_t size, bool mayshare) __attribute__((__warn_unused_result__));
size_t HEAPmemsize(Heap *h);
size_t HEAPvmsize(Heap *h);
void IMPSdestroy(BAT *b);
lng IMPSimprintsize(BAT *b);
int MT_check_nr_cores(void);
int MT_create_thread(MT_Id *t, void (*function)(void *), void *arg, enum MT_thr_detach d, const char *threadname);
void MT_exiting_thread(void);
MT_Id MT_getpid(void);
size_t MT_getrss(void);
void MT_init(void);
int MT_join_thread(MT_Id t);
int MT_lockf(char *filename, int mode);
bool MT_path_absolute(const char *path);
void MT_sleep_ms(unsigned int ms);
void *MT_thread_getdata(void);
const char *MT_thread_getname(void);
bool MT_thread_init(void);
void MT_thread_setdata(void *data);
void MT_thread_setlockwait(MT_Lock *lock);
void MT_thread_setsemawait(MT_Sema *sema);
void MT_thread_setworking(const char *work);
void OIDXdestroy(BAT *b);
ssize_t OIDfromStr(const char *src, size_t *len, oid **dst, bool external);
ssize_t OIDtoStr(str *dst, size_t *len, const oid *src, bool external);
BUN ORDERfnd(BAT *b, const void *v);
BUN ORDERfndfirst(BAT *b, const void *v);
BUN ORDERfndlast(BAT *b, const void *v);
BUN SORTfnd(BAT *b, const void *v);
BUN SORTfndfirst(BAT *b, const void *v);
BUN SORTfndlast(BAT *b, const void *v);
MT_Id THRcreate(void (*f)(void *), void *arg, enum MT_thr_detach d, const char *name);
void *THRdata[THREADDATA];
void THRdel(Thread t);
Thread THRget(int tid);
void *THRgetdata(int);
int THRgettid(void);
int THRhighwater(void);
void THRsetdata(int, void *);
void TMabort(void);
gdk_return TMcommit(void);
gdk_return TMsubcommit(BAT *bl);
gdk_return TMsubcommit_list(bat *subcommit, int cnt);
void VALclear(ValPtr v);
int VALcmp(const ValRecord *p, const ValRecord *q);
void *VALconvert(int typ, ValPtr t);
ValPtr VALcopy(ValPtr dst, const ValRecord *src);
void VALempty(ValPtr v);
char *VALformat(const ValRecord *res);
void *VALget(ValPtr v);
ValPtr VALinit(ValPtr d, int tpe, const void *s);
int VALisnil(const ValRecord *v);
ValPtr VALset(ValPtr v, int t, void *p);
gdk_return VARcalcabsolute(ValPtr ret, const ValRecord *v);
gdk_return VARcalcadd(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalcand(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcbetween(ValPtr ret, const ValRecord *v, const ValRecord *lo, const ValRecord *hi, bool symmetric, bool linc, bool hinc, bool nils_false, bool anti);
gdk_return VARcalccmp(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcdecr(ValPtr ret, const ValRecord *v, bool abort_on_error);
gdk_return VARcalcdiv(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalceq(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool nil_matches);
gdk_return VARcalcge(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcgt(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcincr(ValPtr ret, const ValRecord *v, bool abort_on_error);
gdk_return VARcalcisnil(ValPtr ret, const ValRecord *v);
gdk_return VARcalcisnotnil(ValPtr ret, const ValRecord *v);
gdk_return VARcalciszero(ValPtr ret, const ValRecord *v);
gdk_return VARcalcle(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalclsh(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalclt(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcmod(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalcmul(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalcne(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool nil_matches);
gdk_return VARcalcnegate(ValPtr ret, const ValRecord *v);
gdk_return VARcalcnot(ValPtr ret, const ValRecord *v);
gdk_return VARcalcor(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcrsh(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalcsign(ValPtr ret, const ValRecord *v);
gdk_return VARcalcsub(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalcxor(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARconvert(ValPtr ret, const ValRecord *v, bool abort_on_error);
void VIEWbounds(BAT *b, BAT *view, BUN l, BUN h);
BAT *VIEWcreate(oid seq, BAT *b);
size_t _MT_npages;
size_t _MT_pagesize;
const union _dbl_nil_t _dbl_nil_;
const union _flt_nil_t _flt_nil_;
char *asctime_r(const struct tm *restrict, char *restrict);
ssize_t batFromStr(const char *src, size_t *len, bat **dst, bool external);
ssize_t batToStr(str *dst, size_t *len, const bat *src, bool external);
ssize_t bitFromStr(const char *src, size_t *len, bit **dst, bool external);
ssize_t bitToStr(str *dst, size_t *len, const bit *src, bool external);
ssize_t bteFromStr(const char *src, size_t *len, bte **dst, bool external);
ssize_t bteToStr(str *dst, size_t *len, const bte *src, bool external);
const bte bte_nil;
oid canditer_idx(struct canditer *ci, BUN p);
BUN canditer_init(struct canditer *ci, BAT *b, BAT *s);
oid canditer_last(struct canditer *ci);
oid canditer_peek(struct canditer *ci);
oid canditer_peekprev(struct canditer *ci);
oid canditer_prev(struct canditer *ci);
void canditer_reset(struct canditer *ci);
BUN canditer_search(struct canditer *ci, oid o, bool next);
void canditer_setidx(struct canditer *ci, BUN p);
BAT *canditer_slice(struct canditer *ci, BUN lo, BUN hi);
BAT *canditer_slice2(struct canditer *ci, BUN lo1, BUN hi1, BUN lo2, BUN hi2);
int closedir(DIR *dir);
char *ctime_r(const time_t *restrict, char *restrict);
date date_add_day(date dt, int days) __attribute__((__const__));
date date_add_month(date dt, int months) __attribute__((__const__));
int date_century(date dt) __attribute__((__const__));
date date_create(int year, int month, int day) __attribute__((__const__));
int date_day(date dt) __attribute__((__const__));
int date_dayofweek(date dt) __attribute__((__const__));
int date_dayofyear(date dt) __attribute__((__const__));
int date_decade(date dt) __attribute__((__const__));
int date_diff(date d1, date d2) __attribute__((__const__));
ssize_t date_fromstr(const char *buf, size_t *len, date **d, bool external);
int date_month(date dt) __attribute__((__const__));
int date_quarter(date dt) __attribute__((__const__));
ssize_t date_tostr(str *buf, size_t *len, const date *val, bool external);
int date_weekofyear(date dt) __attribute__((__const__));
int date_year(date dt) __attribute__((__const__));
daytime daytime_add_usec(daytime tm, lng usec) __attribute__((__const__));
daytime daytime_add_usec_modulo(daytime tm, lng usec) __attribute__((__const__));
daytime daytime_create(int hour, int minute, int second, int usec) __attribute__((__const__));
ssize_t daytime_fromstr(const char *buf, size_t *len, daytime **d, bool external);
int daytime_hour(daytime tm) __attribute__((__const__));
int daytime_min(daytime tm) __attribute__((__const__));
ssize_t daytime_precision_tostr(str *buf, size_t *len, const daytime dt, int precision, bool external);
int daytime_sec(daytime tm) __attribute__((__const__));
int daytime_sec_usec(daytime tm) __attribute__((__const__));
ssize_t daytime_tostr(str *buf, size_t *len, const daytime *val, bool external);
ssize_t daytime_tz_fromstr(const char *buf, size_t *len, daytime **d, bool external);
int daytime_usec(daytime tm) __attribute__((__const__));
ssize_t dblFromStr(const char *src, size_t *len, dbl **dst, bool external);
ssize_t dblToStr(str *dst, size_t *len, const dbl *src, bool external);
const dbl dbl_nil;
char *dirname(char *path);
int dlclose(void *handle);
char *dlerror(void);
void *dlopen(const char *file, int mode);
void *dlsym(void *handle, const char *name);
size_t escapedStr(char *restrict dst, const char *restrict src, size_t dstlen, const char *sep1, const char *sep2, int quote);
size_t escapedStrlen(const char *restrict src, const char *sep1, const char *sep2, int quote);
ssize_t fltFromStr(const char *src, size_t *len, flt **dst, bool external);
ssize_t fltToStr(str *dst, size_t *len, const flt *src, bool external);
const flt flt_nil;
geomcatalogfix_fptr geomcatalogfix_get(void);
void geomcatalogfix_set(geomcatalogfix_fptr);
geomsqlfix_fptr geomsqlfix_get(void);
void geomsqlfix_set(geomsqlfix_fptr);
int geomversion_get(void);
void geomversion_set(void);
bat getBBPsize(void);
char *get_bin_path(void);
int gettimeofday(struct timeval *tv, int *ignore_zone);
struct tm *gmtime_r(const time_t *restrict, struct tm *restrict);
ssize_t hgeFromStr(const char *src, size_t *len, hge **dst, bool external);
ssize_t hgeToStr(str *dst, size_t *len, const hge *src, bool external);
const hge hge_nil;
ssize_t intFromStr(const char *src, size_t *len, int **dst, bool external);
ssize_t intToStr(str *dst, size_t *len, const int *src, bool external);
const int int_nil;
ssize_t lngFromStr(const char *src, size_t *len, lng **dst, bool external);
ssize_t lngToStr(str *dst, size_t *len, const lng *src, bool external);
const lng lng_nil;
struct tm *localtime_r(const time_t *restrict, struct tm *restrict);
gdk_return log_abort(logger *lg);
gdk_return log_bat(logger *lg, BAT *b, const char *n, char tpe, oid id);
gdk_return log_bat_clear(logger *lg, const char *n, char tpe, oid id);
gdk_return log_bat_persists(logger *lg, BAT *b, const char *n, char tpe, oid id);
gdk_return log_bat_transient(logger *lg, const char *n, char tpe, oid id);
gdk_return log_delta(logger *lg, BAT *uid, BAT *uval, const char *n, char tpe, oid id);
lng log_save_id(logger *lg);
gdk_return log_sequence(logger *lg, int seq, lng id);
gdk_return log_tend(logger *lg);
gdk_return log_tstart(logger *lg);
gdk_return logger_add_bat(logger *lg, BAT *b, const char *name, char tpe, oid id) __attribute__((__warn_unused_result__));
lng logger_changes(logger *lg);
gdk_return logger_cleanup(logger *lg);
logger *logger_create(int debug, const char *fn, const char *logdir, int version, preversionfix_fptr prefuncp, postversionfix_fptr postfuncp);
gdk_return logger_del_bat(logger *lg, log_bid bid) __attribute__((__warn_unused_result__));
void logger_destroy(logger *lg);
gdk_return logger_exit(logger *lg);
log_bid logger_find_bat(logger *lg, const char *name, char tpe, oid id);
gdk_return logger_flush(logger *lg, lng save_id);
gdk_return logger_restart(logger *lg);
int logger_sequence(logger *lg, int seq, lng *id);
gdk_return logger_upgrade_bat(logger *lg, const char *name, char tpe, oid id) __attribute__((__warn_unused_result__));
void logger_with_ids(logger *lg);
log_level_t lvl_per_component[];
void *mdlopen(const char *library, int mode);
const char *mercurial_revision(void) __attribute__((__const__));
int mo_add_option(opt **Set, int setlen, opt_kind kind, const char *name, const char *value);
int mo_builtin_settings(opt **Set);
char *mo_find_option(opt *set, int setlen, const char *name);
void mo_free_options(opt *set, int setlen);
void mo_print_options(opt *set, int setlen);
int mo_system_config(opt **Set, int setlen);
const oid oid_nil;
DIR *opendir(const char *dirname);
void print_trace(void);
ssize_t ptrFromStr(const char *src, size_t *len, ptr **dst, bool external);
ssize_t ptrToStr(str *dst, size_t *len, const ptr *src, bool external);
const ptr ptr_nil;
struct dirent *readdir(DIR *dir);
void rewinddir(DIR *dir);
ssize_t shtFromStr(const char *src, size_t *len, sht **dst, bool external);
ssize_t shtToStr(str *dst, size_t *len, const sht *src, bool external);
const sht sht_nil;
ssize_t strFromStr(const char *restrict src, size_t *restrict len, str *restrict dst, bool external);
const char str_nil[2];
int strerror_r(int errnum, char *buf, size_t buflen);
timestamp timestamp_add_month(timestamp t, int m) __attribute__((__const__));
timestamp timestamp_add_usec(timestamp t, lng usec) __attribute__((__const__));
timestamp timestamp_create(date dt, daytime tm) __attribute__((__const__));
timestamp timestamp_current(void);
date timestamp_date(timestamp t) __attribute__((__const__));
daytime timestamp_daytime(timestamp t) __attribute__((__const__));
lng timestamp_diff(timestamp t1, timestamp t2) __attribute__((__const__));
timestamp timestamp_fromdate(date dt) __attribute__((__const__));
ssize_t timestamp_fromstr(const char *buf, size_t *len, timestamp **d, bool external);
timestamp timestamp_fromtime(time_t timeval) __attribute__((__const__));
timestamp timestamp_fromusec(lng usec) __attribute__((__const__));
ssize_t timestamp_precision_tostr(str *buf, size_t *len, timestamp val, int precision, bool external);
ssize_t timestamp_tostr(str *buf, size_t *len, const timestamp *val, bool external);
ssize_t timestamp_tz_fromstr(const char *buf, size_t *len, timestamp **ret, bool external);
const timestamp unixepoch;
gdk_return void_inplace(BAT *b, oid id, const void *val, bool force) __attribute__((__warn_unused_result__));
int win_mkdir(const char *, const int mode);
int win_rename(const char *, const char *);
int win_rmdir(const char *);
int win_stat(const char *, struct stat *);
int win_unlink(const char *);
int winerror(int);

# mapi
MapiMsg mapi_bind(MapiHdl hdl, int fnr, char **ptr);
MapiMsg mapi_bind_numeric(MapiHdl hdl, int fnr, int scale, int precision, void *ptr);
MapiMsg mapi_bind_var(MapiHdl hdl, int fnr, int type, void *ptr);
MapiMsg mapi_cache_freeup(MapiHdl hdl, int percentage);
MapiMsg mapi_cache_limit(Mapi mid, int limit);
MapiMsg mapi_clear_bindings(MapiHdl hdl);
MapiMsg mapi_clear_params(MapiHdl hdl);
MapiMsg mapi_close_handle(MapiHdl hdl);
Mapi mapi_connect(const char *host, int port, const char *username, const char *password, const char *lang, const char *dbname);
MapiMsg mapi_destroy(Mapi mid);
MapiMsg mapi_disconnect(Mapi mid);
MapiMsg mapi_error(Mapi mid);
const char *mapi_error_str(Mapi mid);
MapiMsg mapi_execute(MapiHdl hdl);
void mapi_explain(Mapi mid, FILE *fd);
void mapi_explain_query(MapiHdl hdl, FILE *fd);
void mapi_explain_result(MapiHdl hdl, FILE *fd);
int64_t mapi_fetch_all_rows(MapiHdl hdl);
char *mapi_fetch_field(MapiHdl hdl, int fnr);
size_t mapi_fetch_field_len(MapiHdl hdl, int fnr);
char *mapi_fetch_line(MapiHdl hdl);
MapiMsg mapi_fetch_reset(MapiHdl hdl);
int mapi_fetch_row(MapiHdl hdl);
MapiMsg mapi_finish(MapiHdl hdl);
MapiHdl mapi_get_active(Mapi mid);
bool mapi_get_autocommit(Mapi mid);
const char *mapi_get_dbname(Mapi mid);
int mapi_get_digits(MapiHdl hdl, int fnr);
int mapi_get_field_count(MapiHdl hdl);
stream *mapi_get_from(Mapi mid);
const char *mapi_get_host(Mapi mid);
const char *mapi_get_lang(Mapi mid);
int64_t mapi_get_last_id(MapiHdl hdl);
int mapi_get_len(MapiHdl hdl, int fnr);
int64_t mapi_get_maloptimizertime(MapiHdl hdl);
const char *mapi_get_mapi_version(Mapi mid);
const char *mapi_get_monet_version(Mapi mid);
const char *mapi_get_motd(Mapi mid);
char *mapi_get_name(MapiHdl hdl, int fnr);
char *mapi_get_query(MapiHdl hdl);
int64_t mapi_get_querytime(MapiHdl hdl);
int mapi_get_querytype(MapiHdl hdl);
int64_t mapi_get_row_count(MapiHdl hdl);
int mapi_get_scale(MapiHdl hdl, int fnr);
int64_t mapi_get_sqloptimizertime(MapiHdl hdl);
char *mapi_get_table(MapiHdl hdl, int fnr);
int mapi_get_tableid(MapiHdl hdl);
stream *mapi_get_to(Mapi mid);
bool mapi_get_trace(Mapi mid);
char *mapi_get_type(MapiHdl hdl, int fnr);
const char *mapi_get_uri(Mapi mid);
const char *mapi_get_user(Mapi mid);
bool mapi_is_connected(Mapi mid);
MapiMsg mapi_log(Mapi mid, const char *nme);
Mapi mapi_mapi(const char *host, int port, const char *username, const char *password, const char *lang, const char *dbname);
Mapi mapi_mapiuri(const char *url, const char *user, const char *pass, const char *lang);
bool mapi_more_results(MapiHdl hdl);
MapiMsg mapi_needmore(MapiHdl hdl);
MapiHdl mapi_new_handle(Mapi mid);
MapiMsg mapi_next_result(MapiHdl hdl);
void mapi_noexplain(Mapi mid, const char *errorprefix);
MapiMsg mapi_param(MapiHdl hdl, int fnr, char **ptr);
MapiMsg mapi_param_numeric(MapiHdl hdl, int fnr, int scale, int precision, void *ptr);
MapiMsg mapi_param_string(MapiHdl hdl, int fnr, int sqltype, char *ptr, int *sizeptr);
MapiMsg mapi_param_type(MapiHdl hdl, int fnr, int ctype, int sqltype, void *ptr);
MapiMsg mapi_ping(Mapi mid);
MapiHdl mapi_prepare(Mapi mid, const char *cmd);
MapiMsg mapi_prepare_handle(MapiHdl hdl, const char *cmd);
MapiHdl mapi_query(Mapi mid, const char *cmd);
MapiMsg mapi_query_done(MapiHdl hdl);
MapiMsg mapi_query_handle(MapiHdl hdl, const char *cmd);
MapiMsg mapi_query_part(MapiHdl hdl, const char *cmd, size_t size);
MapiHdl mapi_query_prep(Mapi mid);
char *mapi_quote(const char *msg, int size);
MapiMsg mapi_read_response(MapiHdl hdl);
MapiMsg mapi_reconnect(Mapi mid);
MapiMsg mapi_release_id(Mapi mid, int id);
char **mapi_resolve(const char *host, int port, const char *pattern);
const char *mapi_result_error(MapiHdl hdl);
const char *mapi_result_errorcode(MapiHdl hdl);
int64_t mapi_rows_affected(MapiHdl hdl);
MapiMsg mapi_seek_row(MapiHdl hdl, int64_t rowne, int whence);
MapiHdl mapi_send(Mapi mid, const char *cmd);
MapiMsg mapi_setAutocommit(Mapi mid, bool autocommit);
MapiMsg mapi_set_size_header(Mapi mid, bool value);
void mapi_setfilecallback(Mapi mid, char *(*getfunc)(void *priv, const char *filename, bool binary, uint64_t offset, size_t *size), char *(*putfunc)(void *priv, const char *filename, const void *data, size_t size), void *priv);
int mapi_split_line(MapiHdl hdl);
MapiMsg mapi_start_talking(Mapi mid);
MapiMsg mapi_store_field(MapiHdl hdl, int fnr, int outtype, void *outparam);
MapiMsg mapi_timeout(Mapi mid, unsigned int time);
void mapi_trace(Mapi mid, bool flag);
char *mapi_unquote(char *msg);
char *mcrypt_BackendSum(const char *string, size_t len);
char *mcrypt_MD5Sum(const char *string, size_t len);
char *mcrypt_RIPEMD160Sum(const char *string, size_t len);
char *mcrypt_SHA1Sum(const char *string, size_t len);
char *mcrypt_SHA224Sum(const char *string, size_t len);
char *mcrypt_SHA256Sum(const char *string, size_t len);
char *mcrypt_SHA384Sum(const char *string, size_t len);
char *mcrypt_SHA512Sum(const char *string, size_t len);
const char *mcrypt_getHashAlgorithms(void) __attribute__((__const__));
char *mcrypt_hashPassword(const char *algo, const char *password, const char *challenge);
int mo_add_option(opt **Set, int setlen, opt_kind kind, const char *name, const char *value);
int mo_builtin_settings(opt **Set);
char *mo_find_option(opt *set, int setlen, const char *name);
void mo_free_options(opt *set, int setlen);
void mo_print_options(opt *set, int setlen);
int mo_system_config(opt **Set, int setlen);
const char *wsaerror(int);

# monetdb5
str AGGRavg13_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRavg14_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, int *scale);
str AGGRavg23_dbl(bat *retval1, bat *retval2, const bat *bid, const bat *gid, const bat *eid);
str AGGRavg24_dbl(bat *retval1, bat *retval2, const bat *bid, const bat *gid, const bat *eid, int *scale);
str AGGRcorr(bat *retval, const bat *b1, const bat *b2, const bat *gid, const bat *eid);
str AGGRcount3(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *ignorenils);
str AGGRcount3nils(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRcount3nonils(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRcovariance(bat *retval, const bat *b1, const bat *b2, const bat *gid, const bat *eid);
str AGGRcovariancep(bat *retval, const bat *b1, const bat *b2, const bat *gid, const bat *eid);
str AGGRmax3(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRmedian(void *retval, const bat *bid);
str AGGRmedian_avg(dbl *retval, const bat *bid);
str AGGRmin3(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRprod3_bte(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRprod3_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRprod3_flt(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRprod3_hge(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRprod3_int(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRprod3_lng(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRprod3_sht(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRquantile(void *retval, const bat *bid, const bat *qid);
str AGGRquantile_avg(dbl *retval, const bat *bid, const bat *qid);
str AGGRstdev3_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRstdevp3_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRstr_group_concat(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRstr_group_concat_sep(bat *retval, const bat *bid, const bat *sep, const bat *gid, const bat *eid);
str AGGRsubavg1_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubavg1cand_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubavg1s_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error, int *scale);
str AGGRsubavg1scand_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error, int *scale);
str AGGRsubavg2_dbl(bat *retval1, bat *retval2, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubavg2cand_dbl(bat *retval1, bat *retval2, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubavg2s_dbl(bat *retval1, bat *retval2, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error, int *scale);
str AGGRsubavg2scand_dbl(bat *retval1, bat *retval2, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error, int *scale);
str AGGRsubcorr(bat *retval, const bat *b1, const bat *b2, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubcorrcand(bat *retval, const bat *b1, const bat *b2, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubcount(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils);
str AGGRsubcountcand(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils);
str AGGRsubcovariance(bat *retval, const bat *b1, const bat *b2, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubcovariancecand(bat *retval, const bat *b1, const bat *b2, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubcovariancep(bat *retval, const bat *b1, const bat *b2, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubcovariancepcand(bat *retval, const bat *b1, const bat *b2, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubmax(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils);
str AGGRsubmax_val(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils);
str AGGRsubmaxcand(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils);
str AGGRsubmaxcand_val(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils);
str AGGRsubmedian(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils);
str AGGRsubmedian_avg(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils);
str AGGRsubmediancand(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils);
str AGGRsubmediancand_avg(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils);
str AGGRsubmin(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils);
str AGGRsubmin_val(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils);
str AGGRsubmincand(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils);
str AGGRsubmincand_val(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils);
str AGGRsubprod_bte(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprod_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprod_flt(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprod_hge(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprod_int(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprod_lng(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprod_sht(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprodcand_bte(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprodcand_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprodcand_flt(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprodcand_hge(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprodcand_int(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprodcand_lng(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubprodcand_sht(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubquantile(bat *retval, const bat *bid, const bat *quantile, const bat *gid, const bat *eid, const bit *skip_nils);
str AGGRsubquantile_avg(bat *retval, const bat *bid, const bat *quantile, const bat *gid, const bat *eid, const bit *skip_nils);
str AGGRsubquantilecand(bat *retval, const bat *bid, const bat *quantile, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils);
str AGGRsubquantilecand_avg(bat *retval, const bat *bid, const bat *quantile, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils);
str AGGRsubstdev_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubstdevcand_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubstdevp_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubstdevpcand_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubstr_group_concat(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubstr_group_concat_sep(bat *retval, const bat *bid, const bat *sep, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubstr_group_concatcand(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubstr_group_concatcand_sep(bat *retval, const bat *bid, const bat *sep, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsum_bte(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsum_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsum_flt(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsum_hge(bat *retval, const bat *bid, const bat *gid, const bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsum_int(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsum_lng(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsum_sht(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsumcand_bte(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsumcand_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsumcand_flt(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsumcand_hge(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsumcand_int(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsumcand_lng(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubsumcand_sht(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubvariance_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubvariancecand_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubvariancep_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubvariancepcand_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils, const bit *abort_on_error);
str AGGRsubxml(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bit *skip_nils);
str AGGRsubxmlcand(bat *retval, const bat *bid, const bat *gid, const bat *eid, const bat *sid, const bit *skip_nils);
str AGGRsum3_bte(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRsum3_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRsum3_flt(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRsum3_hge(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRsum3_int(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRsum3_lng(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRsum3_sht(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRvariance3_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str AGGRvariancep3_dbl(bat *retval, const bat *bid, const bat *gid, const bat *eid);
str ALARMctime(str *res);
str ALARMepoch(int *res);
str ALARMsleep(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ALARMtime(int *res);
str ALARMusec(lng *ret);
str ALGbandjoin(bat *r1, bat *r2, const bat *lid, const bat *rid, const bat *slid, const bat *srid, const void *low, const void *high, const bit *li, const bit *hi, const lng *estimate);
str ALGcard(lng *result, const bat *bid);
str ALGcopy(bat *result, const bat *bid);
str ALGcorr(dbl *res, const bat *bid1, const bat *bid2);
str ALGcountCND_bat(lng *result, const bat *bid, const bat *cnd);
str ALGcountCND_nil(lng *result, const bat *bid, const bat *cnd, const bit *ignore_nils);
str ALGcountCND_no_nil(lng *result, const bat *bid, const bat *cnd);
str ALGcount_bat(lng *result, const bat *bid);
str ALGcount_nil(lng *result, const bat *bid, const bit *ignore_nils);
str ALGcount_no_nil(lng *result, const bat *bid);
str ALGcovariance(dbl *res, const bat *bid1, const bat *bid2);
str ALGcovariancep(dbl *res, const bat *bid1, const bat *bid2);
str ALGcrossproduct2(bat *l, bat *r, const bat *lid, const bat *rid, const bit *max_one);
str ALGdifference(bat *r1, const bat *lid, const bat *rid, const bat *slid, const bat *srid, const bit *nil_matches, const bit *not_in, const lng *estimate);
str ALGexist(bit *ret, const bat *bid, const void *val);
str ALGfetchoid(ptr ret, const bat *bid, const oid *pos);
str ALGfind(oid *ret, const bat *bid, ptr val);
str ALGfirstn(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ALGgroupby(bat *res, const bat *gids, const bat *cnts);
str ALGintersect(bat *r1, const bat *lid, const bat *rid, const bat *slid, const bat *srid, const bit *nil_matches, const bit *max_one, const lng *estimate);
str ALGjoin(bat *r1, bat *r2, const bat *l, const bat *r, const bat *sl, const bat *sr, const bit *nil_matches, const lng *estimate);
str ALGjoin1(bat *r1, const bat *l, const bat *r, const bat *sl, const bat *sr, const bit *nil_matches, const lng *estimate);
str ALGleftjoin(bat *r1, bat *r2, const bat *l, const bat *r, const bat *sl, const bat *sr, const bit *nil_matches, const lng *estimate);
str ALGleftjoin1(bat *r1, const bat *l, const bat *r, const bat *sl, const bat *sr, const bit *nil_matches, const lng *estimate);
str ALGmaxany(ptr result, const bat *bid);
str ALGmaxany_skipnil(ptr result, const bat *bid, const bit *skipnil);
str ALGminany(ptr result, const bat *bid);
str ALGminany_skipnil(ptr result, const bat *bid, const bit *skipnil);
str ALGouterjoin(bat *r1, bat *r2, const bat *l, const bat *r, const bat *sl, const bat *sr, const bit *nil_matches, const lng *estimate);
str ALGprojection(bat *result, const bat *lid, const bat *rid);
str ALGprojection2(bat *result, const bat *lid, const bat *r1id, const bat *r2id);
str ALGprojectionpath(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ALGprojecttail(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ALGrangejoin(bat *r1, bat *r2, const bat *lid, const bat *rlid, const bat *rhid, const bat *slid, const bat *srid, const bit *li, const bit *hi, const bit *anti, const bit *symmetric, const lng *estimate);
str ALGreuse(bat *ret, const bat *bid);
str ALGselect1(bat *result, const bat *bid, const void *low, const void *high, const bit *li, const bit *hi, const bit *anti);
str ALGselect1nil(bat *result, const bat *bid, const void *low, const void *high, const bit *li, const bit *hi, const bit *anti, const bit *unknown);
str ALGselect2(bat *result, const bat *bid, const bat *sid, const void *low, const void *high, const bit *li, const bit *hi, const bit *anti);
str ALGselect2nil(bat *result, const bat *bid, const bat *sid, const void *low, const void *high, const bit *li, const bit *hi, const bit *anti, const bit *unknown);
str ALGselectNotNil(bat *result, const bat *bid);
str ALGsemijoin(bat *r1, bat *r2, const bat *l, const bat *r, const bat *sl, const bat *sr, const bit *nil_matches, const bit *max_one, const lng *estimate);
str ALGslice(bat *ret, const bat *bid, const lng *start, const lng *end);
str ALGslice_int(bat *ret, const bat *bid, const int *start, const int *end);
str ALGslice_lng(bat *ret, const bat *bid, const lng *start, const lng *end);
str ALGslice_oid(bat *ret, const bat *bid, const oid *start, const oid *end);
str ALGsort11(bat *result, const bat *bid, const bit *reverse, const bit *nilslast, const bit *stable);
str ALGsort12(bat *result, bat *norder, const bat *bid, const bit *reverse, const bit *nilslast, const bit *stable);
str ALGsort13(bat *result, bat *norder, bat *ngroup, const bat *bid, const bit *reverse, const bit *nilslast, const bit *stable);
str ALGsort21(bat *result, const bat *bid, const bat *order, const bit *reverse, const bit *nilslast, const bit *stable);
str ALGsort22(bat *result, bat *norder, const bat *bid, const bat *order, const bit *reverse, const bit *nilslast, const bit *stable);
str ALGsort23(bat *result, bat *norder, bat *ngroup, const bat *bid, const bat *order, const bit *reverse, const bit *nilslast, const bit *stable);
str ALGsort31(bat *result, const bat *bid, const bat *order, const bat *group, const bit *reverse, const bit *nilslast, const bit *stable);
str ALGsort32(bat *result, bat *norder, const bat *bid, const bat *order, const bat *group, const bit *reverse, const bit *nilslast, const bit *stable);
str ALGsort33(bat *result, bat *norder, bat *ngroup, const bat *bid, const bat *order, const bat *group, const bit *reverse, const bit *nilslast, const bit *stable);
str ALGstdev(dbl *res, const bat *bid);
str ALGstdevp(dbl *res, const bat *bid);
str ALGsubslice_lng(bat *ret, const bat *bid, const lng *start, const lng *end);
str ALGthetajoin(bat *r1, bat *r2, const bat *l, const bat *r, const bat *sl, const bat *sr, const int *op, const bit *nil_matches, const lng *estimate);
str ALGthetaselect1(bat *result, const bat *bid, const void *val, const char **op);
str ALGthetaselect2(bat *result, const bat *bid, const bat *sid, const void *val, const char **op);
str ALGunique1(bat *result, const bat *bid);
str ALGunique2(bat *result, const bat *bid, const bat *sid);
str ALGvariance(dbl *res, const bat *bid);
str ALGvariancep(dbl *res, const bat *bid);
str AUTHaddRemoteTableCredentials(const char *local_table, const char *localuser, const char *uri, const char *remoteuser, const char *pass, bool pw_encrypted);
str AUTHaddUser(oid *ret, Client c, const char *user, const char *pass);
str AUTHchangePassword(Client c, const char *oldpass, const char *passwd);
str AUTHchangeUsername(Client c, const char *olduser, const char *newuser);
str AUTHcheckCredentials(oid *ret, Client c, const char *user, const char *passwd, const char *challenge, const char *algo);
str AUTHdeleteRemoteTableCredentials(const char *local_table);
str AUTHgetPasswordHash(str *ret, Client c, const char *username);
str AUTHgetRemoteTableCredentials(const char *local_table, str *uri, str *username, str *password);
str AUTHgetUsername(str *ret, Client c);
str AUTHgetUsers(BAT **ret1, BAT **ret2, Client c);
str AUTHinitTables(const char *passwd);
str AUTHremoveUser(Client c, const char *username);
str AUTHresolveUser(str *ret, oid uid);
str AUTHsetPassword(Client c, const char *username, const char *passwd);
str AUTHunlockVault(const char *password);
str BATPCREilike(bat *ret, const bat *b, const str *pat, const str *esc);
str BATPCREilike2(bat *ret, const bat *b, const str *pat);
str BATPCRElike(bat *ret, const bat *b, const str *pat, const str *esc);
str BATPCRElike2(bat *ret, const bat *b, const str *pat);
str BATPCREnotilike(bat *ret, const bat *b, const str *pat, const str *esc);
str BATPCREnotilike2(bat *ret, const bat *b, const str *pat);
str BATPCREnotlike(bat *ret, const bat *b, const str *pat, const str *esc);
str BATPCREnotlike2(bat *ret, const bat *b, const str *pat);
str BATXMLattribute(bat *ret, const char *const *name, const bat *bid);
str BATXMLcomment(bat *ret, const bat *bid);
str BATXMLconcat(bat *ret, const bat *bid, const bat *rid);
str BATXMLcontent(bat *ret, const bat *bid);
str BATXMLdocument(bat *ret, const bat *bid);
str BATXMLelement(bat *ret, const char *const *name, xml *ns, xml *attr, const bat *bid);
str BATXMLelementSmall(bat *ret, const char *const *name, const bat *bid);
str BATXMLforest(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str BATXMLgroup(xml *ret, const bat *bid);
str BATXMLisdocument(bat *ret, const bat *bid);
str BATXMLoptions(bat *ret, const char *const *name, const char *const *options, const bat *bid);
str BATXMLparse(bat *ret, const char *const *doccont, const bat *bid, const char *const *option);
str BATXMLpi(bat *ret, const char *const *tgt, const bat *bid);
str BATXMLroot(bat *ret, const bat *bid, const char *const *version, const char *const *standalone);
str BATXMLstr2xml(bat *ret, const bat *bid);
str BATXMLxml2str(bat *ret, const bat *bid);
str BATXMLxmltext(bat *ret, const bat *bid);
str BATXMLxquery(bat *ret, const bat *bid, const char *const *expr);
str BKCappend_cand_force_wrap(bat *r, const bat *bid, const bat *uid, const bat *sid, const bit *force);
str BKCappend_cand_wrap(bat *r, const bat *bid, const bat *uid, const bat *sid);
str BKCappend_force_wrap(bat *r, const bat *bid, const bat *uid, const bit *force);
str BKCappend_val_force_wrap(bat *r, const bat *bid, const void *u, const bit *force);
str BKCappend_val_wrap(bat *r, const bat *bid, const void *u);
str BKCappend_wrap(bat *r, const bat *bid, const bat *uid);
str BKCattach(bat *ret, const int *tt, const char *const *heapfile);
str BKCbat_inplace(bat *r, const bat *bid, const bat *rid, const bat *uid);
str BKCbat_inplace_force(bat *r, const bat *bid, const bat *rid, const bat *uid, const bit *force);
str BKCbun_inplace(bat *r, const bat *bid, const oid *id, const void *t);
str BKCbun_inplace_force(bat *r, const bat *bid, const oid *id, const void *t, const bit *force);
str BKCdelete(bat *r, const bat *bid, const oid *h);
str BKCdelete_all(bat *r, const bat *bid);
str BKCdelete_multi(bat *r, const bat *bid, const bat *sid);
str BKCdensebat(bat *ret, const lng *size);
str BKCdiffcand(bat *ret, const bat *aid, const bat *bid);
str BKCgetAccess(str *res, const bat *bid);
str BKCgetBBPname(str *ret, const bat *bid);
str BKCgetCapacity(lng *res, const bat *bid);
str BKCgetColumnType(str *res, const bat *bid);
str BKCgetKey(bit *ret, const bat *bid);
str BKCgetRole(str *res, const bat *bid);
str BKCgetSequenceBase(oid *r, const bat *bid);
str BKCgetSize(lng *tot, const bat *bid);
str BKCinfo(bat *ret1, bat *ret2, const bat *bid);
str BKCintersectcand(bat *ret, const bat *aid, const bat *bid);
str BKCisPersistent(bit *res, const bat *bid);
str BKCisSorted(bit *res, const bat *bid);
str BKCisSortedReverse(bit *res, const bat *bid);
str BKCisSynced(bit *ret, const bat *bid1, const bat *bid2);
str BKCisTransient(bit *res, const bat *bid);
str BKCmergecand(bat *ret, const bat *aid, const bat *bid);
str BKCmirror(bat *ret, const bat *bid);
str BKCnewBAT(bat *res, const int *tt, const BUN *cap, role_t role);
str BKCreuseBAT(bat *ret, const bat *bid, const bat *did);
str BKCreuseBATmap(bat *ret, const bat *bid, const bat *did);
str BKCsave(bit *res, const char *const *input);
str BKCsave2(void *r, const bat *bid);
str BKCsetAccess(bat *res, const bat *bid, const char *const *param);
str BKCsetColumn(void *r, const bat *bid, const char *const *tname);
str BKCsetHash(bit *ret, const bat *bid);
str BKCsetImprints(bit *ret, const bat *bid);
str BKCsetName(void *r, const bat *bid, const char *const *s);
str BKCsetPersistent(void *r, const bat *bid);
str BKCsetTransient(void *r, const bat *bid);
str BKCshrinkBAT(bat *ret, const bat *bid, const bat *did);
str BLOBblob_blob(blob **d, blob **s);
str BLOBblob_fromstr(blob **b, const char **d);
int BLOBcmp(const blob *l, const blob *r);
void BLOBdel(Heap *h, var_t *index);
ssize_t BLOBfromstr(const char *instr, size_t *l, blob **val, bool external);
int BLOBget(Heap *h, int *bun, int *l, blob **val);
BUN BLOBhash(const blob *b);
void BLOBheap(Heap *heap, size_t capacity);
size_t BLOBlength(const blob *p);
str BLOBnitems(int *ret, blob **b);
const blob *BLOBnull(void);
str BLOBprelude(void *ret);
var_t BLOBput(Heap *h, var_t *bun, const blob *val);
blob *BLOBread(blob *a, stream *s, size_t cnt);
str BLOBtoblob(blob **retval, str *s);
ssize_t BLOBtostr(str *tostr, size_t *l, const blob *pin, bool external);
gdk_return BLOBwrite(const blob *a, stream *s, size_t cnt);
str CALCmax(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str CALCmax_no_nil(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str CALCmin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str CALCmin_no_nil(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str CALCswitchbit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str CLRbatBlue(bat *ret, const bat *l);
str CLRbatCb(bat *ret, const bat *l);
str CLRbatColor(bat *ret, const bat *l);
str CLRbatCr(bat *ret, const bat *l);
str CLRbatGreen(bat *ret, const bat *l);
str CLRbatHsv(bat *ret, const bat *l, const bat *bid2, const bat *bid3);
str CLRbatHue(bat *ret, const bat *l);
str CLRbatHueInt(bat *ret, const bat *l);
str CLRbatLuminance(bat *ret, const bat *l);
str CLRbatRed(bat *ret, const bat *l);
str CLRbatRgb(bat *ret, const bat *l, const bat *bid2, const bat *bid3);
str CLRbatSaturation(bat *ret, const bat *l);
str CLRbatSaturationInt(bat *ret, const bat *l);
str CLRbatStr(bat *ret, const bat *l);
str CLRbatValue(bat *ret, const bat *l);
str CLRbatValueInt(bat *ret, const bat *l);
str CLRbatycc(bat *ret, const bat *l, const bat *bid2, const bat *bid3);
str CLRblue(int *b, const color *c);
str CLRcb(int *g, const color *c);
str CLRcolor(color *c, const char **val);
str CLRcr(int *r, const color *c);
str CLRgreen(int *g, const color *c);
str CLRhsv(color *c, const flt *h, const flt *s, const flt *v);
str CLRhue(flt *r, const color *c);
str CLRhueInt(int *r, const color *c);
str CLRluminance(int *r, const color *c);
str CLRred(int *r, const color *c);
str CLRrgb(color *rgb, const int *r, const int *g, const int *b);
str CLRsaturation(flt *g, const color *c);
str CLRsaturationInt(int *g, const color *c);
str CLRstr(str *val, const color *c);
str CLRvalue(flt *b, const color *c);
str CLRvalueInt(int *b, const color *c);
str CLRycc(color *c, const int *y, const int *cr, const int *cb);
str CLTInfo(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTLogin(bat *ret, bat *nme);
str CLTaddUser(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTbackendsum(str *ret, str *pw);
str CLTchangePassword(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTchangeUsername(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTcheckPermission(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetClientId(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetPasswordHash(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetProfile(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetScenario(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetUsername(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetUsers(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTmd5sum(str *ret, str *pw);
str CLTqueryTimeout(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTquit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTremoveUser(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTripemd160sum(str *ret, str *pw);
str CLTsessionTimeout(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsessions(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetListing(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetPassword(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetPrintTimeout(void *ret, int *secs);
str CLTsetScenario(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetSessionTimeout(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetTimeout(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetmemorylimit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetoptimizer(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetworkerlimit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsha1sum(str *ret, str *pw);
str CLTsha2sum(str *ret, str *pw, int *bits);
str CLTshutdown(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTstop(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTstopSession(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsuspend(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTwakeup(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDBATimprints(void *ret, bat *bid);
str CMDBATimprintsize(lng *ret, bat *bid);
str CMDBATnew(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str CMDBATnewColumn(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str CMDBATnew_persistent(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str CMDBATpartition(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDBATpartition2(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDBATprod(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDBATsingle(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDBATstr_group_concat(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDBATsum(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatABS(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatADD(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatADDenlarge(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatADDsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatAND(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatBETWEEN(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatCMP(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatDECR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatDIV(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatDIVsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatEQ(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatGE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatGT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatINCR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatISNIL(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatISNOTNIL(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatISZERO(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatLE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatLSH(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatLSHsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatLT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMAX(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMAX_no_nil(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMIN(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMIN_no_nil(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMOD(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMODsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMUL(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMULenlarge(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMULsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatNE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatNEG(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatNOT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatOR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatRSH(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatRSHsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatSIGN(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatSUB(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatSUBenlarge(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatSUBsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatXOR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbp(bat *ID, bat *NS, bat *TT, bat *CNT, bat *REFCNT, bat *LREFCNT, bat *LOCATION, bat *HEAT, bat *DIRTY, bat *STATUS, bat *KIND);
str CMDbbpCount(bat *ret);
str CMDbbpDirty(bat *ret);
str CMDbbpDiskSpace(lng *ret);
str CMDbbpKind(bat *ret);
str CMDbbpLRefCount(bat *ret);
str CMDbbpLocation(bat *ret);
str CMDbbpName(str *ret, bat *bid);
str CMDbbpNames(bat *ret);
str CMDbbpRefCount(bat *ret);
str CMDbbpStatus(bat *ret);
str CMDbbpbind(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpgetIndex(int *res, bat *bid);
str CMDcalcavg(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDcallBAT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDcallFunction(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDcallString(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDcleanupTraces(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDcloseProfilerStream(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_bit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_bte(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_dbl(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_flt(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_hge(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_int(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_lng(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_oid(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_sht(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_str(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_bit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_bte(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_dbl(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_flt(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_hge(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_int(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_lng(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_oid(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_sht(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_str(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDcpuloadPercentage(int *cycles, int *io, lng *user, lng *nice, lng *sys, lng *idle, lng *iowait);
str CMDcpustats(lng *user, lng *nice, lng *sys, lng *idle, lng *iowait);
str CMDevalFile(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDgetBATlrefcnt(int *res, bat *bid);
str CMDgetBATrefcnt(int *res, bat *bid);
str CMDgetDiskReads(lng *ret);
str CMDgetDiskWrites(lng *ret);
str CMDgetPageSize(int *ret);
str CMDgetSystemTime(lng *ret);
str CMDgetTrace(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDgetUserTime(lng *ret);
str CMDgetprofilerlimit(int *res);
str CMDifthen(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDmodules(bat *bid);
str CMDnoopProfiler(void *res);
str CMDopenProfilerStream(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDqgramnormalize(str *res, str *input);
str CMDqgramselfjoin(bat *res1, bat *res2, bat *qid, bat *bid, bat *pid, bat *lid, flt *c, int *k);
str CMDraise(str *ret, str *msg);
str CMDregisterFunction(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_acos(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_asin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_atan(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_atan2(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_cbrt(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_cbrt(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_ceil(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_cos(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_cosh(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_degrees(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_exp(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_fabs(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_floor(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_log(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_log10(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_log2(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_logbs(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_pow(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_radians(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_sin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_sinh(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_sqrt(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_tan(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_tanh(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDsetHeartbeat(void *res, int *ev);
str CMDsetName(str *rname, const bat *b, str *name);
str CMDsetprofilerlimit(void *res, int *lim);
str CMDstartProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDstartTrace(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDstopProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDstopTrace(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDstr2qgrams(bat *ret, str *val);
str CMDstrlength(int *ret, str *v);
str CMDvarABS(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarADD(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarADDsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarADDstr(str *ret, str *s1, str *s2);
str CMDvarADDstrint(str *ret, str *s1, int *i);
str CMDvarAND(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarBETWEEN(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarCMP(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarCONVERT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarCONVERTptr(ptr *ret, ptr *v);
str CMDvarDECRsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarDIV(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarDIVsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarEQ(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarGE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarGT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarINCRsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarISNIL(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarISNOTNIL(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarISZERO(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarLE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarLSH(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarLSHsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarLT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarMOD(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarMODsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarMUL(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarMULsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarNE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarNEG(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarNOT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarOR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarRSH(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarRSHsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarSIGN(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarSUB(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarSUBsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarXOR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str COPYrejects(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str COPYrejects_clear(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str FCTgetArrival(bat *ret);
str FCTgetCaller(int *ret);
str FCTgetDeparture(bat *ret);
str FCTgetOwners(bat *ret);
str FCTgetPlants(bat *ret, bat *ret2);
str FCTshutdown(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str GROUPmulticolumngroup(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str GRPgroup1(bat *ngid, bat *next, bat *nhis, const bat *bid);
str GRPgroup11(bat *ngid, const bat *bid);
str GRPgroup2(bat *ngid, bat *next, bat *nhis, const bat *bid, const bat *sid);
str GRPgroup21(bat *ngid, const bat *bid, const bat *sid);
str GRPgroup3(bat *ngid, bat *next, const bat *bid);
str GRPgroup4(bat *ngid, bat *next, const bat *bid, const bat *sid);
str GRPsubgroup2(bat *ngid, bat *next, bat *nhis, const bat *bid, const bat *gid);
str GRPsubgroup21(bat *ngid, const bat *bid, const bat *gid);
str GRPsubgroup3(bat *ngid, bat *next, bat *nhis, const bat *bid, const bat *sid, const bat *gid);
str GRPsubgroup31(bat *ngid, const bat *bid, const bat *sid, const bat *gid);
str GRPsubgroup4(bat *ngid, bat *next, bat *nhis, const bat *bid, const bat *gid, const bat *eid, const bat *hid);
str GRPsubgroup41(bat *ngid, const bat *bid, const bat *gid, const bat *eid, const bat *hid);
str GRPsubgroup5(bat *ngid, bat *next, bat *nhis, const bat *bid, const bat *sid, const bat *gid, const bat *eid, const bat *hid);
str GRPsubgroup51(bat *ngid, const bat *bid, const bat *sid, const bat *gid, const bat *eid, const bat *hid);
str GRPsubgroup6(bat *ngid, bat *next, const bat *bid, const bat *gid);
str GRPsubgroup7(bat *ngid, bat *next, const bat *bid, const bat *sid, const bat *gid);
str GRPsubgroup8(bat *ngid, bat *next, const bat *bid, const bat *gid, const bat *eid, const bat *hid);
str GRPsubgroup9(bat *ngid, bat *next, const bat *bid, const bat *sid, const bat *gid, const bat *eid, const bat *hid);
str IDentifier(identifier *retval, str *in);
ssize_t IDfromString(const char *src, size_t *len, identifier *retval, bool external);
str IDprelude(void *ret);
ssize_t IDtoString(str *retval, size_t *len, const char *handle, bool external);
str ILIKEjoin(bat *r1, bat *r2, const bat *lid, const bat *rid, const str *esc, const bat *slid, const bat *srid, const bit *nil_matches, const lng *estimate);
str ILIKEjoin1(bat *r1, bat *r2, const bat *lid, const bat *rid, const bat *slid, const bat *srid, const bit *nil_matches, const lng *estimate);
str INET_comp_CS(bit *retval, const inet *val1, const inet *val2);
str INET_comp_CSE(bit *retval, const inet *val1, const inet *val2);
str INET_comp_CW(bit *retval, const inet *val1, const inet *val2);
str INET_comp_CWE(bit *retval, const inet *val1, const inet *val2);
str INET_comp_EQ(bit *retval, const inet *val1, const inet *val2);
str INET_comp_GE(bit *retval, const inet *val1, const inet *val2);
str INET_comp_GT(bit *retval, const inet *val1, const inet *val2);
str INET_comp_LE(bit *retval, const inet *val1, const inet *val2);
str INET_comp_LT(bit *retval, const inet *val1, const inet *val2);
str INET_comp_NEQ(bit *retval, const inet *val1, const inet *val2);
str INET_fromstr(inet *ret, str *s);
str INET_inet(inet *d, const inet *s);
str INET_isnil(bit *retval, const inet *val);
str INETabbrev(str *retval, const inet *val);
str INETbroadcast(inet *retval, const inet *val);
int INETcompare(const inet *l, const inet *r);
ssize_t INETfromString(const char *src, size_t *len, inet **retval, bool external);
str INEThost(str *retval, const inet *val);
str INEThostmask(inet *retval, const inet *val);
str INETmasklen(int *retval, const inet *val);
str INETnetmask(inet *retval, const inet *val);
str INETnetwork(inet *retval, const inet *val);
str INETnew(inet *retval, str *in);
const inet *INETnull(void);
str INETsetmasklen(inet *retval, const inet *val, const int *msk);
str INETtext(str *retval, const inet *val);
ssize_t INETtoString(str *retval, size_t *len, const inet *handle, bool external);
str INSPECTatom_names(bat *ret);
str INSPECTatom_sizes(bat *ret);
str INSPECTatom_sup_names(bat *ret);
str INSPECTequalType(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetAddress(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetAllAddresses(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetAllFunctions(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetAllModules(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetAllSignatures(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetComment(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetDefinition(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetEnvironment(bat *ret, bat *ret2);
str INSPECTgetEnvironmentKey(str *ret, str *key);
str INSPECTgetFunctionSize(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str INSPECTgetSignature(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetSize(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str INSPECTgetSource(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetkind(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTshowFunction(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str INSPECTshowFunction3(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str INSPECTtypeName(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str IOexport(void *ret, bat *bid, str *fnme);
str IOimport(void *ret, bat *bid, str *fnme);
str IOprint_val(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str IOprintf(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str IOprintfStream(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str IOsetmallocsuccesscount(void *res, lng *nbytes);
str IOtable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ITRbunIterator(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ITRbunNext(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ITRnewChunk(lng *res, bat *vid, bat *bid, lng *granule);
str ITRnextChunk(lng *res, bat *vid, bat *bid, lng *granule);
str ITRnext_dbl(dbl *i, dbl *step, dbl *last);
str ITRnext_flt(flt *i, flt *step, flt *last);
str ITRnext_hge(hge *i, hge *step, hge *last);
str ITRnext_int(int *i, int *step, int *last);
str ITRnext_lng(lng *i, lng *step, lng *last);
str ITRnext_oid(oid *i, oid *step, oid *last);
str ITRnext_sht(sht *i, sht *step, sht *last);
str JSONdump(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str JSONfilter(json *ret, json *js, str *expr);
str JSONfilterArrayDefault_bte(json *ret, json *j, bte *index, str *other);
str JSONfilterArrayDefault_hge(json *ret, json *j, hge *index, str *other);
str JSONfilterArrayDefault_int(json *ret, json *j, int *index, str *other);
str JSONfilterArrayDefault_lng(json *ret, json *j, lng *index, str *other);
str JSONfilterArrayDefault_sht(json *ret, json *j, sht *index, str *other);
str JSONfilterArray_bte(json *ret, json *j, bte *index);
str JSONfilterArray_hge(json *ret, json *j, hge *index);
str JSONfilterArray_int(json *ret, json *j, int *index);
str JSONfilterArray_lng(json *ret, json *j, lng *index);
str JSONfilterArray_sht(json *ret, json *j, sht *index);
str JSONfold(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
ssize_t JSONfromString(const char *src, size_t *len, json *x, bool external);
str JSONgroupStr(str *ret, const bat *bid);
str JSONisarray(bit *ret, json *j);
str JSONisobject(bit *ret, json *j);
str JSONisvalid(bit *ret, json *j);
str JSONjson2integer(lng *ret, json *arg);
str JSONjson2number(dbl *ret, json *arg);
str JSONjson2str(str *ret, json *j);
str JSONjson2text(str *ret, json *arg);
str JSONjson2textSeparator(str *ret, json *arg, str *sep);
str JSONkeyArray(json *ret, json *arg);
str JSONkeyTable(bat *ret, json *j);
str JSONlength(int *ret, json *j);
str JSONprelude(void *ret);
str JSONrenderarray(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str JSONrenderobject(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str JSONresultSet(json *res, bat *u, bat *rev, bat *js);
str JSONstr2json(json *ret, str *j);
str JSONsubjson(bat *retval, bat *bid, bat *gid, bat *eid, bit *skipnils);
str JSONsubjsoncand(bat *retval, bat *bid, bat *gid, bat *eid, bat *id, bit *skip_nils);
str JSONtextGrouped(bat *ret, bat *bid, bat *gid, bat *ext, bit *flg);
str JSONtextString(str *ret, bat *bid);
ssize_t JSONtoString(str *s, size_t *len, const char *src, bool external);
str JSONunfold(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str JSONvalueArray(json *ret, json *arg);
str JSONvalueTable(bat *ret, json *j);
str LIKEjoin(bat *r1, bat *r2, const bat *lid, const bat *rid, const str *esc, const bat *slid, const bat *srid, const bit *nil_matches, const lng *estimate);
str LIKEjoin1(bat *r1, bat *r2, const bat *lid, const bat *rid, const bat *slid, const bat *srid, const bit *nil_matches, const lng *estimate);
str MACROprocessor(Client cntxt, MalBlkPtr mb, Symbol t);
int MAL_MAXCLIENTS;
int MALadmission_claim(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, lng argclaim);
void MALadmission_release(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, lng argclaim);
str MALassertBit(void *ret, bit *val, str *msg);
str MALassertHge(void *ret, hge *val, str *msg);
str MALassertInt(void *ret, int *val, str *msg);
str MALassertLng(void *ret, lng *val, str *msg);
str MALassertOid(void *ret, oid *val, str *msg);
str MALassertSht(void *ret, sht *val, str *msg);
str MALassertStr(void *ret, str *val, str *msg);
str MALassertTriple(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MALcallback(Client c, str msg);
int MALcommentsOnly(MalBlkPtr mb);
lng MALdebug;
str MALengine(Client c);
str MALexitClient(Client c);
str MALgarbagesink(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MALinitClient(Client c);
str MALoptimizer(Client c);
str MALparser(Client c);
str MALpass(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MALpipeline(Client c);
str MALreader(Client c);
str MALstartDataflow(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MANIFOLDevaluate(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MANIFOLDremapMultiplex(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
MALfcn MANIFOLDtypecheck(Client cntxt, MalBlkPtr mb, InstrPtr pci, int checkprops);
str MANUALcreateOverview(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MATHbinary_ATAN2dbl(dbl *res, const dbl *a, const dbl *b);
str MATHbinary_ATAN2flt(flt *res, const flt *a, const flt *b);
str MATHbinary_LOGdbl(dbl *res, const dbl *a, const dbl *b);
str MATHbinary_LOGflt(flt *res, const flt *a, const flt *b);
str MATHbinary_POWdbl(dbl *res, const dbl *a, const dbl *b);
str MATHbinary_POWflt(flt *res, const flt *a, const flt *b);
str MATHbinary_ROUNDdbl(dbl *res, const dbl *a, const int *b);
str MATHbinary_ROUNDflt(flt *res, const flt *a, const int *b);
str MATHpi(dbl *pi);
str MATHprelude(void *ret);
str MATHrandint(int *res);
str MATHrandintarg(int *res, const int *dummy);
str MATHsqlrandint(int *res, const int *seed);
str MATHsrandint(void *ret, const int *seed);
str MATHunary_ACOSdbl(dbl *res, const dbl *a);
str MATHunary_ACOSflt(flt *res, const flt *a);
str MATHunary_ASINdbl(dbl *res, const dbl *a);
str MATHunary_ASINflt(flt *res, const flt *a);
str MATHunary_ATANdbl(dbl *res, const dbl *a);
str MATHunary_ATANflt(flt *res, const flt *a);
str MATHunary_CBRTdbl(dbl *res, const dbl *a);
str MATHunary_CBRTflt(flt *res, const flt *a);
str MATHunary_CEILdbl(dbl *res, const dbl *a);
str MATHunary_CEILflt(flt *res, const flt *a);
str MATHunary_COSHdbl(dbl *res, const dbl *a);
str MATHunary_COSHflt(flt *res, const flt *a);
str MATHunary_COSdbl(dbl *res, const dbl *a);
str MATHunary_COSflt(flt *res, const flt *a);
str MATHunary_COTdbl(dbl *res, const dbl *a);
str MATHunary_COTflt(flt *res, const flt *a);
str MATHunary_DEGREESdbl(dbl *res, const dbl *a);
str MATHunary_DEGREESflt(flt *res, const flt *a);
str MATHunary_EXPdbl(dbl *res, const dbl *a);
str MATHunary_EXPflt(flt *res, const flt *a);
str MATHunary_FABSdbl(dbl *res, const dbl *a);
str MATHunary_FINITE(bit *res, const dbl *a);
str MATHunary_FLOORdbl(dbl *res, const dbl *a);
str MATHunary_FLOORflt(flt *res, const flt *a);
str MATHunary_ISINF(int *res, const dbl *a);
str MATHunary_ISNAN(bit *res, const dbl *a);
str MATHunary_LOG10dbl(dbl *res, const dbl *a);
str MATHunary_LOG10flt(flt *res, const flt *a);
str MATHunary_LOG2dbl(dbl *res, const dbl *a);
str MATHunary_LOG2flt(flt *res, const flt *a);
str MATHunary_LOGdbl(dbl *res, const dbl *a);
str MATHunary_LOGflt(flt *res, const flt *a);
str MATHunary_RADIANSdbl(dbl *res, const dbl *a);
str MATHunary_RADIANSflt(flt *res, const flt *a);
str MATHunary_SINHdbl(dbl *res, const dbl *a);
str MATHunary_SINHflt(flt *res, const flt *a);
str MATHunary_SINdbl(dbl *res, const dbl *a);
str MATHunary_SINflt(flt *res, const flt *a);
str MATHunary_SQRTdbl(dbl *res, const dbl *a);
str MATHunary_SQRTflt(flt *res, const flt *a);
str MATHunary_TANHdbl(dbl *res, const dbl *a);
str MATHunary_TANHflt(flt *res, const flt *a);
str MATHunary_TANdbl(dbl *res, const dbl *a);
str MATHunary_TANflt(flt *res, const flt *a);
str MATpack(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MATpackIncrement(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MATpackValues(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MBMmix(bat *ret, bat *batid);
str MBMnormal(bat *ret, oid *base, lng *size, int *domain, int *stddev, int *mean);
str MBMrandom(bat *ret, oid *base, lng *size, int *domain);
str MBMrandom_seed(bat *ret, oid *base, lng *size, int *domain, const int *seed);
str MBMskewed(bat *ret, oid *base, lng *size, int *domain, int *skew);
str MBMuniform(bat *ret, oid *base, lng *size, int *domain);
int MCactiveClients(void);
str MCawakeClient(int id);
void MCcloseClient(Client c);
Client MCforkClient(Client father);
Client MCgetClient(int id);
Client MCinitClient(oid user, bstream *fin, stream *fout);
int MCpushClientInput(Client c, bstream *new_input, int listing, char *prompt);
void MCstopClients(Client c);
str MCsuspendClient(int id);
int MCvalid(Client c);
str MDBStkDepth(Client cntxt, MalBlkPtr mb, MalStkPtr s, InstrPtr p);
str MDBStkTrace(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str MDBdummy(int *ret);
str MDBdump(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MDBgetDebug(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBgetDebugFlags(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBgetDebugStr(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBgetDefinition(Client cntxt, MalBlkPtr m, MalStkPtr stk, InstrPtr p);
str MDBgetExceptionContext(str *ret, str *msg);
str MDBgetExceptionReason(str *ret, str *msg);
str MDBgetExceptionVariable(str *ret, str *msg);
str MDBgetStackFrame(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str MDBgetStackFrameN(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str MDBgetVMsize(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBinspect(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBlist(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBlist3(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBlist3Detail(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBlistDetail(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBlistMapi(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBsetCatch(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBsetDebug(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBsetDebugStr(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBsetTrace(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBsetVMsize(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBsetVarTrace(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBstart(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBstartFactory(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBstop(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBvar(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBvar3(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MKEYbathash(bat *res, const bat *bid);
str MKEYbulk_rotate_xor_hash(bat *ret, const bat *hid, const int *nbits, const bat *bid);
str MKEYbulkconst_rotate_xor_hash(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MKEYconstbulk_rotate_xor_hash(bat *ret, const lng *h, const int *nbits, const bat *bid);
str MKEYhash(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MKEYrotate(lng *ret, const lng *v, const int *nbits);
str MKEYrotate_xor_hash(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
void MPresetProfiler(stream *fdout);
char *MSP_locate_sqlscript(const char *mod_name, bit recurse);
str MSinitClientPrg(Client cntxt, str mod, str nme);
void MSresetInstructions(MalBlkPtr mb, int start);
void MSresetVariables(Client cntxt, MalBlkPtr mb, MalStkPtr glb, int start);
void MSscheduleClient(str command, str challenge, bstream *fin, stream *fout, protocol_version protocol, size_t blocksize);
str MSserveClient(Client cntxt);
str MTIMEanalyticalrangebounds(BAT *r, BAT *b, BAT *p, BAT *l, const void *restrict bound, int tp1, int tp2, bool preceding, lng first_half);
str MTIMEcurrent_date(date *ret);
str MTIMEcurrent_time(daytime *ret);
str MTIMEcurrent_timestamp(timestamp *ret);
str MTIMEdate_add_msec_interval(date *ret, const date *d, const lng *ms);
str MTIMEdate_addmonths(date *ret, const date *d, const int *m);
str MTIMEdate_date(date *dst, const date *src);
str MTIMEdate_diff(int *ret, const date *v1, const date *v2);
str MTIMEdate_diff_bulk(bat *ret, const bat *bid1, const bat *bid2);
str MTIMEdate_extract_century(int *ret, const date *src);
str MTIMEdate_extract_century_bulk(bat *ret, const bat *bid);
str MTIMEdate_extract_day(int *ret, const date *src);
str MTIMEdate_extract_day_bulk(bat *ret, const bat *bid);
str MTIMEdate_extract_dayofweek(int *ret, const date *d);
str MTIMEdate_extract_dayofyear(int *ret, const date *d);
str MTIMEdate_extract_decade(int *ret, const date *src);
str MTIMEdate_extract_decade_bulk(bat *ret, const bat *bid);
str MTIMEdate_extract_month(int *ret, const date *src);
str MTIMEdate_extract_month_bulk(bat *ret, const bat *bid);
str MTIMEdate_extract_quarter(int *ret, const date *src);
str MTIMEdate_extract_quarter_bulk(bat *ret, const bat *bid);
str MTIMEdate_extract_weekofyear(int *ret, const date *d);
str MTIMEdate_extract_year(int *ret, const date *src);
str MTIMEdate_extract_year_bulk(bat *ret, const bat *bid);
str MTIMEdate_fromstr(date *ret, const char *const *s);
str MTIMEdate_sub_msec_interval(date *ret, const date *d, const lng *ms);
str MTIMEdate_submonths(date *ret, const date *d, const int *m);
str MTIMEdate_to_str(str *ret, const date *d, const char *const *format);
str MTIMEdaytime_daytime(daytime *dst, const daytime *src);
str MTIMEdaytime_diff_msec(lng *ret, const daytime *t1, const daytime *t2);
str MTIMEdaytime_extract_hours(int *ret, const daytime *src);
str MTIMEdaytime_extract_hours_bulk(bat *ret, const bat *bid);
str MTIMEdaytime_extract_minutes(int *ret, const daytime *src);
str MTIMEdaytime_extract_minutes_bulk(bat *ret, const bat *bid);
str MTIMEdaytime_extract_sql_seconds(int *ret, const daytime *src);
str MTIMEdaytime_extract_sql_seconds_bulk(bat *ret, const bat *bid);
str MTIMEdaytime_fromseconds(daytime *ret, const lng *secs);
str MTIMEdaytime_fromseconds_bulk(bat *ret, bat *bid);
str MTIMEdaytime_fromstr(daytime *ret, const char *const *s);
str MTIMElocal_timezone_msec(lng *ret);
str MTIMEseconds_since_epoch(int *ret, const timestamp *t);
str MTIMEsql_day(lng *ret, const lng *msecs);
str MTIMEsql_hours(int *ret, const lng *msecs);
str MTIMEsql_minutes(int *ret, const lng *msecs);
str MTIMEsql_month(int *ret, const int *months);
str MTIMEsql_seconds(int *ret, const lng *msecs);
str MTIMEsql_year(int *ret, const int *months);
str MTIMEstr_to_date(date *ret, const char *const *s, const char *const *format);
str MTIMEstr_to_time(daytime *ret, const char *const *s, const char *const *format);
str MTIMEstr_to_timestamp(timestamp *ret, const char *const *s, const char *const *format);
str MTIMEtime_add_msec_interval(daytime *ret, const daytime *t, const lng *ms);
str MTIMEtime_sub_msec_interval(daytime *ret, const daytime *t, const lng *ms);
str MTIMEtime_to_str(str *ret, const daytime *d, const char *const *format);
str MTIMEtimestamp_add_month_interval(timestamp *ret, const timestamp *t, const int *m);
str MTIMEtimestamp_add_msec_interval(timestamp *ret, const timestamp *t, const lng *ms);
str MTIMEtimestamp_add_msec_interval(timestamp *ret, const timestamp *v1, const lng *v2);
str MTIMEtimestamp_add_msec_interval_bulk(bat *ret, const bat *bid1, const bat *bid2);
str MTIMEtimestamp_century(int *ret, const timestamp *t);
str MTIMEtimestamp_day(int *ret, const timestamp *t);
str MTIMEtimestamp_decade(int *ret, const timestamp *t);
str MTIMEtimestamp_diff_msec(lng *ret, const timestamp *v1, const timestamp *v2);
str MTIMEtimestamp_diff_msec_bulk(bat *ret, const bat *bid1, const bat *bid2);
str MTIMEtimestamp_extract_date(date *ret, const timestamp *src);
str MTIMEtimestamp_extract_date_bulk(bat *ret, const bat *bid);
str MTIMEtimestamp_extract_daytime(daytime *ret, const timestamp *src);
str MTIMEtimestamp_extract_daytime_bulk(bat *ret, const bat *bid);
str MTIMEtimestamp_fromdate(timestamp *ret, const date *src);
str MTIMEtimestamp_fromdate_bulk(bat *ret, const bat *bid);
str MTIMEtimestamp_frommsec(timestamp *ret, const lng *src);
str MTIMEtimestamp_frommsec_bulk(bat *ret, const bat *bid);
str MTIMEtimestamp_fromsecond(timestamp *ret, const int *src);
str MTIMEtimestamp_fromsecond_bulk(bat *ret, const bat *bid);
str MTIMEtimestamp_fromstr(timestamp *ret, const char *const *s);
str MTIMEtimestamp_hours(int *ret, const timestamp *t);
str MTIMEtimestamp_minutes(int *ret, const timestamp *t);
str MTIMEtimestamp_month(int *ret, const timestamp *t);
str MTIMEtimestamp_quarter(int *ret, const timestamp *t);
str MTIMEtimestamp_sql_seconds(int *ret, const timestamp *src);
str MTIMEtimestamp_sql_seconds_bulk(bat *ret, const bat *bid);
str MTIMEtimestamp_sub_month_interval(timestamp *ret, const timestamp *t, const int *m);
str MTIMEtimestamp_sub_msec_interval(timestamp *ret, const timestamp *t, const lng *ms);
str MTIMEtimestamp_sub_msec_interval(timestamp *ret, const timestamp *v1, const lng *v2);
str MTIMEtimestamp_sub_msec_interval_bulk(bat *ret, const bat *bid1, const bat *bid2);
str MTIMEtimestamp_timestamp(timestamp *dst, const timestamp *src);
str MTIMEtimestamp_to_str(str *ret, const timestamp *d, const char *const *format);
str MTIMEtimestamp_year(int *ret, const timestamp *t);
str OIDXcreate(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OIDXcreateImplementation(Client cntxt, int tpe, BAT *b, int pieces);
str OIDXdropImplementation(Client cntxt, BAT *b);
str OIDXgetorderidx(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OIDXhasorderidx(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OIDXmerge(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OIDXorderidx(bat *ret, const bat *bid, const bit *stable);
str OLTPdisable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OLTPenable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OLTPinit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OLTPis_enabled(int *ret);
str OLTPlock(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OLTPrelease(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OLTPreset(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OLTPtable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
void OPTaliasRemap(InstrPtr p, int *alias);
str OPTaliasesImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTcandidatesImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTcoercionImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTcommonTermsImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTconstantsImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTcostModelImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTdataflowImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTdeadcodeImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTemptybindImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTevaluateImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTgarbageCollectorImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTgeneratorImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTinlineImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTisAlias(InstrPtr p);
str OPTjitImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTjsonImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTmacro(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTmacroImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTmatpackImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTmergetableImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTmitosisImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTmultiplexImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTmultiplexSimple(Client cntxt, MalBlkPtr mb);
str OPToltpImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTorcam(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTorcamImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTpostfixImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTprofilerImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTprojectionpathImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTpushselectImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTquerylogImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTreduceImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTremapImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTremoteQueriesImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTreorderImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTstatistics(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTvolcanoImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTwlcImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTwrapper(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str PCREilike2(bit *ret, const str *s, const str *pat);
str PCREilike3(bit *ret, const str *s, const str *pat, const str *esc);
str PCREimatch(bit *ret, const str *val, const str *pat);
str PCREindex(int *ret, const pcre *pat, const str *val);
str PCRElike2(bit *ret, const str *s, const str *pat);
str PCRElike3(bit *ret, const str *s, const str *pat, const str *esc);
str PCRElikeselect1(bat *ret, const bat *bid, const bat *cid, const str *pat, const str *esc, const bit *anti);
str PCRElikeselect2(bat *ret, const bat *bid, const bat *sid, const str *pat, const str *esc, const bit *caseignore, const bit *anti);
str PCRElikeselect3(bat *ret, const bat *bid, const bat *sid, const str *pat, const str *esc, const bit *anti);
str PCRElikeselect4(bat *ret, const bat *bid, const bat *cid, const str *pat, const bit *anti);
str PCRElikeselect5(bat *ret, const bat *bid, const bat *sid, const str *pat, const bit *anti);
str PCREmatch(bit *ret, const str *val, const str *pat);
str PCREnotilike2(bit *ret, const str *s, const str *pat);
str PCREnotilike3(bit *ret, const str *s, const str *pat, const str *esc);
str PCREnotlike2(bit *ret, const str *s, const str *pat);
str PCREnotlike3(bit *ret, const str *s, const str *pat, const str *esc);
str PCREpatindex(int *ret, const str *pat, const str *val);
str PCREquote(str *r, const str *v);
str PCREreplace_bat_wrap(bat *res, const bat *or, const str *pat, const str *repl, const str *flags);
str PCREreplace_wrap(str *res, const str *or, const str *pat, const str *repl, const str *flags);
str PCREreplacefirst_bat_wrap(bat *res, const bat *or, const str *pat, const str *repl, const str *flags);
str PCREreplacefirst_wrap(str *res, const str *or, const str *pat, const str *repl, const str *flags);
str PCREsql2pcre(str *ret, const str *pat, const str *esc);
str QLOGappend(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str QLOGcall(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str QLOGcalls(BAT **r);
str QLOGcatalog(BAT **r);
str QLOGcontextNaive(void *ret, str *release, str *version, str *revision, str *uri);
str QLOGdefineNaive(void *ret, str *qry, str *opt, int *nr);
str QLOGdisable(void *ret);
str QLOGempty(void *ret);
str QLOGenable(void *ret);
str QLOGenableThreshold(void *ret, int *threshold);
int QLOGisset(void);
str QLOGissetFcn(int *ret);
str QOToptimize(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
QueryQueue QRYqueue;
str RMTbatload(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTbincopyfrom(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTbincopyto(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTbintype(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTconnect(str *ret, str *uri, str *user, str *passwd);
str RMTconnectScen(str *ret, str *ouri, str *user, str *passwd, str *scen);
str RMTconnectTable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTdisconnect(void *ret, str *conn);
str RMTepilogue(void *ret);
str RMTexec(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTget(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTisalive(int *ret, str *conn);
str RMTprelude(void *ret);
str RMTput(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTregister(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTregisterSupervisor(int *ret, str *sup_uuid, str *query_uuid);
str RMTresolve(bat *ret, str *pat);
str RUNadder(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RUNchoice(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RUNcostPrediction(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RUNisolation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RUNpickResult(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RUNvolumeCost(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str SAMPLEuniform(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERbindBAT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERclient(void *res, const Stream *In, const Stream *Out);
str SERVERconnect(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pc);
str SERVERdestroy(void *ret, int *mid);
str SERVERdisconnect(void *ret, int *mid);
str SERVERdisconnectALL(int *ret);
str SERVERdisconnectWithAlias(int *ret, str *db_alias);
str SERVERerror(int *ret, int *idx);
str SERVERexplain(str *ret, int *idx);
str SERVERfetch_all_rows(lng *ret, int *idx);
str SERVERfetch_field_bat(bat *bid, int *idx);
str SERVERfetch_field_bte(bte *ret, int *idx, int *fnr);
str SERVERfetch_field_hge(hge *ret, int *idx, int *fnr);
str SERVERfetch_field_int(int *ret, int *idx, int *fnr);
str SERVERfetch_field_lng(lng *ret, int *idx, int *fnr);
str SERVERfetch_field_oid(oid *ret, int *idx, int *fnr);
str SERVERfetch_field_sht(sht *ret, int *idx, int *fnr);
str SERVERfetch_field_str(str *ret, int *idx, int *fnr);
str SERVERfetch_field_void(void *ret, int *idx, int *fnr);
str SERVERfetch_line(str *ret, int *key);
str SERVERfetch_reset(int *ret, int *key);
str SERVERfetch_row(int *ret, int *idx);
str SERVERfinish(int *ret, int *idx);
str SERVERgetError(str *ret, int *idx);
str SERVERget_field_count(int *ret, int *idx);
str SERVERget_row_count(lng *ret, int *idx);
str SERVERlisten_default(int *ret);
str SERVERlisten_port(int *ret, int *pid);
str SERVERlisten_usock(int *ret, str *usock);
str SERVERlookup(int *ret, str *dbalias);
str SERVERmapi_rpc_bat(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERmapi_rpc_single_bat(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERmapi_rpc_single_row(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERnext_result(int *ret, int *key);
str SERVERping(int *ret, int *mid);
str SERVERprepare(int *ret, int *key, str *qry);
str SERVERput(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERputLocal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERquery(int *ret, int *mid, str *qry);
str SERVERquery_array(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pc);
str SERVERquery_handle(int *ret, int *mid, str *qry);
str SERVERreconnect(void *ret, int *mid);
str SERVERreconnectAlias(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pc);
str SERVERreconnectWithoutAlias(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pc);
str SERVERresume(void *ret);
str SERVERrows_affected(lng *ret, int *idx);
str SERVERsetAlias(void *ret, int *mid, str *dbalias);
str SERVERstop(void *ret);
str SERVERsuspend(void *ret);
str SERVERtrace(void *ret, int *mid, int *flag);
BUN SQLload_file(Client cntxt, Tablet *as, bstream *b, stream *out, const char *csep, const char *rsep, char quote, lng skip, lng maxrow, int best, bool from_stdin, const char *tabnam);
str STRBytes(int *res, const str *arg1);
str STRConcat(str *res, const str *val1, const str *val2);
str STRFromWChr(str *res, const int *at);
str STRLength(int *res, const str *arg1);
str STRLower(str *res, const str *arg1);
str STRLpad(str *res, const str *arg1, const int *len);
str STRLpad2(str *res, const str *arg1, const int *len, const str *arg2);
str STRLtrim(str *res, const str *arg1);
str STRLtrim2(str *res, const str *arg1, const str *arg2);
str STRPrefix(bit *res, const str *arg1, const str *arg2);
str STRReverseStrSearch(int *res, const str *arg1, const str *arg2);
str STRRpad(str *res, const str *arg1, const int *len);
str STRRpad2(str *res, const str *arg1, const int *len, const str *arg2);
str STRRtrim(str *res, const str *arg1);
str STRRtrim2(str *res, const str *arg1, const str *arg2);
str STRStrip(str *res, const str *arg1);
str STRStrip2(str *res, const str *arg1, const str *arg2);
str STRSubString(str *res, const str *arg1, const int *offset, const int *length);
str STRSubstitute(str *res, const str *arg1, const str *arg2, const str *arg3, const bit *g);
str STRSuffix(bit *res, const str *arg1, const str *arg2);
str STRTail(str *res, const str *arg1, const int *offset);
str STRUpper(str *res, const str *arg1);
str STRWChrAt(int *res, const str *arg1, const int *at);
str STRascii(int *ret, const str *s);
str STRbatBytes(bat *ret, const bat *l);
str STRbatLength(bat *ret, const bat *l);
str STRbatLower(bat *ret, const bat *l);
str STRbatLpad2_bat_bat(bat *ret, const bat *l, const bat *n, const bat *l2);
str STRbatLpad2_bat_const(bat *ret, const bat *l, const bat *n, const str *s2);
str STRbatLpad2_const_bat(bat *ret, const bat *l, const int *n, const bat *l2);
str STRbatLpad2_const_const(bat *ret, const bat *l, const int *n, const str *s2);
str STRbatLpad_bat(bat *ret, const bat *l, const bat *n);
str STRbatLpad_const(bat *ret, const bat *l, const int *n);
str STRbatLtrim(bat *ret, const bat *l);
str STRbatLtrim2_bat(bat *ret, const bat *l, const bat *l2);
str STRbatLtrim2_const(bat *ret, const bat *l, const str *s2);
str STRbatPrefix(bat *ret, const bat *l, const bat *r);
str STRbatPrefixcst(bat *ret, const bat *l, const str *cst);
str STRbatRpad2_bat_bat(bat *ret, const bat *l, const bat *n, const bat *l2);
str STRbatRpad2_bat_const(bat *ret, const bat *l, const bat *n, const str *s2);
str STRbatRpad2_const_bat(bat *ret, const bat *l, const int *n, const bat *l2);
str STRbatRpad2_const_const(bat *ret, const bat *l, const int *n, const str *s2);
str STRbatRpad_bat(bat *ret, const bat *l, const bat *n);
str STRbatRpad_const(bat *ret, const bat *l, const int *n);
str STRbatRstrSearch(bat *ret, const bat *l, const bat *r);
str STRbatRstrSearchcst(bat *ret, const bat *l, const str *cst);
str STRbatRtrim(bat *ret, const bat *l);
str STRbatRtrim2_bat(bat *ret, const bat *l, const bat *l2);
str STRbatRtrim2_const(bat *ret, const bat *l, const str *s2);
str STRbatStrip(bat *ret, const bat *l);
str STRbatStrip2_bat(bat *ret, const bat *l, const bat *l2);
str STRbatStrip2_const(bat *ret, const bat *l, const str *s2);
str STRbatSubstitutecst(bat *ret, const bat *l, const str *arg2, const str *arg3, const bit *rep);
str STRbatSuffix(bat *ret, const bat *l, const bat *r);
str STRbatSuffixcst(bat *ret, const bat *l, const str *cst);
str STRbatTail(bat *ret, const bat *l, const bat *r);
str STRbatTailcst(bat *ret, const bat *l, const int *cst);
str STRbatUpper(bat *ret, const bat *l);
str STRbatWChrAt(bat *ret, const bat *l, const bat *r);
str STRbatWChrAtcst(bat *ret, const bat *l, const int *cst);
str STRbatstrSearch(bat *ret, const bat *l, const bat *r);
str STRbatstrSearchcst(bat *ret, const bat *l, const str *cst);
str STRbatsubstring(bat *ret, const bat *l, const bat *r, const bat *t);
str STRbatsubstringcst(bat *ret, const bat *bid, const int *start, const int *length);
str STRinsert(str *ret, const str *s, const int *start, const int *l, const str *s2);
str STRlikewrap(bit *ret, const str *s, const str *pat, const str *esc);
str STRlikewrap2(bit *ret, const str *s, const str *pat);
str STRlocate(int *ret, const str *s1, const str *s2);
str STRlocate2(int *ret, const str *s1, const str *s2, const int *start);
str STRprefix(str *ret, const str *s, const int *l);
str STRrepeat(str *ret, const str *s, const int *c);
str STRreplace(str *ret, const str *s1, const str *s2, const str *s3);
str STRspace(str *ret, const int *l);
str STRsplitpart(str *res, str *haystack, str *needle, int *field);
str STRstrSearch(int *res, const str *arg1, const str *arg2);
str STRsubstring(str *ret, const str *s, const int *start, const int *l);
str STRsubstringTail(str *ret, const str *s, const int *start);
str STRsuffix(str *ret, const str *s, const int *l);
str STRtostr(str *res, const str *src);
str SYSMONpause(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SYSMONqueue(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SYSMONresume(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SYSMONstop(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SYScpuStatistics(bat *ret, bat *ret2);
str SYSgdkEnv(bat *ret, bat *ret2);
str SYSgdkThread(bat *ret, bat *ret2);
str SYSgetmem_cursize(lng *num);
str SYSgetmem_maxsize(lng *num);
str SYSgetvm_cursize(lng *num);
str SYSgetvm_maxsize(lng *num);
str SYSioStatistics(bat *ret, bat *ret2);
str SYSmemStatistics(bat *ret, bat *ret2);
str SYSmem_usage(bat *ret, bat *ret2, const lng *minsize);
str SYSsetmem_maxsize(void *ret, const lng *num);
str SYSsetvm_maxsize(void *ret, const lng *num);
str SYSvm_usage(bat *ret, bat *ret2, const lng *minsize);
str TABLETcollect(BAT **bats, Tablet *as);
str TABLETcollect_parts(BAT **bats, Tablet *as, BUN offset);
str TABLETcreate_bats(Tablet *as, BUN est);
void TABLETdestroy_format(Tablet *as);
int TABLEToutput_file(Tablet *as, BAT *order, stream *s);
str TKNZRappend(oid *pos, str *tuple);
str TKNZRclose(void *r);
str TKNZRdepositFile(void *r, str *fnme);
str TKNZRgetCardinality(bat *r);
str TKNZRgetCount(bat *r);
str TKNZRgetIndex(bat *r);
str TKNZRgetLevel(bat *r, int *level);
str TKNZRlocate(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str TKNZRopen(void *r, str *name);
str TKNZRtakeOid(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str TRACERcomp_info(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str TRACERflush_buffer(void *ret);
str TRACERreset_adapter(void *ret);
str TRACERreset_component_level(void *ret, str *comp_id);
str TRACERreset_flush_level(void *ret);
str TRACERreset_layer_level(void *ret, str *layer_id);
str TRACERset_adapter(void *ret, str *adapter_id);
str TRACERset_component_level(void *ret, str *comp_id, str *lvl_id);
str TRACERset_flush_level(void *ret, str *lvl_id);
str TRACERset_layer_level(void *ret, str *layer_id, str *lvl_id);
int TRACEtable(Client cntxt, BAT **r);
str TRNglobal_abort(bit *ret);
str TRNglobal_commit(bit *ret);
str TRNglobal_sync(bit *ret);
str TRNsubcommit(bit *ret, bat *bid);
str TRNtrans_abort(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str TRNtrans_clean(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str TRNtrans_commit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int TYPE_blob;
int TYPE_identifier;
int TYPE_json;
int TYPE_xml;
ssize_t URLfromString(const char *src, size_t *len, str *u, bool external);
str URLgetAnchor(str *retval, url *val);
str URLgetBasename(str *retval, url *t);
str URLgetContent(str *retval, url *Str1);
str URLgetContext(str *retval, url *val);
str URLgetDomain(str *retval, url *tv);
str URLgetExtension(str *retval, url *tv);
str URLgetFile(str *retval, url *tv);
str URLgetHost(str *retval, url *tv);
str URLgetPort(str *retval, url *tv);
str URLgetProtocol(str *retval, url *tv);
str URLgetQuery(str *retval, url *tv);
str URLgetRobotURL(str *retval, url *tv);
str URLgetUser(str *retval, url *tv);
str URLisaURL(bit *retval, str *tv);
str URLnew(url *u, str *val);
str URLnew3(url *u, str *protocol, str *server, str *file);
str URLnew4(url *u, str *protocol, str *server, int *port, str *file);
str URLnoop(url *u, url *val);
ssize_t URLtoString(str *s, size_t *len, const char *src, bool external);
int UUIDcompare(const uuid *l, const uuid *r);
ssize_t UUIDfromString(const char *svalue, size_t *len, uuid **retval, bool external);
str UUIDgenerateUuid(uuid **retval);
str UUIDgenerateUuid(uuid *retval);
str UUIDgenerateUuidInt(uuid **retval, int *d);
str UUIDgenerateUuidInt(uuid *retval, int *d);
BUN UUIDhash(const void *u);
str UUIDisaUUID(bit *retval, str *u);
const uuid *UUIDnull(void);
str UUIDprelude(void *ret);
uuid *UUIDread(uuid *u, stream *s, size_t cnt);
str UUIDstr2uuid(uuid **retval, str *s);
str UUIDstr2uuid(uuid *retval, str *s);
ssize_t UUIDtoString(str *retval, size_t *len, const uuid *value, bool external);
str UUIDuuid2str(str *retval, const uuid *u);
str UUIDuuid2str(str *retval, uuid **u);
gdk_return UUIDwrite(const uuid *u, stream *s, size_t cnt);
str WLCaction(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCappend(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCcatalog(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCclear_table(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCcommit(int clientid);
str WLCcommitCmd(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCdelete(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCepilogue(void *ret);
str WLCfinish(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCflush(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCgeneric(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCgetConfig(void);
str WLCgetbeat(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCgetclock(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCgettick(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCinit(void);
str WLCinitCmd(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCmaster(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCquery(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCreadConfig(FILE *fd);
str WLCrollback(int clientid);
str WLCrollbackCmd(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCsetbeat(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCstop(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCtransaction(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str WLCupdate(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int WLCused(void);
str XMLattribute(xml *ret, str *name, str *val);
str XMLcomment(xml *x, str *s);
str XMLconcat(xml *ret, xml *left, xml *right);
str XMLcontent(xml *x, str *s);
str XMLdocument(xml *x, str *s);
str XMLelement(xml *ret, str *name, xml *nspace, xml *attr, xml *val);
str XMLelementSmall(xml *ret, str *name, xml *val);
str XMLepilogue(void *ret);
str XMLforest(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
ssize_t XMLfromString(const char *src, size_t *len, xml *x, bool external);
str XMLisdocument(bit *x, str *s);
str XMLparse(xml *x, str *doccont, str *s, str *option);
str XMLpi(xml *x, str *target, str *s);
str XMLprelude(void *ret);
size_t XMLquotestring(const char *s, char *buf, size_t len);
str XMLroot(xml *x, xml *v, str *version, str *standalone);
str XMLstr2xml(xml *x, const char **s);
ssize_t XMLtoString(str *s, size_t *len, const char *src, bool external);
size_t XMLunquotestring(const char **p, char q, char *buf);
str XMLxml2str(str *s, xml *x);
str XMLxml2xml(xml *x, xml *s);
str XMLxmltext(str *s, xml *x);
str abortRef;
str actionRef;
InstrPtr addArgument(MalBlkPtr mb, InstrPtr p, int varid);
void addMalException(MalBlkPtr mb, str msg);
str addOptimizerPipe(Client cntxt, MalBlkPtr mb, const char *name);
str addPipeDefinition(Client cntxt, const char *name, const char *pipe);
void addtoMalBlkHistory(MalBlkPtr mb);
str affectedRowsRef;
str aggrRef;
str alarmRef;
str algebraRef;
str alter_add_range_partitionRef;
str alter_add_tableRef;
str alter_add_value_partitionRef;
str alter_constraintRef;
str alter_del_tableRef;
str alter_functionRef;
str alter_indexRef;
str alter_roleRef;
str alter_schemaRef;
str alter_seqRef;
str alter_set_tableRef;
str alter_tableRef;
str alter_triggerRef;
str alter_typeRef;
str alter_userRef;
str alter_viewRef;
str andRef;
str antijoinRef;
str appendRef;
str appendidxRef;
str arrayRef;
str assertRef;
str attachRef;
str avgRef;
str bandjoinRef;
str basketRef;
void batAfterCall(ValPtr v, ValPtr bak);
void batBeforeCall(ValPtr v, ValPtr bak);
str batRef;
str batalgebraRef;
str batcalcRef;
str batcapiRef;
str batmalRef;
str batmmathRef;
str batmtimeRef;
str batpyapi3Ref;
str batrapiRef;
str batsqlRef;
str batstrRef;
str batxmlRef;
str bbpRef;
str betweenRef;
str bindRef;
str binddbatRef;
str bindidxRef;
var_t blobsize(size_t nitems);
str blockRef;
str bpmRef;
str bstreamRef;
int bstream_create_wrap(Bstream *BS, Stream *S, int *bufsize);
str bstream_create_wrapwrap(Bstream *Bs, Stream *S, int *bufsize);
int bstream_destroy_wrap(Bstream *BS);
str bstream_destroy_wrapwrap(void *ret, Bstream *BS);
int bstream_read_wrap(int *res, Bstream *BS, int *size);
str bstream_read_wrapwrap(int *res, Bstream *BS, int *size);
str bulk_rotate_xor_hashRef;
str calcRef;
str callMAL(Client cntxt, MalBlkPtr mb, MalStkPtr *glb, ValPtr argv[], char debug);
str callString(Client c, str s, int listing);
str capiRef;
str catalogRef;
str chkDeclarations(MalBlkPtr mb);
str chkFlow(MalBlkPtr mb);
int chkInstruction(Module s, MalBlkPtr mb, InstrPtr p);
str chkProgram(Module s, MalBlkPtr mb);
str chkTypes(Module s, MalBlkPtr mb, int silent);
str cleanupTraces(Client cntxt);
void clearTrace(Client cntxt);
void clearVariable(MalBlkPtr mb, int varid);
str clear_tableRef;
int cloneVariable(MalBlkPtr dst, MalBlkPtr src, int varid);
str closeProfilerStream(Client cntxt);
str closeRef;
void clrDeclarations(MalBlkPtr mb);
void clrFunction(InstrPtr p);
void clrInstruction(InstrPtr p);
ssize_t color_fromstr(const char *colorStr, size_t *len, color **c, bool external);
ssize_t color_tostr(char **colorStr, size_t *len, const color *c, bool external);
str columnBindRef;
str columnRef;
str comment_onRef;
str commitRef;
str compileAllOptimizers(Client cntxt);
str compileOptimizer(Client cntxt, const char *name);
str compileString(Symbol *fcn, Client c, str s);
str connectRef;
str contextRef;
str convertConstant(malType type, ValPtr vr);
InstrPtr copyInstruction(InstrPtr p);
MalBlkPtr copyMalBlk(MalBlkPtr mb);
str copyRef;
str copy_fromRef;
str countRef;
str count_no_nilRef;
int cpyConstant(MalBlkPtr mb, VarPtr vr);
str createException(enum malexception, const char *, _In_z_ _Printf_format_string_ const char *, ...) __attribute__((__format__(__printf__, 3, 4))) __attribute__((__returns_nonnull__));
str createMalException(MalBlkPtr, int, enum malexception, _In_z_ _Printf_format_string_ const char *, ...) __attribute__((__format__(__printf__, 4, 5))) __attribute__((__returns_nonnull__));
str createRef;
str create_constraintRef;
str create_functionRef;
str create_indexRef;
str create_roleRef;
str create_schemaRef;
str create_seqRef;
str create_tableRef;
str create_triggerRef;
str create_typeRef;
str create_userRef;
str create_viewRef;
str crossRef;
str cume_distRef;
str dataflowRef;
str dateRef;
str dblRef;
str deblockdataflow(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
void debugFunction(stream *fd, MalBlkPtr mb, MalStkPtr stk, int flg, int first, int size);
int defConstant(MalBlkPtr mb, int type, ValPtr cst);
str defineRef;
void delArgument(InstrPtr p, int varid);
void delName(const char *nme, size_t len);
str deleteRef;
void deleteSymbol(Module scope, Symbol prg);
str deltaRef;
str dense_rankRef;
malType destinationType(MalBlkPtr mb, InstrPtr p);
str diffRef;
str diffcandRef;
str differenceRef;
str disconnectRef;
str divRef;
str drop_constraintRef;
str drop_functionRef;
str drop_indexRef;
str drop_roleRef;
str drop_schemaRef;
str drop_seqRef;
str drop_tableRef;
str drop_triggerRef;
str drop_typeRef;
str drop_userRef;
str drop_viewRef;
void dumpModules(stream *out);
str emptybindRef;
str emptybindidxRef;
str eqRef;
str escape_str(str *retval, str s);
str evalFile(str fname, int listing);
str evalRef;
str execRef;
str expandRef;
str exportOperationRef;
str export_tableRef;
str fcnDefinition(MalBlkPtr mb, InstrPtr p, str s, int flg, str base, size_t len);
str fetchRef;
int findGDKtype(int type);
Module findModule(Module scope, str name);
str findRef;
Scenario findScenario(str nme);
Symbol findSymbol(Module usermodule, str mod, str fcn);
Symbol findSymbolInModule(Module v, str fcn);
int findVariable(MalBlkPtr mb, const char *name);
int findVariableLength(MalBlkPtr mb, str name, int len);
str finishRef;
void finishSessionProfiler(Client cntxt);
str first_valueRef;
str firstnRef;
Module fixModule(str nme);
int fndConstant(MalBlkPtr mb, const ValRecord *cst, int depth);
void freeException(str);
void freeInstruction(InstrPtr p);
void freeMalBlk(MalBlkPtr mb);
void freeModule(Module cur);
void freeModuleList(Module *list);
void freeStack(MalStkPtr stk);
void freeSymbol(Symbol s);
void freeSymbolList(Symbol s);
void freeVariable(MalBlkPtr mb, int varid);
str fstrcmp0_impl(dbl *ret, str *string1, str *string2);
str fstrcmp_impl(dbl *ret, str *string1, str *string2, dbl *minimum);
void garbageCollector(Client cntxt, MalBlkPtr mb, MalStkPtr stk, int flag);
void garbageElement(Client cntxt, ValPtr v);
str generatorRef;
MALfcn getAddress(str fcnname);
str getArgDefault(MalBlkPtr mb, InstrPtr p, int idx);
ptr getArgReference(MalStkPtr stk, InstrPtr pci, int k);
int getAtomIndex(const char *nme, size_t len, int deftpe);
lng getBatSpace(BAT *b);
int getBitConstant(MalBlkPtr mb, bit val);
int getBlockBegin(MalBlkPtr mb, int pc);
int getBlockExit(MalBlkPtr mb, int pc);
int getBteConstant(MalBlkPtr mb, bte val);
int getDblConstant(MalBlkPtr mb, dbl val);
lng getDiskReads(void);
lng getDiskSpace(void);
lng getDiskWrites(void);
str getExceptionMessage(const char *);
str getExceptionMessageAndState(const char *);
str getExceptionPlace(const char *);
enum malexception getExceptionType(const char *);
int getFltConstant(MalBlkPtr mb, flt val);
Scenario getFreeScenario(void);
Symbol getFunctionSymbol(Module scope, InstrPtr p);
int getHgeConstant(MalBlkPtr mb, hge val);
int getIntConstant(MalBlkPtr mb, int val);
int getLngConstant(MalBlkPtr mb, lng val);
MalBlkPtr getMalBlkHistory(MalBlkPtr mb, int idx);
MalBlkPtr getMalBlkOptimized(MalBlkPtr mb, str name);
lng getMemoryClaim(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, int i, int flag);
Module getModule(str nme);
void getModuleList(Module **out, int *length);
str getName(const char *nme);
str getNameLen(const char *nme, size_t len);
int getOidConstant(MalBlkPtr mb, oid val);
int getPC(MalBlkPtr mb, InstrPtr p);
str getPipeCatalog(bat *nme, bat *def, bat *stat);
str getPipeDefinition(str name);
str getRef;
str getScenarioLanguage(Client c);
int getShtConstant(MalBlkPtr mb, sht val);
int getStrConstant(MalBlkPtr mb, str val);
lng getSystemTime(void);
BAT *getTrace(Client cntxt, const char *nme);
str getTraceRef;
malType getType(MalBlkPtr mb, str nme);
str getTypeIdentifier(malType tpe);
str getTypeName(malType tpe);
lng getUserTime(void);
str getVariableRef;
lng getVolume(MalStkPtr stk, InstrPtr pci, int rd);
int getprofilerlimit(void);
Module globalModule(str nme);
str grantRef;
str grant_functionRef;
str grant_rolesRef;
str groupRef;
str group_concatRef;
str groupbyRef;
str groupdoneRef;
str growRef;
int hasCommonResults(InstrPtr p, InstrPtr q);
int hasSameArguments(MalBlkPtr mb, InstrPtr p, InstrPtr q);
int hasSameSignature(MalBlkPtr mb, InstrPtr p, InstrPtr q);
int hasSideEffects(MalBlkPtr mb, InstrPtr p, int strict);
str hashRef;
int have_hge;
str hgeRef;
str identityRef;
str ifthenelseRef;
str ilikeRef;
str ilikeselectRef;
str ilikethetaselectRef;
str ilikeuselectRef;
void initHeartbeat(void);
void initNamespace(void);
void initParser(void);
void initProfiler(void);
str initQlog(void);
int inlineMALblock(MalBlkPtr mb, int pc, MalBlkPtr mc);
void insertSymbol(Module scope, Symbol prg);
str instruction2str(MalBlkPtr mb, MalStkPtr stl, InstrPtr p, int hidden);
str intRef;
str intersectRef;
str intersectcandRef;
str ioRef;
str io_stdin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str io_stdout(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int isBlocking(InstrPtr p);
int isDelta(InstrPtr q);
int isExceptionVariable(str nme);
int isFragmentGroup(InstrPtr q);
int isFragmentGroup2(InstrPtr q);
int isIdentifier(str s);
int isLikeOp(InstrPtr q);
int isLoopBarrier(MalBlkPtr mb, int pc);
int isMap2Op(InstrPtr q);
int isMapOp(InstrPtr q);
int isMatJoinOp(InstrPtr q);
int isMatLeftJoinOp(InstrPtr q);
int isMultiplex(InstrPtr q);
int isNotUsedIn(InstrPtr p, int start, int a);
int isOptimizerEnabled(MalBlkPtr mb, str opt);
int isOptimizerPipe(const char *name);
int isOrderby(InstrPtr q);
int isSample(InstrPtr q);
int isSelect(InstrPtr q);
int isSideEffectFree(MalBlkPtr mb);
int isSlice(InstrPtr q);
int isSubJoin(InstrPtr q);
int isTopn(InstrPtr q);
int isUnsafeFunction(InstrPtr q);
int isUnsafeInstruction(InstrPtr q);
int isUpdateInstruction(InstrPtr p);
str iteratorRef;
str jitRef;
str joinRef;
str jsonRef;
str lagRef;
str languageRef;
str last_valueRef;
str leadRef;
str leftjoinRef;
str levenshtein_impl(int *result, str *s, str *t, int *insdel_cost, int *replace_cost, int *transpose_cost);
str levenshteinbasic2_impl(int *result, str *s, str *t);
str levenshteinbasic_impl(int *result, str *s, str *t);
str likeRef;
str likeselectRef;
str likethetaselectRef;
str likeuselectRef;
void listModules(stream *out, Module s);
str listRef;
str loadLibrary(str modulename, int flag);
char *locate_file(const char *basename, const char *ext, bit recurse);
str lockRef;
str lookupRef;
str mal2str(MalBlkPtr mb, int first, int last);
int malAtomSize(int size, const char *name);
str malBootstrap(void);
str malCommandCall(MalStkPtr stk, InstrPtr pci);
str malInclude(Client c, str name, int listing);
int malLibraryEnabled(str name);
char *malLibraryHowToEnable(str name);
int malProfileMode;
str malRef;
void mal_atom_reset(void);
ClientRec *mal_clients;
MT_Lock mal_contextLock;
MT_Lock mal_copyLock;
MT_Lock mal_delayLock;
_Noreturn void mal_exit(int status);
int mal_init(void);
void mal_instruction_reset(void);
MT_Lock mal_oltpLock;
MT_Lock mal_profileLock;
str mal_quote(const char *msg, size_t size);
MT_Lock mal_remoteLock;
void mal_unquote(char *msg);
stream *maleventstream;
str manifoldRef;
str mapiRef;
str markRef;
str matRef;
str maxRef;
str max_no_nilRef;
int mayhaveSideEffects(Client cntxt, MalBlkPtr mb, InstrPtr p, int strict);
void mdbDump(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str mdbRef;
void mdbSetBreakRequest(Client cntxt, MalBlkPtr mb, str request, char cmd);
str mergecandRef;
str mergepackRef;
str minRef;
str min_no_nilRef;
str minusRef;
str mirrorRef;
str mitosisRef;
str mkeyRef;
str mmathRef;
int mnstr_close_stream(Stream *S);
str mnstr_close_streamwrap(void *ret, Stream *s);
int mnstr_flush_stream(Stream *S);
str mnstr_flush_streamwrap(void *ret, Stream *s);
str mnstr_open_rastreamwrap(Stream *S, str *filename);
str mnstr_open_rstreamwrap(Stream *S, str *filename);
str mnstr_open_wastreamwrap(Stream *S, str *filename);
str mnstr_open_wstreamwrap(Stream *S, str *filename);
int mnstr_readInt_wrap(int *data, Stream *S);
str mnstr_readIntwrap(int *ret, Stream *S);
int mnstr_read_string(str *res, Stream *S);
str mnstr_read_stringwrap(str *res, Stream *s);
int mnstr_writeInt_wrap(Stream *S, int *data);
str mnstr_writeIntwrap(void *ret, Stream *S, int *data);
int mnstr_write_string(Stream *S, str data);
str mnstr_write_stringwrap(void *ret, Stream *S, str *data);
str modRef;
char monet_characteristics[4096];
char monet_cwd[FILENAME_MAX];
void moveInstruction(MalBlkPtr mb, int pc, int target);
void msab_dbfarminit(const char *dbfarm);
void msab_dbnameinit(const char *dbname);
void msab_dbpathinit(const char *dbpath);
char *msab_deserialise(sabdb **ret, char *sabdb);
void msab_freeStatus(sabdb **ret);
char *msab_getDBfarm(char **ret);
char *msab_getDBname(char **ret);
char *msab_getMyStatus(sabdb **ret);
char *msab_getStatus(sabdb **ret, char *dbname);
char *msab_getUUID(char **ret);
char *msab_getUplogInfo(sabuplog *ret, const sabdb *db);
char *msab_marchConnection(const char *host, const int port);
char *msab_marchScenario(const char *lang);
char *msab_registerStarted(void);
char *msab_registerStarting(void);
char *msab_registerStop(void);
char *msab_retreatScenario(const char *lang);
char *msab_serialise(char **ret, const sabdb *db);
char *msab_wildRetreat(void);
void mserver_reset(void);
str mtimeRef;
str mulRef;
str multicolumnRef;
str multiplexRef;
str mvcRef;
InstrPtr newAssignment(MalBlkPtr mb);
InstrPtr newCatchStmt(MalBlkPtr mb, str nme);
InstrPtr newComment(MalBlkPtr mb, const char *val);
InstrPtr newExitStmt(MalBlkPtr mb, str nme);
InstrPtr newFcnCall(MalBlkPtr mb, char *mod, char *fcn);
Symbol newFunction(str mod, str nme, int kind);
MalStkPtr newGlobalStack(int size);
InstrPtr newInstruction(MalBlkPtr mb, str modnme, str fcnnme);
InstrPtr newInstructionArgs(MalBlkPtr mb, str modnme, str fcnnme, int args);
MalBlkPtr newMalBlk(int elements);
int newMalBlkStmt(MalBlkPtr mb, int elements);
Plant newPlant(MalBlkPtr mb);
InstrPtr newRaiseStmt(MalBlkPtr mb, str nme);
str newRef;
InstrPtr newReturnStmt(MalBlkPtr mb);
InstrPtr newStmt(MalBlkPtr mb, const char *module, const char *name);
InstrPtr newStmtArgs(MalBlkPtr mb, const char *module, const char *name, int args);
Symbol newSymbol(str nme, int kind);
int newTmpVariable(MalBlkPtr mb, malType type);
int newTypeVariable(MalBlkPtr mb, malType type);
int newVariable(MalBlkPtr mb, const char *name, size_t len, malType type);
str nextRef;
str notRef;
str not_ilikeRef;
str not_likeRef;
str not_uniqueRef;
str nth_valueRef;
str ntileRef;
str oidRef;
void oldmoveInstruction(InstrPtr dst, InstrPtr src);
str oltpRef;
str openProfilerStream(Client cntxt);
str openRef;
int open_block_stream(Stream *S, Stream *is);
str open_block_streamwrap(Stream *S, Stream *is);
str operatorName(int i);
void opt_pipes_reset(void);
str optimizeMALBlock(Client cntxt, MalBlkPtr mb);
int optimizerIsApplied(MalBlkPtr mb, str name);
str optimizerRef;
str optimizer_epilogue(void *ret);
str optimizer_prelude(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str orRef;
str pack2Ref;
str packIncrementRef;
str packRef;
str parametersRef;
void parseMAL(Client cntxt, Symbol curPrg, int skipcomments, int lines);
str partitionRef;
str passRef;
str pcreRef;
str pcre_init(void *ret);
str percent_rankRef;
str pinRef;
str plusRef;
str postludeRef;
str preludeRef;
MalStkPtr prepareMALstack(MalBlkPtr mb, int size);
int prepareMalBlk(MalBlkPtr mb, str s);
void printFunction(stream *fd, MalBlkPtr mb, MalStkPtr stk, int flg);
void printInstruction(stream *fd, MalBlkPtr mb, MalStkPtr stk, InstrPtr p, int flg);
str printRef;
void printSignature(stream *fd, Symbol s, int flg);
void printStack(stream *f, MalBlkPtr mb, MalStkPtr s);
str prodRef;
void profilerEvent(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, int start);
void profilerGetCPUStat(lng *user, lng *nice, lng *sys, lng *idle, lng *iowait);
void profilerHeartbeatEvent(char *alter);
str profilerRef;
str projectRef;
str projectdeltaRef;
str projectionRef;
str projectionpathRef;
InstrPtr pushArgument(MalBlkPtr mb, InstrPtr p, int varid);
InstrPtr pushArgumentId(MalBlkPtr mb, InstrPtr p, const char *name);
InstrPtr pushBit(MalBlkPtr mb, InstrPtr q, bit val);
InstrPtr pushBte(MalBlkPtr mb, InstrPtr q, bte val);
InstrPtr pushDbl(MalBlkPtr mb, InstrPtr q, dbl val);
InstrPtr pushEmptyBAT(MalBlkPtr mb, InstrPtr q, int tpe);
InstrPtr pushEndInstruction(MalBlkPtr mb);
InstrPtr pushFlt(MalBlkPtr mb, InstrPtr q, flt val);
InstrPtr pushHge(MalBlkPtr mb, InstrPtr q, hge val);
void pushInstruction(MalBlkPtr mb, InstrPtr p);
InstrPtr pushInt(MalBlkPtr mb, InstrPtr q, int val);
InstrPtr pushLng(MalBlkPtr mb, InstrPtr q, lng val);
InstrPtr pushNil(MalBlkPtr mb, InstrPtr q, int tpe);
InstrPtr pushNilType(MalBlkPtr mb, InstrPtr q, char *tpe);
InstrPtr pushOid(MalBlkPtr mb, InstrPtr q, oid val);
InstrPtr pushReturn(MalBlkPtr mb, InstrPtr p, int varid);
InstrPtr pushSht(MalBlkPtr mb, InstrPtr q, sht val);
InstrPtr pushStr(MalBlkPtr mb, InstrPtr q, const char *val);
InstrPtr pushType(MalBlkPtr mb, InstrPtr q, int tpe);
InstrPtr pushValue(MalBlkPtr mb, InstrPtr q, ValPtr cst);
InstrPtr pushVoid(MalBlkPtr mb, InstrPtr q);
InstrPtr pushZero(MalBlkPtr mb, InstrPtr q, int tpe);
str putName(const char *nme);
str putNameLen(const char *nme, size_t len);
str putRef;
str pyapi3Ref;
str pyapi3mapRef;
lng qtop;
str queryRef;
str querylogRef;
str raiseRef;
str rangejoinRef;
str rankRef;
str rapiRef;
MalStkPtr reallocGlobalStack(MalStkPtr s, int cnt);
str reconnectRef;
str reenterMAL(Client cntxt, MalBlkPtr mb, int startpc, int stoppc, MalStkPtr stk);
str refineRef;
str registerRef;
str register_supervisorRef;
str releaseRef;
str remapRef;
str remoteRef;
void removeInstruction(MalBlkPtr mb, InstrPtr p);
void removeInstructionBlock(MalBlkPtr mb, int pc, int cnt);
str rename_columnRef;
str rename_schemaRef;
str rename_tableRef;
str rename_userRef;
str replaceRef;
str replicatorRef;
void resetMalBlk(MalBlkPtr mb, int stop);
void resetMalBlkAndFreeInstructions(MalBlkPtr mb, int stop);
void resetScenario(Client c);
int resizeMalBlk(MalBlkPtr mb, int elements);
int resolveType(int dsttype, int srctype);
str resultSetRef;
str reuseRef;
str revokeRef;
str revoke_functionRef;
str revoke_rolesRef;
str rollbackRef;
str row_numberRef;
str rpcRef;
str rsColumnRef;
str runMAL(Client c, MalBlkPtr mb, MalBlkPtr mbcaller, MalStkPtr env);
str runMALDebugger(Client cntxt, MalBlkPtr mb);
str runMALdataflow(Client cntxt, MalBlkPtr mb, int startpc, int stoppc, MalStkPtr stk);
str runMALsequence(Client cntxt, MalBlkPtr mb, int startpc, int stoppc, MalStkPtr stk, MalStkPtr env, InstrPtr pcicaller);
str runScenario(Client c, int once);
void runtimeProfileBegin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, RuntimeProfile prof);
void runtimeProfileExit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, RuntimeProfile prof);
void runtimeProfileFinish(Client cntxt, MalBlkPtr mb, MalStkPtr stk);
void runtimeProfileInit(Client cntxt, MalBlkPtr mb, MalStkPtr stk);
int safetyBarrier(InstrPtr p, InstrPtr q);
str sampleRef;
str schedulerRef;
str selectNotNilRef;
str selectRef;
str semaRef;
str semijoinRef;
str seriesRef;
str setAccessRef;
void setArgType(MalBlkPtr mb, InstrPtr p, int i, int tpe);
InstrPtr setArgument(MalBlkPtr mb, InstrPtr p, int idx, int varid);
void setHeartbeat(int delay);
void setPolymorphic(InstrPtr p, int tpe, int force);
void setReturnArgument(InstrPtr p, int varid);
str setScenario(Client c, str nme);
str setVariableRef;
void setVariableScope(MalBlkPtr mb);
void setVariableType(MalBlkPtr mb, const int idx, malType type);
str setWriteModeRef;
void setprofilerlimit(int limit);
void showAllScenarios(stream *f);
void showCurrentScenario(void);
void showMalBlkHistory(stream *out, MalBlkPtr mb);
void showOptimizerHistory(void);
void showOptimizerStep(str fnme, int i, int flg);
void showScenario(stream *f, Scenario s);
void showScenarioByName(stream *f, str s);
str shutdownFactory(Client cntxt, MalBlkPtr mb);
str shutdownFactoryByName(Client cntxt, Module m, str nme);
str singleRef;
str sinkRef;
void slash_2_dir_sep(str fname);
str sliceRef;
str sortRef;
str sortReverseRef;
str soundex_impl(str *res, str *Name);
void sqlProfilerEvent(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str sqlRef;
str sqlcatalogRef;
str startProfiler(Client cntxt);
str startRef;
str startTrace(Client cntxt);
str starttraceRef;
str stopProfiler(Client cntxt);
str stopTrace(Client cntxt);
str stoptraceRef;
void strAfterCall(ValPtr v, ValPtr bak);
void strBeforeCall(ValPtr v, ValPtr bak);
str strEpilogue(void *ret);
str strPrelude(void *ret);
str strRef;
str streamsRef;
str stringdiff_impl(int *res, str *s1, str *s2);
str subavgRef;
str subcountRef;
str subdeltaRef;
str subdiffRef;
str subeval_aggrRef;
str subgroupRef;
str subgroupdoneRef;
str subinterRef;
str submaxRef;
str submedianRef;
str subminRef;
str subprodRef;
str subsliceRef;
str subsumRef;
str subuniformRef;
str sumRef;
str takeOid(oid id, str *val);
str takeRef;
str thetajoinRef;
str thetaselectRef;
str tidRef;
str timestampRef;
void traceFunction(component_t comp, MalBlkPtr mb, MalStkPtr stk, int flg);
void traceInstruction(component_t comp, MalBlkPtr mb, MalStkPtr stk, InstrPtr p, int flg);
str transactionRef;
str transaction_abortRef;
str transaction_beginRef;
str transaction_commitRef;
str transaction_releaseRef;
str transaction_rollbackRef;
void trimMalVariables(MalBlkPtr mb, MalStkPtr stk);
void trimMalVariables_(MalBlkPtr mb, MalStkPtr glb);
void typeChecker(Module scope, MalBlkPtr mb, InstrPtr p, int p_idx, int silent);
str unescape_str(str *retval, str s);
str uniqueRef;
str unlockRef;
str unpackRef;
str unpinRef;
str updateRef;
void updateScenario(str scen, str nme, MALfcn fcn);
Module userModule(void);
str userRef;
str vectorRef;
str window_boundRef;
str wlcRef;
int wlc_batches;
int wlc_beat;
char wlc_dir[FILENAME_MAX];
lng wlc_id;
MT_Lock wlc_lock;
int wlc_state;
lng wlc_tag;
char wlc_write[26];
str wlrRef;
Workingset workingset[THREADS];
str zero_or_oneRef;

# stream
stream *block_stream(stream *s);
stream *block_stream2(stream *s, size_t bufsiz, compression_method comp);
buffer bs2_buffer(stream *s);
int bs2_resizebuf(stream *ss, size_t bufsiz);
void bs2_setpos(stream *ss, size_t pos);
stream *bs_stream(stream *s);
bstream *bstream_create(stream *rs, size_t chunk_size);
void bstream_destroy(bstream *s);
ssize_t bstream_next(bstream *s);
ssize_t bstream_read(bstream *s, size_t size);
buffer *buffer_create(size_t size);
void buffer_destroy(buffer *b);
char *buffer_get_buf(buffer *b);
void buffer_init(buffer *restrict b, char *restrict buf, size_t size);
stream *buffer_rastream(buffer *restrict b, const char *restrict name);
stream *buffer_wastream(buffer *restrict b, const char *restrict name);
stream *callback_stream(void *restrict priv, ssize_t (*read)(void *restrict priv, void *restrict buf, size_t elmsize, size_t cnt), void (*close)(void *priv), void (*destroy)(void *priv), const char *restrict name);
void close_stream(stream *s);
stream *file_rastream(FILE *restrict fp, const char *restrict name);
stream *file_rstream(FILE *restrict fp, const char *restrict name);
stream *file_wastream(FILE *restrict fp, const char *restrict name);
stream *file_wstream(FILE *restrict fp, const char *restrict name);
FILE *getFile(stream *s);
int getFileNo(stream *s);
size_t getFileSize(stream *s);
stream *iconv_rstream(stream *restrict ss, const char *restrict charset, const char *restrict name);
stream *iconv_wstream(stream *restrict ss, const char *restrict charset, const char *restrict name);
bool isa_block_stream(const stream *s);
void mnstr_clearerr(stream *s);
void mnstr_close(stream *s);
void mnstr_destroy(stream *s);
int mnstr_errnr(const stream *s);
char *mnstr_error(const stream *s);
int mnstr_fgetpos(stream *restrict s, fpos_t *restrict p);
int mnstr_flush(stream *s);
int mnstr_fsetpos(stream *restrict s, fpos_t *restrict p);
int mnstr_fsync(stream *s);
buffer *mnstr_get_buffer(stream *s);
bool mnstr_get_swapbytes(const stream *s);
int mnstr_init(void);
int mnstr_isalive(const stream *s);
bool mnstr_isbinary(const stream *s);
char *mnstr_name(const stream *s);
int mnstr_printf(stream *restrict s, _In_z_ _Printf_format_string_ const char *restrict format, ...) __attribute__((__format__(__printf__, 2, 3)));
ssize_t mnstr_read(stream *restrict s, void *restrict buf, size_t elmsize, size_t cnt);
int mnstr_readBte(stream *restrict s, int8_t *restrict val);
int mnstr_readBteArray(stream *restrict s, int8_t *restrict val, size_t cnt);
int mnstr_readChr(stream *restrict s, char *restrict val);
int mnstr_readHge(stream *restrict s, hge *restrict val);
int mnstr_readHgeArray(stream *restrict s, hge *restrict val, size_t cnt);
int mnstr_readInt(stream *restrict s, int *restrict val);
int mnstr_readIntArray(stream *restrict s, int *restrict val, size_t cnt);
int mnstr_readLng(stream *restrict s, int64_t *restrict val);
int mnstr_readLngArray(stream *restrict s, int64_t *restrict val, size_t cnt);
int mnstr_readSht(stream *restrict s, int16_t *restrict val);
int mnstr_readShtArray(stream *restrict s, int16_t *restrict val, size_t cnt);
int mnstr_readStr(stream *restrict s, char *restrict val);
ssize_t mnstr_read_block(stream *restrict s, void *restrict buf, size_t elmsize, size_t cnt);
ssize_t mnstr_readline(stream *restrict s, void *restrict buf, size_t maxcnt);
void mnstr_set_bigendian(stream *s, bool bigendian);
void mnstr_settimeout(stream *s, unsigned int ms, bool (*func)(void));
ssize_t mnstr_write(stream *restrict s, const void *restrict buf, size_t elmsize, size_t cnt);
int mnstr_writeBte(stream *s, int8_t val);
int mnstr_writeBteArray(stream *restrict s, const int8_t *restrict val, size_t cnt);
int mnstr_writeChr(stream *s, char val);
int mnstr_writeDbl(stream *s, double val);
int mnstr_writeFlt(stream *s, float val);
int mnstr_writeHge(stream *s, hge val);
int mnstr_writeHgeArray(stream *restrict s, const hge *restrict val, size_t cnt);
int mnstr_writeInt(stream *s, int val);
int mnstr_writeIntArray(stream *restrict s, const int *restrict val, size_t cnt);
int mnstr_writeLng(stream *s, int64_t val);
int mnstr_writeLngArray(stream *restrict s, const int64_t *restrict val, size_t cnt);
int mnstr_writeSht(stream *s, int16_t val);
int mnstr_writeShtArray(stream *restrict s, const int16_t *restrict val, size_t cnt);
int mnstr_writeStr(stream *restrict s, const char *restrict val);
stream *open_rastream(const char *filename);
stream *open_rstream(const char *filename);
stream *open_urlstream(const char *url);
stream *open_wastream(const char *filename);
stream *open_wstream(const char *filename);
stream *socket_rstream(SOCKET socket, const char *name);
stream *socket_wstream(SOCKET socket, const char *name);
stream *stream_blackhole_create(void);
stream *stream_fwf_create(stream *restrict s, size_t num_fields, size_t *restrict widths, char filler);


# 21:41:06 >  
# 21:41:06 >  "Done."
# 21:41:06 >  

