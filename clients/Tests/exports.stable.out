# gdk
int ALIGNsynced(BAT *b1, BAT *b2);
int ATOMallocate(const char *nme);
void *ATOMdup(int id, const void *val);
uint8_t ATOMelmshift(int sz) __attribute__((__const__));
char *ATOMformat(int id, const void *val);
int ATOMindex(const char *nme);
size_t ATOMlen(int id, const void *v);
str ATOMname(int id);
void *ATOMnil(int id) __attribute__((__malloc__));
int ATOMprint(int id, const void *val, stream *fd);
BAT *BATall_grp(BAT *l, BAT *g, BAT *e, BAT *s);
BAT *BATallnotequal_grp(BAT *l, BAT *r, BAT *g, BAT *e, BAT *s);
BAT *BATallnotequal_grp2(BAT *l, BAT *r, BAT *rid, BAT *g, BAT *e, BAT *s);
BAT *BATanyequal_grp(BAT *l, BAT *r, BAT *g, BAT *e, BAT *s);
BAT *BATanyequal_grp2(BAT *l, BAT *r, BAT *rid, BAT *g, BAT *e, BAT *s);
gdk_return BATappend(BAT *b, BAT *n, BAT *s, bool force) __attribute__((__warn_unused_result__));
void BATassertProps(BAT *b);
atomDesc BATatoms[MAXATOMS];
BAT *BATattach(int tt, const char *heapfile, role_t role);
gdk_return BATbandjoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, const void *c1, const void *c2, bool li, bool hi, BUN estimate) __attribute__((__warn_unused_result__));
BAT *BATcalcabsolute(BAT *b, BAT *s);
BAT *BATcalcadd(BAT *b1, BAT *b2, BAT *s1, BAT *s2, int tp, bool abort_on_error);
BAT *BATcalcaddcst(BAT *b, const ValRecord *v, BAT *s, int tp, bool abort_on_error);
BAT *BATcalcand(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalcandcst(BAT *b, const ValRecord *v, BAT *s);
gdk_return BATcalcavg(BAT *b, BAT *s, dbl *avg, BUN *vals, int scale);
BAT *BATcalcbetween(BAT *b, BAT *lo, BAT *hi, BAT *s, BAT *slo, BAT *shi, bool symmetric, bool linc, bool hinc, bool nils_false, bool anti);
BAT *BATcalcbetweenbatcst(BAT *b, BAT *lo, const ValRecord *hi, BAT *s, BAT *slo, bool symmetric, bool linc, bool hinc, bool nils_false, bool anti);
BAT *BATcalcbetweencstbat(BAT *b, const ValRecord *lo, BAT *hi, BAT *s, BAT *shi, bool symmetric, bool linc, bool hinc, bool nils_false, bool anti);
BAT *BATcalcbetweencstcst(BAT *b, const ValRecord *lo, const ValRecord *hi, BAT *s, bool symmetric, bool linc, bool hinc, bool nils_false, bool anti);
BAT *BATcalccmp(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalccmpcst(BAT *b, const ValRecord *v, BAT *s);
dbl BATcalccorrelation(BAT *b1, BAT *b2);
dbl BATcalccovariance_population(BAT *b1, BAT *b2);
dbl BATcalccovariance_sample(BAT *b1, BAT *b2);
BAT *BATcalccstadd(const ValRecord *v, BAT *b, BAT *s, int tp, bool abort_on_error);
BAT *BATcalccstand(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstcmp(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstdiv(const ValRecord *v, BAT *b, BAT *s, int tp, bool abort_on_error);
BAT *BATcalccsteq(const ValRecord *v, BAT *b, BAT *s, bool nil_matches);
BAT *BATcalccstge(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstgt(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstle(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstlsh(const ValRecord *v, BAT *b, BAT *s, bool abort_on_error);
BAT *BATcalccstlt(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstmax(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstmax_no_nil(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstmin(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstmin_no_nil(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstmod(const ValRecord *v, BAT *b, BAT *s, int tp, bool abort_on_error);
BAT *BATcalccstmul(const ValRecord *v, BAT *b, BAT *s, int tp, bool abort_on_error);
BAT *BATcalccstne(const ValRecord *v, BAT *b, BAT *s, bool nil_matches);
BAT *BATcalccstor(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstrsh(const ValRecord *v, BAT *b, BAT *s, bool abort_on_error);
BAT *BATcalccstsub(const ValRecord *v, BAT *b, BAT *s, int tp, bool abort_on_error);
BAT *BATcalccstxor(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalcdecr(BAT *b, BAT *s, bool abort_on_error);
BAT *BATcalcdiv(BAT *b1, BAT *b2, BAT *s1, BAT *s2, int tp, bool abort_on_error);
BAT *BATcalcdivcst(BAT *b, const ValRecord *v, BAT *s, int tp, bool abort_on_error);
BAT *BATcalceq(BAT *b1, BAT *b2, BAT *s1, BAT *s2, bool nil_matches);
BAT *BATcalceqcst(BAT *b, const ValRecord *v, BAT *s, bool nil_matches);
BAT *BATcalcge(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalcgecst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcgt(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalcgtcst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcifthencstelse(BAT *b, const ValRecord *c1, BAT *b2);
BAT *BATcalcifthencstelsecst(BAT *b, const ValRecord *c1, const ValRecord *c2);
BAT *BATcalcifthenelse(BAT *b, BAT *b1, BAT *b2);
BAT *BATcalcifthenelsecst(BAT *b, BAT *b1, const ValRecord *c2);
BAT *BATcalcincr(BAT *b, BAT *s, bool abort_on_error);
BAT *BATcalcisnil(BAT *b, BAT *s);
BAT *BATcalcisnotnil(BAT *b, BAT *s);
BAT *BATcalciszero(BAT *b, BAT *s);
BAT *BATcalcle(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalclecst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalclsh(BAT *b1, BAT *b2, BAT *s1, BAT *s2, bool abort_on_error);
BAT *BATcalclshcst(BAT *b, const ValRecord *v, BAT *s, bool abort_on_error);
BAT *BATcalclt(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalcltcst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcmax(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalcmax_no_nil(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalcmaxcst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcmaxcst_no_nil(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcmin(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalcmin_no_nil(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalcmincst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcmincst_no_nil(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcmod(BAT *b1, BAT *b2, BAT *s1, BAT *s2, int tp, bool abort_on_error);
BAT *BATcalcmodcst(BAT *b, const ValRecord *v, BAT *s, int tp, bool abort_on_error);
BAT *BATcalcmul(BAT *b1, BAT *b2, BAT *s1, BAT *s2, int tp, bool abort_on_error);
BAT *BATcalcmulcst(BAT *b, const ValRecord *v, BAT *s, int tp, bool abort_on_error);
BAT *BATcalcne(BAT *b1, BAT *b2, BAT *s1, BAT *s2, bool nil_matches);
BAT *BATcalcnecst(BAT *b, const ValRecord *v, BAT *s, bool nil_matches);
BAT *BATcalcnegate(BAT *b, BAT *s);
BAT *BATcalcnot(BAT *b, BAT *s);
BAT *BATcalcor(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalcorcst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcrsh(BAT *b1, BAT *b2, BAT *s1, BAT *s2, bool abort_on_error);
BAT *BATcalcrshcst(BAT *b, const ValRecord *v, BAT *s, bool abort_on_error);
BAT *BATcalcsign(BAT *b, BAT *s);
dbl BATcalcstdev_population(dbl *avgp, BAT *b);
dbl BATcalcstdev_sample(dbl *avgp, BAT *b);
BAT *BATcalcsub(BAT *b1, BAT *b2, BAT *s1, BAT *s2, int tp, bool abort_on_error);
BAT *BATcalcsubcst(BAT *b, const ValRecord *v, BAT *s, int tp, bool abort_on_error);
dbl BATcalcvariance_population(dbl *avgp, BAT *b);
dbl BATcalcvariance_sample(dbl *avgp, BAT *b);
BAT *BATcalcxor(BAT *b1, BAT *b2, BAT *s1, BAT *s2);
BAT *BATcalcxorcst(BAT *b, const ValRecord *v, BAT *s);
bool BATcheckorderidx(BAT *b);
gdk_return BATclear(BAT *b, bool force);
void BATcommit(BAT *b, BUN size);
BAT *BATconstant(oid hseq, int tt, const void *val, BUN cnt, role_t role);
BAT *BATconvert(BAT *b, BAT *s, int tp, bool abort_on_error, uint8_t scale1, uint8_t scale2, uint8_t precision);
BUN BATcount_no_nil(BAT *b, BAT *s);
gdk_return BATdel(BAT *b, BAT *d) __attribute__((__warn_unused_result__));
BAT *BATdense(oid hseq, oid tseq, BUN cnt) __attribute__((__warn_unused_result__));
BAT *BATdiff(BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, bool not_in, BUN estimate);
BAT *BATdiffcand(BAT *a, BAT *b);
BAT *BATdiffcand(BAT *a, BAT *b);
gdk_return BATextend(BAT *b, BUN newcap) __attribute__((__warn_unused_result__));
void BATfakeCommit(BAT *b);
gdk_return BATfirstn(BAT **topn, BAT **gids, BAT *b, BAT *cands, BAT *grps, BUN n, bool asc, bool nilslast, bool distinct) __attribute__((__warn_unused_result__));
restrict_t BATgetaccess(BAT *b);
ValPtr BATgetprop(BAT *b, enum prop_t idx);
gdk_return BATgroup(BAT **groups, BAT **extents, BAT **histo, BAT *b, BAT *s, BAT *g, BAT *e, BAT *h) __attribute__((__warn_unused_result__));
const char *BATgroupaggrinit(BAT *b, BAT *g, BAT *e, BAT *s, oid *minp, oid *maxp, BUN *ngrpp, struct canditer *ci, BUN *ncand);
gdk_return BATgroupavg(BAT **bnp, BAT **cntsp, BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error, int scale);
gdk_return BATgroupavg3(BAT **avgp, BAT **remp, BAT **cntp, BAT *b, BAT *g, BAT *e, BAT *s, bool skip_nils);
BAT *BATgroupavg3combine(BAT *avg, BAT *rem, BAT *cnt, BAT *g, BAT *e, bool skip_nils);
BAT *BATgroupcorrelation(BAT *b1, BAT *b2, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupcount(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupcovariance_population(BAT *b1, BAT *b2, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupcovariance_sample(BAT *b1, BAT *b2, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupmax(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupmedian(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupmedian_avg(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupmin(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupprod(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupquantile(BAT *b, BAT *g, BAT *e, BAT *s, int tp, double quantile, bool skip_nils, bool abort_on_error);
BAT *BATgroupquantile_avg(BAT *b, BAT *g, BAT *e, BAT *s, int tp, double quantile, bool skip_nils, bool abort_on_error);
BAT *BATgroupsize(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupstdev_population(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupstdev_sample(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupstr_group_concat(BAT *b, BAT *g, BAT *e, BAT *s, BAT *sep, bool skip_nils, bool abort_on_error, const char *restrict separator);
BAT *BATgroupsum(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupvariance_population(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BAT *BATgroupvariance_sample(BAT *b, BAT *g, BAT *e, BAT *s, int tp, bool skip_nils, bool abort_on_error);
BUN BATgrows(BAT *b);
BUN BATguess_uniques(BAT *b, struct canditer *ci);
gdk_return BAThash(BAT *b);
void BAThseqbase(BAT *b, oid o);
gdk_return BATimprints(BAT *b);
BAT *BATintersect(BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, bool max_one, BUN estimate);
BAT *BATintersectcand(BAT *a, BAT *b);
BAT *BATintersectcand(BAT *a, BAT *b);
gdk_return BATjoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, BUN estimate) __attribute__((__warn_unused_result__));
gdk_return BATkey(BAT *b, bool onoff);
bool BATkeyed(BAT *b);
gdk_return BATleftjoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, BUN estimate) __attribute__((__warn_unused_result__));
BAT *BATmaskedcands(oid hseq, BUN nr, BAT *masked, bool selected);
void *BATmax(BAT *b, void *aggr);
void *BATmax_skipnil(BAT *b, void *aggr, bit skipnil);
BAT *BATmergecand(BAT *a, BAT *b);
BAT *BATmergecand(BAT *a, BAT *b);
void *BATmin(BAT *b, void *aggr);
void *BATmin_skipnil(BAT *b, void *aggr, bit skipnil);
gdk_return BATmode(BAT *b, bool transient);
void BATmsync(BAT *b);
BAT *BATnegcands(BUN nr, BAT *odels);
BAT *BATnil_grp(BAT *l, BAT *g, BAT *e, BAT *s);
bool BATordered(BAT *b);
bool BATordered_rev(BAT *b);
gdk_return BATorderidx(BAT *b, bool stable);
gdk_return BATouterjoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, bool match_one, BUN estimate) __attribute__((__warn_unused_result__));
gdk_return BATprint(stream *s, BAT *b);
gdk_return BATprintcolumns(stream *s, int argc, BAT *argv[]);
gdk_return BATprod(void *res, int tp, BAT *b, BAT *s, bool skip_nils, bool abort_on_error, bool nil_if_empty);
BAT *BATproject(BAT *restrict l, BAT *restrict r);
BAT *BATproject2(BAT *restrict l, BAT *restrict r1, BAT *restrict r2);
BAT *BATprojectchain(BAT **bats);
gdk_return BATrangejoin(BAT **r1p, BAT **r2p, BAT *l, BAT *rl, BAT *rh, BAT *sl, BAT *sr, bool li, bool hi, bool anti, bool symmetric, BUN estimate) __attribute__((__warn_unused_result__));
gdk_return BATreplace(BAT *b, BAT *p, BAT *n, bool force) __attribute__((__warn_unused_result__));
gdk_return BATroles(BAT *b, const char *tnme);
BAT *BATsample(BAT *b, BUN n);
BAT *BATsample_with_seed(BAT *b, BUN n, uint64_t seed);
gdk_return BATsave(BAT *b) __attribute__((__warn_unused_result__));
BAT *BATselect(BAT *b, BAT *s, const void *tl, const void *th, bool li, bool hi, bool anti);
gdk_return BATsemijoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, bool nil_matches, bool max_one, BUN estimate) __attribute__((__warn_unused_result__));
gdk_return BATsetaccess(BAT *b, restrict_t mode);
void BATsetcapacity(BAT *b, BUN cnt);
void BATsetcount(BAT *b, BUN cnt);
BAT *BATslice(BAT *b, BUN low, BUN high);
gdk_return BATsort(BAT **sorted, BAT **order, BAT **groups, BAT *b, BAT *o, BAT *g, bool reverse, bool nilslast, bool stable) __attribute__((__warn_unused_result__));
gdk_return BATstr_group_concat(ValPtr res, BAT *b, BAT *s, BAT *sep, bool skip_nils, bool abort_on_error, bool nil_if_empty, const char *restrict separator);
gdk_return BATsubcross(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, bool max_one) __attribute__((__warn_unused_result__));
BAT *BATsubexist(BAT *l, BAT *g, BAT *e, BAT *s);
BAT *BATsubnot_exist(BAT *l, BAT *g, BAT *e, BAT *s);
gdk_return BATsum(void *res, int tp, BAT *b, BAT *s, bool skip_nils, bool abort_on_error, bool nil_if_empty);
gdk_return BATthetajoin(BAT **r1p, BAT **r2p, BAT *l, BAT *r, BAT *sl, BAT *sr, int op, bool nil_matches, BUN estimate) __attribute__((__warn_unused_result__));
BAT *BATthetaselect(BAT *b, BAT *s, const void *val, const char *op);
void BATtseqbase(BAT *b, oid o);
void BATundo(BAT *b);
BAT *BATunique(BAT *b, BAT *s);
BAT *BATunmask(BAT *b);
BBPrec *BBP[N_BBPINIT];
gdk_return BBPaddfarm(const char *dirname, uint32_t rolemask, bool logerror);
void BBPclear(bat bid);
BAT *BBPdescriptor(bat b);
int BBPfix(bat b);
bat BBPindex(const char *nme);
void BBPkeepref(bat i);
bat BBPlimit;
void BBPlock(void);
BAT *BBPquickdesc(bat b, bool delaccess);
int BBPreclaim(BAT *b);
int BBPrelease(bat b);
int BBPrename(bat bid, const char *nme);
int BBPretain(bat b);
gdk_return BBPsave(BAT *b);
void BBPshare(bat b);
gdk_return BBPsync(int cnt, bat *restrict subcommit, BUN *restrict sizes, lng logno, lng transid);
int BBPunfix(bat b);
void BBPunlock(void);
gdk_return BUNappend(BAT *b, const void *right, bool force) __attribute__((__warn_unused_result__));
gdk_return BUNappendmulti(BAT *b, const void *values, BUN count, bool force) __attribute__((__warn_unused_result__));
gdk_return BUNdelete(BAT *b, oid o) __attribute__((__warn_unused_result__));
BUN BUNfnd(BAT *b, const void *right);
gdk_return BUNreplace(BAT *b, oid left, const void *right, bool force) __attribute__((__warn_unused_result__));
gdk_return BUNreplacemulti(BAT *b, const oid *positions, const void *values, BUN count, bool force) __attribute__((__warn_unused_result__));
gdk_return BUNreplacemultiincr(BAT *b, oid position, const void *values, BUN count, bool force) __attribute__((__warn_unused_result__));
BAT *COLcopy(BAT *b, int tt, bool writable, role_t role);
BAT *COLnew(oid hseq, int tltype, BUN capacity, role_t role) __attribute__((__warn_unused_result__));
size_t GDK_mem_maxsize;
size_t GDK_vm_maxsize;
gdk_return GDKanalytical_correlation(BAT *r, BAT *p, BAT *o, BAT *b1, BAT *b2, BAT *s, BAT *e, int tpe, int frame_type);
gdk_return GDKanalytical_covariance_pop(BAT *r, BAT *p, BAT *o, BAT *b1, BAT *b2, BAT *s, BAT *e, int tpe, int frame_type);
gdk_return GDKanalytical_covariance_samp(BAT *r, BAT *p, BAT *o, BAT *b1, BAT *b2, BAT *s, BAT *e, int tpe, int frame_type);
gdk_return GDKanalytical_stddev_pop(BAT *r, BAT *p, BAT *o, BAT *b, BAT *s, BAT *e, int tpe, int frame_type);
gdk_return GDKanalytical_stddev_samp(BAT *r, BAT *p, BAT *o, BAT *b, BAT *s, BAT *e, int tpe, int frame_type);
gdk_return GDKanalytical_str_group_concat(BAT *r, BAT *p, BAT *o, BAT *b, BAT *sep, BAT *s, BAT *e, const char *restrict separator, int frame_type);
gdk_return GDKanalytical_variance_pop(BAT *r, BAT *p, BAT *o, BAT *b, BAT *s, BAT *e, int tpe, int frame_type);
gdk_return GDKanalytical_variance_samp(BAT *r, BAT *p, BAT *o, BAT *b, BAT *s, BAT *e, int tpe, int frame_type);
gdk_return GDKanalyticalavg(BAT *r, BAT *p, BAT *o, BAT *b, BAT *s, BAT *e, int tpe, int frame_type);
gdk_return GDKanalyticalavginteger(BAT *r, BAT *p, BAT *o, BAT *b, BAT *s, BAT *e, int tpe, int frame_type);
gdk_return GDKanalyticalcount(BAT *r, BAT *p, BAT *o, BAT *b, BAT *s, BAT *e, bit ignore_nils, int tpe, int frame_type);
gdk_return GDKanalyticaldiff(BAT *r, BAT *b, BAT *p, const bit *restrict npbit, int tpe);
gdk_return GDKanalyticalfirst(BAT *r, BAT *b, BAT *s, BAT *e, int tpe);
gdk_return GDKanalyticallag(BAT *r, BAT *b, BAT *p, BUN lag, const void *restrict default_value, int tpe);
gdk_return GDKanalyticallast(BAT *r, BAT *b, BAT *s, BAT *e, int tpe);
gdk_return GDKanalyticallead(BAT *r, BAT *b, BAT *p, BUN lead, const void *restrict default_value, int tpe);
gdk_return GDKanalyticalmax(BAT *r, BAT *p, BAT *o, BAT *b, BAT *s, BAT *e, int tpe, int frame_type);
gdk_return GDKanalyticalmin(BAT *r, BAT *p, BAT *o, BAT *b, BAT *s, BAT *e, int tpe, int frame_type);
gdk_return GDKanalyticalnthvalue(BAT *r, BAT *b, BAT *s, BAT *e, BAT *l, lng *nth, int tp1);
gdk_return GDKanalyticalntile(BAT *r, BAT *b, BAT *p, BAT *n, int tpe, const void *restrict ntile);
gdk_return GDKanalyticalprod(BAT *r, BAT *p, BAT *o, BAT *b, BAT *s, BAT *e, int tp1, int tp2, int frame_type);
gdk_return GDKanalyticalsum(BAT *r, BAT *p, BAT *o, BAT *b, BAT *s, BAT *e, int tp1, int tp2, int frame_type);
gdk_return GDKanalyticalwindowbounds(BAT *r, BAT *b, BAT *p, BAT *l, const void *restrict bound, int tp1, int tp2, int unit, bool preceding, oid first_half);
int GDKatomcnt;
size_t GDKbatcopy(char *dest, BAT *bat, str colname);
size_t GDKbatcopysize(BAT *bat, str colname);
size_t GDKbatread(char *src, BAT **bat, str *colname);
gdk_return GDKchangesemval(int sem_id, int number, int change);
gdk_return GDKchangesemval_timeout(int sem_id, int number, int change, int timeout_mseconds, bool *succeed);
void GDKclrerr(void);
gdk_return GDKcopyenv(BAT **key, BAT **val, bool writable);
gdk_return GDKcreatedir(const char *nme);
gdk_return GDKcreatesem(int id, int count, int *semid);
int GDKdebug;
bool GDKembedded(void);
void GDKexit(int status);
bool GDKexiting(void);
_Noreturn void GDKfatal(_In_z_ _Printf_format_string_ const char *format, ...) __attribute__((__format__(__printf__, 1, 2)));
jmp_buf GDKfataljump;
bit GDKfataljumpenable;
str GDKfatalmsg;
char *GDKfilepath(int farmid, const char *dir, const char *nme, const char *ext);
void GDKfree(void *blk);
int GDKgetdebug(void);
const char *GDKgetenv(const char *name);
int GDKgetenv_int(const char *name, int def);
bool GDKgetenv_istext(const char *name, const char *text);
bool GDKgetenv_istrue(const char *name);
bool GDKgetenv_isyes(const char *name);
gdk_return GDKgetsem(int sem_id, int count, int *semid);
gdk_return GDKgetsemval(int sem_id, int number, int *semval);
gdk_return GDKinit(struct opt *set, int setlen, bool embedded);
void *GDKinitmmap(size_t id, size_t size, size_t *return_size);
bool GDKinmemory(int farmid);
const char *GDKlibversion(void) __attribute__((__const__));
ATOMIC_TYPE GDKlockcnt;
ATOMIC_TYPE GDKlockcontentioncnt;
MT_Lock *volatile GDKlocklist;
ATOMIC_FLAG GDKlocklistlock;
ATOMIC_TYPE GDKlocksleepcnt;
void GDKlockstatistics(int);
void *GDKmalloc(size_t size) __attribute__((__malloc__)) __attribute__((__alloc_size__(1))) __attribute__((__warn_unused_result__));
size_t GDKmallocated(const void *s);
size_t GDKmem_cursize(void);
gdk_return GDKmergeidx(BAT *b, BAT **a, int n_ar);
void *GDKmmap(const char *path, int mode, size_t len) __attribute__((__warn_unused_result__));
gdk_return GDKmmapfile(str buffer, size_t max, size_t id);
int GDKms(void);
gdk_return GDKmunmap(void *addr, size_t len);
int GDKnr_threads;
void GDKprepareExit(void);
void GDKqsort(void *restrict h, void *restrict t, const void *restrict base, size_t n, int hs, int ts, int tpe, bool reverse, bool nilslast);
void *GDKrealloc(void *pold, size_t size) __attribute__((__alloc_size__(2))) __attribute__((__warn_unused_result__));
gdk_return GDKrebuild_segment_tree(oid ncount, oid data_size, void **segment_tree, oid *tree_capacity, oid **levels_offset, oid *nlevels);
gdk_return GDKreleasemmap(void *ptr, size_t size, size_t id);
gdk_return GDKreleasesem(int sem_id);
void GDKreset(int status);
void GDKsetdebug(int debug);
gdk_return GDKsetenv(const char *name, const char *value);
void GDKsetmallocsuccesscount(lng count);
ssize_t GDKstrFromStr(unsigned char *restrict dst, const unsigned char *restrict src, ssize_t len);
str GDKstrdup(const char *s) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));
str GDKstrndup(const char *s, size_t n) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));
gdk_return GDKtracer_fill_comp_info(BAT *id, BAT *component, BAT *log_level);
gdk_return GDKtracer_flush_buffer(void);
const char *GDKtracer_get_component_level(const char *comp);
void GDKtracer_log(const char *file, const char *func, int lineno, log_level_t lvl, component_t comp, const char *syserr, _In_z_ _Printf_format_string_ const char *format, ...) __attribute__((__format__(__printf__, 7, 8)));
void GDKtracer_reinit_basic(int sig);
gdk_return GDKtracer_reset_adapter(void);
gdk_return GDKtracer_reset_component_level(const char *comp);
gdk_return GDKtracer_reset_flush_level(void);
gdk_return GDKtracer_reset_layer_level(const char *layer);
gdk_return GDKtracer_set_adapter(const char *adapter);
gdk_return GDKtracer_set_component_level(const char *comp, const char *lvl);
gdk_return GDKtracer_set_flush_level(const char *lvl);
gdk_return GDKtracer_set_layer_level(const char *layer, const char *lvl);
gdk_return GDKtracer_stop(void);
size_t GDKuniqueid(size_t offset);
gdk_return GDKupgradevarheap(BAT *b, var_t v, BUN cap, bool copyall) __attribute__((__warn_unused_result__));
lng GDKusec(void);
const char *GDKversion(void) __attribute__((__const__));
size_t GDKvm_cursize(void);
void *GDKzalloc(size_t size) __attribute__((__malloc__)) __attribute__((__alloc_size__(1))) __attribute__((__warn_unused_result__));
void HASHdestroy(BAT *b);
gdk_return HASHgrowbucket(BAT *b);
BUN HASHlist(Hash *h, BUN i);
BUN HASHprobe(const Hash *h, const void *v);
void HEAP_free(Heap *heap, var_t block);
void HEAP_initialize(Heap *heap, size_t nbytes, size_t nprivate, int alignment);
var_t HEAP_malloc(BAT *b, size_t nbytes);
void HEAPdecref(Heap *h, bool remove);
gdk_return HEAPextend(Heap *h, size_t size, bool mayshare) __attribute__((__warn_unused_result__));
void HEAPincref(Heap *h);
size_t HEAPmemsize(Heap *h);
size_t HEAPvmsize(Heap *h);
void IMPSdestroy(BAT *b);
lng IMPSimprintsize(BAT *b);
int MT_access(const char *pathname, int mode);
int MT_check_nr_cores(void);
int MT_create_thread(MT_Id *t, void (*function)(void *), void *arg, enum MT_thr_detach d, const char *threadname);
void MT_exiting_thread(void);
FILE *MT_fopen(const char *filename, const char *mode);
char *MT_getcwd(char *buffer, size_t size);
MT_Id MT_getpid(void);
size_t MT_getrss(void);
void MT_init(void);
int MT_join_thread(MT_Id t);
int MT_lockf(const char *filename, int mode);
int MT_mkdir(const char *dirname);
int MT_open(const char *filename, int flags);
bool MT_path_absolute(const char *path);
int MT_remove(const char *filename);
int MT_rename(const char *old, const char *new);
int MT_rmdir(const char *dirname);
void MT_sleep_ms(unsigned int ms);
int MT_stat(const char *filename, struct stat *stb);
const char *MT_thread_getalgorithm(void);
void *MT_thread_getdata(void);
const char *MT_thread_getname(void);
bool MT_thread_init(void);
void MT_thread_setalgorithm(const char *algo);
void MT_thread_setdata(void *data);
void MT_thread_setlockwait(MT_Lock *lock);
void MT_thread_setsemawait(MT_Sema *sema);
void MT_thread_setworking(const char *work);
void OIDXdestroy(BAT *b);
ssize_t OIDfromStr(const char *src, size_t *len, oid **dst, bool external);
ssize_t OIDtoStr(str *dst, size_t *len, const oid *src, bool external);
BUN ORDERfnd(BAT *b, const void *v);
BUN ORDERfndfirst(BAT *b, const void *v);
BUN ORDERfndlast(BAT *b, const void *v);
BUN SORTfnd(BAT *b, const void *v);
BUN SORTfndfirst(BAT *b, const void *v);
BUN SORTfndlast(BAT *b, const void *v);
MT_Id THRcreate(void (*f)(void *), void *arg, enum MT_thr_detach d, const char *name);
void *THRdata[THREADDATA];
void THRdel(Thread t);
Thread THRget(int tid);
void *THRgetdata(int);
int THRgettid(void);
int THRhighwater(void);
void THRsetdata(int, void *);
void TMabort(void);
gdk_return TMcommit(void);
gdk_return TMsubcommit(BAT *bl);
gdk_return TMsubcommit_list(bat *restrict subcommit, BUN *restrict sizes, int cnt, lng logno, lng transid);
void VALclear(ValPtr v);
int VALcmp(const ValRecord *p, const ValRecord *q);
void *VALconvert(int typ, ValPtr t);
ValPtr VALcopy(ValPtr dst, const ValRecord *src);
void VALempty(ValPtr v);
char *VALformat(const ValRecord *res);
void *VALget(ValPtr v);
ValPtr VALinit(ValPtr d, int tpe, const void *s);
bool VALisnil(const ValRecord *v);
ValPtr VALset(ValPtr v, int t, void *p);
gdk_return VARcalcabsolute(ValPtr ret, const ValRecord *v);
gdk_return VARcalcadd(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalcand(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcbetween(ValPtr ret, const ValRecord *v, const ValRecord *lo, const ValRecord *hi, bool symmetric, bool linc, bool hinc, bool nils_false, bool anti);
gdk_return VARcalccmp(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcdecr(ValPtr ret, const ValRecord *v, bool abort_on_error);
gdk_return VARcalcdiv(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalceq(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool nil_matches);
gdk_return VARcalcge(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcgt(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcincr(ValPtr ret, const ValRecord *v, bool abort_on_error);
gdk_return VARcalcisnil(ValPtr ret, const ValRecord *v);
gdk_return VARcalcisnotnil(ValPtr ret, const ValRecord *v);
gdk_return VARcalciszero(ValPtr ret, const ValRecord *v);
gdk_return VARcalcle(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalclsh(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalclt(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcmod(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalcmul(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalcne(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool nil_matches);
gdk_return VARcalcnegate(ValPtr ret, const ValRecord *v);
gdk_return VARcalcnot(ValPtr ret, const ValRecord *v);
gdk_return VARcalcor(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARcalcrsh(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalcsign(ValPtr ret, const ValRecord *v);
gdk_return VARcalcsub(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, bool abort_on_error);
gdk_return VARcalcxor(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
gdk_return VARconvert(ValPtr ret, const ValRecord *v, bool abort_on_error, uint8_t scale1, uint8_t scale2, uint8_t precision);
void VIEWbounds(BAT *b, BAT *view, BUN l, BUN h);
BAT *VIEWcreate(oid seq, BAT *b);
size_t _MT_npages;
size_t _MT_pagesize;
const union _dbl_nil_t _dbl_nil_;
const union _flt_nil_t _flt_nil_;
char *asctime_r(const struct tm *restrict, char *restrict);
ssize_t batFromStr(const char *src, size_t *len, bat **dst, bool external);
ssize_t batToStr(str *dst, size_t *len, const bat *src, bool external);
ssize_t bitFromStr(const char *src, size_t *len, bit **dst, bool external);
ssize_t bitToStr(str *dst, size_t *len, const bit *src, bool external);
ssize_t bteFromStr(const char *src, size_t *len, bte **dst, bool external);
ssize_t bteToStr(str *dst, size_t *len, const bte *src, bool external);
const bte bte_nil;
oid canditer_idx(const struct canditer *ci, BUN p);
BUN canditer_init(struct canditer *ci, BAT *b, BAT *s);
oid canditer_last(const struct canditer *ci);
oid canditer_mask_next(const struct canditer *ci, oid o, bool next);
oid canditer_peek(struct canditer *ci);
oid canditer_peekprev(struct canditer *ci);
oid canditer_prev(struct canditer *ci);
void canditer_reset(struct canditer *ci);
BUN canditer_search(const struct canditer *ci, oid o, bool next);
void canditer_setidx(struct canditer *ci, BUN p);
BAT *canditer_slice(const struct canditer *ci, BUN lo, BUN hi);
BAT *canditer_slice2(const struct canditer *ci, BUN lo1, BUN hi1, BUN lo2, BUN hi2);
BAT *canditer_slice2val(const struct canditer *ci, oid lo1, oid hi1, oid lo2, oid hi2);
BAT *canditer_sliceval(const struct canditer *ci, oid lo, oid hi);
int closedir(DIR *dir);
char *ctime_r(const time_t *restrict, char *restrict);
date date_add_day(date dt, int days) __attribute__((__const__));
date date_add_month(date dt, int months) __attribute__((__const__));
int date_century(date dt) __attribute__((__const__));
date date_create(int year, int month, int day) __attribute__((__const__));
int date_day(date dt) __attribute__((__const__));
int date_dayofweek(date dt) __attribute__((__const__));
int date_dayofyear(date dt) __attribute__((__const__));
int date_decade(date dt) __attribute__((__const__));
int date_diff(date d1, date d2) __attribute__((__const__));
ssize_t date_fromstr(const char *buf, size_t *len, date **d, bool external);
int date_month(date dt) __attribute__((__const__));
int date_quarter(date dt) __attribute__((__const__));
ssize_t date_tostr(str *buf, size_t *len, const date *val, bool external);
int date_usweekofyear(date dt) __attribute__((__const__));
int date_weekofyear(date dt) __attribute__((__const__));
int date_year(date dt) __attribute__((__const__));
daytime daytime_add_usec(daytime tm, lng usec) __attribute__((__const__));
daytime daytime_add_usec_modulo(daytime tm, lng usec) __attribute__((__const__));
daytime daytime_create(int hour, int minute, int second, int usec) __attribute__((__const__));
lng daytime_diff(daytime d1, daytime d2) __attribute__((__const__));
ssize_t daytime_fromstr(const char *buf, size_t *len, daytime **d, bool external);
int daytime_hour(daytime tm) __attribute__((__const__));
int daytime_min(daytime tm) __attribute__((__const__));
ssize_t daytime_precision_tostr(str *buf, size_t *len, const daytime dt, int precision, bool external);
int daytime_sec(daytime tm) __attribute__((__const__));
int daytime_sec_usec(daytime tm) __attribute__((__const__));
ssize_t daytime_tostr(str *buf, size_t *len, const daytime *val, bool external);
ssize_t daytime_tz_fromstr(const char *buf, size_t *len, daytime **d, bool external);
int daytime_usec(daytime tm) __attribute__((__const__));
ssize_t dblFromStr(const char *src, size_t *len, dbl **dst, bool external);
ssize_t dblToStr(str *dst, size_t *len, const dbl *src, bool external);
const dbl dbl_nil;
char *dirname(char *path);
int dlclose(void *handle);
char *dlerror(void);
void *dlopen(const char *file, int mode);
void *dlsym(void *handle, const char *name);
size_t escapedStr(char *restrict dst, const char *restrict src, size_t dstlen, const char *sep1, const char *sep2, int quote);
size_t escapedStrlen(const char *restrict src, const char *sep1, const char *sep2, int quote);
ssize_t fltFromStr(const char *src, size_t *len, flt **dst, bool external);
ssize_t fltToStr(str *dst, size_t *len, const flt *src, bool external);
const flt flt_nil;
geomcatalogfix_fptr geomcatalogfix_get(void);
void geomcatalogfix_set(geomcatalogfix_fptr);
geomsqlfix_fptr geomsqlfix_get(void);
void geomsqlfix_set(geomsqlfix_fptr);
bool geomversion_get(void);
void geomversion_set(void);
lng getBBPlogno(void);
bat getBBPsize(void);
lng getBBPtransid(void);
char *get_bin_path(void);
int gettimeofday(struct timeval *tv, int *ignore_zone);
struct tm *gmtime_r(const time_t *restrict, struct tm *restrict);
ssize_t hgeFromStr(const char *src, size_t *len, hge **dst, bool external);
ssize_t hgeToStr(str *dst, size_t *len, const hge *src, bool external);
const hge hge_nil;
ssize_t intFromStr(const char *src, size_t *len, int **dst, bool external);
ssize_t intToStr(str *dst, size_t *len, const int *src, bool external);
const int int_nil;
ssize_t lngFromStr(const char *src, size_t *len, lng **dst, bool external);
ssize_t lngToStr(str *dst, size_t *len, const lng *src, bool external);
const lng lng_nil;
struct tm *localtime_r(const time_t *restrict, struct tm *restrict);
gdk_return log_bat(logger *lg, BAT *b, log_id id, lng offset, lng cnt);
gdk_return log_bat_clear(logger *lg, log_id id);
gdk_return log_bat_persists(logger *lg, BAT *b, log_id id);
gdk_return log_bat_transient(logger *lg, log_id id);
gdk_return log_constant(logger *lg, int type, ptr val, log_id id, lng offset, lng cnt);
gdk_return log_delta(logger *lg, BAT *uid, BAT *uval, log_id id);
gdk_return log_sequence(logger *lg, int seq, lng id);
gdk_return log_tend(logger *lg);
gdk_return log_tstart(logger *lg, ulng commit_ts, bool flush);
lng logger_changes(logger *lg);
logger *logger_create(int debug, const char *fn, const char *logdir, int version, preversionfix_fptr prefuncp, postversionfix_fptr postfuncp, void *funcdata);
void logger_destroy(logger *lg);
log_bid logger_find_bat(logger *lg, log_id id);
gdk_return logger_flush(logger *lg, ulng saved_id);
int logger_sequence(logger *lg, int seq, lng *id);
log_level_t lvl_per_component[];
void *mdlopen(const char *library, int mode);
const char *mercurial_revision(void) __attribute__((__const__));
int mo_add_option(opt **Set, int setlen, opt_kind kind, const char *name, const char *value);
int mo_builtin_settings(opt **Set);
char *mo_find_option(opt *set, int setlen, const char *name);
void mo_free_options(opt *set, int setlen);
void mo_print_options(opt *set, int setlen);
int mo_system_config(opt **Set, int setlen);
const oid oid_nil;
log_bid old_logger_find_bat(old_logger *lg, const char *name, char tpe, oid id);
gdk_return old_logger_load(logger *lg, const char *fn, const char *logdir, FILE *fp, int version, const char *filename);
DIR *opendir(const char *dirname);
void print_trace(void);
ssize_t ptrFromStr(const char *src, size_t *len, ptr **dst, bool external);
ssize_t ptrToStr(str *dst, size_t *len, const ptr *src, bool external);
const ptr ptr_nil;
struct dirent *readdir(DIR *dir);
void rewinddir(DIR *dir);
ssize_t shtFromStr(const char *src, size_t *len, sht **dst, bool external);
ssize_t shtToStr(str *dst, size_t *len, const sht *src, bool external);
const sht sht_nil;
ssize_t strFromStr(const char *restrict src, size_t *restrict len, str *restrict dst, bool external);
const char str_nil[2];
int strerror_r(int errnum, char *buf, size_t buflen);
timestamp timestamp_add_month(timestamp t, int m) __attribute__((__const__));
timestamp timestamp_add_usec(timestamp t, lng usec) __attribute__((__const__));
timestamp timestamp_create(date dt, daytime tm) __attribute__((__const__));
timestamp timestamp_current(void);
date timestamp_date(timestamp t) __attribute__((__const__));
daytime timestamp_daytime(timestamp t) __attribute__((__const__));
lng timestamp_diff(timestamp t1, timestamp t2) __attribute__((__const__));
timestamp timestamp_fromdate(date dt) __attribute__((__const__));
ssize_t timestamp_fromstr(const char *buf, size_t *len, timestamp **d, bool external);
timestamp timestamp_fromtime(time_t timeval) __attribute__((__const__));
timestamp timestamp_fromusec(lng usec) __attribute__((__const__));
ssize_t timestamp_precision_tostr(str *buf, size_t *len, timestamp val, int precision, bool external);
ssize_t timestamp_tostr(str *buf, size_t *len, const timestamp *val, bool external);
ssize_t timestamp_tz_fromstr(const char *buf, size_t *len, timestamp **ret, bool external);
const timestamp unixepoch;
wchar_t *utf8towchar(const char *src);
const uuid uuid_nil;
gdk_return void_inplace(BAT *b, oid id, const void *val, bool force) __attribute__((__warn_unused_result__));
char *wchartoutf8(const wchar_t *src);
int winerror(int);

# mapi
MapiMsg mapi_bind(MapiHdl hdl, int fnr, char **ptr) __attribute__((__nonnull__(1)));
MapiMsg mapi_bind_numeric(MapiHdl hdl, int fnr, int scale, int precision, void *ptr) __attribute__((__nonnull__(1)));
MapiMsg mapi_bind_var(MapiHdl hdl, int fnr, int type, void *ptr) __attribute__((__nonnull__(1)));
MapiMsg mapi_cache_freeup(MapiHdl hdl, int percentage) __attribute__((__nonnull__(1)));
MapiMsg mapi_cache_limit(Mapi mid, int limit) __attribute__((__nonnull__(1)));
MapiMsg mapi_clear_bindings(MapiHdl hdl) __attribute__((__nonnull__(1)));
MapiMsg mapi_clear_params(MapiHdl hdl) __attribute__((__nonnull__(1)));
MapiMsg mapi_close_handle(MapiHdl hdl);
Mapi mapi_connect(const char *host, int port, const char *username, const char *password, const char *lang, const char *dbname);
MapiMsg mapi_destroy(Mapi mid) __attribute__((__nonnull__(1)));
MapiMsg mapi_disconnect(Mapi mid) __attribute__((__nonnull__(1)));
MapiMsg mapi_error(Mapi mid) __attribute__((__nonnull__(1)));
const char *mapi_error_str(Mapi mid) __attribute__((__nonnull__(1)));
MapiMsg mapi_execute(MapiHdl hdl) __attribute__((__nonnull__(1)));
void mapi_explain(Mapi mid, FILE *fd) __attribute__((__nonnull__(1)));
void mapi_explain_query(MapiHdl hdl, FILE *fd) __attribute__((__nonnull__(1)));
void mapi_explain_result(MapiHdl hdl, FILE *fd);
int64_t mapi_fetch_all_rows(MapiHdl hdl) __attribute__((__nonnull__(1)));
char *mapi_fetch_field(MapiHdl hdl, int fnr) __attribute__((__nonnull__(1)));
size_t mapi_fetch_field_len(MapiHdl hdl, int fnr) __attribute__((__nonnull__(1)));
char *mapi_fetch_line(MapiHdl hdl) __attribute__((__nonnull__(1)));
MapiMsg mapi_fetch_reset(MapiHdl hdl) __attribute__((__nonnull__(1)));
int mapi_fetch_row(MapiHdl hdl) __attribute__((__nonnull__(1)));
MapiMsg mapi_finish(MapiHdl hdl) __attribute__((__nonnull__(1)));
MapiHdl mapi_get_active(Mapi mid) __attribute__((__nonnull__(1)));
bool mapi_get_autocommit(Mapi mid) __attribute__((__nonnull__(1)));
bool mapi_get_columnar_protocol(Mapi mid) __attribute__((__nonnull__(1)));
const char *mapi_get_dbname(Mapi mid) __attribute__((__nonnull__(1)));
int mapi_get_digits(MapiHdl hdl, int fnr) __attribute__((__nonnull__(1)));
int mapi_get_field_count(MapiHdl hdl) __attribute__((__nonnull__(1)));
stream *mapi_get_from(Mapi mid) __attribute__((__nonnull__(1)));
const char *mapi_get_host(Mapi mid) __attribute__((__nonnull__(1)));
const char *mapi_get_lang(Mapi mid) __attribute__((__nonnull__(1)));
int64_t mapi_get_last_id(MapiHdl hdl) __attribute__((__nonnull__(1)));
int mapi_get_len(MapiHdl hdl, int fnr) __attribute__((__nonnull__(1)));
int64_t mapi_get_maloptimizertime(MapiHdl hdl) __attribute__((__nonnull__(1)));
const char *mapi_get_mapi_version(void);
const char *mapi_get_monet_version(Mapi mid) __attribute__((__nonnull__(1)));
const char *mapi_get_motd(Mapi mid) __attribute__((__nonnull__(1)));
char *mapi_get_name(MapiHdl hdl, int fnr) __attribute__((__nonnull__(1)));
char *mapi_get_query(MapiHdl hdl) __attribute__((__nonnull__(1)));
int64_t mapi_get_querytime(MapiHdl hdl) __attribute__((__nonnull__(1)));
int mapi_get_querytype(MapiHdl hdl) __attribute__((__nonnull__(1)));
int64_t mapi_get_row_count(MapiHdl hdl) __attribute__((__nonnull__(1)));
int mapi_get_scale(MapiHdl hdl, int fnr) __attribute__((__nonnull__(1)));
int64_t mapi_get_sqloptimizertime(MapiHdl hdl) __attribute__((__nonnull__(1)));
char *mapi_get_table(MapiHdl hdl, int fnr) __attribute__((__nonnull__(1)));
int mapi_get_tableid(MapiHdl hdl) __attribute__((__nonnull__(1)));
int mapi_get_time_zone(Mapi mid) __attribute__((__nonnull__(1)));
stream *mapi_get_to(Mapi mid) __attribute__((__nonnull__(1)));
bool mapi_get_trace(Mapi mid) __attribute__((__nonnull__(1)));
char *mapi_get_type(MapiHdl hdl, int fnr) __attribute__((__nonnull__(1)));
const char *mapi_get_uri(Mapi mid) __attribute__((__nonnull__(1)));
const char *mapi_get_user(Mapi mid) __attribute__((__nonnull__(1)));
bool mapi_is_connected(Mapi mid) __attribute__((__nonnull__(1)));
MapiMsg mapi_log(Mapi mid, const char *nme) __attribute__((__nonnull__(1)));
Mapi mapi_mapi(const char *host, int port, const char *username, const char *password, const char *lang, const char *dbname);
Mapi mapi_mapiuri(const char *url, const char *user, const char *pass, const char *lang);
bool mapi_more_results(MapiHdl hdl) __attribute__((__nonnull__(1)));
MapiMsg mapi_needmore(MapiHdl hdl) __attribute__((__nonnull__(1)));
MapiHdl mapi_new_handle(Mapi mid) __attribute__((__nonnull__(1)));
MapiMsg mapi_next_result(MapiHdl hdl) __attribute__((__nonnull__(1)));
void mapi_noexplain(Mapi mid, const char *errorprefix) __attribute__((__nonnull__(1)));
MapiMsg mapi_param(MapiHdl hdl, int fnr, char **ptr) __attribute__((__nonnull__(1)));
MapiMsg mapi_param_numeric(MapiHdl hdl, int fnr, int scale, int precision, void *ptr) __attribute__((__nonnull__(1)));
MapiMsg mapi_param_string(MapiHdl hdl, int fnr, int sqltype, char *ptr, int *sizeptr) __attribute__((__nonnull__(1)));
MapiMsg mapi_param_type(MapiHdl hdl, int fnr, int ctype, int sqltype, void *ptr) __attribute__((__nonnull__(1)));
MapiMsg mapi_ping(Mapi mid) __attribute__((__nonnull__(1)));
MapiHdl mapi_prepare(Mapi mid, const char *cmd) __attribute__((__nonnull__(1)));
MapiMsg mapi_prepare_handle(MapiHdl hdl, const char *cmd) __attribute__((__nonnull__(1)));
MapiHdl mapi_query(Mapi mid, const char *cmd) __attribute__((__nonnull__(1)));
MapiMsg mapi_query_done(MapiHdl hdl) __attribute__((__nonnull__(1)));
MapiMsg mapi_query_handle(MapiHdl hdl, const char *cmd) __attribute__((__nonnull__(1)));
MapiMsg mapi_query_part(MapiHdl hdl, const char *cmd, size_t size) __attribute__((__nonnull__(1)));
MapiHdl mapi_query_prep(Mapi mid) __attribute__((__nonnull__(1)));
char *mapi_quote(const char *msg, int size) __attribute__((__nonnull__(1)));
MapiMsg mapi_read_response(MapiHdl hdl) __attribute__((__nonnull__(1)));
MapiMsg mapi_reconnect(Mapi mid) __attribute__((__nonnull__(1)));
MapiMsg mapi_release_id(Mapi mid, int id) __attribute__((__nonnull__(1)));
char **mapi_resolve(const char *host, int port, const char *pattern);
const char *mapi_result_error(MapiHdl hdl);
const char *mapi_result_errorcode(MapiHdl hdl);
int64_t mapi_rows_affected(MapiHdl hdl) __attribute__((__nonnull__(1)));
MapiMsg mapi_seek_row(MapiHdl hdl, int64_t rowne, int whence) __attribute__((__nonnull__(1)));
MapiHdl mapi_send(Mapi mid, const char *cmd) __attribute__((__nonnull__(1)));
MapiMsg mapi_setAutocommit(Mapi mid, bool autocommit) __attribute__((__nonnull__(1)));
MapiMsg mapi_set_columnar_protocol(Mapi mid, bool columnar_protocol) __attribute__((__nonnull__(1)));
MapiMsg mapi_set_size_header(Mapi mid, bool value) __attribute__((__nonnull__(1)));
MapiMsg mapi_set_time_zone(Mapi mid, int seconds_east_of_utc) __attribute__((__nonnull__(1)));
MapiMsg mapi_set_timeout(Mapi mid, unsigned int timeout, bool (*callback)(void *), void *callback_data) __attribute__((__nonnull__(1)));
void mapi_setfilecallback(Mapi mid, char *(*getfunc)(void *priv, const char *filename, bool binary, uint64_t offset, size_t *size), char *(*putfunc)(void *priv, const char *filename, const void *data, size_t size), void *priv) __attribute__((__nonnull__(1)));
int mapi_split_line(MapiHdl hdl) __attribute__((__nonnull__(1)));
MapiMsg mapi_store_field(MapiHdl hdl, int fnr, int outtype, void *outparam) __attribute__((__nonnull__(1)));
MapiMsg mapi_timeout(Mapi mid, unsigned int time) __attribute__((__nonnull__(1)));
void mapi_trace(Mapi mid, bool flag) __attribute__((__nonnull__(1)));
char *mapi_unquote(char *msg) __attribute__((__nonnull__(1)));
char *mcrypt_BackendSum(const char *string, size_t len);
char *mcrypt_MD5Sum(const char *string, size_t len);
char *mcrypt_RIPEMD160Sum(const char *string, size_t len);
char *mcrypt_SHA1Sum(const char *string, size_t len);
char *mcrypt_SHA224Sum(const char *string, size_t len);
char *mcrypt_SHA256Sum(const char *string, size_t len);
char *mcrypt_SHA384Sum(const char *string, size_t len);
char *mcrypt_SHA512Sum(const char *string, size_t len);
const char *mcrypt_getHashAlgorithms(void) __attribute__((__const__));
char *mcrypt_hashPassword(const char *algo, const char *password, const char *challenge);
int mo_add_option(opt **Set, int setlen, opt_kind kind, const char *name, const char *value);
int mo_builtin_settings(opt **Set);
char *mo_find_option(opt *set, int setlen, const char *name);
void mo_free_options(opt *set, int setlen);
void mo_print_options(opt *set, int setlen);
int mo_system_config(opt **Set, int setlen);
const char *wsaerror(int);

# monetdb5
str AUTHaddRemoteTableCredentials(const char *local_table, const char *localuser, const char *uri, const char *remoteuser, const char *pass, bool pw_encrypted);
str AUTHaddUser(oid *ret, Client c, const char *user, const char *pass);
str AUTHchangePassword(Client c, const char *oldpass, const char *passwd);
str AUTHchangeUsername(Client c, const char *olduser, const char *newuser);
str AUTHcheckCredentials(oid *ret, Client c, const char *user, const char *passwd, const char *challenge, const char *algo);
str AUTHdeleteRemoteTableCredentials(const char *local_table);
str AUTHgetPasswordHash(str *ret, Client c, const char *username);
str AUTHgetRemoteTableCredentials(const char *local_table, str *uri, str *username, str *password);
str AUTHgetUsername(str *ret, Client c);
str AUTHgetUsers(BAT **ret1, BAT **ret2, Client c);
str AUTHinitTables(const char *passwd);
str AUTHremoveUser(Client c, const char *username);
str AUTHresolveUser(str *ret, oid uid);
str AUTHsetPassword(Client c, const char *username, const char *passwd);
str AUTHunlockVault(const char *password);
str BATinfo(BAT **key, BAT **val, const bat bid);
str BKCmirror(bat *ret, const bat *bid);
str BKCnewBAT(bat *res, const int *tt, const BUN *cap, role_t role);
str BKCreuseBAT(bat *ret, const bat *bid, const bat *did);
str BKCsetName(void *r, const bat *bid, const char *const *s);
str BKCsetPersistent(void *r, const bat *bid);
str BKCshrinkBAT(bat *ret, const bat *bid, const bat *did);
ssize_t BLOBtostr(str *tostr, size_t *l, const void *pin, bool external);
str CLTsessions(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTshutdown(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str COPYrejects(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str COPYrejects_clear(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str GRPgroup1(bat *ngid, bat *next, bat *nhis, const bat *bid);
str GRPsubgroup5(bat *ngid, bat *next, bat *nhis, const bat *bid, const bat *sid, const bat *gid, const bat *eid, const bat *hid);
int MAL_MAXCLIENTS;
int MALadmission_claim(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, lng argclaim);
void MALadmission_release(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, lng argclaim);
str MALcallback(Client c, str msg);
int MALcommentsOnly(MalBlkPtr mb);
lng MALdebug;
str MALengine(Client c);
str MALexitClient(Client c);
str MALinitClient(Client c);
str MALoptimizer(Client c);
str MALparser(Client c);
str MALpipeline(Client c);
str MALreader(Client c);
MALfcn MANIFOLDtypecheck(Client cntxt, MalBlkPtr mb, InstrPtr pci, int checkprops);
int MCactiveClients(void);
str MCawakeClient(int id);
void MCcloseClient(Client c);
Client MCforkClient(Client father);
Client MCgetClient(int id);
Client MCinitClient(oid user, bstream *fin, stream *fout);
int MCpushClientInput(Client c, bstream *new_input, int listing, char *prompt);
void MCstopClients(Client c);
str MCsuspendClient(int id);
int MCvalid(Client c);
void MPresetProfiler(stream *fdout);
char *MSP_locate_sqlscript(const char *mod_name, bit recurse);
str MSinitClientPrg(Client cntxt, const char *mod, const char *nme);
void MSresetInstructions(MalBlkPtr mb, int start);
void MSresetVariables(Client cntxt, MalBlkPtr mb, MalStkPtr glb, int start);
void MSscheduleClient(str command, str challenge, bstream *fin, stream *fout, protocol_version protocol, size_t blocksize);
str MSserveClient(Client cntxt);
str OIDXcreateImplementation(Client cntxt, int tpe, BAT *b, int pieces);
str OIDXdropImplementation(Client cntxt, BAT *b);
str QLOGcalls(BAT **r);
str QLOGcatalog(BAT **r);
str QLOGdisable(void *ret);
str QLOGempty(void *ret);
str QLOGenable(void *ret);
str QLOGenableThreshold(void *ret, int *threshold);
int QLOGisset(void);
QueryQueue QRYqueue;
str RMTdisconnect(void *ret, str *conn);
BUN SQLload_file(Client cntxt, Tablet *as, bstream *b, stream *out, const char *csep, const char *rsep, char quote, lng skip, lng maxrow, int best, bool from_stdin, const char *tabnam, bool escape);
str TABLETcollect(BAT **bats, Tablet *as);
str TABLETcollect_parts(BAT **bats, Tablet *as, BUN offset);
str TABLETcreate_bats(Tablet *as, BUN est);
void TABLETdestroy_format(Tablet *as);
int TABLEToutput_file(Tablet *as, BAT *order, stream *s);
int TRACEtable(Client cntxt, BAT **r);
str TRNglobal_abort(bit *ret);
str TRNglobal_commit(bit *ret);
str TRNglobal_sync(bit *ret);
str TRNsubcommit(bit *ret, bat *bid);
str TRNtrans_abort(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str TRNtrans_clean(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str TRNtrans_commit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int TYPE_blob;
int TYPE_xml;
UserStats USRstats;
str WLCcommit(int clientid);
str WLCinit(void);
str WLCreadConfig(FILE *fd);
str WLCrollback(int clientid);
int WLCused(void);
const char *abortRef;
const char *actionRef;
InstrPtr addArgument(MalBlkPtr mb, InstrPtr p, int varid);
void addMalException(MalBlkPtr mb, str msg);
str addOptimizerPipe(Client cntxt, MalBlkPtr mb, const char *name);
str addPipeDefinition(Client cntxt, const char *name, const char *pipe);
void addtoMalBlkHistory(MalBlkPtr mb);
const char *affectedRowsRef;
const char *aggrRef;
const char *alarmRef;
const char *algebraRef;
const char *alter_add_range_partitionRef;
const char *alter_add_tableRef;
const char *alter_add_value_partitionRef;
const char *alter_constraintRef;
const char *alter_del_tableRef;
const char *alter_functionRef;
const char *alter_indexRef;
const char *alter_roleRef;
const char *alter_schemaRef;
const char *alter_seqRef;
const char *alter_set_tableRef;
const char *alter_tableRef;
const char *alter_triggerRef;
const char *alter_typeRef;
const char *alter_userRef;
const char *alter_viewRef;
const char *andRef;
const char *appendBulkRef;
const char *appendRef;
const char *appendidxRef;
const char *arrayRef;
const char *assertRef;
const char *attachRef;
const char *avgRef;
const char *bandjoinRef;
const char *basketRef;
void batAfterCall(ValPtr v, ValPtr bak);
void batBeforeCall(ValPtr v, ValPtr bak);
const char *batRef;
const char *batalgebraRef;
const char *batcalcRef;
const char *batcapiRef;
const char *batmalRef;
const char *batmmathRef;
const char *batmtimeRef;
const char *batpyapi3Ref;
const char *batrapiRef;
const char *batsqlRef;
const char *batstrRef;
bool batstr_func_has_candidates(const char *func);
const char *batxmlRef;
const char *bbpRef;
const char *betweenRef;
const char *bindRef;
const char *binddbatRef;
const char *bindidxRef;
var_t blobsize(size_t nitems);
const char *blockRef;
const char *bpmRef;
const char *bstreamRef;
const char *bulk_rotate_xor_hashRef;
const char *calcRef;
str callMAL(Client cntxt, MalBlkPtr mb, MalStkPtr *glb, ValPtr argv[], char debug);
str callString(Client c, str s, int listing);
const char *capiRef;
const char *catalogRef;
str chkDeclarations(MalBlkPtr mb);
str chkFlow(MalBlkPtr mb);
int chkInstruction(Module s, MalBlkPtr mb, InstrPtr p);
str chkProgram(Module s, MalBlkPtr mb);
str chkTypes(Module s, MalBlkPtr mb, int silent);
const char *claimRef;
str cleanupTraces(Client cntxt);
void clearTrace(Client cntxt);
void clearVariable(MalBlkPtr mb, int varid);
const char *clear_tableRef;
int cloneVariable(MalBlkPtr dst, MalBlkPtr src, int varid);
str closeProfilerStream(Client cntxt);
const char *closeRef;
void clrDeclarations(MalBlkPtr mb);
void clrFunction(InstrPtr p);
void clrInstruction(InstrPtr p);
const char *columnBindRef;
const char *columnRef;
const char *comment_onRef;
const char *commitRef;
str compileString(Symbol *fcn, Client c, str s);
const char *connectRef;
const char *contextRef;
str convertConstant(malType type, ValPtr vr);
InstrPtr copyInstruction(InstrPtr p);
InstrPtr copyInstructionArgs(InstrPtr p, int args);
MalBlkPtr copyMalBlk(MalBlkPtr mb);
const char *copyRef;
const char *copy_fromRef;
const char *countRef;
const char *count_no_nilRef;
int cpyConstant(MalBlkPtr mb, VarPtr vr);
str createException(enum malexception, const char *, _In_z_ _Printf_format_string_ const char *, ...) __attribute__((__format__(__printf__, 3, 4))) __attribute__((__returns_nonnull__));
str createMalException(MalBlkPtr, int, enum malexception, _In_z_ _Printf_format_string_ const char *, ...) __attribute__((__format__(__printf__, 4, 5))) __attribute__((__returns_nonnull__));
const char *createRef;
const char *create_constraintRef;
const char *create_functionRef;
const char *create_indexRef;
const char *create_roleRef;
const char *create_schemaRef;
const char *create_seqRef;
const char *create_tableRef;
const char *create_triggerRef;
const char *create_typeRef;
const char *create_userRef;
const char *create_viewRef;
const char *crossRef;
const char *cume_distRef;
const char *dataflowRef;
const char *dateRef;
const char *dblRef;
str deblockdataflow(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
void debugFunction(stream *fd, MalBlkPtr mb, MalStkPtr stk, int flg, int first, int size);
int defConstant(MalBlkPtr mb, int type, ValPtr cst);
const char *defineRef;
void delArgument(InstrPtr p, int varid);
void delName(const char *nme, size_t len);
const char *deleteRef;
void deleteSymbol(Module scope, Symbol prg);
const char *deltaRef;
const char *dense_rankRef;
malType destinationType(MalBlkPtr mb, InstrPtr p);
const char *diffRef;
const char *diffcandRef;
const char *differenceRef;
const char *disconnectRef;
const char *divRef;
const char *drop_constraintRef;
const char *drop_functionRef;
const char *drop_indexRef;
const char *drop_roleRef;
const char *drop_schemaRef;
const char *drop_seqRef;
const char *drop_tableRef;
const char *drop_triggerRef;
const char *drop_typeRef;
const char *drop_userRef;
const char *drop_viewRef;
void dumpModules(stream *out);
const char *emptybindRef;
const char *emptybindidxRef;
const char *eqRef;
str evalFile(str fname, int listing);
const char *evalRef;
const char *execRef;
const char *expandRef;
const char *exportOperationRef;
const char *export_tableRef;
str fcnDefinition(MalBlkPtr mb, InstrPtr p, str s, int flg, str base, size_t len);
const char *fetchRef;
int findGDKtype(int type);
Module findModule(Module scope, const char *name);
const char *findRef;
Scenario findScenario(str nme);
Symbol findSymbol(Module usermodule, const char *mod, const char *fcn);
Symbol findSymbolInModule(Module v, const char *fcn);
int findVariable(MalBlkPtr mb, const char *name);
int findVariableLength(MalBlkPtr mb, const char *name, int len);
const char *finishRef;
const char *first_valueRef;
const char *firstnRef;
Module fixModule(const char *nme);
int fndConstant(MalBlkPtr mb, const ValRecord *cst, int depth);
void freeException(str);
void freeInstruction(InstrPtr p);
void freeMalBlk(MalBlkPtr mb);
void freeModule(Module cur);
void freeModuleList(Module *list);
void freeStack(MalStkPtr stk);
void freeSymbol(Symbol s);
void freeSymbolList(Symbol s);
void freeVariable(MalBlkPtr mb, int varid);
void garbageCollector(Client cntxt, MalBlkPtr mb, MalStkPtr stk, int flag);
void garbageElement(Client cntxt, ValPtr v);
const char *generatorRef;
MALfcn getAddress(const char *modname, const char *fcnname);
str getArgDefault(MalBlkPtr mb, InstrPtr p, int idx);
ptr getArgReference(MalStkPtr stk, InstrPtr pci, int k);
int getAtomIndex(const char *nme, size_t len, int deftpe);
lng getBatSpace(BAT *b);
int getBitConstant(MalBlkPtr mb, bit val);
int getBlockBegin(MalBlkPtr mb, int pc);
int getBlockExit(MalBlkPtr mb, int pc);
int getBteConstant(MalBlkPtr mb, bte val);
int getDblConstant(MalBlkPtr mb, dbl val);
lng getDiskReads(void);
lng getDiskSpace(void);
lng getDiskWrites(void);
str getExceptionMessage(const char *);
str getExceptionMessageAndState(const char *);
str getExceptionPlace(const char *);
enum malexception getExceptionType(const char *);
int getFltConstant(MalBlkPtr mb, flt val);
Scenario getFreeScenario(void);
Symbol getFunctionSymbol(Module scope, InstrPtr p);
int getHgeConstant(MalBlkPtr mb, hge val);
int getIntConstant(MalBlkPtr mb, int val);
int getLngConstant(MalBlkPtr mb, lng val);
MalBlkPtr getMalBlkHistory(MalBlkPtr mb, int idx);
MalBlkPtr getMalBlkOptimized(MalBlkPtr mb, const char *name);
lng getMemoryClaim(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, int i, int flag);
Module getModule(const char *nme);
void getModuleList(Module **out, int *length);
BAT *getModules(void);
const char *getName(const char *nme);
const char *getNameLen(const char *nme, size_t len);
int getOidConstant(MalBlkPtr mb, oid val);
int getPC(MalBlkPtr mb, InstrPtr p);
str getPipeCatalog(bat *nme, bat *def, bat *stat);
const char *getRef;
str getScenarioLanguage(Client c);
int getShtConstant(MalBlkPtr mb, sht val);
int getStrConstant(MalBlkPtr mb, str val);
lng getSystemTime(void);
BAT *getTrace(Client cntxt, const char *nme);
const char *getTraceRef;
malType getType(MalBlkPtr mb, const char *nme);
str getTypeIdentifier(malType tpe);
str getTypeName(malType tpe);
lng getUserTime(void);
char *getVarName(MalBlkPtr mb, int idx);
const char *getVariableRef;
lng getVolume(MalStkPtr stk, InstrPtr pci, int rd);
int getprofilerlimit(void);
Module globalModule(const char *nme);
const char *grantRef;
const char *grant_functionRef;
const char *grant_rolesRef;
const char *groupRef;
const char *group_concatRef;
const char *groupbyRef;
const char *groupdoneRef;
const char *growRef;
int hasSideEffects(MalBlkPtr mb, InstrPtr p, int strict);
const char *hashRef;
const char *hgeRef;
const char *identityRef;
const char *ifthenelseRef;
const char *importColumnRef;
void initHeartbeat(void);
void initNamespace(void);
void initParser(void);
void initProfiler(void);
void insertSymbol(Module scope, Symbol prg);
str instruction2str(MalBlkPtr mb, MalStkPtr stl, InstrPtr p, int hidden);
const char *intRef;
const char *intersectRef;
const char *intersectcandRef;
const char *ioRef;
bool isExceptionVariable(const char *nme);
int isIdentifier(str s);
int isLoopBarrier(MalBlkPtr mb, int pc);
int isNotUsedIn(InstrPtr p, int start, int a);
int isOptimizerPipe(const char *name);
const char *iteratorRef;
const char *jitRef;
const char *joinRef;
const char *jsonRef;
const char *lagRef;
const char *languageRef;
const char *last_valueRef;
const char *leadRef;
const char *leftjoinRef;
const char *likeRef;
const char *likejoinRef;
const char *likeselectRef;
const char *likeuselectRef;
const char *listRef;
str loadLibrary(const char *modulename, int flag);
char *locate_file(const char *basename, const char *ext, bit recurse);
const char *lockRef;
const char *lookupRef;
str mal2str(MalBlkPtr mb, int first, int last);
int malAtomSize(int size, const char *name);
str malBootstrap(char *modules[], int embedded);
str malCommandCall(MalStkPtr stk, InstrPtr pci);
str malEmbeddedBoot(int workerlimit, int memorylimit, int querytimeout, int sessionlimit, int with_mapi_server);
void malEmbeddedReset(void);
_Noreturn void malEmbeddedStop(int status);
str malExtraModulesBoot(Client c, str extraMalModules[], char *mal_scripts);
str malInclude(Client c, const char *name, int listing);
str malIncludeModules(Client c, char *modules[], int listing, int embedded);
str malIncludeString(Client c, const char *name, str mal, int listing, MALfcn address);
int malLibraryEnabled(const char *name);
char *malLibraryHowToEnable(const char *name);
int malProfileMode;
const char *malRef;
void mal_atom_reset(void);
ClientRec *mal_clients;
MT_Lock mal_contextLock;
MT_Lock mal_copyLock;
MT_Lock mal_delayLock;
_Noreturn void mal_exit(int status);
int mal_init(char *modules[], int embedded);
void mal_instruction_reset(void);
void mal_module(str name, mel_atom *atoms, mel_func *funcs);
void mal_module2(str name, mel_atom *atoms, mel_func *funcs, mel_init initfunc, const char *code);
MT_Lock mal_oltpLock;
MT_Lock mal_profileLock;
str mal_quote(const char *msg, size_t size);
MT_Lock mal_remoteLock;
void mal_reset(void);
int mal_startup(void);
void mal_unquote(char *msg);
const char *mal_version(void);
stream *maleventstream;
const char *manifoldRef;
const char *mapiRef;
const char *markRef;
const char *maskRef;
const char *matRef;
const char *maxRef;
const char *max_no_nilRef;
void mdbDump(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
const char *mdbRef;
void mdbSetBreakRequest(Client cntxt, MalBlkPtr mb, str request, char cmd);
const char *mergecandRef;
const char *mergepackRef;
const char *minRef;
const char *min_no_nilRef;
const char *minusRef;
const char *mirrorRef;
const char *mitosisRef;
const char *mkeyRef;
const char *mmathRef;
const char *modRef;
char monet_characteristics[4096];
char monet_cwd[FILENAME_MAX];
void moveInstruction(MalBlkPtr mb, int pc, int target);
void msab_dbfarminit(const char *dbfarm);
void msab_dbnameinit(const char *dbname);
void msab_dbpathinit(const char *dbpath);
char *msab_deserialise(sabdb **ret, const char *sabdb);
void msab_freeStatus(sabdb **ret);
char *msab_getDBfarm(char **ret);
char *msab_getDBname(char **ret);
char *msab_getMyStatus(sabdb **ret);
char *msab_getStatus(sabdb **ret, const char *dbname);
char *msab_getUUID(char **ret);
char *msab_getUplogInfo(sabuplog *ret, const sabdb *db);
char *msab_marchConnection(const char *host, const int port);
char *msab_marchScenario(const char *lang);
char *msab_pickSecret(char **generated_secret);
char *msab_registerStarted(void);
char *msab_registerStarting(void);
char *msab_registerStop(void);
char *msab_retreatScenario(const char *lang);
char *msab_serialise(char **ret, const sabdb *db);
char *msab_wildRetreat(void);
const char *mtimeRef;
const char *mulRef;
const char *multicolumnRef;
const char *multiplexRef;
const char *mvcRef;
InstrPtr newAssignment(MalBlkPtr mb);
InstrPtr newAssignmentArgs(MalBlkPtr mb, int args);
InstrPtr newCatchStmt(MalBlkPtr mb, const char *nme);
InstrPtr newComment(MalBlkPtr mb, const char *val);
InstrPtr newExitStmt(MalBlkPtr mb, const char *nme);
InstrPtr newFcnCall(MalBlkPtr mb, const char *mod, const char *fcn);
InstrPtr newFcnCallArgs(MalBlkPtr mb, const char *mod, const char *fcn, int args);
Symbol newFunction(const char *mod, const char *nme, int kind);
Symbol newFunctionArgs(const char *mod, const char *nme, int kind, int args);
MalStkPtr newGlobalStack(int size);
InstrPtr newInstruction(MalBlkPtr mb, const char *modnme, const char *fcnnme);
InstrPtr newInstructionArgs(MalBlkPtr mb, const char *modnme, const char *fcnnme, int args);
MalBlkPtr newMalBlk(int elements);
int newMalBlkStmt(MalBlkPtr mb, int elements);
Plant newPlant(MalBlkPtr mb);
InstrPtr newRaiseStmt(MalBlkPtr mb, const char *nme);
const char *newRef;
InstrPtr newReturnStmt(MalBlkPtr mb);
InstrPtr newStmt(MalBlkPtr mb, const char *module, const char *name);
InstrPtr newStmtArgs(MalBlkPtr mb, const char *module, const char *name, int args);
Symbol newSymbol(const char *nme, int kind);
int newTmpVariable(MalBlkPtr mb, malType type);
int newTypeVariable(MalBlkPtr mb, malType type);
int newVariable(MalBlkPtr mb, const char *name, size_t len, malType type);
const char *nextRef;
const char *notRef;
const char *not_likeRef;
const char *not_uniqueRef;
const char *nth_valueRef;
const char *ntileRef;
const char *oidRef;
const char *oltpRef;
str openProfilerStream(Client cntxt);
const char *openRef;
str operatorName(int i);
void opt_pipes_reset(void);
str optimizeMALBlock(Client cntxt, MalBlkPtr mb);
const char *optimizerRef;
const char *orRef;
const char *outerjoinRef;
const char *pack2Ref;
const char *packIncrementRef;
const char *packRef;
const char *parametersRef;
void parseMAL(Client cntxt, Symbol curPrg, int skipcomments, int lines, MALfcn address);
const char *partitionRef;
const char *passRef;
const char *pcreRef;
const char *percent_rankRef;
const char *pinRef;
const char *plusRef;
const char *postludeRef;
const char *preludeRef;
MalStkPtr prepareMALstack(MalBlkPtr mb, int size);
int prepareMalBlk(MalBlkPtr mb, str s);
void printFunction(stream *fd, MalBlkPtr mb, MalStkPtr stk, int flg);
void printInstruction(stream *fd, MalBlkPtr mb, MalStkPtr stk, InstrPtr p, int flg);
const char *printRef;
void printSignature(stream *fd, Symbol s, int flg);
void printStack(stream *f, MalBlkPtr mb, MalStkPtr s);
const char *prodRef;
void profilerEvent(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, int start);
void profilerGetCPUStat(lng *user, lng *nice, lng *sys, lng *idle, lng *iowait);
void profilerHeartbeatEvent(char *alter);
const char *profilerRef;
const char *projectRef;
const char *projectdeltaRef;
const char *projectionRef;
const char *projectionpathRef;
InstrPtr pushArgument(MalBlkPtr mb, InstrPtr p, int varid);
InstrPtr pushArgumentId(MalBlkPtr mb, InstrPtr p, const char *name);
InstrPtr pushBit(MalBlkPtr mb, InstrPtr q, bit val);
InstrPtr pushBte(MalBlkPtr mb, InstrPtr q, bte val);
InstrPtr pushDbl(MalBlkPtr mb, InstrPtr q, dbl val);
InstrPtr pushEmptyBAT(MalBlkPtr mb, InstrPtr q, int tpe);
InstrPtr pushEndInstruction(MalBlkPtr mb);
InstrPtr pushFlt(MalBlkPtr mb, InstrPtr q, flt val);
InstrPtr pushHge(MalBlkPtr mb, InstrPtr q, hge val);
void pushInstruction(MalBlkPtr mb, InstrPtr p);
InstrPtr pushInt(MalBlkPtr mb, InstrPtr q, int val);
InstrPtr pushLng(MalBlkPtr mb, InstrPtr q, lng val);
InstrPtr pushNil(MalBlkPtr mb, InstrPtr q, int tpe);
InstrPtr pushNilType(MalBlkPtr mb, InstrPtr q, char *tpe);
InstrPtr pushOid(MalBlkPtr mb, InstrPtr q, oid val);
InstrPtr pushReturn(MalBlkPtr mb, InstrPtr p, int varid);
InstrPtr pushSht(MalBlkPtr mb, InstrPtr q, sht val);
InstrPtr pushStr(MalBlkPtr mb, InstrPtr q, const char *val);
InstrPtr pushType(MalBlkPtr mb, InstrPtr q, int tpe);
InstrPtr pushValue(MalBlkPtr mb, InstrPtr q, ValPtr cst);
InstrPtr pushVoid(MalBlkPtr mb, InstrPtr q);
InstrPtr pushZero(MalBlkPtr mb, InstrPtr q, int tpe);
const char *putName(const char *nme);
const char *putNameLen(const char *nme, size_t len);
const char *putRef;
const char *pyapi3Ref;
const char *pyapi3mapRef;
size_t qhead, qtail, qsize;
const char *queryRef;
const char *querylogRef;
const char *raiseRef;
const char *rangejoinRef;
const char *rankRef;
const char *rapiRef;
MalStkPtr reallocGlobalStack(MalStkPtr s, int cnt);
const char *reconnectRef;
str reenterMAL(Client cntxt, MalBlkPtr mb, int startpc, int stoppc, MalStkPtr stk);
const char *refineRef;
const char *registerRef;
const char *register_supervisorRef;
const char *releaseRef;
const char *remapRef;
const char *remoteRef;
void removeInstruction(MalBlkPtr mb, InstrPtr p);
void removeInstructionBlock(MalBlkPtr mb, int pc, int cnt);
void removeMalBlkHistory(MalBlkPtr mb);
void renameVariables(MalBlkPtr mb);
const char *rename_columnRef;
const char *rename_schemaRef;
const char *rename_tableRef;
const char *rename_userRef;
const char *replaceRef;
const char *replicatorRef;
void resetMalBlk(MalBlkPtr mb, int stop);
void resetMalBlkAndFreeInstructions(MalBlkPtr mb, int stop);
void resetScenario(Client c);
int resizeMalBlk(MalBlkPtr mb, int elements);
int resolveType(int dsttype, int srctype);
const char *resultSetRef;
const char *reuseRef;
const char *revokeRef;
const char *revoke_functionRef;
const char *revoke_rolesRef;
const char *rollbackRef;
const char *row_numberRef;
const char *rpcRef;
const char *rsColumnRef;
str runMAL(Client c, MalBlkPtr mb, MalBlkPtr mbcaller, MalStkPtr env);
str runMALDebugger(Client cntxt, MalBlkPtr mb);
str runMALdataflow(Client cntxt, MalBlkPtr mb, int startpc, int stoppc, MalStkPtr stk);
str runMALsequence(Client cntxt, MalBlkPtr mb, int startpc, int stoppc, MalStkPtr stk, MalStkPtr env, InstrPtr pcicaller);
str runScenario(Client c, int once);
void runtimeProfileBegin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, RuntimeProfile prof);
void runtimeProfileExit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, RuntimeProfile prof);
void runtimeProfileFinish(Client cntxt, MalBlkPtr mb, MalStkPtr stk);
void runtimeProfileInit(Client cntxt, MalBlkPtr mb, MalStkPtr stk);
const char *sampleRef;
const char *schedulerRef;
const char *selectNotNilRef;
const char *selectRef;
const char *semaRef;
const char *semijoinRef;
const char *seriesRef;
const char *setAccessRef;
void setArgType(MalBlkPtr mb, InstrPtr p, int i, int tpe);
InstrPtr setArgument(MalBlkPtr mb, InstrPtr p, int idx, int varid);
void setHeartbeat(int delay);
void setPolymorphic(InstrPtr p, int tpe, int force);
void setReturnArgument(InstrPtr p, int varid);
str setScenario(Client c, str nme);
const char *setVariableRef;
void setVariableScope(MalBlkPtr mb);
void setVariableType(MalBlkPtr mb, const int idx, malType type);
const char *setWriteModeRef;
const char *set_protocolRef;
void setprofilerlimit(int limit);
void showAllScenarios(stream *f);
void showCurrentScenario(void);
void showMalBlkHistory(stream *out, MalBlkPtr mb);
void showScenario(stream *f, Scenario s);
void showScenarioByName(stream *f, str s);
str shutdownFactory(Client cntxt, MalBlkPtr mb);
str shutdownFactoryByName(Client cntxt, Module m, str nme);
const char *singleRef;
const char *sinkRef;
void slash_2_dir_sep(str fname);
const char *sliceRef;
const char *sortRef;
const char *sortReverseRef;
void sqlProfilerEvent(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
const char *sqlRef;
const char *sqlcatalogRef;
str startProfiler(Client cntxt);
const char *startRef;
str startTrace(Client cntxt);
const char *starttraceRef;
str stopProfiler(Client cntxt);
str stopTrace(Client cntxt);
const char *stoptraceRef;
void strAfterCall(ValPtr v, ValPtr bak);
void strBeforeCall(ValPtr v, ValPtr bak);
const char *strRef;
const char *streamsRef;
const char *subavgRef;
const char *subcountRef;
const char *subdeltaRef;
const char *subdiffRef;
const char *subeval_aggrRef;
const char *subgroupRef;
const char *subgroupdoneRef;
const char *subinterRef;
const char *submaxRef;
const char *submedianRef;
const char *subminRef;
const char *subprodRef;
const char *subsliceRef;
const char *subsumRef;
const char *subuniformRef;
const char *sumRef;
const char *takeRef;
const char *thetajoinRef;
const char *thetaselectRef;
const char *tidRef;
const char *timestampRef;
void traceFunction(component_t comp, MalBlkPtr mb, MalStkPtr stk, int flg);
void traceInstruction(component_t comp, MalBlkPtr mb, MalStkPtr stk, InstrPtr p, int flg);
const char *transactionRef;
const char *transaction_abortRef;
const char *transaction_beginRef;
const char *transaction_commitRef;
const char *transaction_releaseRef;
const char *transaction_rollbackRef;
void trimMalVariables(MalBlkPtr mb, MalStkPtr stk);
void trimMalVariables_(MalBlkPtr mb, MalStkPtr glb);
void typeChecker(Module scope, MalBlkPtr mb, InstrPtr p, int p_idx, int silent);
const char *umaskRef;
const char *uniqueRef;
const char *unlockRef;
const char *unpackRef;
const char *unpinRef;
const char *updateRef;
void updateScenario(str scen, str nme, MALfcn fcn);
Module userModule(void);
const char *userRef;
size_t usrstatscnt;
const char *vectorRef;
const char *window_boundRef;
const char *wlcRef;
int wlc_batches;
int wlc_beat;
char wlc_dir[FILENAME_MAX];
int wlc_state;
lng wlc_tag;
const char *wlrRef;
Workingset workingset[THREADS];
const char *zero_or_oneRef;

# stream
stream *block_stream(stream *s);
stream *block_stream2(stream *s, size_t bufsiz, compression_method comp);
buffer bs2_buffer(stream *s);
int bs2_resizebuf(stream *ss, size_t bufsiz);
void bs2_setpos(stream *ss, size_t pos);
stream *bs_stream(stream *s);
bstream *bstream_create(stream *rs, size_t chunk_size);
void bstream_destroy(bstream *s);
ssize_t bstream_next(bstream *s);
ssize_t bstream_read(bstream *s, size_t size);
buffer *buffer_create(size_t size);
void buffer_destroy(buffer *b);
char *buffer_get_buf(buffer *b);
void buffer_init(buffer *restrict b, char *restrict buf, size_t size);
stream *buffer_rastream(buffer *restrict b, const char *restrict name);
stream *buffer_wastream(buffer *restrict b, const char *restrict name);
stream *bz2_stream(stream *inner, int preset);
stream *callback_stream(void *restrict priv, ssize_t (*read)(void *restrict priv, void *restrict buf, size_t elmsize, size_t cnt), ssize_t (*write)(void *restrict priv, const void *restrict buf, size_t elmsize, size_t cnt), void (*close)(void *priv), void (*destroy)(void *priv), const char *restrict name);
void close_stream(stream *s);
stream *compressed_stream(stream *inner, int preset);
stream *create_text_stream(stream *s);
stream *file_rstream(FILE *restrict fp, bool binary, const char *restrict name);
stream *file_wstream(FILE *restrict fp, bool binary, const char *restrict name);
FILE *getFile(stream *s);
int getFileNo(stream *s);
size_t getFileSize(stream *s);
stream *gz_stream(stream *inner, int preset);
stream *iconv_rstream(stream *restrict ss, const char *restrict charset, const char *restrict name);
stream *iconv_wstream(stream *restrict ss, const char *restrict charset, const char *restrict name);
bool isa_block_stream(const stream *s);
stream *lz4_stream(stream *inner, int preset);
void mnstr_clearerr(stream *s);
void mnstr_close(stream *s);
void mnstr_destroy(stream *s);
mnstr_error_kind mnstr_errnr(const stream *s);
char *mnstr_error(const stream *s);
const char *mnstr_error_kind_name(mnstr_error_kind k);
int mnstr_fgetpos(stream *restrict s, fpos_t *restrict p);
int mnstr_flush(stream *s, mnstr_flush_level flush_level);
int mnstr_fsetpos(stream *restrict s, fpos_t *restrict p);
int mnstr_fsync(stream *s);
buffer *mnstr_get_buffer(stream *s);
bool mnstr_get_swapbytes(const stream *s);
int mnstr_init(void);
int mnstr_isalive(const stream *s);
bool mnstr_isbinary(const stream *s);
char *mnstr_name(const stream *s);
const char *mnstr_peek_error(const stream *s);
int mnstr_printf(stream *restrict s, _In_z_ _Printf_format_string_ const char *restrict format, ...) __attribute__((__format__(__printf__, 2, 3)));
ssize_t mnstr_read(stream *restrict s, void *restrict buf, size_t elmsize, size_t cnt);
int mnstr_readBte(stream *restrict s, int8_t *restrict val);
int mnstr_readBteArray(stream *restrict s, int8_t *restrict val, size_t cnt);
int mnstr_readChr(stream *restrict s, char *restrict val);
int mnstr_readHge(stream *restrict s, hge *restrict val);
int mnstr_readHgeArray(stream *restrict s, hge *restrict val, size_t cnt);
int mnstr_readInt(stream *restrict s, int *restrict val);
int mnstr_readIntArray(stream *restrict s, int *restrict val, size_t cnt);
int mnstr_readLng(stream *restrict s, int64_t *restrict val);
int mnstr_readLngArray(stream *restrict s, int64_t *restrict val, size_t cnt);
int mnstr_readSht(stream *restrict s, int16_t *restrict val);
int mnstr_readShtArray(stream *restrict s, int16_t *restrict val, size_t cnt);
int mnstr_readStr(stream *restrict s, char *restrict val);
ssize_t mnstr_read_block(stream *restrict s, void *restrict buf, size_t elmsize, size_t cnt);
ssize_t mnstr_readline(stream *restrict s, void *restrict buf, size_t maxcnt);
void mnstr_set_bigendian(stream *s, bool bigendian);
void mnstr_settimeout(stream *s, unsigned int ms, bool (*func)(void *), void *data);
const char *mnstr_version(void);
ssize_t mnstr_write(stream *restrict s, const void *restrict buf, size_t elmsize, size_t cnt);
int mnstr_writeBte(stream *s, int8_t val);
int mnstr_writeBteArray(stream *restrict s, const int8_t *restrict val, size_t cnt);
int mnstr_writeChr(stream *s, char val);
int mnstr_writeDbl(stream *s, double val);
int mnstr_writeFlt(stream *s, float val);
int mnstr_writeHge(stream *s, hge val);
int mnstr_writeHgeArray(stream *restrict s, const hge *restrict val, size_t cnt);
int mnstr_writeInt(stream *s, int val);
int mnstr_writeIntArray(stream *restrict s, const int *restrict val, size_t cnt);
int mnstr_writeLng(stream *s, int64_t val);
int mnstr_writeLngArray(stream *restrict s, const int64_t *restrict val, size_t cnt);
int mnstr_writeSht(stream *s, int16_t val);
int mnstr_writeShtArray(stream *restrict s, const int16_t *restrict val, size_t cnt);
int mnstr_writeStr(stream *restrict s, const char *restrict val);
stream *open_rastream(const char *filename);
stream *open_rstream(const char *filename);
stream *open_urlstream(const char *url);
stream *open_wastream(const char *filename);
stream *open_wstream(const char *filename);
void set_prompting(stream *block_stream, const char *prompt, stream *prompt_stream);
stream *socket_rstream(SOCKET socket, const char *name);
stream *socket_wstream(SOCKET socket, const char *name);
stream *stderr_wastream(void);
stream *stdin_rastream(void);
stream *stdout_wastream(void);
stream *stream_blackhole_create(void);
stream *stream_fwf_create(stream *restrict s, size_t num_fields, size_t *restrict widths, char filler);
stream *xz_stream(stream *inner, int preset);

