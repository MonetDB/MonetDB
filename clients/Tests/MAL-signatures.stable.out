stdout of test 'MAL-signatures` in directory 'clients` itself:


# 21:44:50 >  
# 21:44:50 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33053" "--set" "mapi_usock=/var/tmp/mtest-13793/.s.monetdb.33053" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/sjoerd/Monet-devel/var/MonetDB/mTests_clients" "--set" "mal_listing=2" "--set" "embedded_r=yes"
# 21:44:50 >  

# MonetDB 5 server v11.32.0
# This is an unreleased version
# Serving database 'mTests_clients', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit
# Found 15.386 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2018 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://xps13:39285/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1158/.s.monetdb.39285
# MonetDB/GIS module loaded
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 18_index.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 27_rejects.sql
# loading sql script: 39_analytics.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 46_profiler.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_shp.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 99_system.sql
# MonetDB/SQL module loaded
# MonetDB/Python2 module loaded
# MonetDB/R   module loaded

# 16:19:19 >  
# 16:19:19 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-28001" "--port=38663"
# 16:19:19 >  

#select * from sys.malfunctions() order by module, "function", address, signature, comment;
% .%1,	.%1,	.%1,	.%1,	.%1 # table_name
% module,	function,	signature,	address,	comment # name
% clob,	clob,	clob,	clob,	clob # type
% 12,	28,	313,	42,	0 # length
[ "aggr",	"all",	"command aggr.all(X_0:bat[:any_1]):any_1 ",	"SQLall;",	""	]
[ "aggr",	"allnotequal",	"pattern aggr.allnotequal(X_0:bat[:any_1], X_1:bat[:any_1]):bit ",	"SQLallnotequal;",	""	]
[ "aggr",	"anyequal",	"pattern aggr.anyequal(X_0:any_1, X_1:any_1):bit ",	"CMDvarEQ;",	""	]
[ "aggr",	"anyequal",	"pattern aggr.anyequal(X_0:bat[:any_1], X_1:bat[:any_1]):bit ",	"SQLanyequal;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRavg13_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRavg13_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRavg13_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRavg13_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRavg13_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRavg13_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:int):bat[:dbl] ",	"AGGRavg14_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:int):bat[:dbl] ",	"AGGRavg14_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:int):bat[:dbl] ",	"AGGRavg14_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:int):bat[:dbl] ",	"AGGRavg14_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:int):bat[:dbl] ",	"AGGRavg14_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:int):bat[:dbl] ",	"AGGRavg14_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]) (X_3:bat[:dbl], X_4:bat[:lng]) ",	"AGGRavg23_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1]) (X_3:bat[:dbl], X_4:bat[:lng]) ",	"AGGRavg23_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1]) (X_3:bat[:dbl], X_4:bat[:lng]) ",	"AGGRavg23_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1]) (X_3:bat[:dbl], X_4:bat[:lng]) ",	"AGGRavg23_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1]) (X_3:bat[:dbl], X_4:bat[:lng]) ",	"AGGRavg23_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]) (X_3:bat[:dbl], X_4:bat[:lng]) ",	"AGGRavg23_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:int) (X_4:bat[:dbl], X_5:bat[:lng]) ",	"AGGRavg24_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:int) (X_4:bat[:dbl], X_5:bat[:lng]) ",	"AGGRavg24_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:int) (X_4:bat[:dbl], X_5:bat[:lng]) ",	"AGGRavg24_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:int) (X_4:bat[:dbl], X_5:bat[:lng]) ",	"AGGRavg24_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:int) (X_4:bat[:dbl], X_5:bat[:lng]) ",	"AGGRavg24_dbl;",	""	]
[ "aggr",	"avg",	"command aggr.avg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:int) (X_4:bat[:dbl], X_5:bat[:lng]) ",	"AGGRavg24_dbl;",	""	]
[ "aggr",	"avg",	"pattern aggr.avg(X_0:bat[:bte], X_1:bat[:oid], X_2:bit) (X_3:bte, X_4:lng, X_5:lng) ",	"CMDBATavg3;",	""	]
[ "aggr",	"avg",	"pattern aggr.avg(X_0:bat[:int], X_1:bat[:oid], X_2:bit) (X_3:int, X_4:lng, X_5:lng) ",	"CMDBATavg3;",	""	]
[ "aggr",	"avg",	"pattern aggr.avg(X_0:bat[:lng], X_1:bat[:oid], X_2:bit) (X_3:lng, X_4:lng, X_5:lng) ",	"CMDBATavg3;",	""	]
[ "aggr",	"avg",	"pattern aggr.avg(X_0:bat[:sht], X_1:bat[:oid], X_2:bit) (X_3:sht, X_4:lng, X_5:lng) ",	"CMDBATavg3;",	""	]
[ "aggr",	"avg",	"pattern aggr.avg(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:lng]):bte ",	"CMDBATavg3comb;",	""	]
[ "aggr",	"avg",	"pattern aggr.avg(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:lng]):int ",	"CMDBATavg3comb;",	""	]
[ "aggr",	"avg",	"pattern aggr.avg(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:lng]):lng ",	"CMDBATavg3comb;",	""	]
[ "aggr",	"avg",	"pattern aggr.avg(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:lng]):sht ",	"CMDBATavg3comb;",	""	]
[ "aggr",	"avg",	"pattern aggr.avg(X_0:bat[:any_2]):dbl ",	"CMDcalcavg;",	""	]
[ "aggr",	"avg",	"pattern aggr.avg(X_0:bat[:any_2], X_1:int):dbl ",	"CMDcalcavg;",	""	]
[ "aggr",	"cardinality",	"command aggr.cardinality(X_0:bat[:any_2]):lng ",	"ALGcard;",	""	]
[ "aggr",	"corr",	"command aggr.corr(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcorr;",	""	]
[ "aggr",	"corr",	"command aggr.corr(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcorr;",	""	]
[ "aggr",	"corr",	"command aggr.corr(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcorr;",	""	]
[ "aggr",	"corr",	"command aggr.corr(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcorr;",	""	]
[ "aggr",	"corr",	"command aggr.corr(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcorr;",	""	]
[ "aggr",	"corr",	"command aggr.corr(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcorr;",	""	]
[ "aggr",	"corr",	"command aggr.corr(X_0:bat[:any_2], X_1:bat[:any_2]):dbl ",	"ALGcorr;",	""	]
[ "aggr",	"count",	"command aggr.count(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bit):bat[:lng] ",	"AGGRcount3;",	""	]
[ "aggr",	"count",	"command aggr.count(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2]):bat[:lng] ",	"AGGRcount3nils;",	""	]
[ "aggr",	"count",	"command aggr.count(X_0:bat[:any], X_1:bat[:oid]):lng ",	"ALGcountCND_bat;",	""	]
[ "aggr",	"count",	"command aggr.count(X_0:bat[:any], X_1:bat[:oid], X_2:bit):lng ",	"ALGcountCND_nil;",	""	]
[ "aggr",	"count",	"command aggr.count(X_0:bat[:any]):lng ",	"ALGcount_bat;",	""	]
[ "aggr",	"count",	"command aggr.count(X_0:bat[:any], X_1:bit):lng ",	"ALGcount_nil;",	""	]
[ "aggr",	"count_no_nil",	"command aggr.count_no_nil(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2]):bat[:lng] ",	"AGGRcount3nonils;",	""	]
[ "aggr",	"count_no_nil",	"command aggr.count_no_nil(X_0:bat[:any_2], X_1:bat[:oid]):lng ",	"ALGcountCND_no_nil;",	""	]
[ "aggr",	"count_no_nil",	"command aggr.count_no_nil(X_0:bat[:any_2]):lng ",	"ALGcount_no_nil;",	""	]
[ "aggr",	"covariance",	"command aggr.covariance(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariance;",	""	]
[ "aggr",	"covariance",	"command aggr.covariance(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariance;",	""	]
[ "aggr",	"covariance",	"command aggr.covariance(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariance;",	""	]
[ "aggr",	"covariance",	"command aggr.covariance(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariance;",	""	]
[ "aggr",	"covariance",	"command aggr.covariance(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariance;",	""	]
[ "aggr",	"covariance",	"command aggr.covariance(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariance;",	""	]
[ "aggr",	"covariance",	"command aggr.covariance(X_0:bat[:any_2], X_1:bat[:any_2]):dbl ",	"ALGcovariance;",	""	]
[ "aggr",	"covariancep",	"command aggr.covariancep(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariancep;",	""	]
[ "aggr",	"covariancep",	"command aggr.covariancep(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariancep;",	""	]
[ "aggr",	"covariancep",	"command aggr.covariancep(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariancep;",	""	]
[ "aggr",	"covariancep",	"command aggr.covariancep(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariancep;",	""	]
[ "aggr",	"covariancep",	"command aggr.covariancep(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariancep;",	""	]
[ "aggr",	"covariancep",	"command aggr.covariancep(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:any_1]):bat[:dbl] ",	"AGGRcovariancep;",	""	]
[ "aggr",	"covariancep",	"command aggr.covariancep(X_0:bat[:any_2], X_1:bat[:any_2]):dbl ",	"ALGcovariancep;",	""	]
[ "aggr",	"exist",	"command aggr.exist(X_0:bat[:any_2], X_1:any_1):bit ",	"ALGexist;",	""	]
[ "aggr",	"exist",	"pattern aggr.exist(X_0:any_1):bit ",	"SQLexist;",	""	]
[ "aggr",	"jsonaggr",	"command aggr.jsonaggr(X_0:bat[:dbl]):str ",	"JSONgroupStr;",	""	]
[ "aggr",	"jsonaggr",	"command aggr.jsonaggr(X_0:bat[:str]):str ",	"JSONgroupStr;",	""	]
[ "aggr",	"max",	"command aggr.max(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2]):bat[:any_1] ",	"AGGRmax3;",	""	]
[ "aggr",	"max",	"command aggr.max(X_0:bat[:any_2]):any_2 ",	"ALGmaxany;",	""	]
[ "aggr",	"max",	"command aggr.max(X_0:bat[:any_2], X_1:bit):any_2 ",	"ALGmaxany_skipnil;",	""	]
[ "aggr",	"median",	"command aggr.median(X_0:bat[:any_1]):any_1 ",	"AGGRmedian;",	""	]
[ "aggr",	"median_avg",	"command aggr.median_avg(X_0:bat[:any_1]):dbl ",	"AGGRmedian_avg;",	""	]
[ "aggr",	"min",	"command aggr.min(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2]):bat[:any_1] ",	"AGGRmin3;",	""	]
[ "aggr",	"min",	"command aggr.min(X_0:bat[:any_2]):any_2 ",	"ALGminany;",	""	]
[ "aggr",	"min",	"command aggr.min(X_0:bat[:any_2], X_1:bit):any_2 ",	"ALGminany_skipnil;",	""	]
[ "aggr",	"not_anyequal",	"pattern aggr.not_anyequal(X_0:any_1, X_1:any_1):bit ",	"CMDvarNE;",	""	]
[ "aggr",	"not_exist",	"pattern aggr.not_exist(X_0:any_1):bit ",	"SQLnot_exist;",	""	]
[ "aggr",	"not_unique",	"command aggr.not_unique(X_0:bat[:oid]):bit ",	"not_unique;",	""	]
[ "aggr",	"null",	"command aggr.null(X_0:bat[:any_1]):bit ",	"SQLnil;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:bte] ",	"AGGRprod3_bte;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRprod3_dbl;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRprod3_dbl;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1]):bat[:flt] ",	"AGGRprod3_flt;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:int] ",	"AGGRprod3_int;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1]):bat[:int] ",	"AGGRprod3_int;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:int] ",	"AGGRprod3_int;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:lng] ",	"AGGRprod3_lng;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1]):bat[:lng] ",	"AGGRprod3_lng;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1]):bat[:lng] ",	"AGGRprod3_lng;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:lng] ",	"AGGRprod3_lng;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:sht] ",	"AGGRprod3_sht;",	""	]
[ "aggr",	"prod",	"command aggr.prod(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:sht] ",	"AGGRprod3_sht;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte]):bte ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte]):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte]):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte]):sht ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bat[:oid]):bte ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bat[:oid]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bat[:oid]):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bat[:oid]):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bat[:oid]):sht ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bat[:oid], X_2:bit):bte ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bat[:oid], X_2:bit):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bat[:oid], X_2:bit):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bat[:oid], X_2:bit):sht ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bit):bte ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bit):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bit):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:bte], X_1:bit):sht ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:dbl]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:dbl], X_1:bat[:oid]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:dbl], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:dbl], X_1:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:flt]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:flt]):flt ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:flt], X_1:bat[:oid]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:flt], X_1:bat[:oid]):flt ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:flt], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:flt], X_1:bat[:oid], X_2:bit):flt ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:flt], X_1:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:flt], X_1:bit):flt ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int]):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int]):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int], X_1:bat[:oid]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int], X_1:bat[:oid]):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int], X_1:bat[:oid]):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int], X_1:bat[:oid], X_2:bit):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int], X_1:bat[:oid], X_2:bit):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int], X_1:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int], X_1:bit):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:int], X_1:bit):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:lng]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:lng]):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:lng], X_1:bat[:oid]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:lng], X_1:bat[:oid]):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:lng], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:lng], X_1:bat[:oid], X_2:bit):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:lng], X_1:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:lng], X_1:bit):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht]):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht]):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht]):sht ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bat[:oid]):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bat[:oid]):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bat[:oid]):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bat[:oid]):sht ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bat[:oid], X_2:bit):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bat[:oid], X_2:bit):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bat[:oid], X_2:bit):sht ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bit):dbl ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bit):int ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bit):lng ",	"CMDBATprod;",	""	]
[ "aggr",	"prod",	"pattern aggr.prod(X_0:bat[:sht], X_1:bit):sht ",	"CMDBATprod;",	""	]
[ "aggr",	"quantile",	"command aggr.quantile(X_0:bat[:any_1], X_1:bat[:dbl]):any_1 ",	"AGGRquantile;",	""	]
[ "aggr",	"quantile_avg",	"command aggr.quantile_avg(X_0:bat[:any_1], X_1:bat[:dbl]):dbl ",	"AGGRquantile_avg;",	""	]
[ "aggr",	"stdev",	"command aggr.stdev(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdev3_dbl;",	""	]
[ "aggr",	"stdev",	"command aggr.stdev(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdev3_dbl;",	""	]
[ "aggr",	"stdev",	"command aggr.stdev(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdev3_dbl;",	""	]
[ "aggr",	"stdev",	"command aggr.stdev(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdev3_dbl;",	""	]
[ "aggr",	"stdev",	"command aggr.stdev(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdev3_dbl;",	""	]
[ "aggr",	"stdev",	"command aggr.stdev(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdev3_dbl;",	""	]
[ "aggr",	"stdev",	"command aggr.stdev(X_0:bat[:any_2]):dbl ",	"ALGstdev;",	""	]
[ "aggr",	"stdevp",	"command aggr.stdevp(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdevp3_dbl;",	""	]
[ "aggr",	"stdevp",	"command aggr.stdevp(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdevp3_dbl;",	""	]
[ "aggr",	"stdevp",	"command aggr.stdevp(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdevp3_dbl;",	""	]
[ "aggr",	"stdevp",	"command aggr.stdevp(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdevp3_dbl;",	""	]
[ "aggr",	"stdevp",	"command aggr.stdevp(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdevp3_dbl;",	""	]
[ "aggr",	"stdevp",	"command aggr.stdevp(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRstdevp3_dbl;",	""	]
[ "aggr",	"stdevp",	"command aggr.stdevp(X_0:bat[:any_2]):dbl ",	"ALGstdevp;",	""	]
[ "aggr",	"str_group_concat",	"command aggr.str_group_concat(X_0:bat[:str], X_1:bat[:oid], X_2:bat[:any_1]):bat[:str] ",	"AGGRstr_group_concat;",	""	]
[ "aggr",	"str_group_concat",	"command aggr.str_group_concat(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:any_1]):bat[:str] ",	"AGGRstr_group_concat_sep;",	""	]
[ "aggr",	"str_group_concat",	"pattern aggr.str_group_concat(X_0:bat[:str]):str ",	"CMDBATstr_group_concat;",	""	]
[ "aggr",	"str_group_concat",	"pattern aggr.str_group_concat(X_0:bat[:str], X_1:bat[:oid]):str ",	"CMDBATstr_group_concat;",	""	]
[ "aggr",	"str_group_concat",	"pattern aggr.str_group_concat(X_0:bat[:str], X_1:bat[:oid], X_2:bit):str ",	"CMDBATstr_group_concat;",	""	]
[ "aggr",	"str_group_concat",	"pattern aggr.str_group_concat(X_0:bat[:str], X_1:bat[:str]):str ",	"CMDBATstr_group_concat;",	""	]
[ "aggr",	"str_group_concat",	"pattern aggr.str_group_concat(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid]):str ",	"CMDBATstr_group_concat;",	""	]
[ "aggr",	"str_group_concat",	"pattern aggr.str_group_concat(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bit):str ",	"CMDBATstr_group_concat;",	""	]
[ "aggr",	"str_group_concat",	"pattern aggr.str_group_concat(X_0:bat[:str], X_1:bat[:str], X_2:bit):str ",	"CMDBATstr_group_concat;",	""	]
[ "aggr",	"str_group_concat",	"pattern aggr.str_group_concat(X_0:bat[:str], X_1:bit):str ",	"CMDBATstr_group_concat;",	""	]
[ "aggr",	"suball",	"pattern aggr.suball(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:any_1] ",	"SQLall_grp;",	""	]
[ "aggr",	"suball",	"pattern aggr.suball(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bit):bat[:any_1] ",	"SQLall_grp;",	""	]
[ "aggr",	"suballnotequal",	"pattern aggr.suballnotequal(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:oid], X_5:bat[:oid], X_6:bit):bat[:bit] ",	"SQLallnotequal_grp2;",	""	]
[ "aggr",	"suballnotequal",	"pattern aggr.suballnotequal(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:oid], X_5:bit):bat[:bit] ",	"SQLallnotequal_grp2;",	""	]
[ "aggr",	"suballnotequal",	"pattern aggr.suballnotequal(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:oid], X_5:bit):bat[:bit] ",	"SQLallnotequal_grp;",	""	]
[ "aggr",	"suballnotequal",	"pattern aggr.suballnotequal(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"SQLallnotequal_grp;",	""	]
[ "aggr",	"subanyequal",	"pattern aggr.subanyequal(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:oid], X_5:bat[:oid], X_6:bit):bat[:bit] ",	"SQLanyequal_grp2;",	""	]
[ "aggr",	"subanyequal",	"pattern aggr.subanyequal(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:oid], X_5:bit):bat[:bit] ",	"SQLanyequal_grp2;",	""	]
[ "aggr",	"subanyequal",	"pattern aggr.subanyequal(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:oid], X_5:bit):bat[:bit] ",	"SQLanyequal_grp;",	""	]
[ "aggr",	"subanyequal",	"pattern aggr.subanyequal(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"SQLanyequal_grp;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit) (X_5:bat[:bte], X_6:bat[:lng], X_7:bat[:lng]) ",	"AGGRavg3;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit) (X_5:bat[:int], X_6:bat[:lng], X_7:bat[:lng]) ",	"AGGRavg3;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit) (X_5:bat[:lng], X_6:bat[:lng], X_7:bat[:lng]) ",	"AGGRavg3;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit) (X_5:bat[:sht], X_6:bat[:lng], X_7:bat[:lng]) ",	"AGGRavg3;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:lng], X_3:bat[:oid], X_4:bat[:any_1], X_5:bit):bat[:bte] ",	"AGGRavg3comb;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:lng], X_3:bat[:oid], X_4:bat[:any_1], X_5:bit):bat[:int] ",	"AGGRavg3comb;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:lng], X_3:bat[:oid], X_4:bat[:any_1], X_5:bit):bat[:lng] ",	"AGGRavg3comb;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:lng], X_3:bat[:oid], X_4:bat[:any_1], X_5:bit):bat[:sht] ",	"AGGRavg3comb;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubavg1_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubavg1_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubavg1_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubavg1_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubavg1_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubavg1_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubavg1cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubavg1cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubavg1cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubavg1cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubavg1cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubavg1cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int):bat[:dbl] ",	"AGGRsubavg1s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int):bat[:dbl] ",	"AGGRsubavg1s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int):bat[:dbl] ",	"AGGRsubavg1s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int):bat[:dbl] ",	"AGGRsubavg1s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int):bat[:dbl] ",	"AGGRsubavg1s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int):bat[:dbl] ",	"AGGRsubavg1s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int):bat[:dbl] ",	"AGGRsubavg1scand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int):bat[:dbl] ",	"AGGRsubavg1scand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int):bat[:dbl] ",	"AGGRsubavg1scand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int):bat[:dbl] ",	"AGGRsubavg1scand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int):bat[:dbl] ",	"AGGRsubavg1scand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int):bat[:dbl] ",	"AGGRsubavg1scand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit) (X_5:bat[:dbl], X_6:bat[:lng]) ",	"AGGRsubavg2_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit) (X_5:bat[:dbl], X_6:bat[:lng]) ",	"AGGRsubavg2_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit) (X_5:bat[:dbl], X_6:bat[:lng]) ",	"AGGRsubavg2_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit) (X_5:bat[:dbl], X_6:bat[:lng]) ",	"AGGRsubavg2_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit) (X_5:bat[:dbl], X_6:bat[:lng]) ",	"AGGRsubavg2_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit) (X_5:bat[:dbl], X_6:bat[:lng]) ",	"AGGRsubavg2_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2cand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:int) (X_6:bat[:dbl], X_7:bat[:lng]) ",	"AGGRsubavg2s_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int) (X_7:bat[:dbl], X_8:bat[:lng]) ",	"AGGRsubavg2scand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int) (X_7:bat[:dbl], X_8:bat[:lng]) ",	"AGGRsubavg2scand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int) (X_7:bat[:dbl], X_8:bat[:lng]) ",	"AGGRsubavg2scand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int) (X_7:bat[:dbl], X_8:bat[:lng]) ",	"AGGRsubavg2scand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int) (X_7:bat[:dbl], X_8:bat[:lng]) ",	"AGGRsubavg2scand_dbl;",	""	]
[ "aggr",	"subavg",	"command aggr.subavg(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:int) (X_7:bat[:dbl], X_8:bat[:lng]) ",	"AGGRsubavg2scand_dbl;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcorr;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcorr;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcorr;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcorr;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcorr;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcorr;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcorrcand;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcorrcand;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcorrcand;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcorrcand;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcorrcand;",	""	]
[ "aggr",	"subcorr",	"command aggr.subcorr(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcorrcand;",	""	]
[ "aggr",	"subcount",	"command aggr.subcount(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bit):bat[:lng] ",	"AGGRsubcount;",	""	]
[ "aggr",	"subcount",	"command aggr.subcount(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bat[:oid], X_4:bit):bat[:lng] ",	"AGGRsubcountcand;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariance;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariance;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariance;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariance;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariance;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariance;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancecand;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancecand;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancecand;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancecand;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancecand;",	""	]
[ "aggr",	"subcovariance",	"command aggr.subcovariance(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancecand;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariancep;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariancep;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariancep;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariancep;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariancep;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubcovariancep;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancepcand;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancepcand;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancepcand;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancepcand;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancepcand;",	""	]
[ "aggr",	"subcovariancep",	"command aggr.subcovariancep(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:dbl] ",	"AGGRsubcovariancepcand;",	""	]
[ "aggr",	"subexist",	"pattern aggr.subexist(X_0:bat[:any], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"SQLsubexist;",	""	]
[ "aggr",	"subexist",	"pattern aggr.subexist(X_0:bat[:any], X_1:bat[:oid], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"SQLsubexist;",	""	]
[ "aggr",	"subjsonaggr",	"command aggr.subjsonaggr(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit):bat[:str] ",	"JSONsubjson;",	""	]
[ "aggr",	"subjsonaggr",	"command aggr.subjsonaggr(X_0:bat[:str], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit):bat[:str] ",	"JSONsubjson;",	""	]
[ "aggr",	"subjsonaggr",	"command aggr.subjsonaggr(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit):bat[:str] ",	"JSONsubjsoncand;",	""	]
[ "aggr",	"subjsonaggr",	"command aggr.subjsonaggr(X_0:bat[:str], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit):bat[:str] ",	"JSONsubjsoncand;",	""	]
[ "aggr",	"submax",	"command aggr.submax(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bit):bat[:oid] ",	"AGGRsubmax;",	""	]
[ "aggr",	"submax",	"command aggr.submax(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bit):bat[:any_1] ",	"AGGRsubmax_val;",	""	]
[ "aggr",	"submax",	"command aggr.submax(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bat[:oid], X_4:bit):bat[:oid] ",	"AGGRsubmaxcand;",	""	]
[ "aggr",	"submax",	"command aggr.submax(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bat[:oid], X_4:bit):bat[:any_1] ",	"AGGRsubmaxcand_val;",	""	]
[ "aggr",	"submedian",	"command aggr.submedian(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bit):bat[:any_1] ",	"AGGRsubmedian;",	""	]
[ "aggr",	"submedian",	"command aggr.submedian(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bat[:oid], X_4:bit):bat[:any_1] ",	"AGGRsubmediancand;",	""	]
[ "aggr",	"submedian_avg",	"command aggr.submedian_avg(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bit):bat[:dbl] ",	"AGGRsubmedian_avg;",	""	]
[ "aggr",	"submedian_avg",	"command aggr.submedian_avg(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bat[:oid], X_4:bit):bat[:dbl] ",	"AGGRsubmediancand_avg;",	""	]
[ "aggr",	"submin",	"command aggr.submin(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bit):bat[:oid] ",	"AGGRsubmin;",	""	]
[ "aggr",	"submin",	"command aggr.submin(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bit):bat[:any_1] ",	"AGGRsubmin_val;",	""	]
[ "aggr",	"submin",	"command aggr.submin(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bat[:oid], X_4:bit):bat[:oid] ",	"AGGRsubmincand;",	""	]
[ "aggr",	"submin",	"command aggr.submin(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_2], X_3:bat[:oid], X_4:bit):bat[:any_1] ",	"AGGRsubmincand_val;",	""	]
[ "aggr",	"subnot_exist",	"pattern aggr.subnot_exist(X_0:bat[:any], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"SQLsubnot_exist;",	""	]
[ "aggr",	"subnot_exist",	"pattern aggr.subnot_exist(X_0:bat[:any], X_1:bat[:oid], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"SQLsubnot_exist;",	""	]
[ "aggr",	"subnull",	"pattern aggr.subnull(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"SQLnil_grp;",	""	]
[ "aggr",	"subnull",	"pattern aggr.subnull(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"SQLnil_grp;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:bte] ",	"AGGRsubprod_bte;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubprod_dbl;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubprod_dbl;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:flt] ",	"AGGRsubprod_flt;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:int] ",	"AGGRsubprod_int;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:int] ",	"AGGRsubprod_int;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:int] ",	"AGGRsubprod_int;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:lng] ",	"AGGRsubprod_lng;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:lng] ",	"AGGRsubprod_lng;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:lng] ",	"AGGRsubprod_lng;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:lng] ",	"AGGRsubprod_lng;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:sht] ",	"AGGRsubprod_sht;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:sht] ",	"AGGRsubprod_sht;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:bte] ",	"AGGRsubprodcand_bte;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubprodcand_dbl;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubprodcand_dbl;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:flt] ",	"AGGRsubprodcand_flt;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:int] ",	"AGGRsubprodcand_int;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:int] ",	"AGGRsubprodcand_int;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:int] ",	"AGGRsubprodcand_int;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:lng] ",	"AGGRsubprodcand_lng;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:lng] ",	"AGGRsubprodcand_lng;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:lng] ",	"AGGRsubprodcand_lng;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:lng] ",	"AGGRsubprodcand_lng;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:sht] ",	"AGGRsubprodcand_sht;",	""	]
[ "aggr",	"subprod",	"command aggr.subprod(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:sht] ",	"AGGRsubprodcand_sht;",	""	]
[ "aggr",	"subquantile",	"command aggr.subquantile(X_0:bat[:any_1], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_2], X_4:bit):bat[:any_1] ",	"AGGRsubquantile;",	""	]
[ "aggr",	"subquantile",	"command aggr.subquantile(X_0:bat[:any_1], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_2], X_4:bat[:oid], X_5:bit):bat[:any_1] ",	"AGGRsubquantilecand;",	""	]
[ "aggr",	"subquantile_avg",	"command aggr.subquantile_avg(X_0:bat[:any_1], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_2], X_4:bit):bat[:dbl] ",	"AGGRsubquantile_avg;",	""	]
[ "aggr",	"subquantile_avg",	"command aggr.subquantile_avg(X_0:bat[:any_1], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:any_2], X_4:bat[:oid], X_5:bit):bat[:dbl] ",	"AGGRsubquantilecand_avg;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdev_dbl;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdev_dbl;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdev_dbl;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdev_dbl;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdev_dbl;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdev_dbl;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevcand_dbl;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevcand_dbl;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevcand_dbl;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevcand_dbl;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevcand_dbl;",	""	]
[ "aggr",	"substdev",	"command aggr.substdev(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevcand_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdevp_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdevp_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdevp_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdevp_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdevp_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubstdevp_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevpcand_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevpcand_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevpcand_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevpcand_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevpcand_dbl;",	""	]
[ "aggr",	"substdevp",	"command aggr.substdevp(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubstdevpcand_dbl;",	""	]
[ "aggr",	"substr_group_concat",	"command aggr.substr_group_concat(X_0:bat[:str], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:str] ",	"AGGRsubstr_group_concat;",	""	]
[ "aggr",	"substr_group_concat",	"command aggr.substr_group_concat(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:any_1], X_4:bit, X_5:bit):bat[:str] ",	"AGGRsubstr_group_concat_sep;",	""	]
[ "aggr",	"substr_group_concat",	"command aggr.substr_group_concat(X_0:bat[:str], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:str] ",	"AGGRsubstr_group_concatcand;",	""	]
[ "aggr",	"substr_group_concat",	"command aggr.substr_group_concat(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:any_1], X_4:bat[:oid], X_5:bit, X_6:bit):bat[:str] ",	"AGGRsubstr_group_concatcand_sep;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:bte] ",	"AGGRsubsum_bte;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubsum_dbl;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubsum_dbl;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:flt] ",	"AGGRsubsum_flt;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:int] ",	"AGGRsubsum_int;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:int] ",	"AGGRsubsum_int;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:int] ",	"AGGRsubsum_int;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:lng] ",	"AGGRsubsum_lng;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:lng] ",	"AGGRsubsum_lng;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:lng] ",	"AGGRsubsum_lng;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:lng] ",	"AGGRsubsum_lng;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:sht] ",	"AGGRsubsum_sht;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:sht] ",	"AGGRsubsum_sht;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:bte] ",	"AGGRsubsumcand_bte;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubsumcand_dbl;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubsumcand_dbl;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:flt] ",	"AGGRsubsumcand_flt;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:int] ",	"AGGRsubsumcand_int;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:int] ",	"AGGRsubsumcand_int;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:int] ",	"AGGRsubsumcand_int;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:lng] ",	"AGGRsubsumcand_lng;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:lng] ",	"AGGRsubsumcand_lng;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:lng] ",	"AGGRsubsumcand_lng;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:lng] ",	"AGGRsubsumcand_lng;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:sht] ",	"AGGRsubsumcand_sht;",	""	]
[ "aggr",	"subsum",	"command aggr.subsum(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:sht] ",	"AGGRsubsumcand_sht;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariance_dbl;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariance_dbl;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariance_dbl;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariance_dbl;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariance_dbl;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariance_dbl;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancecand_dbl;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancecand_dbl;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancecand_dbl;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancecand_dbl;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancecand_dbl;",	""	]
[ "aggr",	"subvariance",	"command aggr.subvariance(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancecand_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariancep_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariancep_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariancep_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariancep_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariancep_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit, X_4:bit):bat[:dbl] ",	"AGGRsubvariancep_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancepcand_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancepcand_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancepcand_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancepcand_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancepcand_dbl;",	""	]
[ "aggr",	"subvariancep",	"command aggr.subvariancep(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit, X_5:bit):bat[:dbl] ",	"AGGRsubvariancepcand_dbl;",	""	]
[ "aggr",	"subzero_or_one",	"command aggr.subzero_or_one(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bit):bat[:any_1] ",	"SQLsubzero_or_one;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:bte] ",	"AGGRsum3_bte;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRsum3_dbl;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRsum3_dbl;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRsum3_dbl;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRsum3_dbl;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRsum3_dbl;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRsum3_dbl;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1]):bat[:flt] ",	"AGGRsum3_flt;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:int] ",	"AGGRsum3_int;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1]):bat[:int] ",	"AGGRsum3_int;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:int] ",	"AGGRsum3_int;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:lng] ",	"AGGRsum3_lng;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1]):bat[:lng] ",	"AGGRsum3_lng;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1]):bat[:lng] ",	"AGGRsum3_lng;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:lng] ",	"AGGRsum3_lng;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:sht] ",	"AGGRsum3_sht;",	""	]
[ "aggr",	"sum",	"command aggr.sum(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:sht] ",	"AGGRsum3_sht;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte]):bte ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte]):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte]):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte]):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bat[:oid]):bte ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bat[:oid]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bat[:oid]):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bat[:oid]):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bat[:oid]):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bat[:oid], X_2:bit):bte ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bat[:oid], X_2:bit):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bat[:oid], X_2:bit):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bat[:oid], X_2:bit):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bit):bte ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bit):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bit):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:bte], X_1:bit):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:dbl]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:dbl], X_1:bat[:oid]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:dbl], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:dbl], X_1:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:flt]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:flt]):flt ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:flt], X_1:bat[:oid]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:flt], X_1:bat[:oid]):flt ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:flt], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:flt], X_1:bat[:oid], X_2:bit):flt ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:flt], X_1:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:flt], X_1:bit):flt ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int]):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int]):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int], X_1:bat[:oid]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int], X_1:bat[:oid]):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int], X_1:bat[:oid]):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int], X_1:bat[:oid], X_2:bit):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int], X_1:bat[:oid], X_2:bit):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int], X_1:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int], X_1:bit):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:int], X_1:bit):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:lng]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:lng]):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:lng], X_1:bat[:oid]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:lng], X_1:bat[:oid]):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:lng], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:lng], X_1:bat[:oid], X_2:bit):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:lng], X_1:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:lng], X_1:bit):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk]):bte ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk]):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk]):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk]):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bat[:oid]):bte ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bat[:oid]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bat[:oid]):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bat[:oid]):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bat[:oid]):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bat[:oid], X_2:bit):bte ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bat[:oid], X_2:bit):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bat[:oid], X_2:bit):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bat[:oid], X_2:bit):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bit):bte ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bit):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bit):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:msk], X_1:bit):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht]):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht]):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht]):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bat[:oid]):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bat[:oid]):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bat[:oid]):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bat[:oid]):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bat[:oid], X_2:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bat[:oid], X_2:bit):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bat[:oid], X_2:bit):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bat[:oid], X_2:bit):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bit):dbl ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bit):int ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bit):lng ",	"CMDBATsum;",	""	]
[ "aggr",	"sum",	"pattern aggr.sum(X_0:bat[:sht], X_1:bit):sht ",	"CMDBATsum;",	""	]
[ "aggr",	"variance",	"command aggr.variance(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariance3_dbl;",	""	]
[ "aggr",	"variance",	"command aggr.variance(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariance3_dbl;",	""	]
[ "aggr",	"variance",	"command aggr.variance(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariance3_dbl;",	""	]
[ "aggr",	"variance",	"command aggr.variance(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariance3_dbl;",	""	]
[ "aggr",	"variance",	"command aggr.variance(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariance3_dbl;",	""	]
[ "aggr",	"variance",	"command aggr.variance(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariance3_dbl;",	""	]
[ "aggr",	"variance",	"command aggr.variance(X_0:bat[:any_2]):dbl ",	"ALGvariance;",	""	]
[ "aggr",	"variancep",	"command aggr.variancep(X_0:bat[:bte], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariancep3_dbl;",	""	]
[ "aggr",	"variancep",	"command aggr.variancep(X_0:bat[:dbl], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariancep3_dbl;",	""	]
[ "aggr",	"variancep",	"command aggr.variancep(X_0:bat[:flt], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariancep3_dbl;",	""	]
[ "aggr",	"variancep",	"command aggr.variancep(X_0:bat[:int], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariancep3_dbl;",	""	]
[ "aggr",	"variancep",	"command aggr.variancep(X_0:bat[:lng], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariancep3_dbl;",	""	]
[ "aggr",	"variancep",	"command aggr.variancep(X_0:bat[:sht], X_1:bat[:oid], X_2:bat[:any_1]):bat[:dbl] ",	"AGGRvariancep3_dbl;",	""	]
[ "aggr",	"variancep",	"command aggr.variancep(X_0:bat[:any_2]):dbl ",	"ALGvariancep;",	""	]
[ "aggr",	"zero_or_one",	"command aggr.zero_or_one(X_0:bat[:any_1]):any_1 ",	"zero_or_one;",	""	]
[ "aggr",	"zero_or_one",	"command aggr.zero_or_one(X_0:bat[:any_1], X_1:bit):any_1 ",	"zero_or_one_error;",	""	]
[ "aggr",	"zero_or_one",	"command aggr.zero_or_one(X_0:bat[:any_1], X_1:bat[:bit]):any_1 ",	"zero_or_one_error_bat;",	""	]
[ "alarm",	"ctime",	"unsafe command alarm.ctime():str ",	"ALARMctime;",	""	]
[ "alarm",	"epoch",	"unsafe command alarm.epoch():int ",	"ALARMepoch;",	""	]
[ "alarm",	"sleep",	"unsafe pattern alarm.sleep(X_0:any_1):any_1 ",	"ALARMsleep;",	""	]
[ "alarm",	"sleep",	"unsafe pattern alarm.sleep(X_0:any_1):void ",	"ALARMsleep;",	""	]
[ "alarm",	"sleep",	"unsafe pattern alarm.sleep(X_0:bat[:any_1]):bat[:any_1] ",	"ALARMsleep;",	""	]
[ "alarm",	"time",	"unsafe command alarm.time():int ",	"ALARMtime;",	""	]
[ "alarm",	"usec",	"unsafe command alarm.usec():lng ",	"ALARMusec;",	""	]
[ "algebra",	"bandjoin",	"command algebra.bandjoin(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:any_1, X_5:any_1, X_6:bit, X_7:bit, X_8:lng):bat[:oid] ",	"ALGbandjoin1;",	""	]
[ "algebra",	"bandjoin",	"command algebra.bandjoin(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:any_1, X_5:any_1, X_6:bit, X_7:bit, X_8:lng) (X_9:bat[:oid], X_10:bat[:oid]) ",	"ALGbandjoin;",	""	]
[ "algebra",	"copy",	"command algebra.copy(X_0:bat[:any_1]):bat[:any_1] ",	"ALGcopy;",	""	]
[ "algebra",	"crossproduct",	"command algebra.crossproduct(X_0:bat[:any_1], X_1:bat[:any_2], X_2:bit):bat[:oid] ",	"ALGcrossproduct1;",	""	]
[ "algebra",	"crossproduct",	"command algebra.crossproduct(X_0:bat[:any_1], X_1:bat[:any_2], X_2:bit) (X_3:bat[:oid], X_4:bat[:oid]) ",	"ALGcrossproduct2;",	""	]
[ "algebra",	"crossproduct",	"command algebra.crossproduct(X_0:bat[:any_1], X_1:bat[:any_2], X_2:bat[:oid], X_3:bat[:oid], X_4:bit) (X_5:bat[:oid], X_6:bat[:oid]) ",	"ALGcrossproduct3;",	""	]
[ "algebra",	"crossproduct",	"command algebra.crossproduct(X_0:bat[:any_1], X_1:bat[:any_2], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:oid] ",	"ALGcrossproduct4;",	""	]
[ "algebra",	"difference",	"command algebra.difference(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:lng):bat[:oid] ",	"ALGdifference;",	""	]
[ "algebra",	"exist",	"command algebra.exist(X_0:bat[:any_1], X_1:any_1):bit ",	"ALGexist;",	""	]
[ "algebra",	"fetch",	"command algebra.fetch(X_0:bat[:any_1], X_1:oid):any_1 ",	"ALGfetchoid;",	""	]
[ "algebra",	"find",	"command algebra.find(X_0:bat[:any_1], X_1:any_1):oid ",	"ALGfind;",	""	]
[ "algebra",	"firstn",	"pattern algebra.firstn(X_0:bat[:any], X_1:bat[:oid], X_2:bat[:oid], X_3:lng, X_4:bit, X_5:bit, X_6:bit) (X_7:bat[:oid], X_8:bat[:oid]) ",	"ALGfirstn;",	""	]
[ "algebra",	"firstn",	"pattern algebra.firstn(X_0:bat[:any], X_1:bat[:oid], X_2:bat[:oid], X_3:lng, X_4:bit, X_5:bit, X_6:bit):bat[:oid] ",	"ALGfirstn;",	""	]
[ "algebra",	"groupby",	"command algebra.groupby(X_0:bat[:oid], X_1:bat[:lng]):bat[:oid] ",	"ALGgroupby;",	""	]
[ "algebra",	"intersect",	"command algebra.intersect(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:lng):bat[:oid] ",	"ALGintersect;",	""	]
[ "algebra",	"join",	"command algebra.join(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit, X_5:lng):bat[:oid] ",	"ALGjoin1;",	""	]
[ "algebra",	"join",	"command algebra.join(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit, X_5:lng) (X_6:bat[:oid], X_7:bat[:oid]) ",	"ALGjoin;",	""	]
[ "algebra",	"leftjoin",	"command algebra.leftjoin(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit, X_5:lng):bat[:oid] ",	"ALGleftjoin1;",	""	]
[ "algebra",	"leftjoin",	"command algebra.leftjoin(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit, X_5:lng) (X_6:bat[:oid], X_7:bat[:oid]) ",	"ALGleftjoin;",	""	]
[ "algebra",	"like",	"command algebra.like(X_0:str, X_1:str, X_2:str, X_3:bit):bit ",	"PCRElike;",	""	]
[ "algebra",	"likejoin",	"command algebra.likejoin(X_0:bat[:str], X_1:bat[:str], X_2:bat[:str], X_3:bat[:bit], X_4:bat[:oid], X_5:bat[:oid], X_6:bit, X_7:lng, X_8:bit):bat[:oid] ",	"LIKEjoin1;",	""	]
[ "algebra",	"likejoin",	"command algebra.likejoin(X_0:bat[:str], X_1:bat[:str], X_2:bat[:str], X_3:bat[:bit], X_4:bat[:oid], X_5:bat[:oid], X_6:bit, X_7:lng, X_8:bit) (X_9:bat[:oid], X_10:bat[:oid]) ",	"LIKEjoin;",	""	]
[ "algebra",	"likeselect",	"command algebra.likeselect(X_0:bat[:str], X_1:bat[:oid], X_2:str, X_3:str, X_4:bit, X_5:bit):bat[:oid] ",	"PCRElikeselect;",	""	]
[ "algebra",	"not_like",	"command algebra.not_like(X_0:str, X_1:str, X_2:str, X_3:bit):bit ",	"PCREnotlike;",	""	]
[ "algebra",	"orderidx",	"command algebra.orderidx(X_0:bat[:any_1], X_1:bit):bat[:any_1] ",	"OIDXorderidx;",	""	]
[ "algebra",	"outerjoin",	"command algebra.outerjoin(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:lng):bat[:oid] ",	"ALGouterjoin1;",	""	]
[ "algebra",	"outerjoin",	"command algebra.outerjoin(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:lng) (X_7:bat[:oid], X_8:bat[:oid]) ",	"ALGouterjoin;",	""	]
[ "algebra",	"project",	"pattern algebra.project(X_0:bat[:any_1], X_1:any_3):bat[:any_3] ",	"ALGprojecttail;",	""	]
[ "algebra",	"projection",	"command algebra.projection(X_0:bat[:oid], X_1:bat[:any_3], X_2:bat[:any_3]):bat[:any_3] ",	"ALGprojection2;",	""	]
[ "algebra",	"projection",	"command algebra.projection(X_0:bat[:oid], X_1:bat[:any_3]):bat[:any_3] ",	"ALGprojection;",	""	]
[ "algebra",	"projectionpath",	"pattern algebra.projectionpath(X_0:bat[:any]...):bat[:any] ",	"ALGprojectionpath;",	""	]
[ "algebra",	"rangejoin",	"command algebra.rangejoin(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:any_1], X_3:bat[:oid], X_4:bat[:oid], X_5:bit, X_6:bit, X_7:bit, X_8:bit, X_9:lng):bat[:oid] ",	"ALGrangejoin1;",	""	]
[ "algebra",	"rangejoin",	"command algebra.rangejoin(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:any_1], X_3:bat[:oid], X_4:bat[:oid], X_5:bit, X_6:bit, X_7:bit, X_8:bit, X_9:lng) (X_10:bat[:oid], X_11:bat[:oid]) ",	"ALGrangejoin;",	""	]
[ "algebra",	"reuse",	"command algebra.reuse(X_0:bat[:any_1]):bat[:any_1] ",	"ALGreuse;",	""	]
[ "algebra",	"select",	"command algebra.select(X_0:bat[:any_1], X_1:any_1, X_2:any_1, X_3:bit, X_4:bit, X_5:bit):bat[:oid] ",	"ALGselect1;",	""	]
[ "algebra",	"select",	"command algebra.select(X_0:bat[:any_1], X_1:any_1, X_2:any_1, X_3:bit, X_4:bit, X_5:bit, X_6:bit):bat[:oid] ",	"ALGselect1nil;",	""	]
[ "algebra",	"select",	"command algebra.select(X_0:bat[:any_1], X_1:bat[:oid], X_2:any_1, X_3:any_1, X_4:bit, X_5:bit, X_6:bit):bat[:oid] ",	"ALGselect2;",	""	]
[ "algebra",	"select",	"command algebra.select(X_0:bat[:any_1], X_1:bat[:oid], X_2:any_1, X_3:any_1, X_4:bit, X_5:bit, X_6:bit, X_7:bit):bat[:oid] ",	"ALGselect2nil;",	""	]
[ "algebra",	"selectNotNil",	"command algebra.selectNotNil(X_0:bat[:any_2]):bat[:any_2] ",	"ALGselectNotNil;",	""	]
[ "algebra",	"semijoin",	"command algebra.semijoin(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit, X_5:bit, X_6:lng) (X_7:bat[:oid], X_8:bat[:oid]) ",	"ALGsemijoin;",	""	]
[ "algebra",	"slice",	"command algebra.slice(X_0:bat[:any_1], X_1:lng, X_2:lng):bat[:any_1] ",	"ALGslice;",	""	]
[ "algebra",	"slice",	"command algebra.slice(X_0:bat[:any_1], X_1:int, X_2:int):bat[:any_1] ",	"ALGslice_int;",	""	]
[ "algebra",	"slice",	"command algebra.slice(X_0:bat[:any_1], X_1:lng, X_2:lng):bat[:any_1] ",	"ALGslice_lng;",	""	]
[ "algebra",	"slice",	"command algebra.slice(X_0:bat[:any_1], X_1:oid, X_2:oid):bat[:any_1] ",	"ALGslice_oid;",	""	]
[ "algebra",	"sort",	"command algebra.sort(X_0:bat[:any_1], X_1:bit, X_2:bit, X_3:bit):bat[:any_1] ",	"ALGsort11;",	""	]
[ "algebra",	"sort",	"command algebra.sort(X_0:bat[:any_1], X_1:bit, X_2:bit, X_3:bit) (X_4:bat[:any_1], X_5:bat[:oid]) ",	"ALGsort12;",	""	]
[ "algebra",	"sort",	"command algebra.sort(X_0:bat[:any_1], X_1:bit, X_2:bit, X_3:bit) (X_4:bat[:any_1], X_5:bat[:oid], X_6:bat[:oid]) ",	"ALGsort13;",	""	]
[ "algebra",	"sort",	"command algebra.sort(X_0:bat[:any_1], X_1:bat[:oid], X_2:bit, X_3:bit, X_4:bit):bat[:any_1] ",	"ALGsort21;",	""	]
[ "algebra",	"sort",	"command algebra.sort(X_0:bat[:any_1], X_1:bat[:oid], X_2:bit, X_3:bit, X_4:bit) (X_5:bat[:any_1], X_6:bat[:oid]) ",	"ALGsort22;",	""	]
[ "algebra",	"sort",	"command algebra.sort(X_0:bat[:any_1], X_1:bat[:oid], X_2:bit, X_3:bit, X_4:bit) (X_5:bat[:any_1], X_6:bat[:oid], X_7:bat[:oid]) ",	"ALGsort23;",	""	]
[ "algebra",	"sort",	"command algebra.sort(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bit, X_4:bit, X_5:bit):bat[:any_1] ",	"ALGsort31;",	""	]
[ "algebra",	"sort",	"command algebra.sort(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bit, X_4:bit, X_5:bit) (X_6:bat[:any_1], X_7:bat[:oid]) ",	"ALGsort32;",	""	]
[ "algebra",	"sort",	"command algebra.sort(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bit, X_4:bit, X_5:bit) (X_6:bat[:any_1], X_7:bat[:oid], X_8:bat[:oid]) ",	"ALGsort33;",	""	]
[ "algebra",	"subslice",	"command algebra.subslice(X_0:bat[:any_1], X_1:lng, X_2:lng):bat[:oid] ",	"ALGsubslice_lng;",	""	]
[ "algebra",	"thetajoin",	"command algebra.thetajoin(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:int, X_5:bit, X_6:lng):bat[:oid] ",	"ALGthetajoin1;",	""	]
[ "algebra",	"thetajoin",	"command algebra.thetajoin(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:int, X_5:bit, X_6:lng) (X_7:bat[:oid], X_8:bat[:oid]) ",	"ALGthetajoin;",	""	]
[ "algebra",	"thetaselect",	"command algebra.thetaselect(X_0:bat[:any_1], X_1:bat[:oid], X_2:any_1, X_3:str):bat[:oid] ",	"ALGthetaselect2;",	""	]
[ "algebra",	"unique",	"command algebra.unique(X_0:bat[:any_1], X_1:bat[:oid]):bat[:oid] ",	"ALGunique;",	""	]
[ "bat",	"append",	"command bat.append(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bit):bat[:any_1] ",	"BKCappend_cand_force_wrap;",	""	]
[ "bat",	"append",	"command bat.append(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid]):bat[:any_1] ",	"BKCappend_cand_wrap;",	""	]
[ "bat",	"append",	"command bat.append(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bit):bat[:any_1] ",	"BKCappend_force_wrap;",	""	]
[ "bat",	"append",	"command bat.append(X_0:bat[:any_1], X_1:any_1, X_2:bit):bat[:any_1] ",	"BKCappend_val_force_wrap;",	""	]
[ "bat",	"append",	"command bat.append(X_0:bat[:any_1], X_1:any_1):bat[:any_1] ",	"BKCappend_val_wrap;",	""	]
[ "bat",	"append",	"command bat.append(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:any_1] ",	"BKCappend_wrap;",	""	]
[ "bat",	"appendBulk",	"pattern bat.appendBulk(X_0:bat[:any_1], X_1:bit, X_2:any_1...):bat[:any_1] ",	"CMDBATappend_bulk;",	""	]
[ "bat",	"appendBulk",	"pattern bat.appendBulk(X_0:bat[:any_1], X_1:bit, X_2:bat[:any_1]...):bat[:any_1] ",	"CMDBATappend_bulk;",	""	]
[ "bat",	"attach",	"command bat.attach(X_0:int, X_1:str):bat[:any_1] ",	"BKCattach;",	""	]
[ "bat",	"delete",	"command bat.delete(X_0:bat[:any_1], X_1:oid):bat[:any_1] ",	"BKCdelete;",	""	]
[ "bat",	"delete",	"command bat.delete(X_0:bat[:any_1]):bat[:any_1] ",	"BKCdelete_all;",	""	]
[ "bat",	"delete",	"command bat.delete(X_0:bat[:any_1], X_1:bat[:oid]):bat[:any_1] ",	"BKCdelete_multi;",	""	]
[ "bat",	"densebat",	"command bat.densebat(X_0:lng):bat[:oid] ",	"BKCdensebat;",	""	]
[ "bat",	"diffcand",	"command bat.diffcand(X_0:bat[:oid], X_1:bat[:oid]):bat[:oid] ",	"BKCdiffcand;",	""	]
[ "bat",	"getAccess",	"command bat.getAccess(X_0:bat[:any_1]):str ",	"BKCgetAccess;",	""	]
[ "bat",	"getCapacity",	"command bat.getCapacity(X_0:bat[:any_1]):lng ",	"BKCgetCapacity;",	""	]
[ "bat",	"getColumnType",	"command bat.getColumnType(X_0:bat[:any_1]):str ",	"BKCgetColumnType;",	""	]
[ "bat",	"getName",	"command bat.getName(X_0:bat[:any_1]):str ",	"BKCgetBBPname;",	""	]
[ "bat",	"getRole",	"command bat.getRole(X_0:bat[:any_1]):str ",	"BKCgetRole;",	""	]
[ "bat",	"getSequenceBase",	"command bat.getSequenceBase(X_0:bat[:any_1]):oid ",	"BKCgetSequenceBase;",	""	]
[ "bat",	"getSize",	"command bat.getSize(X_0:bat[:any_1]):lng ",	"BKCgetSize;",	""	]
[ "bat",	"getorderidx",	"pattern bat.getorderidx(X_0:bat[:any_1]):bat[:oid] ",	"OIDXgetorderidx;",	""	]
[ "bat",	"hasorderidx",	"pattern bat.hasorderidx(X_0:bat[:any_1]):bit ",	"OIDXhasorderidx;",	""	]
[ "bat",	"imprints",	"command bat.imprints(X_0:bat[:bte]):void ",	"CMDBATimprints;",	""	]
[ "bat",	"imprints",	"command bat.imprints(X_0:bat[:dbl]):void ",	"CMDBATimprints;",	""	]
[ "bat",	"imprints",	"command bat.imprints(X_0:bat[:flt]):void ",	"CMDBATimprints;",	""	]
[ "bat",	"imprints",	"command bat.imprints(X_0:bat[:int]):void ",	"CMDBATimprints;",	""	]
[ "bat",	"imprints",	"command bat.imprints(X_0:bat[:lng]):void ",	"CMDBATimprints;",	""	]
[ "bat",	"imprints",	"command bat.imprints(X_0:bat[:sht]):void ",	"CMDBATimprints;",	""	]
[ "bat",	"imprintsize",	"command bat.imprintsize(X_0:bat[:bte]):lng ",	"CMDBATimprintsize;",	""	]
[ "bat",	"imprintsize",	"command bat.imprintsize(X_0:bat[:dbl]):lng ",	"CMDBATimprintsize;",	""	]
[ "bat",	"imprintsize",	"command bat.imprintsize(X_0:bat[:flt]):lng ",	"CMDBATimprintsize;",	""	]
[ "bat",	"imprintsize",	"command bat.imprintsize(X_0:bat[:int]):lng ",	"CMDBATimprintsize;",	""	]
[ "bat",	"imprintsize",	"command bat.imprintsize(X_0:bat[:lng]):lng ",	"CMDBATimprintsize;",	""	]
[ "bat",	"imprintsize",	"command bat.imprintsize(X_0:bat[:sht]):lng ",	"CMDBATimprintsize;",	""	]
[ "bat",	"info",	"command bat.info(X_0:bat[:any_1]) (X_1:bat[:str], X_2:bat[:str]) ",	"BKCinfo;",	""	]
[ "bat",	"intersectcand",	"command bat.intersectcand(X_0:bat[:oid], X_1:bat[:oid]):bat[:oid] ",	"BKCintersectcand;",	""	]
[ "bat",	"isPersistent",	"command bat.isPersistent(X_0:bat[:any_1]):bit ",	"BKCisPersistent;",	""	]
[ "bat",	"isSorted",	"command bat.isSorted(X_0:bat[:any_1]):bit ",	"BKCisSorted;",	""	]
[ "bat",	"isSortedReverse",	"command bat.isSortedReverse(X_0:bat[:any_1]):bit ",	"BKCisSortedReverse;",	""	]
[ "bat",	"isSynced",	"command bat.isSynced(X_0:bat[:any_1], X_1:bat[:any_2]):bit ",	"BKCisSynced;",	""	]
[ "bat",	"isTransient",	"command bat.isTransient(X_0:bat[:any_1]):bit ",	"BKCisTransient;",	""	]
[ "bat",	"isaKey",	"command bat.isaKey(X_0:bat[:any_1]):bit ",	"BKCgetKey;",	""	]
[ "bat",	"mergecand",	"command bat.mergecand(X_0:bat[:oid], X_1:bat[:oid]):bat[:oid] ",	"BKCmergecand;",	""	]
[ "bat",	"mirror",	"command bat.mirror(X_0:bat[:any_2]):bat[:oid] ",	"BKCmirror;",	""	]
[ "bat",	"new",	"pattern bat.new(X_0:any_1, X_1:bat[:any_2]):bat[:any_1] ",	"CMDBATdup;",	""	]
[ "bat",	"new",	"pattern bat.new(X_0:any_1):bat[:any_1] ",	"CMDBATnew;",	""	]
[ "bat",	"new",	"pattern bat.new(X_0:any_1, X_1:int):bat[:any_1] ",	"CMDBATnew;",	""	]
[ "bat",	"new",	"pattern bat.new(X_0:any_1, X_1:int, X_2:bit):bat[:any_1] ",	"CMDBATnew;",	""	]
[ "bat",	"new",	"pattern bat.new(X_0:any_1, X_1:lng):bat[:any_1] ",	"CMDBATnew;",	""	]
[ "bat",	"new",	"pattern bat.new(X_0:any_1, X_1:lng, X_2:bit):bat[:any_1] ",	"CMDBATnew;",	""	]
[ "bat",	"orderidx",	"pattern bat.orderidx(X_0:bat[:any_1]):void ",	"OIDXcreate;",	""	]
[ "bat",	"orderidx",	"pattern bat.orderidx(X_0:bat[:any_1], X_1:int):void ",	"OIDXcreate;",	""	]
[ "bat",	"orderidx",	"pattern bat.orderidx(X_0:bat[:any_1], X_1:bat[:any_1]...):void ",	"OIDXmerge;",	""	]
[ "bat",	"pack",	"pattern bat.pack(X_0:any_2...):bat[:any_2] ",	"MATpackValues;",	""	]
[ "bat",	"partition",	"pattern bat.partition(X_0:bat[:any_1], X_1:int, X_2:int):bat[:any_1] ",	"CMDBATpartition2;",	""	]
[ "bat",	"partition",	"pattern bat.partition(X_0:bat[:any_1]):bat[:any_1]... ",	"CMDBATpartition;",	""	]
[ "bat",	"replace",	"command bat.replace(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_1]):bat[:any_1] ",	"BKCbat_inplace;",	""	]
[ "bat",	"replace",	"command bat.replace(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit):bat[:any_1] ",	"BKCbat_inplace_force;",	""	]
[ "bat",	"replace",	"command bat.replace(X_0:bat[:any_1], X_1:oid, X_2:any_1):bat[:any_1] ",	"BKCbun_inplace;",	""	]
[ "bat",	"replace",	"command bat.replace(X_0:bat[:any_1], X_1:oid, X_2:any_1, X_3:bit):bat[:any_1] ",	"BKCbun_inplace_force;",	""	]
[ "bat",	"reuse",	"command bat.reuse(X_0:bat[:any_1], X_1:bat[:oid]):bat[:any_1] ",	"BKCreuseBAT;",	""	]
[ "bat",	"reuseMap",	"command bat.reuseMap(X_0:bat[:any_1], X_1:bat[:oid]):bat[:oid] ",	"BKCreuseBATmap;",	""	]
[ "bat",	"save",	"command bat.save(X_0:bat[:any_1]):void ",	"BKCsave2;",	""	]
[ "bat",	"save",	"command bat.save(X_0:str):bit ",	"BKCsave;",	""	]
[ "bat",	"setAccess",	"command bat.setAccess(X_0:bat[:any_1], X_1:str):bat[:any_1] ",	"BKCsetAccess;",	""	]
[ "bat",	"setColumn",	"command bat.setColumn(X_0:bat[:any_1], X_1:str):void ",	"BKCsetColumn;",	""	]
[ "bat",	"setHash",	"command bat.setHash(X_0:bat[:any_1]):bit ",	"BKCsetHash;",	""	]
[ "bat",	"setImprints",	"command bat.setImprints(X_0:bat[:any_1]):bit ",	"BKCsetImprints;",	""	]
[ "bat",	"setName",	"command bat.setName(X_0:bat[:any_1], X_1:str):void ",	"BKCsetName;",	""	]
[ "bat",	"setPersistent",	"command bat.setPersistent(X_0:bat[:any_1]):void ",	"BKCsetPersistent;",	""	]
[ "bat",	"setTransient",	"command bat.setTransient(X_0:bat[:any_1]):void ",	"BKCsetTransient;",	""	]
[ "bat",	"single",	"pattern bat.single(X_0:any_1):bat[:any_1] ",	"CMDBATsingle;",	""	]
[ "bataggr",	"allnotequal",	"pattern bataggr.allnotequal(X_0:bat[:any_1], X_1:bat[:any_1]):bit ",	"SQLallnotequal;",	""	]
[ "bataggr",	"anyequal",	"pattern bataggr.anyequal(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:bit] ",	"SQLanyequal;",	""	]
[ "bataggr",	"exist",	"pattern bataggr.exist(X_0:any_1):bat[:bit] ",	"SQLexist;",	""	]
[ "bataggr",	"exist",	"pattern bataggr.exist(X_0:bat[:any_1]):bat[:bit] ",	"SQLexist;",	""	]
[ "bataggr",	"exist",	"pattern bataggr.exist(X_0:bat[:any_1]):bit ",	"SQLexist;",	""	]
[ "bataggr",	"not_exist",	"pattern bataggr.not_exist(X_0:any_1):bat[:bit] ",	"SQLnot_exist;",	""	]
[ "bataggr",	"not_exist",	"pattern bataggr.not_exist(X_0:bat[:any_1]):bat[:bit] ",	"SQLnot_exist;",	""	]
[ "bataggr",	"not_exist",	"pattern bataggr.not_exist(X_0:bat[:any_1]):bit ",	"SQLnot_exist;",	""	]
[ "batalgebra",	"like",	"pattern batalgebra.like(X_0:bat[:str], X_1:bat[:str], X_2:str, X_3:bit):bat[:bit] ",	"BATPCRElike;",	""	]
[ "batalgebra",	"like",	"pattern batalgebra.like(X_0:bat[:str], X_1:str, X_2:str, X_3:bit):bat[:bit] ",	"BATPCRElike;",	""	]
[ "batalgebra",	"like",	"pattern batalgebra.like(X_0:str, X_1:bat[:str], X_2:str, X_3:bit):bat[:bit] ",	"BATPCRElike;",	""	]
[ "batalgebra",	"not_like",	"pattern batalgebra.not_like(X_0:bat[:str], X_1:bat[:str], X_2:str, X_3:bit):bat[:bit] ",	"BATPCREnotlike;",	""	]
[ "batalgebra",	"not_like",	"pattern batalgebra.not_like(X_0:bat[:str], X_1:str, X_2:str, X_3:bit):bat[:bit] ",	"BATPCREnotlike;",	""	]
[ "batalgebra",	"not_like",	"pattern batalgebra.not_like(X_0:str, X_1:bat[:str], X_2:str, X_3:bit):bat[:bit] ",	"BATPCREnotlike;",	""	]
[ "batblob",	"nitems",	"pattern batblob.nitems(X_0:bat[:blob]):bat[:int] ",	"BLOBnitems_bulk;",	""	]
[ "batblob",	"nitems",	"pattern batblob.nitems(X_0:bat[:blob], X_1:bat[:oid]):bat[:int] ",	"BLOBnitems_bulk;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:any_1, X_1:bat[:any_1]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:any_1, X_1:bat[:any_1], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:any_1], X_1:any_1):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:any_1], X_1:any_1, X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:int):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:int):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:lng):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:lng):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:sht):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:sht):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:date], X_1:bat[:date]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:date], X_1:bat[:date], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:date], X_1:bat[:date], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:date], X_1:bat[:date], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:date], X_1:date):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:date], X_1:date, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:date], X_1:date, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:date], X_1:date, X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:daytime], X_1:bat[:daytime]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:daytime], X_1:bat[:daytime], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:daytime], X_1:bat[:daytime], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:daytime], X_1:bat[:daytime], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:daytime], X_1:daytime):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:daytime], X_1:daytime, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:daytime], X_1:daytime, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:daytime], X_1:daytime, X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bte):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bte):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:lng):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:lng):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:sht):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:sht):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:json], X_1:bat[:json]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:json], X_1:bat[:json], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:json], X_1:bat[:json], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:json], X_1:bat[:json], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:json], X_1:json):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:json], X_1:json, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:json], X_1:json, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:json], X_1:json, X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bte):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bte):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:int):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:int):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:sht):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:sht):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bte):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bte):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:int):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:int):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:lng):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:lng):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:timestamp], X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:timestamp], X_1:bat[:timestamp], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:timestamp], X_1:bat[:timestamp], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:timestamp], X_1:bat[:timestamp], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:timestamp], X_1:timestamp):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:timestamp], X_1:timestamp, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:timestamp], X_1:timestamp, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:timestamp], X_1:timestamp, X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:uuid], X_1:bat[:uuid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:uuid], X_1:bat[:uuid], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:uuid], X_1:bat[:uuid], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:uuid], X_1:bat[:uuid], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:uuid], X_1:uuid):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:uuid], X_1:uuid, X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:uuid], X_1:uuid, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bat[:uuid], X_1:uuid, X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:date, X_1:bat[:date]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:date, X_1:bat[:date], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:date, X_1:bat[:date], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:date, X_1:bat[:date], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:daytime, X_1:bat[:daytime]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:daytime, X_1:bat[:daytime], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:daytime, X_1:bat[:daytime], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:daytime, X_1:bat[:daytime], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:json, X_1:bat[:json]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:json, X_1:bat[:json], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:json, X_1:bat[:json], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:json, X_1:bat[:json], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:sht]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:bte]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:int]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:lng]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:timestamp, X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:timestamp, X_1:bat[:timestamp], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:timestamp, X_1:bat[:timestamp], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:timestamp, X_1:bat[:timestamp], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:uuid, X_1:bat[:uuid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:uuid, X_1:bat[:uuid], X_2:bat[:oid]):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:uuid, X_1:bat[:uuid], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"!=",	"pattern batcalc.!=(X_0:uuid, X_1:bat[:uuid], X_2:bit):bat[:bit] ",	"CMDbatNE;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"%",	"pattern batcalc.%(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMODsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULenlarge;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"*",	"pattern batcalc.*(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMULsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"CMDbatADD;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:str] ",	"CMDbatADD;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:str] ",	"CMDbatADD;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDenlarge;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"+",	"pattern batcalc.+(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatADDsignal;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:bte]):bat[:bte] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:bte], X_1:bat[:oid]):bat[:bte] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:dbl]):bat[:dbl] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:flt]):bat[:flt] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:int]):bat[:int] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:int], X_1:bat[:oid]):bat[:int] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:lng]):bat[:lng] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:lng], X_1:bat[:oid]):bat[:lng] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:sht]):bat[:sht] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"++",	"pattern batcalc.++(X_0:bat[:sht], X_1:bat[:oid]):bat[:sht] ",	"CMDbatINCR;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte]):bat[:bte] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:oid]):bat[:bte] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl]):bat[:dbl] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt]):bat[:flt] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int]):bat[:int] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:oid]):bat[:int] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng]):bat[:lng] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:bat[:oid]):bat[:lng] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht]):bat[:sht] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:oid]):bat[:sht] ",	"CMDbatNEG;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBenlarge;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"-",	"pattern batcalc.-(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUBsignal;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:bte]):bat[:bte] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:bte], X_1:bat[:oid]):bat[:bte] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:dbl]):bat[:dbl] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:flt]):bat[:flt] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:int]):bat[:int] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:int], X_1:bat[:oid]):bat[:int] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:lng]):bat[:lng] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:lng], X_1:bat[:oid]):bat[:lng] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:sht]):bat[:sht] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"--",	"pattern batcalc.--(X_0:bat[:sht], X_1:bat[:oid]):bat[:sht] ",	"CMDbatDECR;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"/",	"pattern batcalc./(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIVsignal;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:any_1, X_1:bat[:any_1]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:any_1], X_1:any_1):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:bat[:int]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:bat[:lng]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:bat[:sht]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:int):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:lng):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:sht):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:date], X_1:bat[:date]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:date], X_1:bat[:date], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:date], X_1:date):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:date], X_1:date, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:daytime], X_1:bat[:daytime]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:daytime], X_1:bat[:daytime], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:daytime], X_1:daytime):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:daytime], X_1:daytime, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:bat[:bte]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:bat[:lng]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:bat[:sht]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:bte):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:lng):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:sht):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:json], X_1:bat[:json]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:json], X_1:bat[:json], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:json], X_1:json):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:json], X_1:json, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:bat[:bte]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:bat[:int]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:bat[:sht]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:bte):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:int):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:sht):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:bat[:bte]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:bat[:int]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:bat[:lng]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:bte):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:int):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:lng):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:timestamp], X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:timestamp], X_1:bat[:timestamp], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:timestamp], X_1:timestamp):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:timestamp], X_1:timestamp, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:uuid], X_1:bat[:uuid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:uuid], X_1:bat[:uuid], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:uuid], X_1:uuid):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bat[:uuid], X_1:uuid, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bte, X_1:bat[:int]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bte, X_1:bat[:lng]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bte, X_1:bat[:sht]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:date, X_1:bat[:date]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:date, X_1:bat[:date], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:daytime, X_1:bat[:daytime]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:daytime, X_1:bat[:daytime], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:int, X_1:bat[:bte]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:int, X_1:bat[:lng]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:int, X_1:bat[:sht]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:json, X_1:bat[:json]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:json, X_1:bat[:json], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:lng, X_1:bat[:bte]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:lng, X_1:bat[:int]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:lng, X_1:bat[:sht]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:sht, X_1:bat[:bte]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:sht, X_1:bat[:int]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:sht, X_1:bat[:lng]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:timestamp, X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:timestamp, X_1:bat[:timestamp], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:uuid, X_1:bat[:uuid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<",	"pattern batcalc.<(X_0:uuid, X_1:bat[:uuid], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLT;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:bat[:bte]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:bat[:int]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:bat[:lng]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:bat[:sht]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:bte):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:int):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:lng):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:sht):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:bat[:bte]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:bat[:int]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:bat[:lng]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:bat[:sht]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:bte):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:int):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:lng):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:sht):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:bat[:bte]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:bat[:int]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:bat[:lng]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:bat[:sht]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:bte):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:int):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:lng):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:sht):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:bat[:bte]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:bat[:int]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:bat[:lng]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:bat[:sht]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:bte):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:int):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:lng):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:sht):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bte, X_1:bat[:bte]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bte, X_1:bat[:int]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bte, X_1:bat[:lng]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bte, X_1:bat[:sht]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:int, X_1:bat[:bte]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:int, X_1:bat[:int]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:int, X_1:bat[:lng]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:int, X_1:bat[:sht]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:lng, X_1:bat[:bte]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:lng, X_1:bat[:int]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:lng, X_1:bat[:lng]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:lng, X_1:bat[:sht]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:sht, X_1:bat[:bte]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:sht, X_1:bat[:int]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:sht, X_1:bat[:lng]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:sht, X_1:bat[:sht]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<<",	"pattern batcalc.<<(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSHsignal;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:any_1, X_1:bat[:any_1]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:any_1], X_1:any_1):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:bat[:int]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:bat[:lng]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:bat[:sht]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:int):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:lng):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:sht):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:date], X_1:bat[:date]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:date], X_1:bat[:date], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:date], X_1:date):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:date], X_1:date, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:daytime], X_1:bat[:daytime]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:daytime], X_1:bat[:daytime], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:daytime], X_1:daytime):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:daytime], X_1:daytime, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:bat[:bte]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:bat[:lng]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:bat[:sht]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:bte):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:lng):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:sht):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:json], X_1:bat[:json]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:json], X_1:bat[:json], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:json], X_1:json):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:json], X_1:json, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:bat[:bte]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:bat[:int]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:bat[:sht]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:bte):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:int):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:sht):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:bat[:bte]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:bat[:int]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:bat[:lng]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:bte):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:int):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:lng):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:timestamp], X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:timestamp], X_1:bat[:timestamp], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:timestamp], X_1:timestamp):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:timestamp], X_1:timestamp, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:uuid], X_1:bat[:uuid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:uuid], X_1:bat[:uuid], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:uuid], X_1:uuid):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bat[:uuid], X_1:uuid, X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bte, X_1:bat[:int]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bte, X_1:bat[:lng]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bte, X_1:bat[:sht]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:date, X_1:bat[:date]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:date, X_1:bat[:date], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:daytime, X_1:bat[:daytime]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:daytime, X_1:bat[:daytime], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:int, X_1:bat[:bte]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:int, X_1:bat[:lng]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:int, X_1:bat[:sht]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:json, X_1:bat[:json]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:json, X_1:bat[:json], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:lng, X_1:bat[:bte]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:lng, X_1:bat[:int]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:lng, X_1:bat[:sht]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:sht, X_1:bat[:bte]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:sht, X_1:bat[:int]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:sht, X_1:bat[:lng]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:timestamp, X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:timestamp, X_1:bat[:timestamp], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:uuid, X_1:bat[:uuid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"<=",	"pattern batcalc.<=(X_0:uuid, X_1:bat[:uuid], X_2:bat[:oid]):bat[:bit] ",	"CMDbatLE;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:any_1, X_1:bat[:any_1]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:any_1, X_1:bat[:any_1], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:any_1], X_1:any_1):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:any_1], X_1:any_1, X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:int):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:int):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:lng):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:lng):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:sht):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:sht):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:date], X_1:bat[:date]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:date], X_1:bat[:date], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:date], X_1:bat[:date], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:date], X_1:bat[:date], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:date], X_1:date):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:date], X_1:date, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:date], X_1:date, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:date], X_1:date, X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:daytime], X_1:bat[:daytime]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:daytime], X_1:bat[:daytime], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:daytime], X_1:bat[:daytime], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:daytime], X_1:bat[:daytime], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:daytime], X_1:daytime):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:daytime], X_1:daytime, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:daytime], X_1:daytime, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:daytime], X_1:daytime, X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bte):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bte):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:lng):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:lng):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:sht):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:sht):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:json], X_1:bat[:json]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:json], X_1:bat[:json], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:json], X_1:bat[:json], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:json], X_1:bat[:json], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:json], X_1:json):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:json], X_1:json, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:json], X_1:json, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:json], X_1:json, X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bte):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bte):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:int):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:int):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:sht):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:sht):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bte):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bte):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:int):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:int):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:lng):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:lng):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:timestamp], X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:timestamp], X_1:bat[:timestamp], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:timestamp], X_1:bat[:timestamp], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:timestamp], X_1:bat[:timestamp], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:timestamp], X_1:timestamp):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:timestamp], X_1:timestamp, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:timestamp], X_1:timestamp, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:timestamp], X_1:timestamp, X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:uuid], X_1:bat[:uuid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:uuid], X_1:bat[:uuid], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:uuid], X_1:bat[:uuid], X_2:bat[:oid], X_3:bat[:oid], X_4:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:uuid], X_1:bat[:uuid], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:uuid], X_1:uuid):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:uuid], X_1:uuid, X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:uuid], X_1:uuid, X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bat[:uuid], X_1:uuid, X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:date, X_1:bat[:date]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:date, X_1:bat[:date], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:date, X_1:bat[:date], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:date, X_1:bat[:date], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:daytime, X_1:bat[:daytime]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:daytime, X_1:bat[:daytime], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:daytime, X_1:bat[:daytime], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:daytime, X_1:bat[:daytime], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:json, X_1:bat[:json]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:json, X_1:bat[:json], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:json, X_1:bat[:json], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:json, X_1:bat[:json], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:sht]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:bte]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:int]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:lng]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:timestamp, X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:timestamp, X_1:bat[:timestamp], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:timestamp, X_1:bat[:timestamp], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:timestamp, X_1:bat[:timestamp], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:uuid, X_1:bat[:uuid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:uuid, X_1:bat[:uuid], X_2:bat[:oid]):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:uuid, X_1:bat[:uuid], X_2:bat[:oid], X_3:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	"==",	"pattern batcalc.==(X_0:uuid, X_1:bat[:uuid], X_2:bit):bat[:bit] ",	"CMDbatEQ;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:any_1, X_1:bat[:any_1]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:any_1], X_1:any_1):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:bat[:int]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:bat[:lng]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:bat[:sht]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:int):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:lng):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:sht):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:date], X_1:bat[:date]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:date], X_1:bat[:date], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:date], X_1:date):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:date], X_1:date, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:daytime], X_1:bat[:daytime]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:daytime], X_1:bat[:daytime], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:daytime], X_1:daytime):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:daytime], X_1:daytime, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:bat[:bte]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:bat[:lng]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:bat[:sht]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:bte):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:lng):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:sht):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:json], X_1:bat[:json]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:json], X_1:bat[:json], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:json], X_1:json):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:json], X_1:json, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:bat[:bte]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:bat[:int]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:bat[:sht]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:bte):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:int):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:sht):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:bat[:bte]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:bat[:int]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:bat[:lng]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:bte):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:int):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:lng):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:timestamp], X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:timestamp], X_1:bat[:timestamp], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:timestamp], X_1:timestamp):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:timestamp], X_1:timestamp, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:uuid], X_1:bat[:uuid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:uuid], X_1:bat[:uuid], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:uuid], X_1:uuid):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bat[:uuid], X_1:uuid, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bte, X_1:bat[:int]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bte, X_1:bat[:lng]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bte, X_1:bat[:sht]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:date, X_1:bat[:date]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:date, X_1:bat[:date], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:daytime, X_1:bat[:daytime]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:daytime, X_1:bat[:daytime], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:int, X_1:bat[:bte]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:int, X_1:bat[:lng]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:int, X_1:bat[:sht]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:json, X_1:bat[:json]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:json, X_1:bat[:json], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:lng, X_1:bat[:bte]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:lng, X_1:bat[:int]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:lng, X_1:bat[:sht]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:sht, X_1:bat[:bte]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:sht, X_1:bat[:int]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:sht, X_1:bat[:lng]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:timestamp, X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:timestamp, X_1:bat[:timestamp], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:uuid, X_1:bat[:uuid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">",	"pattern batcalc.>(X_0:uuid, X_1:bat[:uuid], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGT;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:any_1, X_1:bat[:any_1]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:any_1], X_1:any_1):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:bat[:int]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:bat[:lng]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:bat[:sht]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:int):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:lng):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:sht):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:date], X_1:bat[:date]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:date], X_1:bat[:date], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:date], X_1:date):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:date], X_1:date, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:daytime], X_1:bat[:daytime]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:daytime], X_1:bat[:daytime], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:daytime], X_1:daytime):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:daytime], X_1:daytime, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:bat[:bte]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:bat[:lng]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:bat[:sht]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:bte):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:lng):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:sht):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:json], X_1:bat[:json]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:json], X_1:bat[:json], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:json], X_1:json):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:json], X_1:json, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:bat[:bte]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:bat[:int]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:bat[:sht]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:bte):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:int):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:sht):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:bat[:bte]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:bat[:int]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:bat[:lng]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:bte):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:int):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:lng):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:timestamp], X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:timestamp], X_1:bat[:timestamp], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:timestamp], X_1:timestamp):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:timestamp], X_1:timestamp, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:uuid], X_1:bat[:uuid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:uuid], X_1:bat[:uuid], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:uuid], X_1:uuid):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bat[:uuid], X_1:uuid, X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bte, X_1:bat[:int]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bte, X_1:bat[:lng]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bte, X_1:bat[:sht]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:date, X_1:bat[:date]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:date, X_1:bat[:date], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:daytime, X_1:bat[:daytime]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:daytime, X_1:bat[:daytime], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:int, X_1:bat[:bte]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:int, X_1:bat[:lng]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:int, X_1:bat[:sht]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:json, X_1:bat[:json]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:json, X_1:bat[:json], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:lng, X_1:bat[:bte]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:lng, X_1:bat[:int]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:lng, X_1:bat[:sht]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:sht, X_1:bat[:bte]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:sht, X_1:bat[:int]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:sht, X_1:bat[:lng]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:timestamp, X_1:bat[:timestamp]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:timestamp, X_1:bat[:timestamp], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:uuid, X_1:bat[:uuid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">=",	"pattern batcalc.>=(X_0:uuid, X_1:bat[:uuid], X_2:bat[:oid]):bat[:bit] ",	"CMDbatGE;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:bat[:bte]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:bat[:int]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:bat[:lng]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:bat[:sht]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:bte):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:int):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:lng):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:sht):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:bat[:bte]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:bat[:int]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:bat[:lng]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:bat[:sht]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:bte):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:int):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:lng):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:sht):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:bat[:bte]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:bat[:int]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:bat[:lng]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:bat[:sht]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:bte):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:int):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:lng):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:sht):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:bat[:bte]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:bat[:int]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:bat[:lng]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:bat[:sht]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:bte):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:int):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:lng):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:sht):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bte, X_1:bat[:bte]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bte, X_1:bat[:int]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bte, X_1:bat[:lng]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bte, X_1:bat[:sht]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:int, X_1:bat[:bte]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:int, X_1:bat[:int]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:int, X_1:bat[:lng]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:int, X_1:bat[:sht]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:lng, X_1:bat[:bte]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:lng, X_1:bat[:int]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:lng, X_1:bat[:lng]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:lng, X_1:bat[:sht]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:sht, X_1:bat[:bte]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:sht, X_1:bat[:int]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:sht, X_1:bat[:lng]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:sht, X_1:bat[:sht]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	">>",	"pattern batcalc.>>(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSHsignal;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:bte]):bat[:bte] ",	"CMDbatABS;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:bte], X_1:bat[:oid]):bat[:bte] ",	"CMDbatABS;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:dbl]):bat[:dbl] ",	"CMDbatABS;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDbatABS;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:flt]):bat[:flt] ",	"CMDbatABS;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDbatABS;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:int]):bat[:int] ",	"CMDbatABS;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:int], X_1:bat[:oid]):bat[:int] ",	"CMDbatABS;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:lng]):bat[:lng] ",	"CMDbatABS;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:lng], X_1:bat[:oid]):bat[:lng] ",	"CMDbatABS;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:sht]):bat[:sht] ",	"CMDbatABS;",	""	]
[ "batcalc",	"abs",	"pattern batcalc.abs(X_0:bat[:sht], X_1:bat[:oid]):bat[:sht] ",	"CMDbatABS;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatADD;",	""	]
[ "batcalc",	"add_noerror",	"pattern batcalc.add_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatADD;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:bit], X_1:bat[:bit]):bat[:bit] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:bit], X_1:bat[:bit], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:bit], X_1:bit):bat[:bit] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:bit], X_1:bit, X_2:bat[:oid]):bat[:bit] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:bte], X_1:bat[:bte]):bat[:bte] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:bte], X_1:bte):bat[:bte] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:dbl], X_1:bat[:dbl]):bat[:dbl] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:dbl], X_1:dbl):bat[:dbl] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:flt], X_1:bat[:flt]):bat[:flt] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:flt], X_1:flt):bat[:flt] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:int], X_1:bat[:int]):bat[:int] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:int], X_1:int):bat[:int] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:lng], X_1:bat[:lng]):bat[:lng] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:lng], X_1:lng):bat[:lng] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:sht], X_1:bat[:sht]):bat[:sht] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:sht], X_1:sht):bat[:sht] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bit, X_1:bat[:bit]):bat[:bit] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bit, X_1:bat[:bit], X_2:bat[:oid]):bat[:bit] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bte, X_1:bat[:bte]):bat[:bte] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:dbl, X_1:bat[:dbl]):bat[:dbl] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:flt, X_1:bat[:flt]):bat[:flt] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:int, X_1:bat[:int]):bat[:int] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:lng, X_1:bat[:lng]):bat[:lng] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:sht, X_1:bat[:sht]):bat[:sht] ",	"CMDbatAND;",	""	]
[ "batcalc",	"and",	"pattern batcalc.and(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatAND;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:bte]) (X_1:dbl, X_2:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:bte]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:bte], X_1:bat[:oid]) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:bte], X_1:bat[:oid]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:bte], X_1:bat[:oid], X_2:int) (X_3:dbl, X_4:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:bte], X_1:bat[:oid], X_2:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:bte], X_1:int) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:bte], X_1:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:dbl]) (X_1:dbl, X_2:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:dbl]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:dbl], X_1:bat[:oid]) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:dbl], X_1:bat[:oid]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:dbl], X_1:bat[:oid], X_2:int) (X_3:dbl, X_4:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:dbl], X_1:bat[:oid], X_2:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:dbl], X_1:int) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:dbl], X_1:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:flt]) (X_1:dbl, X_2:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:flt]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:flt], X_1:bat[:oid]) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:flt], X_1:bat[:oid]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:flt], X_1:bat[:oid], X_2:int) (X_3:dbl, X_4:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:flt], X_1:bat[:oid], X_2:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:flt], X_1:int) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:flt], X_1:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:int]) (X_1:dbl, X_2:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:int]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:int], X_1:bat[:oid]) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:int], X_1:bat[:oid]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:int], X_1:bat[:oid], X_2:int) (X_3:dbl, X_4:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:int], X_1:bat[:oid], X_2:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:int], X_1:int) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:int], X_1:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:lng]) (X_1:dbl, X_2:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:lng]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:lng], X_1:bat[:oid]) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:lng], X_1:bat[:oid]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:lng], X_1:bat[:oid], X_2:int) (X_3:dbl, X_4:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:lng], X_1:bat[:oid], X_2:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:lng], X_1:int) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:lng], X_1:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:sht]) (X_1:dbl, X_2:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:sht]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:sht], X_1:bat[:oid]) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:sht], X_1:bat[:oid]):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:sht], X_1:bat[:oid], X_2:int) (X_3:dbl, X_4:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:sht], X_1:bat[:oid], X_2:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:sht], X_1:int) (X_2:dbl, X_3:lng) ",	"CMDcalcavg;",	""	]
[ "batcalc",	"avg",	"pattern batcalc.avg(X_0:bat[:sht], X_1:int):dbl ",	"CMDcalcavg;",	""	]
[ "batcalc",	"between",	"pattern batcalc.between(X_0:bat[:any_1], X_1:any_1, X_2:any_1, X_3:bat[:oid], X_4:bit, X_5:bit, X_6:bit, X_7:bit, X_8:bit):bat[:bit] ",	"CMDbatBETWEEN;",	""	]
[ "batcalc",	"between",	"pattern batcalc.between(X_0:bat[:any_1], X_1:any_1, X_2:any_1, X_3:bit, X_4:bit, X_5:bit, X_6:bit, X_7:bit):bat[:bit] ",	"CMDbatBETWEEN;",	""	]
[ "batcalc",	"between",	"pattern batcalc.between(X_0:bat[:any_1], X_1:any_1, X_2:bat[:any_1], X_3:bat[:oid], X_4:bat[:oid], X_5:bit, X_6:bit, X_7:bit, X_8:bit, X_9:bit):bat[:bit] ",	"CMDbatBETWEEN;",	""	]
[ "batcalc",	"between",	"pattern batcalc.between(X_0:bat[:any_1], X_1:any_1, X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:bit, X_6:bit, X_7:bit):bat[:bit] ",	"CMDbatBETWEEN;",	""	]
[ "batcalc",	"between",	"pattern batcalc.between(X_0:bat[:any_1], X_1:bat[:any_1], X_2:any_1, X_3:bat[:oid], X_4:bat[:oid], X_5:bit, X_6:bit, X_7:bit, X_8:bit, X_9:bit):bat[:bit] ",	"CMDbatBETWEEN;",	""	]
[ "batcalc",	"between",	"pattern batcalc.between(X_0:bat[:any_1], X_1:bat[:any_1], X_2:any_1, X_3:bit, X_4:bit, X_5:bit, X_6:bit, X_7:bit):bat[:bit] ",	"CMDbatBETWEEN;",	""	]
[ "batcalc",	"between",	"pattern batcalc.between(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:any_1], X_3:bat[:oid], X_4:bat[:oid], X_5:bat[:oid], X_6:bit, X_7:bit, X_8:bit, X_9:bit, X_10:bit):bat[:bit] ",	"CMDbatBETWEEN;",	""	]
[ "batcalc",	"between",	"pattern batcalc.between(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:any_1], X_3:bit, X_4:bit, X_5:bit, X_6:bit, X_7:bit):bat[:bit] ",	"CMDbatBETWEEN;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:bit]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:bit], X_1:bat[:oid]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:bte]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:bte], X_1:bat[:oid]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:dbl]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:dbl], X_1:bat[:oid]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:flt]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:flt], X_1:bat[:oid]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:int]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:int], X_1:bat[:oid]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:lng]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:lng], X_1:bat[:oid]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:oid]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:oid], X_1:bat[:oid]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:sht]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:sht], X_1:bat[:oid]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:str]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit",	"pattern batcalc.bit(X_0:bat[:str], X_1:bat[:oid]):bat[:bit] ",	"CMDconvertsignal_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:bit]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:bit], X_1:bat[:oid]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:bte]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:bte], X_1:bat[:oid]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:dbl]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:dbl], X_1:bat[:oid]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:flt]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:flt], X_1:bat[:oid]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:int]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:int], X_1:bat[:oid]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:lng]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:lng], X_1:bat[:oid]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:oid]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:oid], X_1:bat[:oid]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:sht]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:sht], X_1:bat[:oid]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:str]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"bit_noerror",	"pattern batcalc.bit_noerror(X_0:bat[:str], X_1:bat[:oid]):bat[:bit] ",	"CMDconvert_bit;",	""	]
[ "batcalc",	"blob",	"command batcalc.blob(X_0:bat[:blob], X_1:bat[:oid]):bat[:blob] ",	"BLOBblob_blob_bulk;",	""	]
[ "batcalc",	"blob",	"command batcalc.blob(X_0:bat[:str], X_1:bat[:oid]):bat[:blob] ",	"batstr_2_blob;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:bit]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:bit], X_1:bat[:oid]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:bte]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:bte], X_1:bat[:oid]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:dbl]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:dbl], X_1:bat[:oid]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:flt]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:flt], X_1:bat[:oid]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:int]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:int], X_1:bat[:oid]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:lng]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:lng], X_1:bat[:oid]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:oid]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:oid], X_1:bat[:oid]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:sht]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:sht], X_1:bat[:oid]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:str]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:str], X_1:bat[:oid]):bat[:bte] ",	"CMDconvertsignal_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"batbte_dec2_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:int, X_1:bat[:bte], X_2:bat[:oid], X_3:int, X_4:int):bat[:bte] ",	"batbte_dec2dec_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:bat[:bte], X_1:bat[:oid], X_2:int, X_3:int):bat[:bte] ",	"batbte_num2dec_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:bat[:dbl], X_1:bat[:oid], X_2:int, X_3:int):bat[:bte] ",	"batdbl_num2dec_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:bat[:flt], X_1:bat[:oid], X_2:int, X_3:int):bat[:bte] ",	"batflt_num2dec_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"batint_dec2_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:int, X_1:bat[:int], X_2:bat[:oid], X_3:int, X_4:int):bat[:bte] ",	"batint_dec2dec_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:bat[:int], X_1:bat[:oid], X_2:int, X_3:int):bat[:bte] ",	"batint_num2dec_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"batlng_dec2_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:int, X_1:bat[:lng], X_2:bat[:oid], X_3:int, X_4:int):bat[:bte] ",	"batlng_dec2dec_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:bat[:lng], X_1:bat[:oid], X_2:int, X_3:int):bat[:bte] ",	"batlng_num2dec_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:bat[:oid], X_1:int, X_2:int):bat[:bte] ",	"batnil_2dec_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"batsht_dec2_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:int, X_1:bat[:sht], X_2:bat[:oid], X_3:int, X_4:int):bat[:bte] ",	"batsht_dec2dec_bte;",	""	]
[ "batcalc",	"bte",	"command batcalc.bte(X_0:bat[:sht], X_1:bat[:oid], X_2:int, X_3:int):bat[:bte] ",	"batsht_num2dec_bte;",	""	]
[ "batcalc",	"bte",	"pattern batcalc.bte(X_0:bat[:str], X_1:bat[:oid], X_2:int, X_3:int):bat[:bte] ",	"batstr_2dec_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:bit]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:bit], X_1:bat[:oid]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:bte]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:bte], X_1:bat[:oid]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:dbl]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:dbl], X_1:bat[:oid]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:flt]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:flt], X_1:bat[:oid]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:int]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:int], X_1:bat[:oid]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:lng]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:lng], X_1:bat[:oid]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:oid]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:oid], X_1:bat[:oid]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:sht]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:sht], X_1:bat[:oid]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:str]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"bte_noerror",	"pattern batcalc.bte_noerror(X_0:bat[:str], X_1:bat[:oid]):bat[:bte] ",	"CMDconvert_bte;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bit], X_1:bat[:bit]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bit], X_1:bat[:bit], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bit], X_1:bit):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bit], X_1:bit, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bte):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:dbl):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:flt):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:int):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:lng):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:sht):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bte):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:dbl):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:flt):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:int):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:lng):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:sht):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bte):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:dbl):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:flt):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:int):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:lng):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:sht):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bte):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:dbl):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:flt):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:int):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:lng):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:sht):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bte):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:dbl):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:flt):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:int):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:lng):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:sht):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:oid], X_1:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:oid], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:oid], X_1:oid):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:oid], X_1:oid, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bte):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:dbl):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:flt):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:int):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:lng):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:sht):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:str], X_1:bat[:str]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:str], X_1:str):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bit, X_1:bat[:bit]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bit, X_1:bat[:bit], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:oid, X_1:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:oid, X_1:bat[:oid], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:bte]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:dbl]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:flt]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:int]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:lng]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:sht]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:str, X_1:bat[:str]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"cmp",	"pattern batcalc.cmp(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:bte] ",	"CMDbatCMP;",	""	]
[ "batcalc",	"date",	"pattern batcalc.date(X_0:bat[:date], X_1:bat[:oid]):bat[:date] ",	"MTIMEdate_date_bulk;",	""	]
[ "batcalc",	"date",	"pattern batcalc.date(X_0:bat[:str], X_1:bat[:oid]):bat[:date] ",	"MTIMEdate_fromstr_bulk;",	""	]
[ "batcalc",	"date",	"pattern batcalc.date(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:date] ",	"MTIMEtimestamp_extract_date_bulk;",	""	]
[ "batcalc",	"date",	"command batcalc.date(X_0:bat[:str], X_1:bat[:oid]):bat[:date] ",	"batstr_2_date;",	""	]
[ "batcalc",	"date",	"pattern batcalc.date(X_0:bat[:oid]):bat[:date] ",	"nil_2_date;",	""	]
[ "batcalc",	"daytime",	"pattern batcalc.daytime(X_0:bat[:daytime], X_1:bat[:oid]):bat[:daytime] ",	"MTIMEdaytime_daytime_bulk;",	""	]
[ "batcalc",	"daytime",	"pattern batcalc.daytime(X_0:bat[:lng], X_1:bat[:oid]):bat[:daytime] ",	"MTIMEdaytime_fromseconds_bulk;",	""	]
[ "batcalc",	"daytime",	"pattern batcalc.daytime(X_0:bat[:str], X_1:bat[:oid]):bat[:daytime] ",	"MTIMEdaytime_fromstr_bulk;",	""	]
[ "batcalc",	"daytime",	"pattern batcalc.daytime(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:daytime] ",	"MTIMEtimestamp_extract_daytime_bulk;",	""	]
[ "batcalc",	"daytime",	"command batcalc.daytime(X_0:bat[:str], X_1:bat[:oid], X_2:int):bat[:daytime] ",	"batstr_2time_daytime;",	""	]
[ "batcalc",	"daytime",	"pattern batcalc.daytime(X_0:bat[:daytime], X_1:bat[:oid], X_2:int):bat[:daytime] ",	"daytime_2time_daytime;",	""	]
[ "batcalc",	"daytime",	"pattern batcalc.daytime(X_0:bat[:oid], X_1:int):bat[:daytime] ",	"nil_2time_daytime;",	""	]
[ "batcalc",	"daytime",	"pattern batcalc.daytime(X_0:bat[:lng], X_1:bat[:oid], X_2:int):bat[:daytime] ",	"second_interval_2_daytime;",	""	]
[ "batcalc",	"daytime",	"pattern batcalc.daytime(X_0:bat[:str], X_1:bat[:oid], X_2:int, X_3:int):bat[:daytime] ",	"str_2time_daytimetz;",	""	]
[ "batcalc",	"daytime",	"pattern batcalc.daytime(X_0:bat[:timestamp], X_1:bat[:oid], X_2:int):bat[:daytime] ",	"timestamp_2_daytime;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:bit]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:bit], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:bte]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:bte], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:dbl]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:flt]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:flt], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:int]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:int], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:lng]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:lng], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:oid]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:oid], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:sht]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:sht], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:str]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"pattern batcalc.dbl(X_0:bat[:str], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvertsignal_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"batbte_dec2_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:int, X_1:bat[:bte], X_2:bat[:oid], X_3:int, X_4:int):bat[:dbl] ",	"batbte_dec2dec_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:bat[:bte], X_1:bat[:oid], X_2:int, X_3:int):bat[:dbl] ",	"batbte_num2dec_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"batint_dec2_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:int, X_1:bat[:int], X_2:bat[:oid], X_3:int, X_4:int):bat[:dbl] ",	"batint_dec2dec_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:bat[:int], X_1:bat[:oid], X_2:int, X_3:int):bat[:dbl] ",	"batint_num2dec_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"batlng_dec2_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:int, X_1:bat[:lng], X_2:bat[:oid], X_3:int, X_4:int):bat[:dbl] ",	"batlng_dec2dec_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:bat[:lng], X_1:bat[:oid], X_2:int, X_3:int):bat[:dbl] ",	"batlng_num2dec_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"batsht_dec2_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:int, X_1:bat[:sht], X_2:bat[:oid], X_3:int, X_4:int):bat[:dbl] ",	"batsht_dec2dec_dbl;",	""	]
[ "batcalc",	"dbl",	"command batcalc.dbl(X_0:bat[:sht], X_1:bat[:oid], X_2:int, X_3:int):bat[:dbl] ",	"batsht_num2dec_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:bit]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:bit], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:bte]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:bte], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:dbl]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:flt]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:flt], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:int]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:int], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:lng]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:lng], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:oid]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:oid], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:sht]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:sht], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:str]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dbl_noerror",	"pattern batcalc.dbl_noerror(X_0:bat[:str], X_1:bat[:oid]):bat[:dbl] ",	"CMDconvert_dbl;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:bte], X_1:bte):bat[:bte] ",	"bte_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"bte_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bte, X_1:bat[:bte]):bat[:bte] ",	"bte_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"bte_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:bte], X_1:bat[:bte]):bat[:bte] ",	"bte_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"bte_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:dbl], X_1:dbl):bat[:dbl] ",	"dbl_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"dbl_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:dbl, X_1:bat[:dbl]):bat[:dbl] ",	"dbl_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"dbl_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:dbl], X_1:bat[:dbl]):bat[:dbl] ",	"dbl_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"dbl_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:flt], X_1:flt):bat[:flt] ",	"flt_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"flt_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:flt, X_1:bat[:flt]):bat[:flt] ",	"flt_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"flt_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:flt], X_1:bat[:flt]):bat[:flt] ",	"flt_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"flt_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:int], X_1:int):bat[:int] ",	"int_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"int_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:int, X_1:bat[:int]):bat[:int] ",	"int_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"int_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:int], X_1:bat[:int]):bat[:int] ",	"int_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"int_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:lng], X_1:lng):bat[:lng] ",	"lng_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"lng_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:lng, X_1:bat[:lng]):bat[:lng] ",	"lng_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"lng_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:lng], X_1:bat[:lng]):bat[:lng] ",	"lng_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"lng_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:sht], X_1:sht):bat[:sht] ",	"sht_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"sht_bat_dec_round_wrap;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:sht, X_1:bat[:sht]):bat[:sht] ",	"sht_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"sht_bat_dec_round_wrap_cst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:sht], X_1:bat[:sht]):bat[:sht] ",	"sht_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"dec_round",	"pattern batcalc.dec_round(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"sht_bat_dec_round_wrap_nocst;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"div_noerror",	"pattern batcalc.div_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatDIV;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:bit]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:bit], X_1:bat[:oid]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:bte]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:bte], X_1:bat[:oid]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:dbl]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:dbl], X_1:bat[:oid]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:flt]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:int]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:int], X_1:bat[:oid]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:lng]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:lng], X_1:bat[:oid]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:oid]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:oid], X_1:bat[:oid]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:sht]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:sht], X_1:bat[:oid]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:str]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"pattern batcalc.flt(X_0:bat[:str], X_1:bat[:oid]):bat[:flt] ",	"CMDconvertsignal_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"batbte_dec2_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:int, X_1:bat[:bte], X_2:bat[:oid], X_3:int, X_4:int):bat[:flt] ",	"batbte_dec2dec_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:bat[:bte], X_1:bat[:oid], X_2:int, X_3:int):bat[:flt] ",	"batbte_num2dec_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"batint_dec2_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:int, X_1:bat[:int], X_2:bat[:oid], X_3:int, X_4:int):bat[:flt] ",	"batint_dec2dec_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:bat[:int], X_1:bat[:oid], X_2:int, X_3:int):bat[:flt] ",	"batint_num2dec_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:flt] ",	"batlng_dec2_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:int, X_1:bat[:lng], X_2:bat[:oid], X_3:int, X_4:int):bat[:flt] ",	"batlng_dec2dec_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:bat[:lng], X_1:bat[:oid], X_2:int, X_3:int):bat[:flt] ",	"batlng_num2dec_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"batsht_dec2_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:int, X_1:bat[:sht], X_2:bat[:oid], X_3:int, X_4:int):bat[:flt] ",	"batsht_dec2dec_flt;",	""	]
[ "batcalc",	"flt",	"command batcalc.flt(X_0:bat[:sht], X_1:bat[:oid], X_2:int, X_3:int):bat[:flt] ",	"batsht_num2dec_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:bit]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:bit], X_1:bat[:oid]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:bte]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:bte], X_1:bat[:oid]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:dbl]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:dbl], X_1:bat[:oid]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:flt]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:int]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:int], X_1:bat[:oid]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:lng]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:lng], X_1:bat[:oid]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:oid]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:oid], X_1:bat[:oid]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:sht]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:sht], X_1:bat[:oid]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:str]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"flt_noerror",	"pattern batcalc.flt_noerror(X_0:bat[:str], X_1:bat[:oid]):bat[:flt] ",	"CMDconvert_flt;",	""	]
[ "batcalc",	"hash",	"command batcalc.hash(X_0:bat[:any_1]):bat[:lng] ",	"MKEYbathash;",	""	]
[ "batcalc",	"hash",	"command batcalc.hash(X_0:bat[:bte]):bat[:lng] ",	"MKEYbathash;",	""	]
[ "batcalc",	"hash",	"command batcalc.hash(X_0:bat[:dbl]):bat[:lng] ",	"MKEYbathash;",	""	]
[ "batcalc",	"hash",	"command batcalc.hash(X_0:bat[:flt]):bat[:lng] ",	"MKEYbathash;",	""	]
[ "batcalc",	"hash",	"command batcalc.hash(X_0:bat[:int]):bat[:lng] ",	"MKEYbathash;",	""	]
[ "batcalc",	"hash",	"command batcalc.hash(X_0:bat[:lng]):bat[:lng] ",	"MKEYbathash;",	""	]
[ "batcalc",	"hash",	"command batcalc.hash(X_0:bat[:lng]):bat[:lng] ",	"MKEYbathash;",	""	]
[ "batcalc",	"hash",	"command batcalc.hash(X_0:bat[:oid]):bat[:lng] ",	"MKEYbathash;",	""	]
[ "batcalc",	"hash",	"command batcalc.hash(X_0:bat[:sht]):bat[:lng] ",	"MKEYbathash;",	""	]
[ "batcalc",	"identity",	"command batcalc.identity(X_0:bat[:any]):bat[:oid] ",	"BATSQLidentity;",	""	]
[ "batcalc",	"identity",	"pattern batcalc.identity(X_0:bat[:any], X_1:oid) (X_2:bat[:oid], X_3:oid) ",	"PBATSQLidentity;",	""	]
[ "batcalc",	"ifthenelse",	"pattern batcalc.ifthenelse(X_0:bat[:bit], X_1:any_1, X_2:any_1):bat[:any_1] ",	"CMDifthen;",	""	]
[ "batcalc",	"ifthenelse",	"pattern batcalc.ifthenelse(X_0:bat[:bit], X_1:any_1, X_2:bat[:any_1]):bat[:any_1] ",	"CMDifthen;",	""	]
[ "batcalc",	"ifthenelse",	"pattern batcalc.ifthenelse(X_0:bat[:bit], X_1:bat[:any_1], X_2:any_1):bat[:any_1] ",	"CMDifthen;",	""	]
[ "batcalc",	"ifthenelse",	"pattern batcalc.ifthenelse(X_0:bat[:bit], X_1:bat[:any_1], X_2:bat[:any_1]):bat[:any_1] ",	"CMDifthen;",	""	]
[ "batcalc",	"ifthenelse",	"pattern batcalc.ifthenelse(X_0:bit, X_1:any_1, X_2:bat[:any_1]):bat[:any_1] ",	"CMDifthen;",	""	]
[ "batcalc",	"ifthenelse",	"pattern batcalc.ifthenelse(X_0:bit, X_1:bat[:any_1], X_2:any_1):bat[:any_1] ",	"CMDifthen;",	""	]
[ "batcalc",	"ifthenelse",	"pattern batcalc.ifthenelse(X_0:bit, X_1:bat[:any_1], X_2:bat[:any_1]):bat[:any_1] ",	"CMDifthen;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:bit]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:bit], X_1:bat[:oid]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:bte]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:bte], X_1:bat[:oid]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:dbl]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:dbl], X_1:bat[:oid]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:flt]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:flt], X_1:bat[:oid]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:int]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:int], X_1:bat[:oid]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:lng]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:lng], X_1:bat[:oid]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:oid]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:oid], X_1:bat[:oid]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:sht]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:sht], X_1:bat[:oid]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:str]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:str], X_1:bat[:oid]):bat[:int] ",	"CMDconvertsignal_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"batbte_dec2_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:int, X_1:bat[:bte], X_2:bat[:oid], X_3:int, X_4:int):bat[:int] ",	"batbte_dec2dec_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:bat[:bte], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"batbte_num2dec_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:bat[:dbl], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"batdbl_num2dec_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:bat[:flt], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"batflt_num2dec_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"batint_dec2_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:int, X_1:bat[:int], X_2:bat[:oid], X_3:int, X_4:int):bat[:int] ",	"batint_dec2dec_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:bat[:int], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"batint_num2dec_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"batlng_dec2_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:int, X_1:bat[:lng], X_2:bat[:oid], X_3:int, X_4:int):bat[:int] ",	"batlng_dec2dec_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:bat[:lng], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"batlng_num2dec_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:bat[:oid], X_1:int, X_2:int):bat[:int] ",	"batnil_2dec_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"batsht_dec2_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:int, X_1:bat[:sht], X_2:bat[:oid], X_3:int, X_4:int):bat[:int] ",	"batsht_dec2dec_int;",	""	]
[ "batcalc",	"int",	"command batcalc.int(X_0:bat[:sht], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"batsht_num2dec_int;",	""	]
[ "batcalc",	"int",	"pattern batcalc.int(X_0:bat[:str], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"batstr_2dec_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:bit]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:bit], X_1:bat[:oid]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:bte]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:bte], X_1:bat[:oid]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:dbl]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:dbl], X_1:bat[:oid]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:flt]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:flt], X_1:bat[:oid]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:int]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:int], X_1:bat[:oid]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:lng]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:lng], X_1:bat[:oid]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:oid]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:oid], X_1:bat[:oid]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:sht]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:sht], X_1:bat[:oid]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:str]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"int_noerror",	"pattern batcalc.int_noerror(X_0:bat[:str], X_1:bat[:oid]):bat[:int] ",	"CMDconvert_int;",	""	]
[ "batcalc",	"isnil",	"pattern batcalc.isnil(X_0:bat[:any]):bat[:bit] ",	"CMDbatISNIL;",	""	]
[ "batcalc",	"isnil",	"pattern batcalc.isnil(X_0:bat[:any], X_1:bat[:oid]):bat[:bit] ",	"CMDbatISNIL;",	""	]
[ "batcalc",	"isnotnil",	"pattern batcalc.isnotnil(X_0:bat[:any]):bat[:bit] ",	"CMDbatISNOTNIL;",	""	]
[ "batcalc",	"isnotnil",	"pattern batcalc.isnotnil(X_0:bat[:any], X_1:bat[:oid]):bat[:bit] ",	"CMDbatISNOTNIL;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:bte]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:bte], X_1:bat[:oid]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:dbl]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:dbl], X_1:bat[:oid]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:flt]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:flt], X_1:bat[:oid]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:int]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:int], X_1:bat[:oid]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:lng]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:lng], X_1:bat[:oid]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:sht]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"iszero",	"pattern batcalc.iszero(X_0:bat[:sht], X_1:bat[:oid]):bat[:bit] ",	"CMDbatISZERO;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:bit]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:bit], X_1:bat[:oid]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:bte]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:bte], X_1:bat[:oid]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:dbl]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:dbl], X_1:bat[:oid]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:flt]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:flt], X_1:bat[:oid]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:int]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:int], X_1:bat[:oid]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:lng]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:lng], X_1:bat[:oid]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:oid]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:oid], X_1:bat[:oid]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:sht]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:sht], X_1:bat[:oid]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:str]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:str], X_1:bat[:oid]):bat[:lng] ",	"CMDconvertsignal_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"batbte_dec2_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:int, X_1:bat[:bte], X_2:bat[:oid], X_3:int, X_4:int):bat[:lng] ",	"batbte_dec2dec_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:bat[:bte], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"batbte_num2dec_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:bat[:dbl], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"batdbl_num2dec_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:bat[:flt], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"batflt_num2dec_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"batint_dec2_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:int, X_1:bat[:int], X_2:bat[:oid], X_3:int, X_4:int):bat[:lng] ",	"batint_dec2dec_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:bat[:int], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"batint_num2dec_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"batlng_dec2_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:int, X_1:bat[:lng], X_2:bat[:oid], X_3:int, X_4:int):bat[:lng] ",	"batlng_dec2dec_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:bat[:lng], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"batlng_num2dec_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:bat[:oid], X_1:int, X_2:int):bat[:lng] ",	"batnil_2dec_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"batsht_dec2_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:int, X_1:bat[:sht], X_2:bat[:oid], X_3:int, X_4:int):bat[:lng] ",	"batsht_dec2dec_lng;",	""	]
[ "batcalc",	"lng",	"command batcalc.lng(X_0:bat[:sht], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"batsht_num2dec_lng;",	""	]
[ "batcalc",	"lng",	"pattern batcalc.lng(X_0:bat[:str], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"batstr_2dec_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:bit]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:bit], X_1:bat[:oid]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:bte]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:bte], X_1:bat[:oid]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:dbl]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:dbl], X_1:bat[:oid]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:flt]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:flt], X_1:bat[:oid]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:int]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:int], X_1:bat[:oid]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:lng]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:lng], X_1:bat[:oid]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:oid]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:oid], X_1:bat[:oid]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:sht]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:sht], X_1:bat[:oid]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:str]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lng_noerror",	"pattern batcalc.lng_noerror(X_0:bat[:str], X_1:bat[:oid]):bat[:lng] ",	"CMDconvert_lng;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:bat[:bte]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:bat[:int]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:bat[:lng]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:bat[:sht]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:bte):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:int):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:lng):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:sht):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:bat[:bte]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:bat[:int]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:bat[:lng]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:bat[:sht]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:bte):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:int):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:lng):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:sht):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:bat[:bte]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:bat[:int]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:bat[:lng]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:bat[:sht]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:bte):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:int):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:lng):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:sht):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:bat[:bte]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:bat[:int]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:bat[:lng]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:bat[:sht]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:bte):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:int):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:lng):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:sht):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bte, X_1:bat[:bte]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bte, X_1:bat[:int]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bte, X_1:bat[:lng]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bte, X_1:bat[:sht]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:int, X_1:bat[:bte]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:int, X_1:bat[:int]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:int, X_1:bat[:lng]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:int, X_1:bat[:sht]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:lng, X_1:bat[:bte]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:lng, X_1:bat[:int]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:lng, X_1:bat[:lng]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:lng, X_1:bat[:sht]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:sht, X_1:bat[:bte]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:sht, X_1:bat[:int]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:sht, X_1:bat[:lng]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:sht, X_1:bat[:sht]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"lsh_noerror",	"pattern batcalc.lsh_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatLSH;",	""	]
[ "batcalc",	"max",	"pattern batcalc.max(X_0:any_1, X_1:bat[:any_1]):bat[:any_1] ",	"CMDbatMAX;",	""	]
[ "batcalc",	"max",	"pattern batcalc.max(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid]):bat[:any_1] ",	"CMDbatMAX;",	""	]
[ "batcalc",	"max",	"pattern batcalc.max(X_0:bat[:any_1], X_1:any_1):bat[:any_1] ",	"CMDbatMAX;",	""	]
[ "batcalc",	"max",	"pattern batcalc.max(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid]):bat[:any_1] ",	"CMDbatMAX;",	""	]
[ "batcalc",	"max",	"pattern batcalc.max(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:any_1] ",	"CMDbatMAX;",	""	]
[ "batcalc",	"max",	"pattern batcalc.max(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid]):bat[:any_1] ",	"CMDbatMAX;",	""	]
[ "batcalc",	"max_no_nil",	"pattern batcalc.max_no_nil(X_0:any_1, X_1:bat[:any_1]):bat[:any_1] ",	"CMDbatMAX_no_nil;",	""	]
[ "batcalc",	"max_no_nil",	"pattern batcalc.max_no_nil(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid]):bat[:any_1] ",	"CMDbatMAX_no_nil;",	""	]
[ "batcalc",	"max_no_nil",	"pattern batcalc.max_no_nil(X_0:bat[:any_1], X_1:any_1):bat[:any_1] ",	"CMDbatMAX_no_nil;",	""	]
[ "batcalc",	"max_no_nil",	"pattern batcalc.max_no_nil(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid]):bat[:any_1] ",	"CMDbatMAX_no_nil;",	""	]
[ "batcalc",	"max_no_nil",	"pattern batcalc.max_no_nil(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:any_1] ",	"CMDbatMAX_no_nil;",	""	]
[ "batcalc",	"max_no_nil",	"pattern batcalc.max_no_nil(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid]):bat[:any_1] ",	"CMDbatMAX_no_nil;",	""	]
[ "batcalc",	"min",	"pattern batcalc.min(X_0:any_1, X_1:bat[:any_1]):bat[:any_1] ",	"CMDbatMIN;",	""	]
[ "batcalc",	"min",	"pattern batcalc.min(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid]):bat[:any_1] ",	"CMDbatMIN;",	""	]
[ "batcalc",	"min",	"pattern batcalc.min(X_0:bat[:any_1], X_1:any_1):bat[:any_1] ",	"CMDbatMIN;",	""	]
[ "batcalc",	"min",	"pattern batcalc.min(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid]):bat[:any_1] ",	"CMDbatMIN;",	""	]
[ "batcalc",	"min",	"pattern batcalc.min(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:any_1] ",	"CMDbatMIN;",	""	]
[ "batcalc",	"min",	"pattern batcalc.min(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid]):bat[:any_1] ",	"CMDbatMIN;",	""	]
[ "batcalc",	"min_no_nil",	"pattern batcalc.min_no_nil(X_0:any_1, X_1:bat[:any_1]):bat[:any_1] ",	"CMDbatMIN_no_nil;",	""	]
[ "batcalc",	"min_no_nil",	"pattern batcalc.min_no_nil(X_0:any_1, X_1:bat[:any_1], X_2:bat[:oid]):bat[:any_1] ",	"CMDbatMIN_no_nil;",	""	]
[ "batcalc",	"min_no_nil",	"pattern batcalc.min_no_nil(X_0:bat[:any_1], X_1:any_1):bat[:any_1] ",	"CMDbatMIN_no_nil;",	""	]
[ "batcalc",	"min_no_nil",	"pattern batcalc.min_no_nil(X_0:bat[:any_1], X_1:any_1, X_2:bat[:oid]):bat[:any_1] ",	"CMDbatMIN_no_nil;",	""	]
[ "batcalc",	"min_no_nil",	"pattern batcalc.min_no_nil(X_0:bat[:any_1], X_1:bat[:any_1]):bat[:any_1] ",	"CMDbatMIN_no_nil;",	""	]
[ "batcalc",	"min_no_nil",	"pattern batcalc.min_no_nil(X_0:bat[:any_1], X_1:bat[:any_1], X_2:bat[:oid], X_3:bat[:oid]):bat[:any_1] ",	"CMDbatMIN_no_nil;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"mod_noerror",	"pattern batcalc.mod_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMOD;",	""	]
[ "batcalc",	"month_interval",	"pattern batcalc.month_interval(X_0:bat[:bte], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"month_interval;",	""	]
[ "batcalc",	"month_interval",	"pattern batcalc.month_interval(X_0:bat[:int], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"month_interval;",	""	]
[ "batcalc",	"month_interval",	"pattern batcalc.month_interval(X_0:bat[:lng], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"month_interval;",	""	]
[ "batcalc",	"month_interval",	"pattern batcalc.month_interval(X_0:bat[:sht], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"month_interval;",	""	]
[ "batcalc",	"month_interval",	"pattern batcalc.month_interval(X_0:bat[:str], X_1:bat[:oid], X_2:int, X_3:int):bat[:int] ",	"month_interval_str;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:bte] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"mul_noerror",	"pattern batcalc.mul_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatMUL;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:bit]):bat[:bit] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:bit], X_1:bat[:oid]):bat[:bit] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:bte]):bat[:bte] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:bte], X_1:bat[:oid]):bat[:bte] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:dbl]):bat[:dbl] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:flt]):bat[:flt] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:int]):bat[:int] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:int], X_1:bat[:oid]):bat[:int] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:lng]):bat[:lng] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:lng], X_1:bat[:oid]):bat[:lng] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:sht]):bat[:sht] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"not",	"pattern batcalc.not(X_0:bat[:sht], X_1:bat[:oid]):bat[:sht] ",	"CMDbatNOT;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:bit]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:bit], X_1:bat[:oid]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:bte]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:bte], X_1:bat[:oid]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:dbl]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:dbl], X_1:bat[:oid]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:flt]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:flt], X_1:bat[:oid]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:int]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:int], X_1:bat[:oid]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:lng]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:lng], X_1:bat[:oid]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:oid]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:oid], X_1:bat[:oid]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:sht]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:sht], X_1:bat[:oid]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:str]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid",	"pattern batcalc.oid(X_0:bat[:str], X_1:bat[:oid]):bat[:oid] ",	"CMDconvertsignal_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:bit]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:bit], X_1:bat[:oid]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:bte]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:bte], X_1:bat[:oid]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:dbl]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:dbl], X_1:bat[:oid]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:flt]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:flt], X_1:bat[:oid]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:int]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:int], X_1:bat[:oid]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:lng]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:lng], X_1:bat[:oid]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:oid]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:oid], X_1:bat[:oid]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:sht]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:sht], X_1:bat[:oid]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:str]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"oid_noerror",	"pattern batcalc.oid_noerror(X_0:bat[:str], X_1:bat[:oid]):bat[:oid] ",	"CMDconvert_oid;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:bit], X_1:bat[:bit]):bat[:bit] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:bit], X_1:bat[:bit], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:bit], X_1:bit):bat[:bit] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:bit], X_1:bit, X_2:bat[:oid]):bat[:bit] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:bte], X_1:bat[:bte]):bat[:bte] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:bte], X_1:bte):bat[:bte] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:dbl], X_1:bat[:dbl]):bat[:dbl] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:dbl], X_1:dbl):bat[:dbl] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:flt], X_1:bat[:flt]):bat[:flt] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:flt], X_1:flt):bat[:flt] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:int], X_1:bat[:int]):bat[:int] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:int], X_1:int):bat[:int] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:lng], X_1:bat[:lng]):bat[:lng] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:lng], X_1:lng):bat[:lng] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:sht], X_1:bat[:sht]):bat[:sht] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:sht], X_1:sht):bat[:sht] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bit, X_1:bat[:bit]):bat[:bit] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bit, X_1:bat[:bit], X_2:bat[:oid]):bat[:bit] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bte, X_1:bat[:bte]):bat[:bte] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:dbl, X_1:bat[:dbl]):bat[:dbl] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:flt, X_1:bat[:flt]):bat[:flt] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:int, X_1:bat[:int]):bat[:int] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:lng, X_1:bat[:lng]):bat[:lng] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:sht, X_1:bat[:sht]):bat[:sht] ",	"CMDbatOR;",	""	]
[ "batcalc",	"or",	"pattern batcalc.or(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatOR;",	""	]
[ "batcalc",	"rotate_xor_hash",	"command batcalc.rotate_xor_hash(X_0:bat[:lng], X_1:int, X_2:bat[:any_1]):bat[:int] ",	"MKEYbulk_rotate_xor_hash;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:bte], X_1:bte, X_2:bat[:oid], X_3:int, X_4:int):bat[:bte] ",	"bte_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:bte], X_1:bte, X_2:int, X_3:int):bat[:bte] ",	"bte_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bte, X_1:bat[:bte], X_2:bat[:oid], X_3:int, X_4:int):bat[:bte] ",	"bte_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bte, X_1:bat[:bte], X_2:int, X_3:int):bat[:bte] ",	"bte_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid], X_4:int, X_5:int):bat[:bte] ",	"bte_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:bte], X_1:bat[:bte], X_2:int, X_3:int):bat[:bte] ",	"bte_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:dbl], X_1:bte):bat[:dbl] ",	"dbl_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"dbl_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:dbl, X_1:bat[:bte]):bat[:dbl] ",	"dbl_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"dbl_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:dbl], X_1:bat[:bte]):bat[:dbl] ",	"dbl_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"dbl_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:flt], X_1:bte):bat[:flt] ",	"flt_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"flt_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:flt, X_1:bat[:bte]):bat[:flt] ",	"flt_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"flt_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:flt], X_1:bat[:bte]):bat[:flt] ",	"flt_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"flt_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:int], X_1:bte, X_2:bat[:oid], X_3:int, X_4:int):bat[:int] ",	"int_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:int], X_1:bte, X_2:int, X_3:int):bat[:int] ",	"int_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:int, X_1:bat[:bte], X_2:bat[:oid], X_3:int, X_4:int):bat[:int] ",	"int_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:int, X_1:bat[:bte], X_2:int, X_3:int):bat[:int] ",	"int_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid], X_4:int, X_5:int):bat[:int] ",	"int_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:int], X_1:bat[:bte], X_2:int, X_3:int):bat[:int] ",	"int_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:lng], X_1:bte, X_2:bat[:oid], X_3:int, X_4:int):bat[:lng] ",	"lng_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:lng], X_1:bte, X_2:int, X_3:int):bat[:lng] ",	"lng_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:lng, X_1:bat[:bte], X_2:bat[:oid], X_3:int, X_4:int):bat[:lng] ",	"lng_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:lng, X_1:bat[:bte], X_2:int, X_3:int):bat[:lng] ",	"lng_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid], X_4:int, X_5:int):bat[:lng] ",	"lng_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:lng], X_1:bat[:bte], X_2:int, X_3:int):bat[:lng] ",	"lng_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:sht], X_1:bte, X_2:bat[:oid], X_3:int, X_4:int):bat[:sht] ",	"sht_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:sht], X_1:bte, X_2:int, X_3:int):bat[:sht] ",	"sht_bat_round_wrap;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:sht, X_1:bat[:bte], X_2:bat[:oid], X_3:int, X_4:int):bat[:sht] ",	"sht_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:sht, X_1:bat[:bte], X_2:int, X_3:int):bat[:sht] ",	"sht_bat_round_wrap_cst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid], X_4:int, X_5:int):bat[:sht] ",	"sht_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"round",	"pattern batcalc.round(X_0:bat[:sht], X_1:bat[:bte], X_2:int, X_3:int):bat[:sht] ",	"sht_bat_round_wrap_nocst;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:bat[:bte]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:bat[:int]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:bat[:lng]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:bat[:sht]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:bte):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:int):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:lng):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:sht):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:bat[:bte]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:bat[:int]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:bat[:lng]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:bat[:sht]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:bte):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:int):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:lng):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:sht):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:bat[:bte]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:bat[:int]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:bat[:lng]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:bat[:sht]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:bte):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:int):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:lng):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:sht):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:bat[:bte]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:bat[:int]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:bat[:lng]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:bat[:sht]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:bte):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:int):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:lng):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:sht):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bte, X_1:bat[:bte]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bte, X_1:bat[:int]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bte, X_1:bat[:lng]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bte, X_1:bat[:sht]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:bte] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:int, X_1:bat[:bte]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:int, X_1:bat[:int]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:int, X_1:bat[:lng]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:int, X_1:bat[:sht]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:lng, X_1:bat[:bte]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:lng, X_1:bat[:int]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:lng, X_1:bat[:lng]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:lng, X_1:bat[:sht]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:sht, X_1:bat[:bte]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:sht, X_1:bat[:int]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:sht, X_1:bat[:lng]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:sht, X_1:bat[:sht]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"rsh_noerror",	"pattern batcalc.rsh_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatRSH;",	""	]
[ "batcalc",	"second_interval",	"pattern batcalc.second_interval(X_0:int, X_1:bat[:bte], X_2:bat[:oid], X_3:int, X_4:int):bat[:lng] ",	"bte_batdec2second_interval;",	""	]
[ "batcalc",	"second_interval",	"pattern batcalc.second_interval(X_0:int, X_1:bat[:int], X_2:bat[:oid], X_3:int, X_4:int):bat[:lng] ",	"int_batdec2second_interval;",	""	]
[ "batcalc",	"second_interval",	"pattern batcalc.second_interval(X_0:int, X_1:bat[:lng], X_2:bat[:oid], X_3:int, X_4:int):bat[:lng] ",	"lng_batdec2second_interval;",	""	]
[ "batcalc",	"second_interval",	"pattern batcalc.second_interval(X_0:bat[:bte], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"second_interval;",	""	]
[ "batcalc",	"second_interval",	"pattern batcalc.second_interval(X_0:bat[:int], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"second_interval;",	""	]
[ "batcalc",	"second_interval",	"pattern batcalc.second_interval(X_0:bat[:lng], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"second_interval;",	""	]
[ "batcalc",	"second_interval",	"pattern batcalc.second_interval(X_0:bat[:sht], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"second_interval;",	""	]
[ "batcalc",	"second_interval",	"pattern batcalc.second_interval(X_0:bat[:daytime], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"second_interval_daytime;",	""	]
[ "batcalc",	"second_interval",	"pattern batcalc.second_interval(X_0:bat[:str], X_1:bat[:oid], X_2:int, X_3:int):bat[:lng] ",	"second_interval_str;",	""	]
[ "batcalc",	"second_interval",	"pattern batcalc.second_interval(X_0:int, X_1:bat[:sht], X_2:bat[:oid], X_3:int, X_4:int):bat[:lng] ",	"sht_batdec2second_interval;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:bit]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:bit], X_1:bat[:oid]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:bte]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:bte], X_1:bat[:oid]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:dbl]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:dbl], X_1:bat[:oid]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:flt]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:flt], X_1:bat[:oid]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:int]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:int], X_1:bat[:oid]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:lng]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:lng], X_1:bat[:oid]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:oid]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:oid], X_1:bat[:oid]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:sht]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:sht], X_1:bat[:oid]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:str]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:str], X_1:bat[:oid]):bat[:sht] ",	"CMDconvertsignal_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"batbte_dec2_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:int, X_1:bat[:bte], X_2:bat[:oid], X_3:int, X_4:int):bat[:sht] ",	"batbte_dec2dec_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:bat[:bte], X_1:bat[:oid], X_2:int, X_3:int):bat[:sht] ",	"batbte_num2dec_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:bat[:dbl], X_1:bat[:oid], X_2:int, X_3:int):bat[:sht] ",	"batdbl_num2dec_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:bat[:flt], X_1:bat[:oid], X_2:int, X_3:int):bat[:sht] ",	"batflt_num2dec_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:sht] ",	"batint_dec2_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:int, X_1:bat[:int], X_2:bat[:oid], X_3:int, X_4:int):bat[:sht] ",	"batint_dec2dec_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:bat[:int], X_1:bat[:oid], X_2:int, X_3:int):bat[:sht] ",	"batint_num2dec_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:sht] ",	"batlng_dec2_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:int, X_1:bat[:lng], X_2:bat[:oid], X_3:int, X_4:int):bat[:sht] ",	"batlng_dec2dec_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:bat[:lng], X_1:bat[:oid], X_2:int, X_3:int):bat[:sht] ",	"batlng_num2dec_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:bat[:oid], X_1:int, X_2:int):bat[:sht] ",	"batnil_2dec_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"batsht_dec2_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:int, X_1:bat[:sht], X_2:bat[:oid], X_3:int, X_4:int):bat[:sht] ",	"batsht_dec2dec_sht;",	""	]
[ "batcalc",	"sht",	"command batcalc.sht(X_0:bat[:sht], X_1:bat[:oid], X_2:int, X_3:int):bat[:sht] ",	"batsht_num2dec_sht;",	""	]
[ "batcalc",	"sht",	"pattern batcalc.sht(X_0:bat[:str], X_1:bat[:oid], X_2:int, X_3:int):bat[:sht] ",	"batstr_2dec_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:bit]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:bit], X_1:bat[:oid]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:bte]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:bte], X_1:bat[:oid]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:dbl]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:dbl], X_1:bat[:oid]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:flt]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:flt], X_1:bat[:oid]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:int]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:int], X_1:bat[:oid]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:lng]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:lng], X_1:bat[:oid]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:oid]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:oid], X_1:bat[:oid]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:sht]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:sht], X_1:bat[:oid]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:str]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sht_noerror",	"pattern batcalc.sht_noerror(X_0:bat[:str], X_1:bat[:oid]):bat[:sht] ",	"CMDconvert_sht;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:bte]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:bte], X_1:bat[:oid]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:dbl]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:dbl], X_1:bat[:oid]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:flt]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:flt], X_1:bat[:oid]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:int]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:int], X_1:bat[:oid]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:lng]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:lng], X_1:bat[:oid]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:sht]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"sign",	"pattern batcalc.sign(X_0:bat[:sht], X_1:bat[:oid]):bat[:bte] ",	"CMDbatSIGN;",	""	]
[ "batcalc",	"str",	"pattern batcalc.str(X_0:bat[:any]):bat[:str] ",	"CMDconvertsignal_str;",	""	]
[ "batcalc",	"str",	"pattern batcalc.str(X_0:bat[:any], X_1:bat[:oid]):bat[:str] ",	"CMDconvertsignal_str;",	""	]
[ "batcalc",	"str",	"pattern batcalc.str(X_0:int, X_1:int, X_2:int, X_3:int, X_4:bat[:any_1], X_5:bat[:oid], X_6:int):bat[:str] ",	"SQLbatstr_cast;",	""	]
[ "batcalc",	"str",	"command batcalc.str(X_0:bat[:uuid], X_1:bat[:oid]):bat[:str] ",	"UUIDuuid2str_bulk;",	""	]
[ "batcalc",	"str_noerror",	"pattern batcalc.str_noerror(X_0:bat[:any]):bat[:str] ",	"CMDconvert_str;",	""	]
[ "batcalc",	"str_noerror",	"pattern batcalc.str_noerror(X_0:bat[:any], X_1:bat[:oid]):bat[:str] ",	"CMDconvert_str;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:bte], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:bte, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:flt, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:int, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:dbl], X_1:sht, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:bte, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:int, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:flt], X_1:sht, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:bte, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:int], X_1:sht, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:bte, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:dbl, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:flt, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:int, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:lng], X_1:sht, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:bte, X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bte, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bte, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bte, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bte, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:bte, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:dbl, X_1:bat[:bte], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:dbl, X_1:bat[:flt], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:dbl, X_1:bat[:int], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:dbl, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:dbl, X_1:bat[:sht], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:flt, X_1:bat[:bte], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:flt, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:flt, X_1:bat[:int], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:flt, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:flt, X_1:bat[:sht], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:int, X_1:bat[:bte], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:int, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:int, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:int, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:int, X_1:bat[:sht], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:lng, X_1:bat[:bte], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:lng, X_1:bat[:dbl], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:lng, X_1:bat[:flt], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:lng, X_1:bat[:int], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:lng, X_1:bat[:sht], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:sht, X_1:bat[:bte], X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:sht, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:sht, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:sht, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:sht, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"sub_noerror",	"pattern batcalc.sub_noerror(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatSUB;",	""	]
[ "batcalc",	"timestamp",	"pattern batcalc.timestamp(X_0:bat[:date], X_1:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_fromdate_bulk;",	""	]
[ "batcalc",	"timestamp",	"pattern batcalc.timestamp(X_0:bat[:lng], X_1:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_frommsec_bulk;",	""	]
[ "batcalc",	"timestamp",	"pattern batcalc.timestamp(X_0:bat[:int], X_1:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_fromsecond_bulk;",	""	]
[ "batcalc",	"timestamp",	"pattern batcalc.timestamp(X_0:bat[:str], X_1:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_fromstr_bulk;",	""	]
[ "batcalc",	"timestamp",	"pattern batcalc.timestamp(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_timestamp_bulk;",	""	]
[ "batcalc",	"timestamp",	"command batcalc.timestamp(X_0:bat[:str], X_1:bat[:oid], X_2:int):bat[:timestamp] ",	"batstr_2time_timestamp;",	""	]
[ "batcalc",	"timestamp",	"command batcalc.timestamp(X_0:bat[:str], X_1:bat[:oid], X_2:int, X_3:int):bat[:timestamp] ",	"batstr_2time_timestamptz;",	""	]
[ "batcalc",	"timestamp",	"pattern batcalc.timestamp(X_0:bat[:date], X_1:bat[:oid], X_2:int):bat[:timestamp] ",	"date_2_timestamp;",	""	]
[ "batcalc",	"timestamp",	"pattern batcalc.timestamp(X_0:bat[:oid], X_1:int):bat[:timestamp] ",	"nil_2time_timestamp;",	""	]
[ "batcalc",	"timestamp",	"pattern batcalc.timestamp(X_0:bat[:oid], X_1:int, X_2:bat[:BAT]):bat[:timestamp] ",	"nil_2time_timestamp;",	""	]
[ "batcalc",	"timestamp",	"pattern batcalc.timestamp(X_0:bat[:timestamp], X_1:bat[:oid], X_2:int):bat[:timestamp] ",	"timestamp_2time_timestamp;",	""	]
[ "batcalc",	"uuid",	"command batcalc.uuid(X_0:bat[:str], X_1:bat[:oid]):bat[:uuid] ",	"UUIDstr2uuid_bulk;",	""	]
[ "batcalc",	"uuid",	"command batcalc.uuid(X_0:bat[:uuid], X_1:bat[:oid]):bat[:uuid] ",	"UUIDuuid2uuid_bulk;",	""	]
[ "batcalc",	"wkb",	"command batcalc.wkb(X_0:bat[:wkb], X_1:int, X_2:int):bat[:wkb] ",	"geom_2_geom_bat;",	""	]
[ "batcalc",	"xml",	"command batcalc.xml(X_0:bat[:str]):bat[:xml] ",	"BATXMLstr2xml;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:bit], X_1:bat[:bit]):bat[:bit] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:bit], X_1:bat[:bit], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:bit], X_1:bit):bat[:bit] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:bit], X_1:bit, X_2:bat[:oid]):bat[:bit] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:bte], X_1:bat[:bte]):bat[:bte] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:oid], X_3:bat[:oid]):bat[:bte] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:bte], X_1:bte):bat[:bte] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:bte], X_1:bte, X_2:bat[:oid]):bat[:bte] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:dbl], X_1:bat[:dbl]):bat[:dbl] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:dbl], X_1:dbl):bat[:dbl] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:flt], X_1:bat[:flt]):bat[:flt] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:flt], X_1:flt):bat[:flt] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:int], X_1:bat[:int]):bat[:int] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:int], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:int], X_1:int):bat[:int] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:int], X_1:int, X_2:bat[:oid]):bat[:int] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:lng], X_1:bat[:lng]):bat[:lng] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:lng], X_1:lng):bat[:lng] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:lng], X_1:lng, X_2:bat[:oid]):bat[:lng] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:sht], X_1:bat[:sht]):bat[:sht] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:oid], X_3:bat[:oid]):bat[:sht] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:sht], X_1:sht):bat[:sht] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bat[:sht], X_1:sht, X_2:bat[:oid]):bat[:sht] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bit, X_1:bat[:bit]):bat[:bit] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bit, X_1:bat[:bit], X_2:bat[:oid]):bat[:bit] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bte, X_1:bat[:bte]):bat[:bte] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:bte, X_1:bat[:bte], X_2:bat[:oid]):bat[:bte] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:dbl, X_1:bat[:dbl]):bat[:dbl] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:flt, X_1:bat[:flt]):bat[:flt] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:int, X_1:bat[:int]):bat[:int] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:int, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:lng, X_1:bat[:lng]):bat[:lng] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:lng, X_1:bat[:lng], X_2:bat[:oid]):bat[:lng] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:sht, X_1:bat[:sht]):bat[:sht] ",	"CMDbatXOR;",	""	]
[ "batcalc",	"xor",	"pattern batcalc.xor(X_0:sht, X_1:bat[:sht], X_2:bat[:oid]):bat[:sht] ",	"CMDbatXOR;",	""	]
[ "batcapi",	"eval",	"pattern batcapi.eval(X_0:ptr, X_1:bit, X_2:str, X_3:any...):any... ",	"CUDFevalStd;",	""	]
[ "batcapi",	"eval_aggr",	"pattern batcapi.eval_aggr(X_0:ptr, X_1:bit, X_2:str, X_3:any...):any... ",	"CUDFevalAggr;",	""	]
[ "batcapi",	"subeval_aggr",	"pattern batcapi.subeval_aggr(X_0:ptr, X_1:bit, X_2:str, X_3:any...):any... ",	"CUDFevalAggr;",	""	]
[ "batcolor",	"blue",	"command batcolor.blue(X_0:bat[:color]):bat[:int] ",	"CLRbatBlue;",	""	]
[ "batcolor",	"cb",	"command batcolor.cb(X_0:bat[:color]):bat[:int] ",	"CLRbatCb;",	""	]
[ "batcolor",	"color",	"command batcolor.color(X_0:bat[:str]):bat[:color] ",	"CLRbatColor;",	""	]
[ "batcolor",	"cr",	"command batcolor.cr(X_0:bat[:color]):bat[:int] ",	"CLRbatCr;",	""	]
[ "batcolor",	"green",	"command batcolor.green(X_0:bat[:color]):bat[:int] ",	"CLRbatGreen;",	""	]
[ "batcolor",	"hsv",	"command batcolor.hsv(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:flt]):bat[:color] ",	"CLRbatHsv;",	""	]
[ "batcolor",	"hue",	"command batcolor.hue(X_0:bat[:color]):bat[:flt] ",	"CLRbatHue;",	""	]
[ "batcolor",	"hue",	"command batcolor.hue(X_0:bat[:color]):bat[:int] ",	"CLRbatHueInt;",	""	]
[ "batcolor",	"luminance",	"command batcolor.luminance(X_0:bat[:color]):bat[:int] ",	"CLRbatLuminance;",	""	]
[ "batcolor",	"red",	"command batcolor.red(X_0:bat[:color]):bat[:int] ",	"CLRbatRed;",	""	]
[ "batcolor",	"rgb",	"command batcolor.rgb(X_0:bat[:int], X_1:bat[:int], X_2:bat[:int]):bat[:color] ",	"CLRbatRgb;",	""	]
[ "batcolor",	"saturation",	"command batcolor.saturation(X_0:bat[:color]):bat[:flt] ",	"CLRbatSaturation;",	""	]
[ "batcolor",	"saturation",	"command batcolor.saturation(X_0:bat[:color]):bat[:int] ",	"CLRbatSaturationInt;",	""	]
[ "batcolor",	"str",	"command batcolor.str(X_0:bat[:color]):bat[:str] ",	"CLRbatStr;",	""	]
[ "batcolor",	"value",	"command batcolor.value(X_0:bat[:color]):bat[:flt] ",	"CLRbatValue;",	""	]
[ "batcolor",	"value",	"command batcolor.value(X_0:bat[:color]):bat[:int] ",	"CLRbatValueInt;",	""	]
[ "batcolor",	"ycc",	"command batcolor.ycc(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:flt]):bat[:color] ",	"CLRbatycc;",	""	]
[ "batgeom",	"AsEWKT",	"function batgeom.AsEWKT(w:bat[:wkb]):bat[:str];",	"",	""	]
[ "batgeom",	"AsText",	"function batgeom.AsText(w:bat[:wkb]):bat[:str];",	"",	""	]
[ "batgeom",	"Boundary",	"command batgeom.Boundary(X_0:bat[:wkb]):bat[:wkb] ",	"wkbBoundary_bat;",	""	]
[ "batgeom",	"Contains",	"command batgeom.Contains(X_0:bat[:wkb], X_1:bat[:wkb]):bat[:bit] ",	"wkbContains_bat;",	""	]
[ "batgeom",	"Contains",	"command batgeom.Contains(X_0:bat[:wkb], X_1:wkb):bat[:bit] ",	"wkbContains_bat_geom;",	""	]
[ "batgeom",	"Contains",	"command batgeom.Contains(X_0:wkb, X_1:bat[:wkb]):bat[:bit] ",	"wkbContains_geom_bat;",	""	]
[ "batgeom",	"Dimension",	"command batgeom.Dimension(X_0:bat[:wkb]):bat[:int] ",	"wkbDimension_bat;",	""	]
[ "batgeom",	"Distance",	"command batgeom.Distance(X_0:bat[:wkb], X_1:bat[:wkb]):bat[:dbl] ",	"wkbDistance_bat;",	""	]
[ "batgeom",	"Distance",	"command batgeom.Distance(X_0:bat[:wkb], X_1:wkb):bat[:dbl] ",	"wkbDistance_bat_geom;",	""	]
[ "batgeom",	"Distance",	"command batgeom.Distance(X_0:wkb, X_1:bat[:wkb]):bat[:dbl] ",	"wkbDistance_geom_bat;",	""	]
[ "batgeom",	"Filter",	"command batgeom.Filter(X_0:bat[:wkb], X_1:wkb):bat[:wkb] ",	"wkbFilter_bat_geom;",	""	]
[ "batgeom",	"Filter",	"command batgeom.Filter(X_0:wkb, X_1:bat[:wkb]):bat[:wkb] ",	"wkbFilter_geom_bat;",	""	]
[ "batgeom",	"FromText",	"command batgeom.FromText(X_0:bat[:str], X_1:int, X_2:int):bat[:wkb] ",	"wkbFromText_bat;",	""	]
[ "batgeom",	"GeomCollFromText",	"function batgeom.GeomCollFromText(wkt:bat[:str]):bat[:wkb];",	"",	""	]
[ "batgeom",	"GeomCollFromText",	"function batgeom.GeomCollFromText(wkt:bat[:str], srid:int):bat[:wkb];",	"",	""	]
[ "batgeom",	"GeomFromText",	"function batgeom.GeomFromText(wkt:bat[:str]):bat[:wkb];",	"",	""	]
[ "batgeom",	"GeomFromText",	"function batgeom.GeomFromText(wkt:bat[:str], srid:int):bat[:wkb];",	"",	""	]
[ "batgeom",	"GeometryN",	"command batgeom.GeometryN(X_0:bat[:wkb], X_1:int):bat[:wkb] ",	"wkbGeometryN_bat;",	""	]
[ "batgeom",	"GeometryType",	"command batgeom.GeometryType(X_0:bat[:wkb], X_1:int):bat[:str] ",	"wkbGeometryType_bat;",	""	]
[ "batgeom",	"GeometryType1",	"function batgeom.GeometryType1(w:bat[:wkb]):bat[:str];",	"",	""	]
[ "batgeom",	"GeometryType2",	"function batgeom.GeometryType2(w:bat[:wkb]):bat[:str];",	"",	""	]
[ "batgeom",	"GetCoordinate",	"command batgeom.GetCoordinate(X_0:bat[:wkb], X_1:int):bat[:dbl] ",	"wkbGetCoordinate_bat;",	""	]
[ "batgeom",	"IsClosed",	"command batgeom.IsClosed(X_0:bat[:wkb]):bat[:bit] ",	"wkbIsClosed_bat;",	""	]
[ "batgeom",	"IsEmpty",	"command batgeom.IsEmpty(X_0:bat[:wkb]):bat[:bit] ",	"wkbIsEmpty_bat;",	""	]
[ "batgeom",	"IsRing",	"command batgeom.IsRing(X_0:bat[:wkb]):bat[:bit] ",	"wkbIsRing_bat;",	""	]
[ "batgeom",	"IsSimple",	"command batgeom.IsSimple(X_0:bat[:wkb]):bat[:bit] ",	"wkbIsSimple_bat;",	""	]
[ "batgeom",	"IsValid",	"command batgeom.IsValid(X_0:bat[:wkb]):bat[:bit] ",	"wkbIsValid_bat;",	""	]
[ "batgeom",	"LineFromText",	"function batgeom.LineFromText(wkt:bat[:str]):bat[:wkb];",	"",	""	]
[ "batgeom",	"LineFromText",	"function batgeom.LineFromText(wkt:bat[:str], srid:int):bat[:wkb];",	"",	""	]
[ "batgeom",	"MLineFromText",	"function batgeom.MLineFromText(wkt:bat[:str]):bat[:wkb];",	"",	""	]
[ "batgeom",	"MLineFromText",	"function batgeom.MLineFromText(wkt:bat[:str], srid:int):bat[:wkb];",	"",	""	]
[ "batgeom",	"MPointFromText",	"function batgeom.MPointFromText(wkt:bat[:str]):bat[:wkb];",	"",	""	]
[ "batgeom",	"MPointFromText",	"function batgeom.MPointFromText(wkt:bat[:str], srid:int):bat[:wkb];",	"",	""	]
[ "batgeom",	"MPolyFromText",	"function batgeom.MPolyFromText(wkt:bat[:str]):bat[:wkb];",	"",	""	]
[ "batgeom",	"MPolyFromText",	"function batgeom.MPolyFromText(wkt:bat[:str], srid:int):bat[:wkb];",	"",	""	]
[ "batgeom",	"MakeBox2D",	"command batgeom.MakeBox2D(X_0:bat[:wkb], X_1:bat[:wkb]):bat[:mbr] ",	"wkbBox2D_bat;",	""	]
[ "batgeom",	"MakeLine",	"command batgeom.MakeLine(X_0:bat[:wkb], X_1:bat[:wkb]):bat[:wkb] ",	"wkbMakeLine_bat;",	""	]
[ "batgeom",	"MakePoint",	"function batgeom.MakePoint(x:bat[:dbl], y:bat[:dbl]):bat[:wkb];",	"",	""	]
[ "batgeom",	"MakePoint",	"function batgeom.MakePoint(x:bat[:dbl], y:bat[:dbl], z:bat[:dbl]):bat[:wkb];",	"",	""	]
[ "batgeom",	"MakePoint",	"function batgeom.MakePoint(x:bat[:dbl], y:bat[:dbl], z:bat[:dbl], m:bat[:dbl]):bat[:wkb];",	"",	""	]
[ "batgeom",	"MakePointM",	"function batgeom.MakePointM(x:bat[:dbl], y:bat[:dbl], m:bat[:dbl]):bat[:wkb];",	"",	""	]
[ "batgeom",	"MakePointXYZM",	"command batgeom.MakePointXYZM(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:dbl], X_3:bat[:dbl], X_4:int):bat[:wkb] ",	"wkbMakePoint_bat;",	""	]
[ "batgeom",	"NPoints",	"function batgeom.NPoints(w:bat[:wkb]):bat[:int];",	"",	""	]
[ "batgeom",	"NRings",	"function batgeom.NRings(w:bat[:wkb]):bat[:int];",	"",	""	]
[ "batgeom",	"NumGeometries",	"command batgeom.NumGeometries(X_0:bat[:wkb]):bat[:int] ",	"wkbNumGeometries_bat;",	""	]
[ "batgeom",	"NumInteriorRings",	"function batgeom.NumInteriorRings(w:bat[:wkb]):bat[:int];",	"",	""	]
[ "batgeom",	"NumPoints",	"function batgeom.NumPoints(w:bat[:wkb]):bat[:int];",	"",	""	]
[ "batgeom",	"NumRings",	"command batgeom.NumRings(X_0:bat[:wkb], X_1:int):bat[:int] ",	"wkbNumRings_bat;",	""	]
[ "batgeom",	"PointFromText",	"function batgeom.PointFromText(wkt:bat[:str]):bat[:wkb];",	"",	""	]
[ "batgeom",	"PointFromText",	"function batgeom.PointFromText(wkt:bat[:str], srid:int):bat[:wkb];",	"",	""	]
[ "batgeom",	"PointsNum",	"command batgeom.PointsNum(X_0:bat[:wkb], X_1:int):bat[:int] ",	"wkbNumPoints_bat;",	""	]
[ "batgeom",	"PolygonFromText",	"function batgeom.PolygonFromText(wkt:bat[:str]):bat[:wkb];",	"",	""	]
[ "batgeom",	"PolygonFromText",	"function batgeom.PolygonFromText(wkt:bat[:str], srid:int):bat[:wkb];",	"",	""	]
[ "batgeom",	"ToText",	"command batgeom.ToText(X_0:bat[:wkb], X_1:int):bat[:str] ",	"wkbAsText_bat;",	""	]
[ "batgeom",	"Union",	"command batgeom.Union(X_0:bat[:wkb], X_1:bat[:wkb]):bat[:wkb] ",	"wkbUnion_bat;",	""	]
[ "batgeom",	"X",	"function batgeom.X(w:bat[:wkb]):bat[:dbl];",	"",	""	]
[ "batgeom",	"XMaxFromMBR",	"function batgeom.XMaxFromMBR(b:bat[:mbr]):bat[:dbl];",	"",	""	]
[ "batgeom",	"XMaxFromWKB",	"function batgeom.XMaxFromWKB(g:bat[:wkb]):bat[:dbl];",	"",	""	]
[ "batgeom",	"XMinFromMBR",	"function batgeom.XMinFromMBR(b:bat[:mbr]):bat[:dbl];",	"",	""	]
[ "batgeom",	"XMinFromWKB",	"function batgeom.XMinFromWKB(g:bat[:wkb]):bat[:dbl];",	"",	""	]
[ "batgeom",	"Y",	"function batgeom.Y(w:bat[:wkb]):bat[:dbl];",	"",	""	]
[ "batgeom",	"YMaxFromMBR",	"function batgeom.YMaxFromMBR(b:bat[:mbr]):bat[:dbl];",	"",	""	]
[ "batgeom",	"YMaxFromWKB",	"function batgeom.YMaxFromWKB(g:bat[:wkb]):bat[:dbl];",	"",	""	]
[ "batgeom",	"YMinFromMBR",	"function batgeom.YMinFromMBR(b:bat[:mbr]):bat[:dbl];",	"",	""	]
[ "batgeom",	"YMinFromWKB",	"function batgeom.YMinFromWKB(g:bat[:wkb]):bat[:dbl];",	"",	""	]
[ "batgeom",	"Z",	"function batgeom.Z(w:bat[:wkb]):bat[:dbl];",	"",	""	]
[ "batgeom",	"coordinateFromMBR",	"command batgeom.coordinateFromMBR(X_0:bat[:mbr], X_1:int):bat[:dbl] ",	"wkbCoordinateFromMBR_bat;",	""	]
[ "batgeom",	"coordinateFromWKB",	"command batgeom.coordinateFromWKB(X_0:bat[:wkb], X_1:int):bat[:dbl] ",	"wkbCoordinateFromWKB_bat;",	""	]
[ "batgeom",	"mbr",	"command batgeom.mbr(X_0:bat[:wkb]):bat[:mbr] ",	"wkbMBR_bat;",	""	]
[ "batgeom",	"setSRID",	"command batgeom.setSRID(X_0:bat[:wkb], X_1:int):bat[:wkb] ",	"wkbSetSRID_bat;",	""	]
[ "batmal",	"multiplex",	"pattern batmal.multiplex(X_0:str, X_1:str, X_2:any...):any... ",	"MANIFOLDremapMultiplex;",	""	]
[ "batmkey",	"hash",	"command batmkey.hash(X_0:bat[:any_1]):bat[:lng] ",	"MKEYbathash;",	""	]
[ "batmmath",	"acos",	"pattern batmmath.acos(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_acos;",	""	]
[ "batmmath",	"acos",	"pattern batmmath.acos(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_acos;",	""	]
[ "batmmath",	"acos",	"pattern batmmath.acos(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_acos;",	""	]
[ "batmmath",	"acos",	"pattern batmmath.acos(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_acos;",	""	]
[ "batmmath",	"asin",	"pattern batmmath.asin(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_asin;",	""	]
[ "batmmath",	"asin",	"pattern batmmath.asin(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_asin;",	""	]
[ "batmmath",	"asin",	"pattern batmmath.asin(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_asin;",	""	]
[ "batmmath",	"asin",	"pattern batmmath.asin(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_asin;",	""	]
[ "batmmath",	"atan",	"pattern batmmath.atan(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_atan;",	""	]
[ "batmmath",	"atan",	"pattern batmmath.atan(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_atan;",	""	]
[ "batmmath",	"atan",	"pattern batmmath.atan(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_atan;",	""	]
[ "batmmath",	"atan",	"pattern batmmath.atan(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_atan;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:bat[:dbl], X_1:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:bat[:dbl], X_1:dbl):bat[:dbl] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:bat[:flt], X_1:bat[:flt]):bat[:flt] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:bat[:flt], X_1:flt):bat[:flt] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:dbl, X_1:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:flt, X_1:bat[:flt]):bat[:flt] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"atan2",	"pattern batmmath.atan2(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDscience_bat_atan2;",	""	]
[ "batmmath",	"cbrt",	"pattern batmmath.cbrt(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_cbrt;",	""	]
[ "batmmath",	"cbrt",	"pattern batmmath.cbrt(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_cbrt;",	""	]
[ "batmmath",	"cbrt",	"pattern batmmath.cbrt(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_cbrt;",	""	]
[ "batmmath",	"cbrt",	"pattern batmmath.cbrt(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_cbrt;",	""	]
[ "batmmath",	"ceil",	"pattern batmmath.ceil(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_ceil;",	""	]
[ "batmmath",	"ceil",	"pattern batmmath.ceil(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_ceil;",	""	]
[ "batmmath",	"ceil",	"pattern batmmath.ceil(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_ceil;",	""	]
[ "batmmath",	"ceil",	"pattern batmmath.ceil(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_ceil;",	""	]
[ "batmmath",	"cos",	"pattern batmmath.cos(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_cos;",	""	]
[ "batmmath",	"cos",	"pattern batmmath.cos(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_cos;",	""	]
[ "batmmath",	"cos",	"pattern batmmath.cos(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_cos;",	""	]
[ "batmmath",	"cos",	"pattern batmmath.cos(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_cos;",	""	]
[ "batmmath",	"cosh",	"pattern batmmath.cosh(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_cosh;",	""	]
[ "batmmath",	"cosh",	"pattern batmmath.cosh(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_cosh;",	""	]
[ "batmmath",	"cosh",	"pattern batmmath.cosh(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_cosh;",	""	]
[ "batmmath",	"cosh",	"pattern batmmath.cosh(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_cosh;",	""	]
[ "batmmath",	"cot",	"pattern batmmath.cot(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_cot;",	""	]
[ "batmmath",	"cot",	"pattern batmmath.cot(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_cot;",	""	]
[ "batmmath",	"cot",	"pattern batmmath.cot(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_cot;",	""	]
[ "batmmath",	"cot",	"pattern batmmath.cot(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_cot;",	""	]
[ "batmmath",	"degrees",	"pattern batmmath.degrees(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_degrees;",	""	]
[ "batmmath",	"degrees",	"pattern batmmath.degrees(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_degrees;",	""	]
[ "batmmath",	"degrees",	"pattern batmmath.degrees(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_degrees;",	""	]
[ "batmmath",	"degrees",	"pattern batmmath.degrees(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_degrees;",	""	]
[ "batmmath",	"exp",	"pattern batmmath.exp(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_exp;",	""	]
[ "batmmath",	"exp",	"pattern batmmath.exp(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_exp;",	""	]
[ "batmmath",	"exp",	"pattern batmmath.exp(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_exp;",	""	]
[ "batmmath",	"exp",	"pattern batmmath.exp(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_exp;",	""	]
[ "batmmath",	"fabs",	"pattern batmmath.fabs(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_fabs;",	""	]
[ "batmmath",	"fabs",	"pattern batmmath.fabs(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_fabs;",	""	]
[ "batmmath",	"fabs",	"pattern batmmath.fabs(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_fabs;",	""	]
[ "batmmath",	"fabs",	"pattern batmmath.fabs(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_fabs;",	""	]
[ "batmmath",	"floor",	"pattern batmmath.floor(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_floor;",	""	]
[ "batmmath",	"floor",	"pattern batmmath.floor(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_floor;",	""	]
[ "batmmath",	"floor",	"pattern batmmath.floor(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_floor;",	""	]
[ "batmmath",	"floor",	"pattern batmmath.floor(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_floor;",	""	]
[ "batmmath",	"fmod",	"pattern batmmath.fmod(X_0:bat[:dbl], X_1:dbl):bat[:dbl] ",	"CMDbatMODsignal;",	""	]
[ "batmmath",	"fmod",	"pattern batmmath.fmod(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDbatMODsignal;",	""	]
[ "batmmath",	"fmod",	"pattern batmmath.fmod(X_0:bat[:flt], X_1:flt):bat[:flt] ",	"CMDbatMODsignal;",	""	]
[ "batmmath",	"fmod",	"pattern batmmath.fmod(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDbatMODsignal;",	""	]
[ "batmmath",	"log",	"pattern batmmath.log(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_log;",	""	]
[ "batmmath",	"log",	"pattern batmmath.log(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_log;",	""	]
[ "batmmath",	"log",	"pattern batmmath.log(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_log;",	""	]
[ "batmmath",	"log",	"pattern batmmath.log(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_log;",	""	]
[ "batmmath",	"log10",	"pattern batmmath.log10(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_log10;",	""	]
[ "batmmath",	"log10",	"pattern batmmath.log10(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_log10;",	""	]
[ "batmmath",	"log10",	"pattern batmmath.log10(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_log10;",	""	]
[ "batmmath",	"log10",	"pattern batmmath.log10(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_log10;",	""	]
[ "batmmath",	"log2",	"pattern batmmath.log2(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_log2;",	""	]
[ "batmmath",	"log2",	"pattern batmmath.log2(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_log2;",	""	]
[ "batmmath",	"log2",	"pattern batmmath.log2(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_log2;",	""	]
[ "batmmath",	"log2",	"pattern batmmath.log2(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_log2;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:bat[:dbl], X_1:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:bat[:dbl], X_1:dbl):bat[:dbl] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:bat[:flt], X_1:bat[:flt]):bat[:flt] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:bat[:flt], X_1:flt):bat[:flt] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:dbl, X_1:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:flt, X_1:bat[:flt]):bat[:flt] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"log2arg",	"pattern batmmath.log2arg(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDscience_bat_logbs;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:bat[:dbl], X_1:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:oid], X_3:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:bat[:dbl], X_1:dbl):bat[:dbl] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:bat[:dbl], X_1:dbl, X_2:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:bat[:flt], X_1:bat[:flt]):bat[:flt] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:oid], X_3:bat[:oid]):bat[:flt] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:bat[:flt], X_1:flt):bat[:flt] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:bat[:flt], X_1:flt, X_2:bat[:oid]):bat[:flt] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:dbl, X_1:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:dbl, X_1:bat[:dbl], X_2:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:flt, X_1:bat[:flt]):bat[:flt] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"pow",	"pattern batmmath.pow(X_0:flt, X_1:bat[:flt], X_2:bat[:oid]):bat[:flt] ",	"CMDscience_bat_pow;",	""	]
[ "batmmath",	"radians",	"pattern batmmath.radians(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_radians;",	""	]
[ "batmmath",	"radians",	"pattern batmmath.radians(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_radians;",	""	]
[ "batmmath",	"radians",	"pattern batmmath.radians(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_radians;",	""	]
[ "batmmath",	"radians",	"pattern batmmath.radians(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_radians;",	""	]
[ "batmmath",	"rand",	"unsafe pattern batmmath.rand(X_0:bat[:int]):bat[:int] ",	"CMDscience_bat_randintarg;",	""	]
[ "batmmath",	"rand",	"unsafe pattern batmmath.rand(X_0:bat[:int], X_1:bat[:oid]):bat[:int] ",	"CMDscience_bat_randintarg;",	""	]
[ "batmmath",	"sin",	"pattern batmmath.sin(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_sin;",	""	]
[ "batmmath",	"sin",	"pattern batmmath.sin(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_sin;",	""	]
[ "batmmath",	"sin",	"pattern batmmath.sin(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_sin;",	""	]
[ "batmmath",	"sin",	"pattern batmmath.sin(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_sin;",	""	]
[ "batmmath",	"sinh",	"pattern batmmath.sinh(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_sinh;",	""	]
[ "batmmath",	"sinh",	"pattern batmmath.sinh(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_sinh;",	""	]
[ "batmmath",	"sinh",	"pattern batmmath.sinh(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_sinh;",	""	]
[ "batmmath",	"sinh",	"pattern batmmath.sinh(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_sinh;",	""	]
[ "batmmath",	"sqrt",	"pattern batmmath.sqrt(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_sqrt;",	""	]
[ "batmmath",	"sqrt",	"pattern batmmath.sqrt(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_sqrt;",	""	]
[ "batmmath",	"sqrt",	"pattern batmmath.sqrt(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_sqrt;",	""	]
[ "batmmath",	"sqrt",	"pattern batmmath.sqrt(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_sqrt;",	""	]
[ "batmmath",	"tan",	"pattern batmmath.tan(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_tan;",	""	]
[ "batmmath",	"tan",	"pattern batmmath.tan(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_tan;",	""	]
[ "batmmath",	"tan",	"pattern batmmath.tan(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_tan;",	""	]
[ "batmmath",	"tan",	"pattern batmmath.tan(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_tan;",	""	]
[ "batmmath",	"tanh",	"pattern batmmath.tanh(X_0:bat[:dbl]):bat[:dbl] ",	"CMDscience_bat_tanh;",	""	]
[ "batmmath",	"tanh",	"pattern batmmath.tanh(X_0:bat[:dbl], X_1:bat[:oid]):bat[:dbl] ",	"CMDscience_bat_tanh;",	""	]
[ "batmmath",	"tanh",	"pattern batmmath.tanh(X_0:bat[:flt]):bat[:flt] ",	"CMDscience_bat_tanh;",	""	]
[ "batmmath",	"tanh",	"pattern batmmath.tanh(X_0:bat[:flt], X_1:bat[:oid]):bat[:flt] ",	"CMDscience_bat_tanh;",	""	]
[ "batmtime",	"addmonths",	"pattern batmtime.addmonths(X_0:bat[:date], X_1:bat[:int]):bat[:date] ",	"MTIMEdate_addmonths_bulk;",	""	]
[ "batmtime",	"addmonths",	"pattern batmtime.addmonths(X_0:bat[:date], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:date] ",	"MTIMEdate_addmonths_bulk;",	""	]
[ "batmtime",	"addmonths",	"pattern batmtime.addmonths(X_0:date, X_1:bat[:int]):bat[:date] ",	"MTIMEdate_addmonths_bulk_p1;",	""	]
[ "batmtime",	"addmonths",	"pattern batmtime.addmonths(X_0:date, X_1:bat[:int], X_2:bat[:oid]):bat[:date] ",	"MTIMEdate_addmonths_bulk_p1;",	""	]
[ "batmtime",	"addmonths",	"pattern batmtime.addmonths(X_0:bat[:date], X_1:int):bat[:date] ",	"MTIMEdate_addmonths_bulk_p2;",	""	]
[ "batmtime",	"addmonths",	"pattern batmtime.addmonths(X_0:bat[:date], X_1:int, X_2:bat[:oid]):bat[:date] ",	"MTIMEdate_addmonths_bulk_p2;",	""	]
[ "batmtime",	"century",	"pattern batmtime.century(X_0:bat[:date]):bat[:int] ",	"MTIMEdate_extract_century_bulk;",	""	]
[ "batmtime",	"century",	"pattern batmtime.century(X_0:bat[:date], X_1:bat[:oid]):bat[:int] ",	"MTIMEdate_extract_century_bulk;",	""	]
[ "batmtime",	"century",	"pattern batmtime.century(X_0:bat[:timestamp]):bat[:int] ",	"MTIMEtimestamp_century_bulk;",	""	]
[ "batmtime",	"century",	"pattern batmtime.century(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:int] ",	"MTIMEtimestamp_century_bulk;",	""	]
[ "batmtime",	"date_add_msec_interval",	"pattern batmtime.date_add_msec_interval(X_0:bat[:date], X_1:bat[:lng]):bat[:date] ",	"MTIMEdate_add_msec_interval_bulk;",	""	]
[ "batmtime",	"date_add_msec_interval",	"pattern batmtime.date_add_msec_interval(X_0:bat[:date], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:date] ",	"MTIMEdate_add_msec_interval_bulk;",	""	]
[ "batmtime",	"date_add_msec_interval",	"pattern batmtime.date_add_msec_interval(X_0:date, X_1:bat[:lng]):bat[:date] ",	"MTIMEdate_add_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"date_add_msec_interval",	"pattern batmtime.date_add_msec_interval(X_0:date, X_1:bat[:lng], X_2:bat[:oid]):bat[:date] ",	"MTIMEdate_add_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"date_add_msec_interval",	"pattern batmtime.date_add_msec_interval(X_0:bat[:date], X_1:lng):bat[:date] ",	"MTIMEdate_add_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"date_add_msec_interval",	"pattern batmtime.date_add_msec_interval(X_0:bat[:date], X_1:lng, X_2:bat[:oid]):bat[:date] ",	"MTIMEdate_add_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"date_sub_month_interval",	"pattern batmtime.date_sub_month_interval(X_0:bat[:date], X_1:bat[:int]):bat[:date] ",	"MTIMEdate_submonths_bulk;",	""	]
[ "batmtime",	"date_sub_month_interval",	"pattern batmtime.date_sub_month_interval(X_0:bat[:date], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:date] ",	"MTIMEdate_submonths_bulk;",	""	]
[ "batmtime",	"date_sub_month_interval",	"pattern batmtime.date_sub_month_interval(X_0:date, X_1:bat[:int]):bat[:date] ",	"MTIMEdate_submonths_bulk_p1;",	""	]
[ "batmtime",	"date_sub_month_interval",	"pattern batmtime.date_sub_month_interval(X_0:date, X_1:bat[:int], X_2:bat[:oid]):bat[:date] ",	"MTIMEdate_submonths_bulk_p1;",	""	]
[ "batmtime",	"date_sub_month_interval",	"pattern batmtime.date_sub_month_interval(X_0:bat[:date], X_1:int):bat[:date] ",	"MTIMEdate_submonths_bulk_p2;",	""	]
[ "batmtime",	"date_sub_month_interval",	"pattern batmtime.date_sub_month_interval(X_0:bat[:date], X_1:int, X_2:bat[:oid]):bat[:date] ",	"MTIMEdate_submonths_bulk_p2;",	""	]
[ "batmtime",	"date_sub_msec_interval",	"pattern batmtime.date_sub_msec_interval(X_0:bat[:date], X_1:bat[:lng]):bat[:date] ",	"MTIMEdate_sub_msec_interval_bulk;",	""	]
[ "batmtime",	"date_sub_msec_interval",	"pattern batmtime.date_sub_msec_interval(X_0:bat[:date], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:date] ",	"MTIMEdate_sub_msec_interval_bulk;",	""	]
[ "batmtime",	"date_sub_msec_interval",	"pattern batmtime.date_sub_msec_interval(X_0:date, X_1:bat[:lng]):bat[:date] ",	"MTIMEdate_sub_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"date_sub_msec_interval",	"pattern batmtime.date_sub_msec_interval(X_0:date, X_1:bat[:lng], X_2:bat[:oid]):bat[:date] ",	"MTIMEdate_sub_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"date_sub_msec_interval",	"pattern batmtime.date_sub_msec_interval(X_0:bat[:date], X_1:lng):bat[:date] ",	"MTIMEdate_sub_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"date_sub_msec_interval",	"pattern batmtime.date_sub_msec_interval(X_0:bat[:date], X_1:lng, X_2:bat[:oid]):bat[:date] ",	"MTIMEdate_sub_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"date_to_str",	"pattern batmtime.date_to_str(X_0:bat[:str], X_1:bat[:str]):bat[:str] ",	"MTIMEdate_to_str_bulk;",	""	]
[ "batmtime",	"date_to_str",	"pattern batmtime.date_to_str(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"MTIMEdate_to_str_bulk;",	""	]
[ "batmtime",	"date_to_str",	"pattern batmtime.date_to_str(X_0:date, X_1:bat[:str]):bat[:str] ",	"MTIMEdate_to_str_bulk_p1;",	""	]
[ "batmtime",	"date_to_str",	"pattern batmtime.date_to_str(X_0:date, X_1:bat[:str], X_2:bat[:oid]):bat[:str] ",	"MTIMEdate_to_str_bulk_p1;",	""	]
[ "batmtime",	"date_to_str",	"pattern batmtime.date_to_str(X_0:bat[:date], X_1:str):bat[:str] ",	"MTIMEdate_to_str_bulk_p2;",	""	]
[ "batmtime",	"date_to_str",	"pattern batmtime.date_to_str(X_0:bat[:date], X_1:str, X_2:bat[:oid]):bat[:str] ",	"MTIMEdate_to_str_bulk_p2;",	""	]
[ "batmtime",	"day",	"pattern batmtime.day(X_0:bat[:date]):bat[:int] ",	"MTIMEdate_extract_day_bulk;",	""	]
[ "batmtime",	"day",	"pattern batmtime.day(X_0:bat[:date], X_1:bat[:oid]):bat[:int] ",	"MTIMEdate_extract_day_bulk;",	""	]
[ "batmtime",	"day",	"pattern batmtime.day(X_0:bat[:lng]):bat[:lng] ",	"MTIMEsql_day_bulk;",	""	]
[ "batmtime",	"day",	"pattern batmtime.day(X_0:bat[:lng], X_1:bat[:oid]):bat[:lng] ",	"MTIMEsql_day_bulk;",	""	]
[ "batmtime",	"day",	"pattern batmtime.day(X_0:bat[:timestamp]):bat[:int] ",	"MTIMEtimestamp_day_bulk;",	""	]
[ "batmtime",	"day",	"pattern batmtime.day(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:int] ",	"MTIMEtimestamp_day_bulk;",	""	]
[ "batmtime",	"dayofweek",	"pattern batmtime.dayofweek(X_0:bat[:date]):bat[:int] ",	"MTIMEdate_extract_dayofweek_bulk;",	""	]
[ "batmtime",	"dayofweek",	"pattern batmtime.dayofweek(X_0:bat[:date], X_1:bat[:oid]):bat[:int] ",	"MTIMEdate_extract_dayofweek_bulk;",	""	]
[ "batmtime",	"dayofyear",	"pattern batmtime.dayofyear(X_0:bat[:date]):bat[:int] ",	"MTIMEdate_extract_dayofyear_bulk;",	""	]
[ "batmtime",	"dayofyear",	"pattern batmtime.dayofyear(X_0:bat[:date], X_1:bat[:oid]):bat[:int] ",	"MTIMEdate_extract_dayofyear_bulk;",	""	]
[ "batmtime",	"decade",	"pattern batmtime.decade(X_0:bat[:date]):bat[:int] ",	"MTIMEdate_extract_decade_bulk;",	""	]
[ "batmtime",	"decade",	"pattern batmtime.decade(X_0:bat[:date], X_1:bat[:oid]):bat[:int] ",	"MTIMEdate_extract_decade_bulk;",	""	]
[ "batmtime",	"decade",	"pattern batmtime.decade(X_0:bat[:timestamp]):bat[:int] ",	"MTIMEtimestamp_decade_bulk;",	""	]
[ "batmtime",	"decade",	"pattern batmtime.decade(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:int] ",	"MTIMEtimestamp_decade_bulk;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:date], X_1:bat[:date]):bat[:lng] ",	"MTIMEdate_diff_bulk;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:date], X_1:bat[:date], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"MTIMEdate_diff_bulk;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:date, X_1:bat[:date]):bat[:lng] ",	"MTIMEdate_diff_bulk_p1;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:date, X_1:bat[:date], X_2:bat[:oid]):bat[:lng] ",	"MTIMEdate_diff_bulk_p1;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:date], X_1:date):bat[:lng] ",	"MTIMEdate_diff_bulk_p2;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:date], X_1:date, X_2:bat[:oid]):bat[:lng] ",	"MTIMEdate_diff_bulk_p2;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:daytime], X_1:bat[:daytime]):bat[:lng] ",	"MTIMEdaytime_diff_msec_bulk;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:daytime], X_1:bat[:daytime], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"MTIMEdaytime_diff_msec_bulk;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:daytime, X_1:bat[:daytime]):bat[:lng] ",	"MTIMEdaytime_diff_msec_bulk_p1;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:daytime, X_1:bat[:daytime], X_2:bat[:oid]):bat[:lng] ",	"MTIMEdaytime_diff_msec_bulk_p1;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:daytime], X_1:daytime):bat[:lng] ",	"MTIMEdaytime_diff_msec_bulk_p2;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:daytime], X_1:daytime, X_2:bat[:oid]):bat[:lng] ",	"MTIMEdaytime_diff_msec_bulk_p2;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:timestamp], X_1:bat[:timestamp]):bat[:lng] ",	"MTIMEtimestamp_diff_msec_bulk;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:timestamp], X_1:bat[:timestamp], X_2:bat[:oid], X_3:bat[:oid]):bat[:lng] ",	"MTIMEtimestamp_diff_msec_bulk;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:timestamp, X_1:bat[:timestamp]):bat[:lng] ",	"MTIMEtimestamp_diff_msec_bulk_p1;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:timestamp, X_1:bat[:timestamp], X_2:bat[:oid]):bat[:lng] ",	"MTIMEtimestamp_diff_msec_bulk_p1;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:timestamp], X_1:timestamp):bat[:lng] ",	"MTIMEtimestamp_diff_msec_bulk_p2;",	""	]
[ "batmtime",	"diff",	"pattern batmtime.diff(X_0:bat[:timestamp], X_1:timestamp, X_2:bat[:oid]):bat[:lng] ",	"MTIMEtimestamp_diff_msec_bulk_p2;",	""	]
[ "batmtime",	"epoch",	"pattern batmtime.epoch(X_0:bat[:timestamp]):bat[:int] ",	"MTIMEseconds_since_epoch_bulk;",	""	]
[ "batmtime",	"epoch",	"pattern batmtime.epoch(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:int] ",	"MTIMEseconds_since_epoch_bulk;",	""	]
[ "batmtime",	"epoch",	"pattern batmtime.epoch(X_0:bat[:lng]):bat[:timestamp] ",	"MTIMEtimestamp_frommsec_epoch_bulk;",	""	]
[ "batmtime",	"epoch",	"pattern batmtime.epoch(X_0:bat[:lng], X_1:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_frommsec_epoch_bulk;",	""	]
[ "batmtime",	"epoch",	"pattern batmtime.epoch(X_0:bat[:int]):bat[:timestamp] ",	"MTIMEtimestamp_fromsecond_epoch_bulk;",	""	]
[ "batmtime",	"epoch",	"pattern batmtime.epoch(X_0:bat[:int], X_1:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_fromsecond_epoch_bulk;",	""	]
[ "batmtime",	"epoch_ms",	"pattern batmtime.epoch_ms(X_0:bat[:date]):bat[:lng] ",	"MTIMEdate_extract_epoch_ms_bulk;",	""	]
[ "batmtime",	"epoch_ms",	"pattern batmtime.epoch_ms(X_0:bat[:date], X_1:bat[:oid]):bat[:lng] ",	"MTIMEdate_extract_epoch_ms_bulk;",	""	]
[ "batmtime",	"epoch_ms",	"pattern batmtime.epoch_ms(X_0:bat[:daytime]):bat[:lng] ",	"MTIMEdaytime_extract_epoch_ms_bulk;",	""	]
[ "batmtime",	"epoch_ms",	"pattern batmtime.epoch_ms(X_0:bat[:daytime], X_1:bat[:oid]):bat[:lng] ",	"MTIMEdaytime_extract_epoch_ms_bulk;",	""	]
[ "batmtime",	"epoch_ms",	"pattern batmtime.epoch_ms(X_0:bat[:lng]):bat[:lng] ",	"MTIMEmsec_extract_epoch_ms_bulk;",	""	]
[ "batmtime",	"epoch_ms",	"pattern batmtime.epoch_ms(X_0:bat[:lng], X_1:bat[:oid]):bat[:lng] ",	"MTIMEmsec_extract_epoch_ms_bulk;",	""	]
[ "batmtime",	"epoch_ms",	"pattern batmtime.epoch_ms(X_0:bat[:timestamp]):bat[:lng] ",	"MTIMEtimestamp_extract_epoch_ms_bulk;",	""	]
[ "batmtime",	"epoch_ms",	"pattern batmtime.epoch_ms(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:lng] ",	"MTIMEtimestamp_extract_epoch_ms_bulk;",	""	]
[ "batmtime",	"hours",	"pattern batmtime.hours(X_0:bat[:daytime]):bat[:int] ",	"MTIMEdaytime_extract_hours_bulk;",	""	]
[ "batmtime",	"hours",	"pattern batmtime.hours(X_0:bat[:daytime], X_1:bat[:oid]):bat[:int] ",	"MTIMEdaytime_extract_hours_bulk;",	""	]
[ "batmtime",	"hours",	"pattern batmtime.hours(X_0:bat[:lng]):bat[:int] ",	"MTIMEsql_hours_bulk;",	""	]
[ "batmtime",	"hours",	"pattern batmtime.hours(X_0:bat[:lng], X_1:bat[:oid]):bat[:int] ",	"MTIMEsql_hours_bulk;",	""	]
[ "batmtime",	"hours",	"pattern batmtime.hours(X_0:bat[:timestamp]):bat[:int] ",	"MTIMEtimestamp_hours_bulk;",	""	]
[ "batmtime",	"hours",	"pattern batmtime.hours(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:int] ",	"MTIMEtimestamp_hours_bulk;",	""	]
[ "batmtime",	"minutes",	"pattern batmtime.minutes(X_0:bat[:daytime]):bat[:int] ",	"MTIMEdaytime_extract_minutes_bulk;",	""	]
[ "batmtime",	"minutes",	"pattern batmtime.minutes(X_0:bat[:daytime], X_1:bat[:oid]):bat[:int] ",	"MTIMEdaytime_extract_minutes_bulk;",	""	]
[ "batmtime",	"minutes",	"pattern batmtime.minutes(X_0:bat[:lng]):bat[:int] ",	"MTIMEsql_minutes_bulk;",	""	]
[ "batmtime",	"minutes",	"pattern batmtime.minutes(X_0:bat[:lng], X_1:bat[:oid]):bat[:int] ",	"MTIMEsql_minutes_bulk;",	""	]
[ "batmtime",	"minutes",	"pattern batmtime.minutes(X_0:bat[:timestamp]):bat[:int] ",	"MTIMEtimestamp_minutes_bulk;",	""	]
[ "batmtime",	"minutes",	"pattern batmtime.minutes(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:int] ",	"MTIMEtimestamp_minutes_bulk;",	""	]
[ "batmtime",	"month",	"pattern batmtime.month(X_0:bat[:date]):bat[:int] ",	"MTIMEdate_extract_month_bulk;",	""	]
[ "batmtime",	"month",	"pattern batmtime.month(X_0:bat[:date], X_1:bat[:oid]):bat[:int] ",	"MTIMEdate_extract_month_bulk;",	""	]
[ "batmtime",	"month",	"pattern batmtime.month(X_0:bat[:int]):bat[:int] ",	"MTIMEsql_month_bulk;",	""	]
[ "batmtime",	"month",	"pattern batmtime.month(X_0:bat[:int], X_1:bat[:oid]):bat[:int] ",	"MTIMEsql_month_bulk;",	""	]
[ "batmtime",	"month",	"pattern batmtime.month(X_0:bat[:timestamp]):bat[:int] ",	"MTIMEtimestamp_month_bulk;",	""	]
[ "batmtime",	"month",	"pattern batmtime.month(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:int] ",	"MTIMEtimestamp_month_bulk;",	""	]
[ "batmtime",	"quarter",	"pattern batmtime.quarter(X_0:bat[:date]):bat[:int] ",	"MTIMEdate_extract_quarter_bulk;",	""	]
[ "batmtime",	"quarter",	"pattern batmtime.quarter(X_0:bat[:date], X_1:bat[:oid]):bat[:int] ",	"MTIMEdate_extract_quarter_bulk;",	""	]
[ "batmtime",	"quarter",	"pattern batmtime.quarter(X_0:bat[:timestamp]):bat[:int] ",	"MTIMEtimestamp_quarter_bulk;",	""	]
[ "batmtime",	"quarter",	"pattern batmtime.quarter(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:int] ",	"MTIMEtimestamp_quarter_bulk;",	""	]
[ "batmtime",	"seconds",	"pattern batmtime.seconds(X_0:bat[:lng]):bat[:int] ",	"MTIMEsql_seconds_bulk;",	""	]
[ "batmtime",	"seconds",	"pattern batmtime.seconds(X_0:bat[:lng], X_1:bat[:oid]):bat[:int] ",	"MTIMEsql_seconds_bulk;",	""	]
[ "batmtime",	"sql_seconds",	"pattern batmtime.sql_seconds(X_0:bat[:daytime]):bat[:int] ",	"MTIMEdaytime_extract_sql_seconds_bulk;",	""	]
[ "batmtime",	"sql_seconds",	"pattern batmtime.sql_seconds(X_0:bat[:daytime], X_1:bat[:oid]):bat[:int] ",	"MTIMEdaytime_extract_sql_seconds_bulk;",	""	]
[ "batmtime",	"sql_seconds",	"pattern batmtime.sql_seconds(X_0:bat[:timestamp]):bat[:int] ",	"MTIMEtimestamp_sql_seconds_bulk;",	""	]
[ "batmtime",	"sql_seconds",	"pattern batmtime.sql_seconds(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:int] ",	"MTIMEtimestamp_sql_seconds_bulk;",	""	]
[ "batmtime",	"str_to_date",	"pattern batmtime.str_to_date(X_0:bat[:str], X_1:bat[:str]):bat[:date] ",	"MTIMEstr_to_date_bulk;",	""	]
[ "batmtime",	"str_to_date",	"pattern batmtime.str_to_date(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:date] ",	"MTIMEstr_to_date_bulk;",	""	]
[ "batmtime",	"str_to_date",	"pattern batmtime.str_to_date(X_0:str, X_1:bat[:str]):bat[:date] ",	"MTIMEstr_to_date_bulk_p1;",	""	]
[ "batmtime",	"str_to_date",	"pattern batmtime.str_to_date(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:date] ",	"MTIMEstr_to_date_bulk_p1;",	""	]
[ "batmtime",	"str_to_date",	"pattern batmtime.str_to_date(X_0:bat[:str], X_1:str):bat[:date] ",	"MTIMEstr_to_date_bulk_p2;",	""	]
[ "batmtime",	"str_to_date",	"pattern batmtime.str_to_date(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:date] ",	"MTIMEstr_to_date_bulk_p2;",	""	]
[ "batmtime",	"str_to_time",	"pattern batmtime.str_to_time(X_0:bat[:str], X_1:bat[:str]):bat[:daytime] ",	"MTIMEstr_to_time_bulk;",	""	]
[ "batmtime",	"str_to_time",	"pattern batmtime.str_to_time(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:daytime] ",	"MTIMEstr_to_time_bulk;",	""	]
[ "batmtime",	"str_to_time",	"pattern batmtime.str_to_time(X_0:str, X_1:bat[:str]):bat[:daytime] ",	"MTIMEstr_to_time_bulk_p1;",	""	]
[ "batmtime",	"str_to_time",	"pattern batmtime.str_to_time(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:daytime] ",	"MTIMEstr_to_time_bulk_p1;",	""	]
[ "batmtime",	"str_to_time",	"pattern batmtime.str_to_time(X_0:bat[:str], X_1:str):bat[:daytime] ",	"MTIMEstr_to_time_bulk_p2;",	""	]
[ "batmtime",	"str_to_time",	"pattern batmtime.str_to_time(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:daytime] ",	"MTIMEstr_to_time_bulk_p2;",	""	]
[ "batmtime",	"str_to_timestamp",	"pattern batmtime.str_to_timestamp(X_0:bat[:str], X_1:bat[:str]):bat[:timestamp] ",	"MTIMEstr_to_timestamp_bulk;",	""	]
[ "batmtime",	"str_to_timestamp",	"pattern batmtime.str_to_timestamp(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:timestamp] ",	"MTIMEstr_to_timestamp_bulk;",	""	]
[ "batmtime",	"str_to_timestamp",	"pattern batmtime.str_to_timestamp(X_0:str, X_1:bat[:str]):bat[:timestamp] ",	"MTIMEstr_to_timestamp_bulk_p1;",	""	]
[ "batmtime",	"str_to_timestamp",	"pattern batmtime.str_to_timestamp(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:timestamp] ",	"MTIMEstr_to_timestamp_bulk_p1;",	""	]
[ "batmtime",	"str_to_timestamp",	"pattern batmtime.str_to_timestamp(X_0:bat[:str], X_1:str):bat[:timestamp] ",	"MTIMEstr_to_timestamp_bulk_p2;",	""	]
[ "batmtime",	"str_to_timestamp",	"pattern batmtime.str_to_timestamp(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:timestamp] ",	"MTIMEstr_to_timestamp_bulk_p2;",	""	]
[ "batmtime",	"time_add_msec_interval",	"pattern batmtime.time_add_msec_interval(X_0:bat[:daytime], X_1:bat[:lng]):bat[:daytime] ",	"MTIMEtime_add_msec_interval_bulk;",	""	]
[ "batmtime",	"time_add_msec_interval",	"pattern batmtime.time_add_msec_interval(X_0:bat[:daytime], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:daytime] ",	"MTIMEtime_add_msec_interval_bulk;",	""	]
[ "batmtime",	"time_add_msec_interval",	"pattern batmtime.time_add_msec_interval(X_0:daytime, X_1:bat[:lng]):bat[:daytime] ",	"MTIMEtime_add_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"time_add_msec_interval",	"pattern batmtime.time_add_msec_interval(X_0:daytime, X_1:bat[:lng], X_2:bat[:oid]):bat[:daytime] ",	"MTIMEtime_add_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"time_add_msec_interval",	"pattern batmtime.time_add_msec_interval(X_0:bat[:daytime], X_1:lng):bat[:daytime] ",	"MTIMEtime_add_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"time_add_msec_interval",	"pattern batmtime.time_add_msec_interval(X_0:bat[:daytime], X_1:lng, X_2:bat[:oid]):bat[:daytime] ",	"MTIMEtime_add_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"time_sub_msec_interval",	"pattern batmtime.time_sub_msec_interval(X_0:bat[:daytime], X_1:bat[:lng]):bat[:daytime] ",	"MTIMEtime_sub_msec_interval_bulk;",	""	]
[ "batmtime",	"time_sub_msec_interval",	"pattern batmtime.time_sub_msec_interval(X_0:bat[:daytime], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:daytime] ",	"MTIMEtime_sub_msec_interval_bulk;",	""	]
[ "batmtime",	"time_sub_msec_interval",	"pattern batmtime.time_sub_msec_interval(X_0:daytime, X_1:bat[:lng]):bat[:daytime] ",	"MTIMEtime_sub_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"time_sub_msec_interval",	"pattern batmtime.time_sub_msec_interval(X_0:daytime, X_1:bat[:lng], X_2:bat[:oid]):bat[:daytime] ",	"MTIMEtime_sub_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"time_sub_msec_interval",	"pattern batmtime.time_sub_msec_interval(X_0:bat[:daytime], X_1:lng):bat[:daytime] ",	"MTIMEtime_sub_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"time_sub_msec_interval",	"pattern batmtime.time_sub_msec_interval(X_0:bat[:daytime], X_1:lng, X_2:bat[:oid]):bat[:daytime] ",	"MTIMEtime_sub_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"time_to_str",	"pattern batmtime.time_to_str(X_0:bat[:daytime], X_1:bat[:str]):bat[:str] ",	"MTIMEtime_to_str_bulk;",	""	]
[ "batmtime",	"time_to_str",	"pattern batmtime.time_to_str(X_0:bat[:daytime], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"MTIMEtime_to_str_bulk;",	""	]
[ "batmtime",	"time_to_str",	"pattern batmtime.time_to_str(X_0:daytime, X_1:bat[:str]):bat[:str] ",	"MTIMEtime_to_str_bulk_p1;",	""	]
[ "batmtime",	"time_to_str",	"pattern batmtime.time_to_str(X_0:daytime, X_1:bat[:str], X_2:bat[:oid]):bat[:str] ",	"MTIMEtime_to_str_bulk_p1;",	""	]
[ "batmtime",	"time_to_str",	"pattern batmtime.time_to_str(X_0:bat[:daytime], X_1:str):bat[:str] ",	"MTIMEtime_to_str_bulk_p2;",	""	]
[ "batmtime",	"time_to_str",	"pattern batmtime.time_to_str(X_0:bat[:daytime], X_1:str, X_2:bat[:oid]):bat[:str] ",	"MTIMEtime_to_str_bulk_p2;",	""	]
[ "batmtime",	"timestamp_add_month_interval",	"pattern batmtime.timestamp_add_month_interval(X_0:bat[:timestamp], X_1:bat[:int]):bat[:timestamp] ",	"MTIMEtimestamp_add_month_interval_bulk;",	""	]
[ "batmtime",	"timestamp_add_month_interval",	"pattern batmtime.timestamp_add_month_interval(X_0:bat[:timestamp], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_add_month_interval_bulk;",	""	]
[ "batmtime",	"timestamp_add_month_interval",	"pattern batmtime.timestamp_add_month_interval(X_0:timestamp, X_1:bat[:int]):bat[:timestamp] ",	"MTIMEtimestamp_add_month_interval_bulk_p1;",	""	]
[ "batmtime",	"timestamp_add_month_interval",	"pattern batmtime.timestamp_add_month_interval(X_0:timestamp, X_1:bat[:int], X_2:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_add_month_interval_bulk_p1;",	""	]
[ "batmtime",	"timestamp_add_month_interval",	"pattern batmtime.timestamp_add_month_interval(X_0:bat[:timestamp], X_1:int):bat[:timestamp] ",	"MTIMEtimestamp_add_month_interval_bulk_p2;",	""	]
[ "batmtime",	"timestamp_add_month_interval",	"pattern batmtime.timestamp_add_month_interval(X_0:bat[:timestamp], X_1:int, X_2:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_add_month_interval_bulk_p2;",	""	]
[ "batmtime",	"timestamp_add_msec_interval",	"pattern batmtime.timestamp_add_msec_interval(X_0:bat[:timestamp], X_1:bat[:lng]):bat[:timestamp] ",	"MTIMEtimestamp_add_msec_interval_bulk;",	""	]
[ "batmtime",	"timestamp_add_msec_interval",	"pattern batmtime.timestamp_add_msec_interval(X_0:bat[:timestamp], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_add_msec_interval_bulk;",	""	]
[ "batmtime",	"timestamp_add_msec_interval",	"pattern batmtime.timestamp_add_msec_interval(X_0:timestamp, X_1:bat[:lng]):bat[:timestamp] ",	"MTIMEtimestamp_add_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"timestamp_add_msec_interval",	"pattern batmtime.timestamp_add_msec_interval(X_0:timestamp, X_1:bat[:lng], X_2:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_add_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"timestamp_add_msec_interval",	"pattern batmtime.timestamp_add_msec_interval(X_0:bat[:timestamp], X_1:lng):bat[:timestamp] ",	"MTIMEtimestamp_add_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"timestamp_add_msec_interval",	"pattern batmtime.timestamp_add_msec_interval(X_0:bat[:timestamp], X_1:lng, X_2:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_add_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"timestamp_sub_month_interval",	"pattern batmtime.timestamp_sub_month_interval(X_0:bat[:timestamp], X_1:bat[:int]):bat[:timestamp] ",	"MTIMEtimestamp_sub_month_interval_bulk;",	""	]
[ "batmtime",	"timestamp_sub_month_interval",	"pattern batmtime.timestamp_sub_month_interval(X_0:bat[:timestamp], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_sub_month_interval_bulk;",	""	]
[ "batmtime",	"timestamp_sub_month_interval",	"pattern batmtime.timestamp_sub_month_interval(X_0:timestamp, X_1:bat[:int]):bat[:timestamp] ",	"MTIMEtimestamp_sub_month_interval_bulk_p1;",	""	]
[ "batmtime",	"timestamp_sub_month_interval",	"pattern batmtime.timestamp_sub_month_interval(X_0:timestamp, X_1:bat[:int], X_2:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_sub_month_interval_bulk_p1;",	""	]
[ "batmtime",	"timestamp_sub_month_interval",	"pattern batmtime.timestamp_sub_month_interval(X_0:bat[:timestamp], X_1:int):bat[:timestamp] ",	"MTIMEtimestamp_sub_month_interval_bulk_p2;",	""	]
[ "batmtime",	"timestamp_sub_month_interval",	"pattern batmtime.timestamp_sub_month_interval(X_0:bat[:timestamp], X_1:int, X_2:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_sub_month_interval_bulk_p2;",	""	]
[ "batmtime",	"timestamp_sub_msec_interval",	"pattern batmtime.timestamp_sub_msec_interval(X_0:bat[:timestamp], X_1:bat[:lng]):bat[:timestamp] ",	"MTIMEtimestamp_sub_msec_interval_bulk;",	""	]
[ "batmtime",	"timestamp_sub_msec_interval",	"pattern batmtime.timestamp_sub_msec_interval(X_0:bat[:timestamp], X_1:bat[:lng], X_2:bat[:oid], X_3:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_sub_msec_interval_bulk;",	""	]
[ "batmtime",	"timestamp_sub_msec_interval",	"pattern batmtime.timestamp_sub_msec_interval(X_0:timestamp, X_1:bat[:lng]):bat[:timestamp] ",	"MTIMEtimestamp_sub_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"timestamp_sub_msec_interval",	"pattern batmtime.timestamp_sub_msec_interval(X_0:timestamp, X_1:bat[:lng], X_2:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_sub_msec_interval_bulk_p1;",	""	]
[ "batmtime",	"timestamp_sub_msec_interval",	"pattern batmtime.timestamp_sub_msec_interval(X_0:bat[:timestamp], X_1:lng):bat[:timestamp] ",	"MTIMEtimestamp_sub_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"timestamp_sub_msec_interval",	"pattern batmtime.timestamp_sub_msec_interval(X_0:bat[:timestamp], X_1:lng, X_2:bat[:oid]):bat[:timestamp] ",	"MTIMEtimestamp_sub_msec_interval_bulk_p2;",	""	]
[ "batmtime",	"timestamp_to_str",	"pattern batmtime.timestamp_to_str(X_0:bat[:timestamp], X_1:bat[:str]):bat[:str] ",	"MTIMEtimestamp_to_str_bulk;",	""	]
[ "batmtime",	"timestamp_to_str",	"pattern batmtime.timestamp_to_str(X_0:bat[:timestamp], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"MTIMEtimestamp_to_str_bulk;",	""	]
[ "batmtime",	"timestamp_to_str",	"pattern batmtime.timestamp_to_str(X_0:timestamp, X_1:bat[:str]):bat[:str] ",	"MTIMEtimestamp_to_str_bulk_p1;",	""	]
[ "batmtime",	"timestamp_to_str",	"pattern batmtime.timestamp_to_str(X_0:timestamp, X_1:bat[:str], X_2:bat[:oid]):bat[:str] ",	"MTIMEtimestamp_to_str_bulk_p1;",	""	]
[ "batmtime",	"timestamp_to_str",	"pattern batmtime.timestamp_to_str(X_0:bat[:timestamp], X_1:str):bat[:str] ",	"MTIMEtimestamp_to_str_bulk_p2;",	""	]
[ "batmtime",	"timestamp_to_str",	"pattern batmtime.timestamp_to_str(X_0:bat[:timestamp], X_1:str, X_2:bat[:oid]):bat[:str] ",	"MTIMEtimestamp_to_str_bulk_p2;",	""	]
[ "batmtime",	"usweekofyear",	"pattern batmtime.usweekofyear(X_0:bat[:date]):bat[:int] ",	"MTIMEdate_extract_usweekofyear_bulk;",	""	]
[ "batmtime",	"usweekofyear",	"pattern batmtime.usweekofyear(X_0:bat[:date], X_1:bat[:oid]):bat[:int] ",	"MTIMEdate_extract_usweekofyear_bulk;",	""	]
[ "batmtime",	"weekofyear",	"pattern batmtime.weekofyear(X_0:bat[:date]):bat[:int] ",	"MTIMEdate_extract_weekofyear_bulk;",	""	]
[ "batmtime",	"weekofyear",	"pattern batmtime.weekofyear(X_0:bat[:date], X_1:bat[:oid]):bat[:int] ",	"MTIMEdate_extract_weekofyear_bulk;",	""	]
[ "batmtime",	"year",	"pattern batmtime.year(X_0:bat[:date]):bat[:int] ",	"MTIMEdate_extract_year_bulk;",	""	]
[ "batmtime",	"year",	"pattern batmtime.year(X_0:bat[:date], X_1:bat[:oid]):bat[:int] ",	"MTIMEdate_extract_year_bulk;",	""	]
[ "batmtime",	"year",	"pattern batmtime.year(X_0:bat[:int]):bat[:int] ",	"MTIMEsql_year_bulk;",	""	]
[ "batmtime",	"year",	"pattern batmtime.year(X_0:bat[:int], X_1:bat[:oid]):bat[:int] ",	"MTIMEsql_year_bulk;",	""	]
[ "batmtime",	"year",	"pattern batmtime.year(X_0:bat[:timestamp]):bat[:int] ",	"MTIMEtimestamp_year_bulk;",	""	]
[ "batmtime",	"year",	"pattern batmtime.year(X_0:bat[:timestamp], X_1:bat[:oid]):bat[:int] ",	"MTIMEtimestamp_year_bulk;",	""	]
[ "batpcre",	"replace",	"command batpcre.replace(X_0:bat[:str], X_1:str, X_2:str, X_3:str):bat[:str] ",	"PCREreplace_bat_wrap;",	""	]
[ "batpcre",	"replace_first",	"command batpcre.replace_first(X_0:bat[:str], X_1:str, X_2:str, X_3:str):bat[:str] ",	"PCREreplacefirst_bat_wrap;",	""	]
[ "batpyapi3",	"eval",	"unsafe pattern batpyapi3.eval(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalStd;",	""	]
[ "batpyapi3",	"eval_aggr",	"unsafe pattern batpyapi3.eval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalAggr;",	""	]
[ "batpyapi3",	"eval_loader",	"unsafe pattern batpyapi3.eval_loader(X_0:ptr, X_1:str):any... ",	"PYAPI3PyAPIevalLoader;",	""	]
[ "batpyapi3",	"eval_loader",	"unsafe pattern batpyapi3.eval_loader(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalLoader;",	""	]
[ "batpyapi3",	"subeval_aggr",	"unsafe pattern batpyapi3.subeval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalAggr;",	""	]
[ "batpyapi3map",	"eval",	"pattern batpyapi3map.eval(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalStdMap;",	""	]
[ "batpyapi3map",	"eval_aggr",	"pattern batpyapi3map.eval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalAggrMap;",	""	]
[ "batpyapi3map",	"subeval_aggr",	"pattern batpyapi3map.subeval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalAggrMap;",	""	]
[ "batrapi",	"eval",	"pattern batrapi.eval(X_0:ptr, X_1:str, X_2:any...):any... ",	"RAPIevalStd;",	""	]
[ "batrapi",	"eval_aggr",	"pattern batrapi.eval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"RAPIevalAggr;",	""	]
[ "batrapi",	"subeval_aggr",	"pattern batrapi.subeval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"RAPIevalAggr;",	""	]
[ "batsql",	"all",	"pattern batsql.all(X_0:bat[:bit], X_1:bat[:bit], X_2:bat[:bit]):bat[:bit] ",	"SQLall_cmp;",	""	]
[ "batsql",	"all",	"pattern batsql.all(X_0:bat[:bit], X_1:bat[:bit], X_2:bit):bat[:bit] ",	"SQLall_cmp;",	""	]
[ "batsql",	"all",	"pattern batsql.all(X_0:bat[:bit], X_1:bit, X_2:bat[:bit]):bat[:bit] ",	"SQLall_cmp;",	""	]
[ "batsql",	"all",	"pattern batsql.all(X_0:bat[:bit], X_1:bit, X_2:bit):bat[:bit] ",	"SQLall_cmp;",	""	]
[ "batsql",	"all",	"pattern batsql.all(X_0:bit, X_1:bat[:bit], X_2:bat[:bit]):bat[:bit] ",	"SQLall_cmp;",	""	]
[ "batsql",	"all",	"pattern batsql.all(X_0:bit, X_1:bat[:bit], X_2:bit):bat[:bit] ",	"SQLall_cmp;",	""	]
[ "batsql",	"all",	"pattern batsql.all(X_0:bit, X_1:bit, X_2:bat[:bit]):bat[:bit] ",	"SQLall_cmp;",	""	]
[ "batsql",	"alpha",	"command batsql.alpha(X_0:bat[:dbl], X_1:dbl):bat[:dbl] ",	"SQLbat_alpha_cst;",	""	]
[ "batsql",	"alpha",	"command batsql.alpha(X_0:dbl, X_1:bat[:dbl]):bat[:dbl] ",	"SQLcst_alpha_bat;",	""	]
[ "batsql",	"any",	"pattern batsql.any(X_0:bat[:bit], X_1:bat[:bit], X_2:bat[:bit]):bat[:bit] ",	"SQLany_cmp;",	""	]
[ "batsql",	"any",	"pattern batsql.any(X_0:bat[:bit], X_1:bat[:bit], X_2:bit):bat[:bit] ",	"SQLany_cmp;",	""	]
[ "batsql",	"any",	"pattern batsql.any(X_0:bat[:bit], X_1:bit, X_2:bat[:bit]):bat[:bit] ",	"SQLany_cmp;",	""	]
[ "batsql",	"any",	"pattern batsql.any(X_0:bat[:bit], X_1:bit, X_2:bit):bat[:bit] ",	"SQLany_cmp;",	""	]
[ "batsql",	"any",	"pattern batsql.any(X_0:bit, X_1:bat[:bit], X_2:bat[:bit]):bat[:bit] ",	"SQLany_cmp;",	""	]
[ "batsql",	"any",	"pattern batsql.any(X_0:bit, X_1:bat[:bit], X_2:bit):bat[:bit] ",	"SQLany_cmp;",	""	]
[ "batsql",	"any",	"pattern batsql.any(X_0:bit, X_1:bit, X_2:bat[:bit]):bat[:bit] ",	"SQLany_cmp;",	""	]
[ "batsql",	"avg",	"pattern batsql.avg(X_0:bat[:bte], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLavg;",	""	]
[ "batsql",	"avg",	"pattern batsql.avg(X_0:bat[:dbl], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLavg;",	""	]
[ "batsql",	"avg",	"pattern batsql.avg(X_0:bat[:flt], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLavg;",	""	]
[ "batsql",	"avg",	"pattern batsql.avg(X_0:bat[:int], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLavg;",	""	]
[ "batsql",	"avg",	"pattern batsql.avg(X_0:bat[:lng], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLavg;",	""	]
[ "batsql",	"avg",	"pattern batsql.avg(X_0:bat[:sht], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLavg;",	""	]
[ "batsql",	"avg",	"pattern batsql.avg(X_0:bat[:bte], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:bte] ",	"SQLavginteger;",	""	]
[ "batsql",	"avg",	"pattern batsql.avg(X_0:bat[:int], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:int] ",	"SQLavginteger;",	""	]
[ "batsql",	"avg",	"pattern batsql.avg(X_0:bat[:lng], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:lng] ",	"SQLavginteger;",	""	]
[ "batsql",	"avg",	"pattern batsql.avg(X_0:bat[:sht], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:sht] ",	"SQLavginteger;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:bte], X_1:bat[:bte], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:bte], X_1:bte, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:dbl], X_1:bat[:dbl], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:dbl], X_1:dbl, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:flt], X_1:bat[:flt], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:flt], X_1:flt, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:int], X_1:bat[:int], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:int], X_1:int, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:lng], X_1:bat[:lng], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:lng], X_1:lng, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:sht], X_1:bat[:sht], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bat[:sht], X_1:sht, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:bte, X_1:bat[:bte], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:dbl, X_1:bat[:dbl], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:flt, X_1:bat[:flt], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:int, X_1:bat[:int], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:lng, X_1:bat[:lng], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"corr",	"pattern batsql.corr(X_0:sht, X_1:bat[:sht], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcorr;",	""	]
[ "batsql",	"count",	"pattern batsql.count(X_0:bat[:any_1], X_1:bit, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:lng] ",	"SQLcount;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:bte], X_1:bat[:bte], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:bte], X_1:bte, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:dbl], X_1:bat[:dbl], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:dbl], X_1:dbl, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:flt], X_1:bat[:flt], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:flt], X_1:flt, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:int], X_1:bat[:int], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:int], X_1:int, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:lng], X_1:bat[:lng], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:lng], X_1:lng, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:sht], X_1:bat[:sht], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bat[:sht], X_1:sht, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:bte, X_1:bat[:bte], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:dbl, X_1:bat[:dbl], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:flt, X_1:bat[:flt], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:int, X_1:bat[:int], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:lng, X_1:bat[:lng], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariance",	"pattern batsql.covariance(X_0:sht, X_1:bat[:sht], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_samp;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:bte], X_1:bat[:bte], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:bte], X_1:bte, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:dbl], X_1:bat[:dbl], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:dbl], X_1:dbl, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:flt], X_1:bat[:flt], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:flt], X_1:flt, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:int], X_1:bat[:int], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:int], X_1:int, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:lng], X_1:bat[:lng], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:lng], X_1:lng, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:sht], X_1:bat[:sht], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bat[:sht], X_1:sht, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:bte, X_1:bat[:bte], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:dbl, X_1:bat[:dbl], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:flt, X_1:bat[:flt], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:int, X_1:bat[:int], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:lng, X_1:bat[:lng], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"covariancep",	"pattern batsql.covariancep(X_0:sht, X_1:bat[:sht], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:dbl] ",	"SQLcovar_pop;",	""	]
[ "batsql",	"cume_dist",	"pattern batsql.cume_dist(X_0:bat[:any_1], X_1:any_2, X_2:any_3):bat[:dbl] ",	"SQLcume_dist;",	""	]
[ "batsql",	"dense_rank",	"pattern batsql.dense_rank(X_0:bat[:any_1], X_1:any_2, X_2:any_3):bat[:int] ",	"SQLdense_rank;",	""	]
[ "batsql",	"diff",	"pattern batsql.diff(X_0:bat[:any_1]):bat[:bit] ",	"SQLdiff;",	""	]
[ "batsql",	"diff",	"pattern batsql.diff(X_0:bat[:bit], X_1:any_1):bat[:bit] ",	"SQLdiff;",	""	]
[ "batsql",	"diff",	"pattern batsql.diff(X_0:bat[:bit], X_1:bat[:any_1]):bat[:bit] ",	"SQLdiff;",	""	]
[ "batsql",	"diff",	"pattern batsql.diff(X_0:bit, X_1:bat[:any_1]):bat[:bit] ",	"SQLdiff;",	""	]
[ "batsql",	"first_value",	"pattern batsql.first_value(X_0:bat[:any_1], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:any_1] ",	"SQLfirst_value;",	""	]
[ "batsql",	"get_value",	"pattern batsql.get_value(X_0:bat[:str], X_1:bat[:str]):bat[:lng] ",	"mvc_bat_get_value;",	""	]
[ "batsql",	"get_value",	"pattern batsql.get_value(X_0:bat[:str], X_1:str):bat[:lng] ",	"mvc_bat_get_value;",	""	]
[ "batsql",	"get_value",	"pattern batsql.get_value(X_0:str, X_1:bat[:str]):bat[:lng] ",	"mvc_bat_get_value;",	""	]
[ "batsql",	"index",	"command batsql.index(X_0:bat[:str], X_1:bit):bat[:bte] ",	"BATSTRindex_bte;",	""	]
[ "batsql",	"index",	"command batsql.index(X_0:bat[:str], X_1:bit):bat[:int] ",	"BATSTRindex_int;",	""	]
[ "batsql",	"index",	"command batsql.index(X_0:bat[:str], X_1:bit):bat[:sht] ",	"BATSTRindex_sht;",	""	]
[ "batsql",	"lag",	"pattern batsql.lag(X_0:any_1, X_1:any, X_2:bat[:any_1], X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlag;",	""	]
[ "batsql",	"lag",	"pattern batsql.lag(X_0:any_1, X_1:bat[:any], X_2:any_1, X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlag;",	""	]
[ "batsql",	"lag",	"pattern batsql.lag(X_0:any_1, X_1:bat[:any], X_2:any_2, X_3:any_3):bat[:any_1] ",	"SQLlag;",	""	]
[ "batsql",	"lag",	"pattern batsql.lag(X_0:any_1, X_1:bat[:any], X_2:bat[:any_1], X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlag;",	""	]
[ "batsql",	"lag",	"pattern batsql.lag(X_0:bat[:any_1], X_1:any, X_2:any_1, X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlag;",	""	]
[ "batsql",	"lag",	"pattern batsql.lag(X_0:bat[:any_1], X_1:any, X_2:any_2, X_3:any_3):bat[:any_1] ",	"SQLlag;",	""	]
[ "batsql",	"lag",	"pattern batsql.lag(X_0:bat[:any_1], X_1:any, X_2:bat[:any_1], X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlag;",	""	]
[ "batsql",	"lag",	"pattern batsql.lag(X_0:bat[:any_1], X_1:any_2, X_2:any_3):bat[:any_1] ",	"SQLlag;",	""	]
[ "batsql",	"lag",	"pattern batsql.lag(X_0:bat[:any_1], X_1:bat[:any], X_2:any_1, X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlag;",	""	]
[ "batsql",	"lag",	"pattern batsql.lag(X_0:bat[:any_1], X_1:bat[:any], X_2:any_2, X_3:any_3):bat[:any_1] ",	"SQLlag;",	""	]
[ "batsql",	"lag",	"pattern batsql.lag(X_0:bat[:any_1], X_1:bat[:any], X_2:bat[:any_1], X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlag;",	""	]
[ "batsql",	"last_value",	"pattern batsql.last_value(X_0:bat[:any_1], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:any_1] ",	"SQLlast_value;",	""	]
[ "batsql",	"lead",	"pattern batsql.lead(X_0:any_1, X_1:any, X_2:bat[:any_1], X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlead;",	""	]
[ "batsql",	"lead",	"pattern batsql.lead(X_0:any_1, X_1:bat[:any], X_2:any_1, X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlead;",	""	]
[ "batsql",	"lead",	"pattern batsql.lead(X_0:any_1, X_1:bat[:any], X_2:any_2, X_3:any_3):bat[:any_1] ",	"SQLlead;",	""	]
[ "batsql",	"lead",	"pattern batsql.lead(X_0:any_1, X_1:bat[:any], X_2:bat[:any_1], X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlead;",	""	]
[ "batsql",	"lead",	"pattern batsql.lead(X_0:bat[:any_1], X_1:any, X_2:any_1, X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlead;",	""	]
[ "batsql",	"lead",	"pattern batsql.lead(X_0:bat[:any_1], X_1:any, X_2:any_2, X_3:any_3):bat[:any_1] ",	"SQLlead;",	""	]
[ "batsql",	"lead",	"pattern batsql.lead(X_0:bat[:any_1], X_1:any, X_2:bat[:any_1], X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlead;",	""	]
[ "batsql",	"lead",	"pattern batsql.lead(X_0:bat[:any_1], X_1:any_2, X_2:any_3):bat[:any_1] ",	"SQLlead;",	""	]
[ "batsql",	"lead",	"pattern batsql.lead(X_0:bat[:any_1], X_1:bat[:any], X_2:any_1, X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlead;",	""	]
[ "batsql",	"lead",	"pattern batsql.lead(X_0:bat[:any_1], X_1:bat[:any], X_2:any_2, X_3:any_3):bat[:any_1] ",	"SQLlead;",	""	]
[ "batsql",	"lead",	"pattern batsql.lead(X_0:bat[:any_1], X_1:bat[:any], X_2:bat[:any_1], X_3:any_2, X_4:any_3):bat[:any_1] ",	"SQLlead;",	""	]
[ "batsql",	"max",	"pattern batsql.max(X_0:bat[:any_1], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:any_1] ",	"SQLmax;",	""	]
[ "batsql",	"min",	"pattern batsql.min(X_0:bat[:any_1], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:any_1] ",	"SQLmin;",	""	]
[ "batsql",	"next_value",	"unsafe pattern batsql.next_value(X_0:bat[:str], X_1:bat[:str]):bat[:lng] ",	"mvc_bat_next_value;",	""	]
[ "batsql",	"next_value",	"unsafe pattern batsql.next_value(X_0:bat[:str], X_1:str):bat[:lng] ",	"mvc_bat_next_value;",	""	]
[ "batsql",	"next_value",	"unsafe pattern batsql.next_value(X_0:str, X_1:bat[:str]):bat[:lng] ",	"mvc_bat_next_value;",	""	]
[ "batsql",	"nth_value",	"pattern batsql.nth_value(X_0:any_1, X_1:bat[:lng], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:any_1] ",	"SQLnth_value;",	""	]
[ "batsql",	"nth_value",	"pattern batsql.nth_value(X_0:bat[:any_1], X_1:bat[:lng], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:any_1] ",	"SQLnth_value;",	""	]
[ "batsql",	"nth_value",	"pattern batsql.nth_value(X_0:bat[:any_1], X_1:lng, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:any_1] ",	"SQLnth_value;",	""	]
[ "batsql",	"ntile",	"pattern batsql.ntile(X_0:any, X_1:bat[:any_1], X_2:any_2, X_3:any_3):bat[:any_1] ",	"SQLntile;",	""	]
[ "batsql",	"ntile",	"pattern batsql.ntile(X_0:bat[:any], X_1:any_1, X_2:any_2, X_3:any_3):bat[:any_1] ",	"SQLntile;",	""	]
[ "batsql",	"ntile",	"pattern batsql.ntile(X_0:bat[:any], X_1:bat[:any_1], X_2:any_2, X_3:any_3):bat[:any_1] ",	"SQLntile;",	""	]
[ "batsql",	"password",	"pattern batsql.password(X_0:bat[:str]):bat[:str] ",	"db_password_wrap;",	""	]
[ "batsql",	"percent_rank",	"pattern batsql.percent_rank(X_0:bat[:any_1], X_1:any_2, X_2:any_3):bat[:dbl] ",	"SQLpercent_rank;",	""	]
[ "batsql",	"prod",	"pattern batsql.prod(X_0:bat[:bte], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:lng] ",	"SQLprod;",	""	]
[ "batsql",	"prod",	"pattern batsql.prod(X_0:bat[:dbl], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLprod;",	""	]
[ "batsql",	"prod",	"pattern batsql.prod(X_0:bat[:flt], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLprod;",	""	]
[ "batsql",	"prod",	"pattern batsql.prod(X_0:bat[:flt], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:flt] ",	"SQLprod;",	""	]
[ "batsql",	"prod",	"pattern batsql.prod(X_0:bat[:int], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:lng] ",	"SQLprod;",	""	]
[ "batsql",	"prod",	"pattern batsql.prod(X_0:bat[:lng], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:lng] ",	"SQLprod;",	""	]
[ "batsql",	"prod",	"pattern batsql.prod(X_0:bat[:sht], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:lng] ",	"SQLprod;",	""	]
[ "batsql",	"rank",	"pattern batsql.rank(X_0:bat[:any_1], X_1:any_2, X_2:any_3):bat[:int] ",	"SQLrank;",	""	]
[ "batsql",	"restart",	"unsafe pattern batsql.restart(X_0:bat[:str], X_1:bat[:str], X_2:bat[:lng]):bat[:lng] ",	"mvc_bat_restart_seq;",	""	]
[ "batsql",	"restart",	"unsafe pattern batsql.restart(X_0:bat[:str], X_1:bat[:str], X_2:lng):bat[:lng] ",	"mvc_bat_restart_seq;",	""	]
[ "batsql",	"restart",	"unsafe pattern batsql.restart(X_0:bat[:str], X_1:str, X_2:bat[:lng]):bat[:lng] ",	"mvc_bat_restart_seq;",	""	]
[ "batsql",	"restart",	"unsafe pattern batsql.restart(X_0:bat[:str], X_1:str, X_2:lng):bat[:lng] ",	"mvc_bat_restart_seq;",	""	]
[ "batsql",	"restart",	"unsafe pattern batsql.restart(X_0:str, X_1:bat[:str], X_2:bat[:lng]):bat[:lng] ",	"mvc_bat_restart_seq;",	""	]
[ "batsql",	"restart",	"unsafe pattern batsql.restart(X_0:str, X_1:bat[:str], X_2:lng):bat[:lng] ",	"mvc_bat_restart_seq;",	""	]
[ "batsql",	"restart",	"unsafe pattern batsql.restart(X_0:str, X_1:str, X_2:bat[:lng]):bat[:lng] ",	"mvc_bat_restart_seq;",	""	]
[ "batsql",	"row_number",	"pattern batsql.row_number(X_0:bat[:any_1], X_1:any_2, X_2:any_3):bat[:int] ",	"SQLrow_number;",	""	]
[ "batsql",	"stdev",	"pattern batsql.stdev(X_0:bat[:bte], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_samp;",	""	]
[ "batsql",	"stdev",	"pattern batsql.stdev(X_0:bat[:dbl], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_samp;",	""	]
[ "batsql",	"stdev",	"pattern batsql.stdev(X_0:bat[:flt], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_samp;",	""	]
[ "batsql",	"stdev",	"pattern batsql.stdev(X_0:bat[:int], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_samp;",	""	]
[ "batsql",	"stdev",	"pattern batsql.stdev(X_0:bat[:lng], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_samp;",	""	]
[ "batsql",	"stdev",	"pattern batsql.stdev(X_0:bat[:sht], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_samp;",	""	]
[ "batsql",	"stdevp",	"pattern batsql.stdevp(X_0:bat[:bte], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_pop;",	""	]
[ "batsql",	"stdevp",	"pattern batsql.stdevp(X_0:bat[:dbl], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_pop;",	""	]
[ "batsql",	"stdevp",	"pattern batsql.stdevp(X_0:bat[:flt], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_pop;",	""	]
[ "batsql",	"stdevp",	"pattern batsql.stdevp(X_0:bat[:int], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_pop;",	""	]
[ "batsql",	"stdevp",	"pattern batsql.stdevp(X_0:bat[:lng], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_pop;",	""	]
[ "batsql",	"stdevp",	"pattern batsql.stdevp(X_0:bat[:sht], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLstddev_pop;",	""	]
[ "batsql",	"str_group_concat",	"pattern batsql.str_group_concat(X_0:bat[:str], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:str] ",	"SQLstrgroup_concat;",	""	]
[ "batsql",	"str_group_concat",	"pattern batsql.str_group_concat(X_0:bat[:str], X_1:bat[:str], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:str] ",	"SQLstrgroup_concat;",	""	]
[ "batsql",	"str_group_concat",	"pattern batsql.str_group_concat(X_0:bat[:str], X_1:str, X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:str] ",	"SQLstrgroup_concat;",	""	]
[ "batsql",	"str_group_concat",	"pattern batsql.str_group_concat(X_0:str, X_1:bat[:str], X_2:any, X_3:any, X_4:int, X_5:any, X_6:any):bat[:str] ",	"SQLstrgroup_concat;",	""	]
[ "batsql",	"strings",	"command batsql.strings(X_0:bat[:str]):bat[:str] ",	"BATSTRstrings;",	""	]
[ "batsql",	"sum",	"pattern batsql.sum(X_0:bat[:bte], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:lng] ",	"SQLsum;",	""	]
[ "batsql",	"sum",	"pattern batsql.sum(X_0:bat[:dbl], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLsum;",	""	]
[ "batsql",	"sum",	"pattern batsql.sum(X_0:bat[:flt], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLsum;",	""	]
[ "batsql",	"sum",	"pattern batsql.sum(X_0:bat[:flt], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:flt] ",	"SQLsum;",	""	]
[ "batsql",	"sum",	"pattern batsql.sum(X_0:bat[:int], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:lng] ",	"SQLsum;",	""	]
[ "batsql",	"sum",	"pattern batsql.sum(X_0:bat[:lng], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:lng] ",	"SQLsum;",	""	]
[ "batsql",	"sum",	"pattern batsql.sum(X_0:bat[:sht], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:lng] ",	"SQLsum;",	""	]
[ "batsql",	"variance",	"pattern batsql.variance(X_0:bat[:bte], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_samp;",	""	]
[ "batsql",	"variance",	"pattern batsql.variance(X_0:bat[:dbl], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_samp;",	""	]
[ "batsql",	"variance",	"pattern batsql.variance(X_0:bat[:flt], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_samp;",	""	]
[ "batsql",	"variance",	"pattern batsql.variance(X_0:bat[:int], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_samp;",	""	]
[ "batsql",	"variance",	"pattern batsql.variance(X_0:bat[:lng], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_samp;",	""	]
[ "batsql",	"variance",	"pattern batsql.variance(X_0:bat[:sht], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_samp;",	""	]
[ "batsql",	"variancep",	"pattern batsql.variancep(X_0:bat[:bte], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_pop;",	""	]
[ "batsql",	"variancep",	"pattern batsql.variancep(X_0:bat[:dbl], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_pop;",	""	]
[ "batsql",	"variancep",	"pattern batsql.variancep(X_0:bat[:flt], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_pop;",	""	]
[ "batsql",	"variancep",	"pattern batsql.variancep(X_0:bat[:int], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_pop;",	""	]
[ "batsql",	"variancep",	"pattern batsql.variancep(X_0:bat[:lng], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_pop;",	""	]
[ "batsql",	"variancep",	"pattern batsql.variancep(X_0:bat[:sht], X_1:any, X_2:any, X_3:int, X_4:any, X_5:any):bat[:dbl] ",	"SQLvar_pop;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:bat[:bte]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:bat[:dbl]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:bat[:flt]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:bat[:int]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:bat[:lng]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:bat[:sht]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:bte):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:dbl):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:flt):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:int):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:lng):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:any_1], X_1:int, X_2:int, X_3:int, X_4:sht):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:bat[:bte]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:bat[:dbl]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:bat[:flt]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:bat[:int]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:bat[:lng]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:bat[:sht]):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:bte):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:dbl):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:flt):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:int):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:lng):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batsql",	"window_bound",	"pattern batsql.window_bound(X_0:bat[:bit], X_1:bat[:any_1], X_2:int, X_3:int, X_4:int, X_5:sht):bat[:oid] ",	"SQLwindow_bound;",	""	]
[ "batstr",	"ascii",	"pattern batstr.ascii(X_0:bat[:str]):bat[:int] ",	"STRbatAscii;",	""	]
[ "batstr",	"ascii",	"pattern batstr.ascii(X_0:bat[:str], X_1:bat[:oid]):bat[:int] ",	"STRbatAscii;",	""	]
[ "batstr",	"endsWith",	"pattern batstr.endsWith(X_0:bat[:str], X_1:bat[:str]):bat[:bit] ",	"STRbatSuffix;",	""	]
[ "batstr",	"endsWith",	"pattern batstr.endsWith(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"STRbatSuffix;",	""	]
[ "batstr",	"endsWith",	"pattern batstr.endsWith(X_0:str, X_1:bat[:str]):bat[:bit] ",	"STRbatSuffix_strcst;",	""	]
[ "batstr",	"endsWith",	"pattern batstr.endsWith(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:bit] ",	"STRbatSuffix_strcst;",	""	]
[ "batstr",	"endsWith",	"pattern batstr.endsWith(X_0:bat[:str], X_1:str):bat[:bit] ",	"STRbatSuffixcst;",	""	]
[ "batstr",	"endsWith",	"pattern batstr.endsWith(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:bit] ",	"STRbatSuffixcst;",	""	]
[ "batstr",	"insert",	"pattern batstr.insert(X_0:bat[:str], X_1:bat[:int], X_2:bat[:int], X_3:bat[:str]):bat[:str] ",	"STRbatInsert;",	""	]
[ "batstr",	"insert",	"pattern batstr.insert(X_0:bat[:str], X_1:int, X_2:int, X_3:str):bat[:str] ",	"STRbatInsertcst;",	""	]
[ "batstr",	"length",	"pattern batstr.length(X_0:bat[:str]):bat[:int] ",	"STRbatLength;",	""	]
[ "batstr",	"length",	"pattern batstr.length(X_0:bat[:str], X_1:bat[:oid]):bat[:int] ",	"STRbatLength;",	""	]
[ "batstr",	"locate",	"pattern batstr.locate(X_0:bat[:str], X_1:bat[:str]):bat[:int] ",	"STRbatstrLocate;",	""	]
[ "batstr",	"locate",	"pattern batstr.locate(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"STRbatstrLocate;",	""	]
[ "batstr",	"locate",	"pattern batstr.locate(X_0:str, X_1:bat[:str]):bat[:int] ",	"STRbatstrLocate_strcst;",	""	]
[ "batstr",	"locate",	"pattern batstr.locate(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:int] ",	"STRbatstrLocate_strcst;",	""	]
[ "batstr",	"locate",	"pattern batstr.locate(X_0:bat[:str], X_1:str):bat[:int] ",	"STRbatstrLocatecst;",	""	]
[ "batstr",	"locate",	"pattern batstr.locate(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:int] ",	"STRbatstrLocatecst;",	""	]
[ "batstr",	"locate3",	"pattern batstr.locate3(X_0:bat[:str], X_1:bat[:str], X_2:bat[:int]):bat[:int] ",	"STRbatstrLocate3;",	""	]
[ "batstr",	"locate3",	"pattern batstr.locate3(X_0:bat[:str], X_1:str, X_2:int):bat[:int] ",	"STRbatstrLocate3cst;",	""	]
[ "batstr",	"lpad",	"pattern batstr.lpad(X_0:str, X_1:bat[:int]):bat[:str] ",	"STRbatLpad_1st_const;",	""	]
[ "batstr",	"lpad",	"pattern batstr.lpad(X_0:str, X_1:bat[:int], X_2:bat[:oid]):bat[:str] ",	"STRbatLpad_1st_const;",	""	]
[ "batstr",	"lpad",	"pattern batstr.lpad(X_0:bat[:str], X_1:bat[:int]):bat[:str] ",	"STRbatLpad_bat;",	""	]
[ "batstr",	"lpad",	"pattern batstr.lpad(X_0:bat[:str], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"STRbatLpad_bat;",	""	]
[ "batstr",	"lpad",	"pattern batstr.lpad(X_0:bat[:str], X_1:int):bat[:str] ",	"STRbatLpad_const;",	""	]
[ "batstr",	"lpad",	"pattern batstr.lpad(X_0:bat[:str], X_1:int, X_2:bat[:oid]):bat[:str] ",	"STRbatLpad_const;",	""	]
[ "batstr",	"lpad3",	"pattern batstr.lpad3(X_0:bat[:str], X_1:bat[:int], X_2:bat[:str]):bat[:str] ",	"STRbatLpad3_bat_bat;",	""	]
[ "batstr",	"lpad3",	"pattern batstr.lpad3(X_0:bat[:str], X_1:bat[:int], X_2:str):bat[:str] ",	"STRbatLpad3_bat_const;",	""	]
[ "batstr",	"lpad3",	"pattern batstr.lpad3(X_0:bat[:str], X_1:int, X_2:bat[:str]):bat[:str] ",	"STRbatLpad3_const_bat;",	""	]
[ "batstr",	"lpad3",	"pattern batstr.lpad3(X_0:bat[:str], X_1:int, X_2:str):bat[:str] ",	"STRbatLpad3_const_const;",	""	]
[ "batstr",	"ltrim",	"pattern batstr.ltrim(X_0:bat[:str]):bat[:str] ",	"STRbatLtrim;",	""	]
[ "batstr",	"ltrim",	"pattern batstr.ltrim(X_0:bat[:str], X_1:bat[:oid]):bat[:str] ",	"STRbatLtrim;",	""	]
[ "batstr",	"ltrim2",	"pattern batstr.ltrim2(X_0:str, X_1:bat[:str]):bat[:str] ",	"STRbatLtrim2_1st_const;",	""	]
[ "batstr",	"ltrim2",	"pattern batstr.ltrim2(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:str] ",	"STRbatLtrim2_1st_const;",	""	]
[ "batstr",	"ltrim2",	"pattern batstr.ltrim2(X_0:bat[:str], X_1:bat[:str]):bat[:str] ",	"STRbatLtrim2_bat;",	""	]
[ "batstr",	"ltrim2",	"pattern batstr.ltrim2(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"STRbatLtrim2_bat;",	""	]
[ "batstr",	"ltrim2",	"pattern batstr.ltrim2(X_0:bat[:str], X_1:str):bat[:str] ",	"STRbatLtrim2_const;",	""	]
[ "batstr",	"ltrim2",	"pattern batstr.ltrim2(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:str] ",	"STRbatLtrim2_const;",	""	]
[ "batstr",	"nbytes",	"pattern batstr.nbytes(X_0:bat[:str]):bat[:int] ",	"STRbatBytes;",	""	]
[ "batstr",	"nbytes",	"pattern batstr.nbytes(X_0:bat[:str], X_1:bat[:oid]):bat[:int] ",	"STRbatBytes;",	""	]
[ "batstr",	"r_search",	"pattern batstr.r_search(X_0:bat[:str], X_1:bat[:str]):bat[:int] ",	"STRbatRstrSearch;",	""	]
[ "batstr",	"r_search",	"pattern batstr.r_search(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"STRbatRstrSearch;",	""	]
[ "batstr",	"r_search",	"pattern batstr.r_search(X_0:str, X_1:bat[:str]):bat[:int] ",	"STRbatRstrSearch_strcst;",	""	]
[ "batstr",	"r_search",	"pattern batstr.r_search(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:int] ",	"STRbatRstrSearch_strcst;",	""	]
[ "batstr",	"r_search",	"pattern batstr.r_search(X_0:bat[:str], X_1:str):bat[:int] ",	"STRbatRstrSearchcst;",	""	]
[ "batstr",	"r_search",	"pattern batstr.r_search(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:int] ",	"STRbatRstrSearchcst;",	""	]
[ "batstr",	"repeat",	"pattern batstr.repeat(X_0:bat[:str], X_1:bat[:int]):bat[:str] ",	"STRbatrepeat;",	""	]
[ "batstr",	"repeat",	"pattern batstr.repeat(X_0:bat[:str], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"STRbatrepeat;",	""	]
[ "batstr",	"repeat",	"pattern batstr.repeat(X_0:str, X_1:bat[:int]):bat[:str] ",	"STRbatrepeat_strcst;",	""	]
[ "batstr",	"repeat",	"pattern batstr.repeat(X_0:str, X_1:bat[:int], X_2:bat[:oid]):bat[:str] ",	"STRbatrepeat_strcst;",	""	]
[ "batstr",	"repeat",	"pattern batstr.repeat(X_0:bat[:str], X_1:int):bat[:str] ",	"STRbatrepeatcst;",	""	]
[ "batstr",	"repeat",	"pattern batstr.repeat(X_0:bat[:str], X_1:int, X_2:bat[:oid]):bat[:str] ",	"STRbatrepeatcst;",	""	]
[ "batstr",	"replace",	"pattern batstr.replace(X_0:bat[:str], X_1:bat[:str], X_2:bat[:str]):bat[:str] ",	"STRbatReplace;",	""	]
[ "batstr",	"replace",	"pattern batstr.replace(X_0:bat[:str], X_1:str, X_2:str):bat[:str] ",	"STRbatReplacecst;",	""	]
[ "batstr",	"rpad",	"pattern batstr.rpad(X_0:str, X_1:bat[:int]):bat[:str] ",	"STRbatRpad_1st_const;",	""	]
[ "batstr",	"rpad",	"pattern batstr.rpad(X_0:str, X_1:bat[:int], X_2:bat[:oid]):bat[:str] ",	"STRbatRpad_1st_const;",	""	]
[ "batstr",	"rpad",	"pattern batstr.rpad(X_0:bat[:str], X_1:bat[:int]):bat[:str] ",	"STRbatRpad_bat;",	""	]
[ "batstr",	"rpad",	"pattern batstr.rpad(X_0:bat[:str], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"STRbatRpad_bat;",	""	]
[ "batstr",	"rpad",	"pattern batstr.rpad(X_0:bat[:str], X_1:int):bat[:str] ",	"STRbatRpad_const;",	""	]
[ "batstr",	"rpad",	"pattern batstr.rpad(X_0:bat[:str], X_1:int, X_2:bat[:oid]):bat[:str] ",	"STRbatRpad_const;",	""	]
[ "batstr",	"rpad3",	"pattern batstr.rpad3(X_0:bat[:str], X_1:bat[:int], X_2:bat[:str]):bat[:str] ",	"STRbatRpad3_bat_bat;",	""	]
[ "batstr",	"rpad3",	"pattern batstr.rpad3(X_0:bat[:str], X_1:bat[:int], X_2:str):bat[:str] ",	"STRbatRpad3_bat_const;",	""	]
[ "batstr",	"rpad3",	"pattern batstr.rpad3(X_0:bat[:str], X_1:int, X_2:bat[:str]):bat[:str] ",	"STRbatRpad3_const_bat;",	""	]
[ "batstr",	"rpad3",	"pattern batstr.rpad3(X_0:bat[:str], X_1:int, X_2:str):bat[:str] ",	"STRbatRpad3_const_const;",	""	]
[ "batstr",	"rtrim",	"pattern batstr.rtrim(X_0:bat[:str]):bat[:str] ",	"STRbatRtrim;",	""	]
[ "batstr",	"rtrim",	"pattern batstr.rtrim(X_0:bat[:str], X_1:bat[:oid]):bat[:str] ",	"STRbatRtrim;",	""	]
[ "batstr",	"rtrim2",	"pattern batstr.rtrim2(X_0:str, X_1:bat[:str]):bat[:str] ",	"STRbatRtrim2_1st_const;",	""	]
[ "batstr",	"rtrim2",	"pattern batstr.rtrim2(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:str] ",	"STRbatRtrim2_1st_const;",	""	]
[ "batstr",	"rtrim2",	"pattern batstr.rtrim2(X_0:bat[:str], X_1:bat[:str]):bat[:str] ",	"STRbatRtrim2_bat;",	""	]
[ "batstr",	"rtrim2",	"pattern batstr.rtrim2(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"STRbatRtrim2_bat;",	""	]
[ "batstr",	"rtrim2",	"pattern batstr.rtrim2(X_0:bat[:str], X_1:str):bat[:str] ",	"STRbatRtrim2_const;",	""	]
[ "batstr",	"rtrim2",	"pattern batstr.rtrim2(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:str] ",	"STRbatRtrim2_const;",	""	]
[ "batstr",	"search",	"pattern batstr.search(X_0:bat[:str], X_1:bat[:str]):bat[:int] ",	"STRbatstrSearch;",	""	]
[ "batstr",	"search",	"pattern batstr.search(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"STRbatstrSearch;",	""	]
[ "batstr",	"search",	"pattern batstr.search(X_0:str, X_1:bat[:str]):bat[:int] ",	"STRbatstrSearch_strcst;",	""	]
[ "batstr",	"search",	"pattern batstr.search(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:int] ",	"STRbatstrSearch_strcst;",	""	]
[ "batstr",	"search",	"pattern batstr.search(X_0:bat[:str], X_1:str):bat[:int] ",	"STRbatstrSearchcst;",	""	]
[ "batstr",	"search",	"pattern batstr.search(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:int] ",	"STRbatstrSearchcst;",	""	]
[ "batstr",	"space",	"pattern batstr.space(X_0:bat[:int]):bat[:str] ",	"STRbatSpace;",	""	]
[ "batstr",	"space",	"pattern batstr.space(X_0:bat[:int], X_1:bat[:oid]):bat[:str] ",	"STRbatSpace;",	""	]
[ "batstr",	"splitpart",	"pattern batstr.splitpart(X_0:bat[:str], X_1:bat[:str], X_2:bat[:int]):bat[:str] ",	"STRbatsplitpart;",	""	]
[ "batstr",	"splitpart",	"pattern batstr.splitpart(X_0:bat[:str], X_1:bat[:str], X_2:int):bat[:str] ",	"STRbatsplitpart_fieldcst;",	""	]
[ "batstr",	"splitpart",	"pattern batstr.splitpart(X_0:bat[:str], X_1:str, X_2:bat[:int]):bat[:str] ",	"STRbatsplitpart_needlecst;",	""	]
[ "batstr",	"splitpart",	"pattern batstr.splitpart(X_0:bat[:str], X_1:str, X_2:int):bat[:str] ",	"STRbatsplitpartcst;",	""	]
[ "batstr",	"startsWith",	"pattern batstr.startsWith(X_0:bat[:str], X_1:bat[:str]):bat[:bit] ",	"STRbatPrefix;",	""	]
[ "batstr",	"startsWith",	"pattern batstr.startsWith(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:bit] ",	"STRbatPrefix;",	""	]
[ "batstr",	"startsWith",	"pattern batstr.startsWith(X_0:str, X_1:bat[:str]):bat[:bit] ",	"STRbatPrefix_strcst;",	""	]
[ "batstr",	"startsWith",	"pattern batstr.startsWith(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:bit] ",	"STRbatPrefix_strcst;",	""	]
[ "batstr",	"startsWith",	"pattern batstr.startsWith(X_0:bat[:str], X_1:str):bat[:bit] ",	"STRbatPrefixcst;",	""	]
[ "batstr",	"startsWith",	"pattern batstr.startsWith(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:bit] ",	"STRbatPrefixcst;",	""	]
[ "batstr",	"string",	"pattern batstr.string(X_0:bat[:str], X_1:bat[:int]):bat[:str] ",	"STRbatTail;",	""	]
[ "batstr",	"string",	"pattern batstr.string(X_0:bat[:str], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"STRbatTail;",	""	]
[ "batstr",	"string",	"pattern batstr.string(X_0:str, X_1:bat[:int]):bat[:str] ",	"STRbatTail_strcst;",	""	]
[ "batstr",	"string",	"pattern batstr.string(X_0:str, X_1:bat[:int], X_2:bat[:oid]):bat[:str] ",	"STRbatTail_strcst;",	""	]
[ "batstr",	"string",	"pattern batstr.string(X_0:bat[:str], X_1:int):bat[:str] ",	"STRbatTailcst;",	""	]
[ "batstr",	"string",	"pattern batstr.string(X_0:bat[:str], X_1:int, X_2:bat[:oid]):bat[:str] ",	"STRbatTailcst;",	""	]
[ "batstr",	"stringleft",	"pattern batstr.stringleft(X_0:bat[:str], X_1:bat[:int]):bat[:str] ",	"STRbatprefix;",	""	]
[ "batstr",	"stringleft",	"pattern batstr.stringleft(X_0:bat[:str], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"STRbatprefix;",	""	]
[ "batstr",	"stringleft",	"pattern batstr.stringleft(X_0:str, X_1:bat[:int]):bat[:str] ",	"STRbatprefix_strcst;",	""	]
[ "batstr",	"stringleft",	"pattern batstr.stringleft(X_0:str, X_1:bat[:int], X_2:bat[:oid]):bat[:str] ",	"STRbatprefix_strcst;",	""	]
[ "batstr",	"stringleft",	"pattern batstr.stringleft(X_0:bat[:str], X_1:int):bat[:str] ",	"STRbatprefixcst;",	""	]
[ "batstr",	"stringleft",	"pattern batstr.stringleft(X_0:bat[:str], X_1:int, X_2:bat[:oid]):bat[:str] ",	"STRbatprefixcst;",	""	]
[ "batstr",	"stringright",	"pattern batstr.stringright(X_0:bat[:str], X_1:bat[:int]):bat[:str] ",	"STRbatsuffix;",	""	]
[ "batstr",	"stringright",	"pattern batstr.stringright(X_0:bat[:str], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"STRbatsuffix;",	""	]
[ "batstr",	"stringright",	"pattern batstr.stringright(X_0:str, X_1:bat[:int]):bat[:str] ",	"STRbatsuffix_strcst;",	""	]
[ "batstr",	"stringright",	"pattern batstr.stringright(X_0:str, X_1:bat[:int], X_2:bat[:oid]):bat[:str] ",	"STRbatsuffix_strcst;",	""	]
[ "batstr",	"stringright",	"pattern batstr.stringright(X_0:bat[:str], X_1:int):bat[:str] ",	"STRbatsuffixcst;",	""	]
[ "batstr",	"stringright",	"pattern batstr.stringright(X_0:bat[:str], X_1:int, X_2:bat[:oid]):bat[:str] ",	"STRbatsuffixcst;",	""	]
[ "batstr",	"substitute",	"pattern batstr.substitute(X_0:bat[:str], X_1:bat[:str], X_2:bat[:str], X_3:bat[:bit]):bat[:str] ",	"STRbatSubstitute;",	""	]
[ "batstr",	"substitute",	"pattern batstr.substitute(X_0:bat[:str], X_1:str, X_2:str, X_3:bit):bat[:str] ",	"STRbatSubstitutecst;",	""	]
[ "batstr",	"substring",	"pattern batstr.substring(X_0:bat[:str], X_1:bat[:int]):bat[:str] ",	"STRbatsubstringTail;",	""	]
[ "batstr",	"substring",	"pattern batstr.substring(X_0:bat[:str], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"STRbatsubstringTail;",	""	]
[ "batstr",	"substring",	"pattern batstr.substring(X_0:str, X_1:bat[:int]):bat[:str] ",	"STRbatsubstringTail_strcst;",	""	]
[ "batstr",	"substring",	"pattern batstr.substring(X_0:str, X_1:bat[:int], X_2:bat[:oid]):bat[:str] ",	"STRbatsubstringTail_strcst;",	""	]
[ "batstr",	"substring",	"pattern batstr.substring(X_0:bat[:str], X_1:int):bat[:str] ",	"STRbatsubstringTailcst;",	""	]
[ "batstr",	"substring",	"pattern batstr.substring(X_0:bat[:str], X_1:int, X_2:bat[:oid]):bat[:str] ",	"STRbatsubstringTailcst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:bat[:str], X_1:bat[:int], X_2:bat[:int]):bat[:str] ",	"STRbatsubstring;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:bat[:str], X_1:bat[:int], X_2:bat[:int], X_3:bat[:oid], X_4:bat[:oid], X_5:bat[:oid]):bat[:str] ",	"STRbatsubstring;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:str, X_1:int, X_2:bat[:int]):bat[:str] ",	"STRbatsubstring_1st_2nd_cst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:str, X_1:int, X_2:bat[:int], X_3:bat[:oid]):bat[:str] ",	"STRbatsubstring_1st_2nd_cst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:str, X_1:bat[:int], X_2:int):bat[:str] ",	"STRbatsubstring_1st_3rd_cst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:str, X_1:bat[:int], X_2:int, X_3:bat[:oid]):bat[:str] ",	"STRbatsubstring_1st_3rd_cst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:str, X_1:bat[:int], X_2:bat[:int]):bat[:str] ",	"STRbatsubstring_1st_cst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:str, X_1:bat[:int], X_2:bat[:int], X_3:bat[:oid], X_4:bat[:oid]):bat[:str] ",	"STRbatsubstring_1st_cst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:bat[:str], X_1:int, X_2:int):bat[:str] ",	"STRbatsubstring_2nd_3rd_cst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:bat[:str], X_1:int, X_2:int, X_3:bat[:oid]):bat[:str] ",	"STRbatsubstring_2nd_3rd_cst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:bat[:str], X_1:int, X_2:bat[:int]):bat[:str] ",	"STRbatsubstring_2nd_cst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:bat[:str], X_1:int, X_2:bat[:int], X_3:bat[:oid], X_4:bat[:oid]):bat[:str] ",	"STRbatsubstring_2nd_cst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:bat[:str], X_1:bat[:int], X_2:int):bat[:str] ",	"STRbatsubstring_3rd_cst;",	""	]
[ "batstr",	"substring3",	"pattern batstr.substring3(X_0:bat[:str], X_1:bat[:int], X_2:int, X_3:bat[:oid], X_4:bat[:oid]):bat[:str] ",	"STRbatsubstring_3rd_cst;",	""	]
[ "batstr",	"toLower",	"pattern batstr.toLower(X_0:bat[:str]):bat[:str] ",	"STRbatLower;",	""	]
[ "batstr",	"toLower",	"pattern batstr.toLower(X_0:bat[:str], X_1:bat[:oid]):bat[:str] ",	"STRbatLower;",	""	]
[ "batstr",	"toUpper",	"pattern batstr.toUpper(X_0:bat[:str]):bat[:str] ",	"STRbatUpper;",	""	]
[ "batstr",	"toUpper",	"pattern batstr.toUpper(X_0:bat[:str], X_1:bat[:oid]):bat[:str] ",	"STRbatUpper;",	""	]
[ "batstr",	"trim",	"pattern batstr.trim(X_0:bat[:str]):bat[:str] ",	"STRbatStrip;",	""	]
[ "batstr",	"trim",	"pattern batstr.trim(X_0:bat[:str], X_1:bat[:oid]):bat[:str] ",	"STRbatStrip;",	""	]
[ "batstr",	"trim2",	"pattern batstr.trim2(X_0:str, X_1:bat[:str]):bat[:str] ",	"STRbatStrip2_1st_const;",	""	]
[ "batstr",	"trim2",	"pattern batstr.trim2(X_0:str, X_1:bat[:str], X_2:bat[:oid]):bat[:str] ",	"STRbatStrip2_1st_const;",	""	]
[ "batstr",	"trim2",	"pattern batstr.trim2(X_0:bat[:str], X_1:bat[:str]):bat[:str] ",	"STRbatStrip2_bat;",	""	]
[ "batstr",	"trim2",	"pattern batstr.trim2(X_0:bat[:str], X_1:bat[:str], X_2:bat[:oid], X_3:bat[:oid]):bat[:str] ",	"STRbatStrip2_bat;",	""	]
[ "batstr",	"trim2",	"pattern batstr.trim2(X_0:bat[:str], X_1:str):bat[:str] ",	"STRbatStrip2_const;",	""	]
[ "batstr",	"trim2",	"pattern batstr.trim2(X_0:bat[:str], X_1:str, X_2:bat[:oid]):bat[:str] ",	"STRbatStrip2_const;",	""	]
[ "batstr",	"unicode",	"pattern batstr.unicode(X_0:bat[:int]):bat[:str] ",	"STRbatFromWChr;",	""	]
[ "batstr",	"unicode",	"pattern batstr.unicode(X_0:bat[:int], X_1:bat[:oid]):bat[:str] ",	"STRbatFromWChr;",	""	]
[ "batstr",	"unicodeAt",	"pattern batstr.unicodeAt(X_0:bat[:str], X_1:bat[:int]):bat[:int] ",	"STRbatWChrAt;",	""	]
[ "batstr",	"unicodeAt",	"pattern batstr.unicodeAt(X_0:bat[:str], X_1:bat[:int], X_2:bat[:oid], X_3:bat[:oid]):bat[:int] ",	"STRbatWChrAt;",	""	]
[ "batstr",	"unicodeAt",	"pattern batstr.unicodeAt(X_0:str, X_1:bat[:int]):bat[:int] ",	"STRbatWChrAt_strcst;",	""	]
[ "batstr",	"unicodeAt",	"pattern batstr.unicodeAt(X_0:str, X_1:bat[:int], X_2:bat[:oid]):bat[:int] ",	"STRbatWChrAt_strcst;",	""	]
[ "batstr",	"unicodeAt",	"pattern batstr.unicodeAt(X_0:bat[:str], X_1:int):bat[:int] ",	"STRbatWChrAtcst;",	""	]
[ "batstr",	"unicodeAt",	"pattern batstr.unicodeAt(X_0:bat[:str], X_1:int, X_2:bat[:oid]):bat[:int] ",	"STRbatWChrAtcst;",	""	]
[ "battxtsim",	"similarity",	"command battxtsim.similarity(X_0:bat[:str], X_1:bat[:str]):bat[:dbl] ",	"fstrcmp0_impl_bulk;",	""	]
[ "batudf",	"fuse",	"command batudf.fuse(X_0:bat[:bte], X_1:bat[:bte]):bat[:sht] ",	"UDFBATfuse;",	""	]
[ "batudf",	"fuse",	"command batudf.fuse(X_0:bat[:int], X_1:bat[:int]):bat[:lng] ",	"UDFBATfuse;",	""	]
[ "batudf",	"fuse",	"command batudf.fuse(X_0:bat[:sht], X_1:bat[:sht]):bat[:int] ",	"UDFBATfuse;",	""	]
[ "batudf",	"reverse",	"command batudf.reverse(X_0:bat[:str]):bat[:str] ",	"UDFBATreverse;",	""	]
[ "batuuid",	"isaUUID",	"command batuuid.isaUUID(X_0:bat[:str]):bat[:bit] ",	"UUIDisaUUID_bulk;",	""	]
[ "batuuid",	"new",	"unsafe command batuuid.new(X_0:bat[:int]):bat[:uuid] ",	"UUIDgenerateUuidInt_bulk;",	""	]
[ "batxml",	"attribute",	"command batxml.attribute(X_0:str, X_1:bat[:str]):bat[:xml] ",	"BATXMLattribute;",	""	]
[ "batxml",	"comment",	"command batxml.comment(X_0:bat[:str]):bat[:xml] ",	"BATXMLcomment;",	""	]
[ "batxml",	"concat",	"command batxml.concat(X_0:bat[:xml], X_1:bat[:xml]):bat[:xml] ",	"BATXMLconcat;",	""	]
[ "batxml",	"content",	"command batxml.content(X_0:bat[:str]):bat[:xml] ",	"BATXMLcontent;",	""	]
[ "batxml",	"document",	"command batxml.document(X_0:bat[:str]):bat[:xml] ",	"BATXMLdocument;",	""	]
[ "batxml",	"element",	"command batxml.element(X_0:str, X_1:xml, X_2:xml, X_3:bat[:xml]):bat[:xml] ",	"BATXMLelement;",	""	]
[ "batxml",	"element",	"command batxml.element(X_0:str, X_1:bat[:xml]):bat[:xml] ",	"BATXMLelementSmall;",	""	]
[ "batxml",	"forest",	"pattern batxml.forest(X_0:bat[:xml]...):bat[:xml] ",	"BATXMLforest;",	""	]
[ "batxml",	"isdocument",	"command batxml.isdocument(X_0:bat[:str]):bat[:bit] ",	"BATXMLisdocument;",	""	]
[ "batxml",	"options",	"command batxml.options(X_0:str, X_1:str, X_2:bat[:xml]):bat[:xml] ",	"BATXMLoptions;",	""	]
[ "batxml",	"parse",	"command batxml.parse(X_0:str, X_1:bat[:str], X_2:str):bat[:xml] ",	"BATXMLparse;",	""	]
[ "batxml",	"pi",	"command batxml.pi(X_0:str, X_1:bat[:xml]):bat[:xml] ",	"BATXMLpi;",	""	]
[ "batxml",	"root",	"command batxml.root(X_0:bat[:xml], X_1:str, X_2:str):bat[:xml] ",	"BATXMLroot;",	""	]
[ "batxml",	"serialize",	"command batxml.serialize(X_0:bat[:xml]):bat[:str] ",	"BATXMLxml2str;",	""	]
[ "batxml",	"str",	"command batxml.str(X_0:bat[:xml]):bat[:str] ",	"BATXMLxml2str;",	""	]
[ "batxml",	"text",	"command batxml.text(X_0:bat[:xml]):bat[:str] ",	"BATXMLxmltext;",	""	]
[ "batxml",	"xml",	"command batxml.xml(X_0:bat[:str]):bat[:xml] ",	"BATXMLstr2xml;",	""	]
[ "batxml",	"xquery",	"command batxml.xquery(X_0:bat[:str], X_1:str):bat[:xml] ",	"BATXMLxquery;",	""	]
[ "bbp",	"bind",	"pattern bbp.bind(X_0:str):bat[:any_2] ",	"CMDbbpbind;",	""	]
[ "bbp",	"get",	"command bbp.get() (X_0:bat[:int], X_1:bat[:str], X_2:bat[:str], X_3:bat[:lng], X_4:bat[:int], X_5:bat[:int], X_6:bat[:str], X_7:bat[:int], X_8:bat[:str], X_9:bat[:str], X_10:bat[:str]) ",	"CMDbbp;",	""	]
[ "bbp",	"getCount",	"command bbp.getCount():bat[:lng] ",	"CMDbbpCount;",	""	]
[ "bbp",	"getDirty",	"command bbp.getDirty():bat[:str] ",	"CMDbbpDirty;",	""	]
[ "bbp",	"getDiskSpace",	"command bbp.getDiskSpace():lng ",	"CMDbbpDiskSpace;",	""	]
[ "bbp",	"getIndex",	"command bbp.getIndex(X_0:bat[:any_2]):int ",	"CMDbbpgetIndex;",	""	]
[ "bbp",	"getKind",	"command bbp.getKind():bat[:str] ",	"CMDbbpKind;",	""	]
[ "bbp",	"getLRefCount",	"command bbp.getLRefCount():bat[:int] ",	"CMDbbpLRefCount;",	""	]
[ "bbp",	"getLRefCount",	"command bbp.getLRefCount(X_0:bat[:any_1]):int ",	"CMDgetBATlrefcnt;",	""	]
[ "bbp",	"getLocation",	"command bbp.getLocation():bat[:str] ",	"CMDbbpLocation;",	""	]
[ "bbp",	"getName",	"command bbp.getName(X_0:bat[:any_1]):str ",	"CMDbbpName;",	""	]
[ "bbp",	"getNames",	"command bbp.getNames():bat[:str] ",	"CMDbbpNames;",	""	]
[ "bbp",	"getPageSize",	"command bbp.getPageSize():int ",	"CMDgetPageSize;",	""	]
[ "bbp",	"getRefCount",	"command bbp.getRefCount():bat[:int] ",	"CMDbbpRefCount;",	""	]
[ "bbp",	"getRefCount",	"command bbp.getRefCount(X_0:bat[:any_1]):int ",	"CMDgetBATrefcnt;",	""	]
[ "bbp",	"getStatus",	"command bbp.getStatus():bat[:str] ",	"CMDbbpStatus;",	""	]
[ "bbp",	"setName",	"command bbp.setName(X_0:bat[:any_1], X_1:str):str ",	"CMDsetName;",	""	]
[ "blob",	"blob",	"command blob.blob(X_0:blob):blob ",	"BLOBblob_blob;",	""	]
[ "blob",	"blob",	"command blob.blob(X_0:str):blob ",	"BLOBblob_fromstr;",	""	]
[ "blob",	"nitems",	"command blob.nitems(X_0:blob):int ",	"BLOBnitems;",	""	]
[ "blob",	"prelude",	"command blob.prelude():void ",	"BLOBprelude;",	""	]
[ "blob",	"toblob",	"command blob.toblob(X_0:str):blob ",	"BLOBtoblob;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bit, X_1:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bit, X_1:bit, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:blob, X_1:blob):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:blob, X_1:blob, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:bte):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:bte, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:dbl):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:dbl, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:flt):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:flt, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:int):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:int, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:lng):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:lng, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:sht):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:bte, X_1:sht, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:date, X_1:date):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:date, X_1:date, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:daytime, X_1:daytime):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:daytime, X_1:daytime, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:bte):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:bte, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:dbl):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:dbl, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:flt):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:flt, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:int):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:int, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:lng):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:lng, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:sht):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:dbl, X_1:sht, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:bte):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:bte, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:dbl):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:dbl, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:flt):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:flt, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:int):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:int, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:lng):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:lng, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:sht):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:flt, X_1:sht, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:bte):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:bte, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:dbl):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:dbl, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:flt):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:flt, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:int):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:int, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:lng):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:lng, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:sht):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:int, X_1:sht, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:json, X_1:json):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:json, X_1:json, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:bte):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:bte, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:dbl):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:dbl, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:flt):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:flt, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:int):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:int, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:lng):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:lng, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:sht):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:lng, X_1:sht, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:oid, X_1:oid):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:oid, X_1:oid, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:bte):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:bte, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:dbl):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:dbl, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:flt):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:flt, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:int):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:int, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:lng):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:lng, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:sht):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:sht, X_1:sht, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:str, X_1:str):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:str, X_1:str, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:timestamp, X_1:timestamp):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:timestamp, X_1:timestamp, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:uuid, X_1:uuid):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"pattern calc.!=(X_0:uuid, X_1:uuid, X_2:bit):bit ",	"CMDvarNE;",	""	]
[ "calc",	"!=",	"command calc.!=(X_0:inet, X_1:inet):bit ",	"INET_comp_NEQ;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:bte):bte ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:bte):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:bte):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:bte):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:dbl):dbl ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:flt):flt ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:int):bte ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:int):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:int):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:int):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:lng):bte ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:lng):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:lng):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:lng):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:sht):bte ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:sht):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:sht):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:bte, X_1:sht):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:dbl, X_1:bte):dbl ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:dbl, X_1:dbl):dbl ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:dbl, X_1:flt):dbl ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:dbl, X_1:int):dbl ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:dbl, X_1:lng):dbl ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:dbl, X_1:sht):dbl ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:flt, X_1:bte):flt ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:flt, X_1:dbl):dbl ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:flt, X_1:flt):flt ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:flt, X_1:int):flt ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:flt, X_1:lng):flt ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:flt, X_1:sht):flt ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:bte):bte ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:bte):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:bte):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:bte):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:dbl):dbl ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:flt):flt ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:int):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:int):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:lng):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:lng):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:sht):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:sht):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:int, X_1:sht):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:bte):bte ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:bte):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:bte):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:bte):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:dbl):dbl ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:flt):flt ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:int):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:int):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:lng):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:sht):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:sht):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:lng, X_1:sht):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:bte):bte ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:bte):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:bte):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:bte):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:dbl):dbl ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:flt):flt ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:int):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:int):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:int):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:lng):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:lng):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:lng):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:sht):int ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:sht):lng ",	"CMDvarMODsignal;",	""	]
[ "calc",	"%",	"pattern calc.%(X_0:sht, X_1:sht):sht ",	"CMDvarMODsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:bte):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:bte):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:bte):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:bte):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:bte):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:bte):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:dbl):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:dbl):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:dbl):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:dbl):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:dbl):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:flt):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:flt):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:flt):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:flt):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:flt):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:flt):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:int):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:int):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:int):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:int):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:lng):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:lng):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:lng):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:sht):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:sht):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:sht):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:sht):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:bte, X_1:sht):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:bte):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:bte):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:bte):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:bte):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:bte):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:dbl):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:flt):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:int):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:int):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:int):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:int):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:int):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:lng):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:lng):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:lng):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:lng):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:lng):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:sht):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:sht):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:sht):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:sht):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:dbl, X_1:sht):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:bte):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:bte):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:bte):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:bte):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:bte):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:bte):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:dbl):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:flt):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:flt):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:int):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:int):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:int):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:int):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:int):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:int):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:lng):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:lng):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:lng):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:lng):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:lng):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:lng):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:sht):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:sht):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:sht):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:sht):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:sht):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:flt, X_1:sht):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:bte):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:bte):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:bte):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:bte):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:dbl):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:dbl):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:dbl):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:dbl):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:dbl):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:flt):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:flt):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:flt):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:flt):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:flt):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:flt):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:int):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:int):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:int):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:int):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:lng):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:lng):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:lng):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:sht):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:sht):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:sht):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:int, X_1:sht):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:bte):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:bte):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:bte):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:dbl):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:dbl):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:dbl):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:dbl):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:dbl):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:flt):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:flt):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:flt):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:flt):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:flt):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:flt):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:int):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:int):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:int):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:lng):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:lng):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:lng):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:sht):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:sht):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:lng, X_1:sht):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:bte):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:bte):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:bte):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:bte):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:bte):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:dbl):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:dbl):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:dbl):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:dbl):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:dbl):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:flt):bte ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:flt):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:flt):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:flt):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:flt):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:flt):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:int):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:int):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:int):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:int):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:lng):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:lng):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:lng):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:sht):dbl ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:sht):flt ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:sht):int ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:sht):lng ",	"CMDvarMULsignal;",	""	]
[ "calc",	"*",	"pattern calc.*(X_0:sht, X_1:sht):sht ",	"CMDvarMULsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:bte):bte ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:bte):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:bte):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:bte):int ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:bte):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:bte):sht ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:dbl):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:flt):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:flt):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:int):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:int):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:int):int ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:int):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:lng):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:lng):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:lng):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:sht):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:sht):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:sht):int ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:sht):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:bte, X_1:sht):sht ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:dbl, X_1:bte):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:dbl, X_1:dbl):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:dbl, X_1:flt):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:dbl, X_1:int):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:dbl, X_1:lng):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:dbl, X_1:sht):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:flt, X_1:bte):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:flt, X_1:bte):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:flt, X_1:dbl):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:flt, X_1:flt):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:flt, X_1:flt):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:flt, X_1:int):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:flt, X_1:int):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:flt, X_1:lng):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:flt, X_1:lng):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:flt, X_1:sht):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:flt, X_1:sht):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:bte):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:bte):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:bte):int ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:bte):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:dbl):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:flt):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:flt):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:int):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:int):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:int):int ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:int):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:lng):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:lng):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:lng):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:sht):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:sht):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:sht):int ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:int, X_1:sht):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:bte):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:bte):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:bte):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:dbl):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:flt):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:flt):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:int):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:int):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:int):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:lng):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:lng):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:lng):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:sht):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:sht):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:lng, X_1:sht):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:bte):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:bte):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:bte):int ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:bte):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:bte):sht ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:dbl):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:flt):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:flt):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:int):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:int):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:int):int ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:int):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:lng):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:lng):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:lng):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:sht):dbl ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:sht):flt ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:sht):int ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:sht):lng ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"pattern calc.+(X_0:sht, X_1:sht):sht ",	"CMDvarADDsignal;",	""	]
[ "calc",	"+",	"command calc.+(X_0:str, X_1:str):str ",	"CMDvarADDstr;",	""	]
[ "calc",	"+",	"command calc.+(X_0:str, X_1:int):str ",	"CMDvarADDstrint;",	""	]
[ "calc",	"++",	"pattern calc.++(X_0:bte):bte ",	"CMDvarINCRsignal;",	""	]
[ "calc",	"++",	"pattern calc.++(X_0:dbl):dbl ",	"CMDvarINCRsignal;",	""	]
[ "calc",	"++",	"pattern calc.++(X_0:flt):flt ",	"CMDvarINCRsignal;",	""	]
[ "calc",	"++",	"pattern calc.++(X_0:int):int ",	"CMDvarINCRsignal;",	""	]
[ "calc",	"++",	"pattern calc.++(X_0:lng):lng ",	"CMDvarINCRsignal;",	""	]
[ "calc",	"++",	"pattern calc.++(X_0:sht):sht ",	"CMDvarINCRsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte):bte ",	"CMDvarNEG;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:dbl):dbl ",	"CMDvarNEG;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt):flt ",	"CMDvarNEG;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int):int ",	"CMDvarNEG;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng):lng ",	"CMDvarNEG;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht):sht ",	"CMDvarNEG;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:bte):bte ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:bte):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:bte):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:bte):int ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:bte):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:bte):sht ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:dbl):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:flt):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:flt):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:int):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:int):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:int):int ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:int):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:lng):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:lng):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:lng):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:sht):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:sht):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:sht):int ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:sht):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:bte, X_1:sht):sht ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:dbl, X_1:bte):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:dbl, X_1:dbl):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:dbl, X_1:flt):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:dbl, X_1:int):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:dbl, X_1:lng):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:dbl, X_1:sht):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt, X_1:bte):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt, X_1:bte):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt, X_1:dbl):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt, X_1:flt):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt, X_1:flt):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt, X_1:int):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt, X_1:int):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt, X_1:lng):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt, X_1:lng):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt, X_1:sht):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:flt, X_1:sht):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:bte):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:bte):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:bte):int ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:bte):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:dbl):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:flt):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:flt):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:int):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:int):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:int):int ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:int):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:lng):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:lng):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:lng):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:sht):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:sht):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:sht):int ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:int, X_1:sht):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:bte):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:bte):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:bte):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:dbl):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:flt):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:flt):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:int):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:int):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:int):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:lng):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:lng):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:lng):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:sht):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:sht):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:lng, X_1:sht):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:bte):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:bte):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:bte):int ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:bte):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:bte):sht ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:dbl):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:flt):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:flt):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:int):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:int):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:int):int ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:int):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:lng):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:lng):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:lng):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:sht):dbl ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:sht):flt ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:sht):int ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:sht):lng ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"-",	"pattern calc.-(X_0:sht, X_1:sht):sht ",	"CMDvarSUBsignal;",	""	]
[ "calc",	"--",	"pattern calc.--(X_0:bte):bte ",	"CMDvarDECRsignal;",	""	]
[ "calc",	"--",	"pattern calc.--(X_0:dbl):dbl ",	"CMDvarDECRsignal;",	""	]
[ "calc",	"--",	"pattern calc.--(X_0:flt):flt ",	"CMDvarDECRsignal;",	""	]
[ "calc",	"--",	"pattern calc.--(X_0:int):int ",	"CMDvarDECRsignal;",	""	]
[ "calc",	"--",	"pattern calc.--(X_0:lng):lng ",	"CMDvarDECRsignal;",	""	]
[ "calc",	"--",	"pattern calc.--(X_0:sht):sht ",	"CMDvarDECRsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:bte):bte ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:bte):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:bte):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:bte):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:bte):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:bte):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:dbl):bte ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:dbl):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:dbl):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:dbl):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:dbl):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:dbl):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:flt):bte ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:flt):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:flt):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:flt):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:flt):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:flt):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:int):bte ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:int):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:int):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:int):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:int):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:int):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:lng):bte ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:lng):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:lng):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:lng):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:lng):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:lng):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:sht):bte ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:sht):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:sht):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:sht):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:sht):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:bte, X_1:sht):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:dbl, X_1:bte):bte ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:dbl, X_1:bte):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:dbl, X_1:dbl):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:dbl, X_1:flt):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:dbl, X_1:int):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:dbl, X_1:int):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:dbl, X_1:lng):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:dbl, X_1:lng):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:dbl, X_1:sht):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:dbl, X_1:sht):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:bte):bte ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:bte):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:bte):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:dbl):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:dbl):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:flt):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:flt):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:int):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:int):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:int):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:lng):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:lng):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:lng):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:sht):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:sht):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:flt, X_1:sht):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:bte):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:bte):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:bte):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:bte):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:dbl):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:dbl):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:dbl):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:dbl):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:flt):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:flt):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:flt):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:flt):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:int):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:int):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:int):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:int):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:lng):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:lng):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:lng):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:lng):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:sht):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:sht):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:sht):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:int, X_1:sht):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:bte):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:bte):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:bte):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:dbl):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:dbl):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:dbl):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:flt):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:flt):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:flt):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:int):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:int):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:int):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:lng):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:lng):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:lng):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:sht):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:sht):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:lng, X_1:sht):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:bte):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:bte):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:bte):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:bte):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:bte):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:dbl):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:dbl):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:dbl):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:dbl):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:dbl):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:flt):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:flt):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:flt):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:flt):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:flt):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:int):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:int):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:int):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:int):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:int):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:lng):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:lng):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:lng):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:lng):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:lng):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:sht):dbl ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:sht):flt ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:sht):int ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:sht):lng ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"/",	"pattern calc./(X_0:sht, X_1:sht):sht ",	"CMDvarDIVsignal;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:bit, X_1:bit):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:blob, X_1:blob):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:bte, X_1:bte):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:bte, X_1:dbl):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:bte, X_1:flt):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:bte, X_1:int):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:bte, X_1:lng):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:bte, X_1:sht):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:date, X_1:date):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:daytime, X_1:daytime):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:dbl, X_1:bte):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:dbl, X_1:dbl):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:dbl, X_1:flt):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:dbl, X_1:int):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:dbl, X_1:lng):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:dbl, X_1:sht):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:flt, X_1:bte):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:flt, X_1:dbl):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:flt, X_1:flt):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:flt, X_1:int):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:flt, X_1:lng):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:flt, X_1:sht):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:int, X_1:bte):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:int, X_1:dbl):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:int, X_1:flt):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:int, X_1:int):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:int, X_1:lng):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:int, X_1:sht):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:json, X_1:json):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:lng, X_1:bte):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:lng, X_1:dbl):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:lng, X_1:flt):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:lng, X_1:int):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:lng, X_1:lng):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:lng, X_1:sht):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:oid, X_1:oid):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:sht, X_1:bte):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:sht, X_1:dbl):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:sht, X_1:flt):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:sht, X_1:int):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:sht, X_1:lng):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:sht, X_1:sht):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:str, X_1:str):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:timestamp, X_1:timestamp):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"pattern calc.<(X_0:uuid, X_1:uuid):bit ",	"CMDvarLT;",	""	]
[ "calc",	"<",	"command calc.<(X_0:inet, X_1:inet):bit ",	"INET_comp_LT;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:bte, X_1:bte):bte ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:bte, X_1:int):bte ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:bte, X_1:lng):bte ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:bte, X_1:sht):bte ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:int, X_1:bte):int ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:int, X_1:int):int ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:int, X_1:lng):int ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:int, X_1:sht):int ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:lng, X_1:bte):lng ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:lng, X_1:int):lng ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:lng, X_1:lng):lng ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:lng, X_1:sht):lng ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:sht, X_1:bte):sht ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:sht, X_1:int):sht ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:sht, X_1:lng):sht ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<<",	"pattern calc.<<(X_0:sht, X_1:sht):sht ",	"CMDvarLSHsignal;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:bit, X_1:bit):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:blob, X_1:blob):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:bte, X_1:bte):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:bte, X_1:dbl):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:bte, X_1:flt):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:bte, X_1:int):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:bte, X_1:lng):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:bte, X_1:sht):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:date, X_1:date):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:daytime, X_1:daytime):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:dbl, X_1:bte):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:dbl, X_1:dbl):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:dbl, X_1:flt):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:dbl, X_1:int):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:dbl, X_1:lng):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:dbl, X_1:sht):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:flt, X_1:bte):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:flt, X_1:dbl):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:flt, X_1:flt):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:flt, X_1:int):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:flt, X_1:lng):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:flt, X_1:sht):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:int, X_1:bte):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:int, X_1:dbl):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:int, X_1:flt):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:int, X_1:int):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:int, X_1:lng):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:int, X_1:sht):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:json, X_1:json):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:lng, X_1:bte):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:lng, X_1:dbl):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:lng, X_1:flt):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:lng, X_1:int):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:lng, X_1:lng):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:lng, X_1:sht):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:oid, X_1:oid):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:sht, X_1:bte):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:sht, X_1:dbl):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:sht, X_1:flt):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:sht, X_1:int):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:sht, X_1:lng):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:sht, X_1:sht):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:str, X_1:str):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:timestamp, X_1:timestamp):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"pattern calc.<=(X_0:uuid, X_1:uuid):bit ",	"CMDvarLE;",	""	]
[ "calc",	"<=",	"command calc.<=(X_0:inet, X_1:inet):bit ",	"INET_comp_LE;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bit, X_1:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bit, X_1:bit, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:blob, X_1:blob):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:blob, X_1:blob, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:bte):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:bte, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:dbl):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:dbl, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:flt):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:flt, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:int):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:int, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:lng):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:lng, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:sht):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:bte, X_1:sht, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:date, X_1:date):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:date, X_1:date, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:daytime, X_1:daytime):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:daytime, X_1:daytime, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:bte):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:bte, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:dbl):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:dbl, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:flt):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:flt, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:int):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:int, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:lng):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:lng, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:sht):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:dbl, X_1:sht, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:bte):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:bte, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:dbl):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:dbl, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:flt):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:flt, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:int):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:int, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:lng):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:lng, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:sht):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:flt, X_1:sht, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:bte):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:bte, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:dbl):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:dbl, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:flt):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:flt, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:int):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:int, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:lng):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:lng, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:sht):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:int, X_1:sht, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:json, X_1:json):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:json, X_1:json, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:bte):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:bte, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:dbl):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:dbl, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:flt):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:flt, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:int):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:int, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:lng):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:lng, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:sht):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:lng, X_1:sht, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:oid, X_1:oid):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:oid, X_1:oid, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:bte):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:bte, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:dbl):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:dbl, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:flt):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:flt, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:int):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:int, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:lng):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:lng, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:sht):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:sht, X_1:sht, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:str, X_1:str):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:str, X_1:str, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:timestamp, X_1:timestamp):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:timestamp, X_1:timestamp, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:uuid, X_1:uuid):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"pattern calc.==(X_0:uuid, X_1:uuid, X_2:bit):bit ",	"CMDvarEQ;",	""	]
[ "calc",	"==",	"command calc.==(X_0:inet, X_1:inet):bit ",	"INET_comp_EQ;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:bit, X_1:bit):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:blob, X_1:blob):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:bte, X_1:bte):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:bte, X_1:dbl):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:bte, X_1:flt):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:bte, X_1:int):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:bte, X_1:lng):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:bte, X_1:sht):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:date, X_1:date):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:daytime, X_1:daytime):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:dbl, X_1:bte):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:dbl, X_1:dbl):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:dbl, X_1:flt):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:dbl, X_1:int):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:dbl, X_1:lng):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:dbl, X_1:sht):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:flt, X_1:bte):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:flt, X_1:dbl):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:flt, X_1:flt):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:flt, X_1:int):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:flt, X_1:lng):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:flt, X_1:sht):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:int, X_1:bte):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:int, X_1:dbl):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:int, X_1:flt):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:int, X_1:int):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:int, X_1:lng):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:int, X_1:sht):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:json, X_1:json):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:lng, X_1:bte):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:lng, X_1:dbl):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:lng, X_1:flt):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:lng, X_1:int):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:lng, X_1:lng):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:lng, X_1:sht):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:oid, X_1:oid):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:sht, X_1:bte):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:sht, X_1:dbl):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:sht, X_1:flt):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:sht, X_1:int):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:sht, X_1:lng):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:sht, X_1:sht):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:str, X_1:str):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:timestamp, X_1:timestamp):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"pattern calc.>(X_0:uuid, X_1:uuid):bit ",	"CMDvarGT;",	""	]
[ "calc",	">",	"command calc.>(X_0:inet, X_1:inet):bit ",	"INET_comp_GT;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:bit, X_1:bit):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:blob, X_1:blob):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:bte, X_1:bte):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:bte, X_1:dbl):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:bte, X_1:flt):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:bte, X_1:int):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:bte, X_1:lng):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:bte, X_1:sht):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:date, X_1:date):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:daytime, X_1:daytime):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:dbl, X_1:bte):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:dbl, X_1:dbl):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:dbl, X_1:flt):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:dbl, X_1:int):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:dbl, X_1:lng):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:dbl, X_1:sht):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:flt, X_1:bte):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:flt, X_1:dbl):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:flt, X_1:flt):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:flt, X_1:int):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:flt, X_1:lng):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:flt, X_1:sht):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:int, X_1:bte):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:int, X_1:dbl):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:int, X_1:flt):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:int, X_1:int):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:int, X_1:lng):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:int, X_1:sht):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:json, X_1:json):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:lng, X_1:bte):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:lng, X_1:dbl):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:lng, X_1:flt):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:lng, X_1:int):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:lng, X_1:lng):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:lng, X_1:sht):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:oid, X_1:oid):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:sht, X_1:bte):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:sht, X_1:dbl):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:sht, X_1:flt):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:sht, X_1:int):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:sht, X_1:lng):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:sht, X_1:sht):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:str, X_1:str):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:timestamp, X_1:timestamp):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"pattern calc.>=(X_0:uuid, X_1:uuid):bit ",	"CMDvarGE;",	""	]
[ "calc",	">=",	"command calc.>=(X_0:inet, X_1:inet):bit ",	"INET_comp_GE;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:bte, X_1:bte):bte ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:bte, X_1:int):bte ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:bte, X_1:lng):bte ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:bte, X_1:sht):bte ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:int, X_1:bte):int ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:int, X_1:int):int ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:int, X_1:lng):int ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:int, X_1:sht):int ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:lng, X_1:bte):lng ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:lng, X_1:int):lng ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:lng, X_1:lng):lng ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:lng, X_1:sht):lng ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:sht, X_1:bte):sht ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:sht, X_1:int):sht ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:sht, X_1:lng):sht ",	"CMDvarRSHsignal;",	""	]
[ "calc",	">>",	"pattern calc.>>(X_0:sht, X_1:sht):sht ",	"CMDvarRSHsignal;",	""	]
[ "calc",	"abs",	"pattern calc.abs(X_0:bte):bte ",	"CMDvarABS;",	""	]
[ "calc",	"abs",	"pattern calc.abs(X_0:dbl):dbl ",	"CMDvarABS;",	""	]
[ "calc",	"abs",	"pattern calc.abs(X_0:flt):flt ",	"CMDvarABS;",	""	]
[ "calc",	"abs",	"pattern calc.abs(X_0:int):int ",	"CMDvarABS;",	""	]
[ "calc",	"abs",	"pattern calc.abs(X_0:lng):lng ",	"CMDvarABS;",	""	]
[ "calc",	"abs",	"pattern calc.abs(X_0:sht):sht ",	"CMDvarABS;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:bte, X_1:bte):bte ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:bte, X_1:dbl):dbl ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:bte, X_1:flt):flt ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:bte, X_1:int):int ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:bte, X_1:lng):lng ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:bte, X_1:sht):sht ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:dbl, X_1:bte):dbl ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:dbl, X_1:dbl):dbl ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:dbl, X_1:flt):dbl ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:dbl, X_1:int):dbl ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:dbl, X_1:lng):dbl ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:dbl, X_1:sht):dbl ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:flt, X_1:bte):flt ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:flt, X_1:dbl):dbl ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:flt, X_1:flt):flt ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:flt, X_1:int):flt ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:flt, X_1:lng):flt ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:flt, X_1:sht):flt ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:int, X_1:bte):int ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:int, X_1:dbl):dbl ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:int, X_1:flt):flt ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:int, X_1:int):int ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:int, X_1:lng):lng ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:int, X_1:sht):int ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:lng, X_1:bte):lng ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:lng, X_1:dbl):dbl ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:lng, X_1:flt):flt ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:lng, X_1:int):lng ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:lng, X_1:lng):lng ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:lng, X_1:sht):lng ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:sht, X_1:bte):sht ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:sht, X_1:dbl):dbl ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:sht, X_1:flt):flt ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:sht, X_1:int):int ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:sht, X_1:lng):lng ",	"CMDvarADD;",	""	]
[ "calc",	"add_noerror",	"pattern calc.add_noerror(X_0:sht, X_1:sht):sht ",	"CMDvarADD;",	""	]
[ "calc",	"and",	"pattern calc.and(X_0:bit, X_1:bit):bit ",	"CMDvarAND;",	""	]
[ "calc",	"and",	"pattern calc.and(X_0:bte, X_1:bte):bte ",	"CMDvarAND;",	""	]
[ "calc",	"and",	"pattern calc.and(X_0:int, X_1:int):int ",	"CMDvarAND;",	""	]
[ "calc",	"and",	"pattern calc.and(X_0:lng, X_1:lng):lng ",	"CMDvarAND;",	""	]
[ "calc",	"and",	"pattern calc.and(X_0:sht, X_1:sht):sht ",	"CMDvarAND;",	""	]
[ "calc",	"between",	"pattern calc.between(X_0:any_1, X_1:any_1, X_2:any_1, X_3:bit, X_4:bit, X_5:bit, X_6:bit, X_7:bit):bit ",	"CMDvarBETWEEN;",	""	]
[ "calc",	"bit",	"pattern calc.bit(X_0:bit):bit ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bit",	"pattern calc.bit(X_0:bte):bit ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bit",	"pattern calc.bit(X_0:dbl):bit ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bit",	"pattern calc.bit(X_0:flt):bit ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bit",	"pattern calc.bit(X_0:int):bit ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bit",	"pattern calc.bit(X_0:lng):bit ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bit",	"pattern calc.bit(X_0:oid):bit ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bit",	"pattern calc.bit(X_0:sht):bit ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bit",	"pattern calc.bit(X_0:str):bit ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bit",	"pattern calc.bit(X_0:void):bit ",	"CMDvarCONVERT;",	""	]
[ "calc",	"blob",	"command calc.blob(X_0:blob):blob ",	"BLOBblob_blob;",	""	]
[ "calc",	"blob",	"command calc.blob(X_0:str):blob ",	"BLOBblob_fromstr;",	""	]
[ "calc",	"blob",	"command calc.blob(X_0:str):blob ",	"str_2_blob;",	""	]
[ "calc",	"bte",	"pattern calc.bte(X_0:bit):bte ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bte",	"pattern calc.bte(X_0:bte):bte ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bte",	"pattern calc.bte(X_0:dbl):bte ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bte",	"pattern calc.bte(X_0:flt):bte ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bte",	"pattern calc.bte(X_0:int):bte ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bte",	"pattern calc.bte(X_0:lng):bte ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bte",	"pattern calc.bte(X_0:oid):bte ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bte",	"pattern calc.bte(X_0:sht):bte ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bte",	"pattern calc.bte(X_0:str):bte ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bte",	"pattern calc.bte(X_0:void):bte ",	"CMDvarCONVERT;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:int, X_1:bte):bte ",	"bte_dec2_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:int, X_1:bte, X_2:int, X_3:int):bte ",	"bte_dec2dec_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:bte, X_1:int, X_2:int):bte ",	"bte_num2dec_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:dbl, X_1:int, X_2:int):bte ",	"dbl_num2dec_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:flt, X_1:int, X_2:int):bte ",	"flt_num2dec_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:int, X_1:int):bte ",	"int_dec2_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:int, X_1:int, X_2:int, X_3:int):bte ",	"int_dec2dec_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:int, X_1:int, X_2:int):bte ",	"int_num2dec_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:int, X_1:lng):bte ",	"lng_dec2_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:int, X_1:lng, X_2:int, X_3:int):bte ",	"lng_dec2dec_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:lng, X_1:int, X_2:int):bte ",	"lng_num2dec_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:void, X_1:int, X_2:int):bte ",	"nil_2dec_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:int, X_1:sht):bte ",	"sht_dec2_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:int, X_1:sht, X_2:int, X_3:int):bte ",	"sht_dec2dec_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:sht, X_1:int, X_2:int):bte ",	"sht_num2dec_bte;",	""	]
[ "calc",	"bte",	"command calc.bte(X_0:str, X_1:int, X_2:int):bte ",	"str_2dec_bte;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:bit, X_1:bit):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:bte, X_1:bte):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:bte, X_1:dbl):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:bte, X_1:flt):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:bte, X_1:int):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:bte, X_1:lng):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:bte, X_1:sht):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:dbl, X_1:bte):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:dbl, X_1:dbl):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:dbl, X_1:flt):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:dbl, X_1:int):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:dbl, X_1:lng):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:dbl, X_1:sht):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:flt, X_1:bte):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:flt, X_1:dbl):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:flt, X_1:flt):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:flt, X_1:int):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:flt, X_1:lng):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:flt, X_1:sht):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:int, X_1:bte):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:int, X_1:dbl):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:int, X_1:flt):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:int, X_1:int):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:int, X_1:lng):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:int, X_1:sht):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:lng, X_1:bte):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:lng, X_1:dbl):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:lng, X_1:flt):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:lng, X_1:int):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:lng, X_1:lng):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:lng, X_1:sht):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:oid, X_1:oid):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:sht, X_1:bte):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:sht, X_1:dbl):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:sht, X_1:flt):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:sht, X_1:int):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:sht, X_1:lng):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:sht, X_1:sht):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"cmp",	"pattern calc.cmp(X_0:str, X_1:str):bte ",	"CMDvarCMP;",	""	]
[ "calc",	"date",	"command calc.date(X_0:date):date ",	"MTIMEdate_date;",	""	]
[ "calc",	"date",	"command calc.date(X_0:str):date ",	"MTIMEdate_fromstr;",	""	]
[ "calc",	"date",	"command calc.date(X_0:timestamp):date ",	"MTIMEtimestamp_extract_date;",	""	]
[ "calc",	"date",	"pattern calc.date(X_0:void):date ",	"nil_2_date;",	""	]
[ "calc",	"date",	"pattern calc.date(X_0:str):date ",	"str_2_date;",	""	]
[ "calc",	"daytime",	"command calc.daytime(X_0:daytime):daytime ",	"MTIMEdaytime_daytime;",	""	]
[ "calc",	"daytime",	"command calc.daytime(X_0:lng):daytime ",	"MTIMEdaytime_fromseconds;",	""	]
[ "calc",	"daytime",	"command calc.daytime(X_0:str):daytime ",	"MTIMEdaytime_fromstr;",	""	]
[ "calc",	"daytime",	"command calc.daytime(X_0:timestamp):daytime ",	"MTIMEtimestamp_extract_daytime;",	""	]
[ "calc",	"daytime",	"pattern calc.daytime(X_0:daytime, X_1:int):daytime ",	"daytime_2time_daytime;",	""	]
[ "calc",	"daytime",	"pattern calc.daytime(X_0:lng, X_1:int):daytime ",	"second_interval_2_daytime;",	""	]
[ "calc",	"daytime",	"pattern calc.daytime(X_0:str, X_1:int):daytime ",	"str_2time_daytime;",	""	]
[ "calc",	"daytime",	"pattern calc.daytime(X_0:str, X_1:int, X_2:int):daytime ",	"str_2time_daytimetz;",	""	]
[ "calc",	"daytime",	"pattern calc.daytime(X_0:timestamp, X_1:int):daytime ",	"timestamp_2_daytime;",	""	]
[ "calc",	"dbl",	"pattern calc.dbl(X_0:bit):dbl ",	"CMDvarCONVERT;",	""	]
[ "calc",	"dbl",	"pattern calc.dbl(X_0:bte):dbl ",	"CMDvarCONVERT;",	""	]
[ "calc",	"dbl",	"pattern calc.dbl(X_0:dbl):dbl ",	"CMDvarCONVERT;",	""	]
[ "calc",	"dbl",	"pattern calc.dbl(X_0:flt):dbl ",	"CMDvarCONVERT;",	""	]
[ "calc",	"dbl",	"pattern calc.dbl(X_0:int):dbl ",	"CMDvarCONVERT;",	""	]
[ "calc",	"dbl",	"pattern calc.dbl(X_0:lng):dbl ",	"CMDvarCONVERT;",	""	]
[ "calc",	"dbl",	"pattern calc.dbl(X_0:oid):dbl ",	"CMDvarCONVERT;",	""	]
[ "calc",	"dbl",	"pattern calc.dbl(X_0:sht):dbl ",	"CMDvarCONVERT;",	""	]
[ "calc",	"dbl",	"pattern calc.dbl(X_0:str):dbl ",	"CMDvarCONVERT;",	""	]
[ "calc",	"dbl",	"pattern calc.dbl(X_0:void):dbl ",	"CMDvarCONVERT;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:int, X_1:bte):dbl ",	"bte_dec2_dbl;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:int, X_1:bte, X_2:int, X_3:int):dbl ",	"bte_dec2dec_dbl;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:bte, X_1:int, X_2:int):dbl ",	"bte_num2dec_dbl;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:int, X_1:int):dbl ",	"int_dec2_dbl;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:int, X_1:int, X_2:int, X_3:int):dbl ",	"int_dec2dec_dbl;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:int, X_1:int, X_2:int):dbl ",	"int_num2dec_dbl;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:int, X_1:lng):dbl ",	"lng_dec2_dbl;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:int, X_1:lng, X_2:int, X_3:int):dbl ",	"lng_dec2dec_dbl;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:lng, X_1:int, X_2:int):dbl ",	"lng_num2dec_dbl;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:int, X_1:sht):dbl ",	"sht_dec2_dbl;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:int, X_1:sht, X_2:int, X_3:int):dbl ",	"sht_dec2dec_dbl;",	""	]
[ "calc",	"dbl",	"command calc.dbl(X_0:sht, X_1:int, X_2:int):dbl ",	"sht_num2dec_dbl;",	""	]
[ "calc",	"dec_round",	"command calc.dec_round(X_0:bte, X_1:bte):bte ",	"bte_dec_round_wrap;",	""	]
[ "calc",	"dec_round",	"command calc.dec_round(X_0:dbl, X_1:dbl):dbl ",	"dbl_dec_round_wrap;",	""	]
[ "calc",	"dec_round",	"command calc.dec_round(X_0:flt, X_1:flt):flt ",	"flt_dec_round_wrap;",	""	]
[ "calc",	"dec_round",	"command calc.dec_round(X_0:int, X_1:int):int ",	"int_dec_round_wrap;",	""	]
[ "calc",	"dec_round",	"command calc.dec_round(X_0:lng, X_1:lng):lng ",	"lng_dec_round_wrap;",	""	]
[ "calc",	"dec_round",	"command calc.dec_round(X_0:sht, X_1:sht):sht ",	"sht_dec_round_wrap;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:bte):bte ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:bte):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:bte):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:bte):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:bte):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:bte):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:dbl):bte ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:dbl):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:dbl):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:dbl):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:dbl):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:dbl):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:flt):bte ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:flt):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:flt):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:flt):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:flt):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:flt):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:int):bte ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:int):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:int):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:int):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:int):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:int):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:lng):bte ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:lng):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:lng):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:lng):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:lng):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:lng):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:sht):bte ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:sht):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:sht):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:sht):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:sht):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:bte, X_1:sht):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:dbl, X_1:bte):bte ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:dbl, X_1:bte):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:dbl, X_1:dbl):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:dbl, X_1:flt):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:dbl, X_1:int):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:dbl, X_1:int):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:dbl, X_1:lng):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:dbl, X_1:lng):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:dbl, X_1:sht):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:dbl, X_1:sht):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:bte):bte ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:bte):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:bte):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:dbl):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:dbl):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:flt):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:flt):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:int):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:int):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:int):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:lng):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:lng):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:lng):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:sht):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:sht):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:flt, X_1:sht):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:bte):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:bte):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:bte):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:bte):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:dbl):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:dbl):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:dbl):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:dbl):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:flt):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:flt):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:flt):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:flt):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:int):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:int):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:int):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:int):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:lng):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:lng):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:lng):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:lng):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:sht):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:sht):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:sht):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:int, X_1:sht):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:bte):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:bte):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:bte):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:dbl):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:dbl):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:dbl):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:flt):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:flt):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:flt):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:int):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:int):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:int):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:lng):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:lng):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:lng):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:sht):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:sht):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:lng, X_1:sht):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:bte):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:bte):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:bte):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:bte):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:bte):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:dbl):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:dbl):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:dbl):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:dbl):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:dbl):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:flt):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:flt):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:flt):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:flt):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:flt):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:int):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:int):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:int):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:int):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:int):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:lng):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:lng):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:lng):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:lng):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:lng):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:sht):dbl ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:sht):flt ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:sht):int ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:sht):lng ",	"CMDvarDIV;",	""	]
[ "calc",	"div_noerror",	"pattern calc.div_noerror(X_0:sht, X_1:sht):sht ",	"CMDvarDIV;",	""	]
[ "calc",	"flt",	"pattern calc.flt(X_0:bit):flt ",	"CMDvarCONVERT;",	""	]
[ "calc",	"flt",	"pattern calc.flt(X_0:bte):flt ",	"CMDvarCONVERT;",	""	]
[ "calc",	"flt",	"pattern calc.flt(X_0:dbl):flt ",	"CMDvarCONVERT;",	""	]
[ "calc",	"flt",	"pattern calc.flt(X_0:flt):flt ",	"CMDvarCONVERT;",	""	]
[ "calc",	"flt",	"pattern calc.flt(X_0:int):flt ",	"CMDvarCONVERT;",	""	]
[ "calc",	"flt",	"pattern calc.flt(X_0:lng):flt ",	"CMDvarCONVERT;",	""	]
[ "calc",	"flt",	"pattern calc.flt(X_0:oid):flt ",	"CMDvarCONVERT;",	""	]
[ "calc",	"flt",	"pattern calc.flt(X_0:sht):flt ",	"CMDvarCONVERT;",	""	]
[ "calc",	"flt",	"pattern calc.flt(X_0:str):flt ",	"CMDvarCONVERT;",	""	]
[ "calc",	"flt",	"pattern calc.flt(X_0:void):flt ",	"CMDvarCONVERT;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:int, X_1:bte):flt ",	"bte_dec2_flt;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:int, X_1:bte, X_2:int, X_3:int):flt ",	"bte_dec2dec_flt;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:bte, X_1:int, X_2:int):flt ",	"bte_num2dec_flt;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:int, X_1:int):flt ",	"int_dec2_flt;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:int, X_1:int, X_2:int, X_3:int):flt ",	"int_dec2dec_flt;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:int, X_1:int, X_2:int):flt ",	"int_num2dec_flt;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:int, X_1:lng):flt ",	"lng_dec2_flt;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:int, X_1:lng, X_2:int, X_3:int):flt ",	"lng_dec2dec_flt;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:lng, X_1:int, X_2:int):flt ",	"lng_num2dec_flt;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:int, X_1:sht):flt ",	"sht_dec2_flt;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:int, X_1:sht, X_2:int, X_3:int):flt ",	"sht_dec2dec_flt;",	""	]
[ "calc",	"flt",	"command calc.flt(X_0:sht, X_1:int, X_2:int):flt ",	"sht_num2dec_flt;",	""	]
[ "calc",	"hash",	"pattern calc.hash(X_0:any):lng ",	"MKEYhash;",	""	]
[ "calc",	"hash",	"pattern calc.hash(X_0:bte):lng ",	"MKEYhash;",	""	]
[ "calc",	"hash",	"pattern calc.hash(X_0:dbl):lng ",	"MKEYhash;",	""	]
[ "calc",	"hash",	"pattern calc.hash(X_0:flt):lng ",	"MKEYhash;",	""	]
[ "calc",	"hash",	"pattern calc.hash(X_0:int):lng ",	"MKEYhash;",	""	]
[ "calc",	"hash",	"pattern calc.hash(X_0:lng):lng ",	"MKEYhash;",	""	]
[ "calc",	"hash",	"pattern calc.hash(X_0:lng):lng ",	"MKEYhash;",	""	]
[ "calc",	"hash",	"pattern calc.hash(X_0:oid):lng ",	"MKEYhash;",	""	]
[ "calc",	"hash",	"pattern calc.hash(X_0:sht):lng ",	"MKEYhash;",	""	]
[ "calc",	"identity",	"command calc.identity(X_0:any):oid ",	"SQLidentity;",	""	]
[ "calc",	"ifthenelse",	"pattern calc.ifthenelse(X_0:bit, X_1:any_1, X_2:any_1):any_1 ",	"CALCswitchbit;",	""	]
[ "calc",	"inet",	"command calc.inet(X_0:str):inet ",	"INET_fromstr;",	""	]
[ "calc",	"inet",	"command calc.inet(X_0:inet):inet ",	"INET_inet;",	""	]
[ "calc",	"int",	"pattern calc.int(X_0:bit):int ",	"CMDvarCONVERT;",	""	]
[ "calc",	"int",	"pattern calc.int(X_0:bte):int ",	"CMDvarCONVERT;",	""	]
[ "calc",	"int",	"pattern calc.int(X_0:dbl):int ",	"CMDvarCONVERT;",	""	]
[ "calc",	"int",	"pattern calc.int(X_0:flt):int ",	"CMDvarCONVERT;",	""	]
[ "calc",	"int",	"pattern calc.int(X_0:int):int ",	"CMDvarCONVERT;",	""	]
[ "calc",	"int",	"pattern calc.int(X_0:lng):int ",	"CMDvarCONVERT;",	""	]
[ "calc",	"int",	"pattern calc.int(X_0:oid):int ",	"CMDvarCONVERT;",	""	]
[ "calc",	"int",	"pattern calc.int(X_0:sht):int ",	"CMDvarCONVERT;",	""	]
[ "calc",	"int",	"pattern calc.int(X_0:str):int ",	"CMDvarCONVERT;",	""	]
[ "calc",	"int",	"pattern calc.int(X_0:void):int ",	"CMDvarCONVERT;",	""	]
[ "calc",	"int",	"command calc.int(X_0:int, X_1:bte):int ",	"bte_dec2_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:int, X_1:bte, X_2:int, X_3:int):int ",	"bte_dec2dec_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:bte, X_1:int, X_2:int):int ",	"bte_num2dec_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:dbl, X_1:int, X_2:int):int ",	"dbl_num2dec_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:flt, X_1:int, X_2:int):int ",	"flt_num2dec_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:int, X_1:int):int ",	"int_dec2_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:int, X_1:int, X_2:int, X_3:int):int ",	"int_dec2dec_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:int, X_1:int, X_2:int):int ",	"int_num2dec_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:int, X_1:lng):int ",	"lng_dec2_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:int, X_1:lng, X_2:int, X_3:int):int ",	"lng_dec2dec_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:lng, X_1:int, X_2:int):int ",	"lng_num2dec_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:void, X_1:int, X_2:int):int ",	"nil_2dec_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:int, X_1:sht):int ",	"sht_dec2_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:int, X_1:sht, X_2:int, X_3:int):int ",	"sht_dec2dec_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:sht, X_1:int, X_2:int):int ",	"sht_num2dec_int;",	""	]
[ "calc",	"int",	"command calc.int(X_0:str, X_1:int, X_2:int):int ",	"str_2dec_int;",	""	]
[ "calc",	"isnil",	"pattern calc.isnil(X_0:any):bit ",	"CMDvarISNIL;",	""	]
[ "calc",	"isnotnil",	"pattern calc.isnotnil(X_0:any):bit ",	"CMDvarISNOTNIL;",	""	]
[ "calc",	"iszero",	"pattern calc.iszero(X_0:bte):bit ",	"CMDvarISZERO;",	""	]
[ "calc",	"iszero",	"pattern calc.iszero(X_0:dbl):bit ",	"CMDvarISZERO;",	""	]
[ "calc",	"iszero",	"pattern calc.iszero(X_0:flt):bit ",	"CMDvarISZERO;",	""	]
[ "calc",	"iszero",	"pattern calc.iszero(X_0:int):bit ",	"CMDvarISZERO;",	""	]
[ "calc",	"iszero",	"pattern calc.iszero(X_0:lng):bit ",	"CMDvarISZERO;",	""	]
[ "calc",	"iszero",	"pattern calc.iszero(X_0:sht):bit ",	"CMDvarISZERO;",	""	]
[ "calc",	"json",	"command calc.json(X_0:str):json ",	"JSONstr2json;",	""	]
[ "calc",	"length",	"command calc.length(X_0:str):int ",	"CMDstrlength;",	""	]
[ "calc",	"lng",	"pattern calc.lng(X_0:bit):lng ",	"CMDvarCONVERT;",	""	]
[ "calc",	"lng",	"pattern calc.lng(X_0:bte):lng ",	"CMDvarCONVERT;",	""	]
[ "calc",	"lng",	"pattern calc.lng(X_0:dbl):lng ",	"CMDvarCONVERT;",	""	]
[ "calc",	"lng",	"pattern calc.lng(X_0:flt):lng ",	"CMDvarCONVERT;",	""	]
[ "calc",	"lng",	"pattern calc.lng(X_0:int):lng ",	"CMDvarCONVERT;",	""	]
[ "calc",	"lng",	"pattern calc.lng(X_0:lng):lng ",	"CMDvarCONVERT;",	""	]
[ "calc",	"lng",	"pattern calc.lng(X_0:oid):lng ",	"CMDvarCONVERT;",	""	]
[ "calc",	"lng",	"pattern calc.lng(X_0:sht):lng ",	"CMDvarCONVERT;",	""	]
[ "calc",	"lng",	"pattern calc.lng(X_0:str):lng ",	"CMDvarCONVERT;",	""	]
[ "calc",	"lng",	"pattern calc.lng(X_0:void):lng ",	"CMDvarCONVERT;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:int, X_1:bte):lng ",	"bte_dec2_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:int, X_1:bte, X_2:int, X_3:int):lng ",	"bte_dec2dec_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:bte, X_1:int, X_2:int):lng ",	"bte_num2dec_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:dbl, X_1:int, X_2:int):lng ",	"dbl_num2dec_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:flt, X_1:int, X_2:int):lng ",	"flt_num2dec_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:int, X_1:int):lng ",	"int_dec2_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:int, X_1:int, X_2:int, X_3:int):lng ",	"int_dec2dec_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:int, X_1:int, X_2:int):lng ",	"int_num2dec_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:int, X_1:lng):lng ",	"lng_dec2_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:int, X_1:lng, X_2:int, X_3:int):lng ",	"lng_dec2dec_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:lng, X_1:int, X_2:int):lng ",	"lng_num2dec_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:void, X_1:int, X_2:int):lng ",	"nil_2dec_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:int, X_1:sht):lng ",	"sht_dec2_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:int, X_1:sht, X_2:int, X_3:int):lng ",	"sht_dec2dec_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:sht, X_1:int, X_2:int):lng ",	"sht_num2dec_lng;",	""	]
[ "calc",	"lng",	"command calc.lng(X_0:str, X_1:int, X_2:int):lng ",	"str_2dec_lng;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:bte, X_1:bte):bte ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:bte, X_1:int):bte ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:bte, X_1:lng):bte ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:bte, X_1:sht):bte ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:int, X_1:bte):int ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:int, X_1:int):int ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:int, X_1:lng):int ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:int, X_1:sht):int ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:lng, X_1:bte):lng ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:lng, X_1:int):lng ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:lng, X_1:lng):lng ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:lng, X_1:sht):lng ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:sht, X_1:bte):sht ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:sht, X_1:int):sht ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:sht, X_1:lng):sht ",	"CMDvarLSH;",	""	]
[ "calc",	"lsh_noerror",	"pattern calc.lsh_noerror(X_0:sht, X_1:sht):sht ",	"CMDvarLSH;",	""	]
[ "calc",	"max",	"pattern calc.max(X_0:any_1, X_1:any_1):any_1 ",	"CALCmax;",	""	]
[ "calc",	"max_no_nil",	"pattern calc.max_no_nil(X_0:any_1, X_1:any_1):any_1 ",	"CALCmax_no_nil;",	""	]
[ "calc",	"mbr",	"command calc.mbr(X_0:mbr):mbr ",	"mbrFromMBR;",	""	]
[ "calc",	"mbr",	"command calc.mbr(X_0:str):mbr ",	"mbrFromString;",	""	]
[ "calc",	"min",	"pattern calc.min(X_0:any_1, X_1:any_1):any_1 ",	"CALCmin;",	""	]
[ "calc",	"min_no_nil",	"pattern calc.min_no_nil(X_0:any_1, X_1:any_1):any_1 ",	"CALCmin_no_nil;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:bte):bte ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:bte):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:bte):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:bte):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:dbl):dbl ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:flt):flt ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:int):bte ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:int):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:int):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:int):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:lng):bte ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:lng):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:lng):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:lng):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:sht):bte ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:sht):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:sht):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:bte, X_1:sht):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:dbl, X_1:bte):dbl ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:dbl, X_1:dbl):dbl ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:dbl, X_1:flt):dbl ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:dbl, X_1:int):dbl ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:dbl, X_1:lng):dbl ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:dbl, X_1:sht):dbl ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:flt, X_1:bte):flt ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:flt, X_1:dbl):dbl ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:flt, X_1:flt):flt ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:flt, X_1:int):flt ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:flt, X_1:lng):flt ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:flt, X_1:sht):flt ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:bte):bte ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:bte):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:bte):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:bte):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:dbl):dbl ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:flt):flt ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:int):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:int):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:lng):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:lng):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:sht):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:sht):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:int, X_1:sht):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:bte):bte ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:bte):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:bte):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:bte):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:dbl):dbl ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:flt):flt ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:int):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:int):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:lng):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:sht):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:sht):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:lng, X_1:sht):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:bte):bte ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:bte):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:bte):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:bte):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:dbl):dbl ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:flt):flt ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:int):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:int):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:int):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:lng):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:lng):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:lng):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:sht):int ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:sht):lng ",	"CMDvarMOD;",	""	]
[ "calc",	"mod_noerror",	"pattern calc.mod_noerror(X_0:sht, X_1:sht):sht ",	"CMDvarMOD;",	""	]
[ "calc",	"month_interval",	"pattern calc.month_interval(X_0:bte, X_1:int, X_2:int):int ",	"month_interval;",	""	]
[ "calc",	"month_interval",	"pattern calc.month_interval(X_0:int, X_1:int, X_2:int):int ",	"month_interval;",	""	]
[ "calc",	"month_interval",	"pattern calc.month_interval(X_0:lng, X_1:int, X_2:int):int ",	"month_interval;",	""	]
[ "calc",	"month_interval",	"pattern calc.month_interval(X_0:sht, X_1:int, X_2:int):int ",	"month_interval;",	""	]
[ "calc",	"month_interval",	"pattern calc.month_interval(X_0:str, X_1:int, X_2:int):int ",	"month_interval_str;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:bte):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:dbl):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:dbl):dbl ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:dbl):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:dbl):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:dbl):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:flt):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:flt):flt ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:flt):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:flt):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:flt):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:int):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:lng):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:bte, X_1:sht):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:bte):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:bte):dbl ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:bte):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:bte):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:bte):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:dbl):dbl ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:flt):dbl ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:int):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:int):dbl ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:int):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:int):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:int):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:lng):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:lng):dbl ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:lng):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:lng):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:lng):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:sht):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:sht):dbl ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:sht):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:sht):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:dbl, X_1:sht):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:bte):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:bte):flt ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:bte):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:bte):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:bte):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:dbl):dbl ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:flt):flt ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:int):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:int):flt ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:int):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:int):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:int):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:lng):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:lng):flt ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:lng):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:lng):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:lng):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:sht):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:sht):flt ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:sht):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:sht):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:flt, X_1:sht):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:bte):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:dbl):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:dbl):dbl ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:dbl):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:dbl):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:dbl):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:flt):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:flt):flt ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:flt):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:flt):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:flt):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:int):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:lng):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:int, X_1:sht):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:bte):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:dbl):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:dbl):dbl ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:dbl):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:dbl):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:dbl):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:flt):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:flt):flt ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:flt):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:flt):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:flt):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:int):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:lng):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:lng, X_1:sht):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:bte):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:dbl):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:dbl):dbl ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:dbl):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:dbl):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:dbl):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:flt):bte ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:flt):flt ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:flt):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:flt):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:flt):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:int):int ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:lng):lng ",	"CMDvarMUL;",	""	]
[ "calc",	"mul_noerror",	"pattern calc.mul_noerror(X_0:sht, X_1:sht):sht ",	"CMDvarMUL;",	""	]
[ "calc",	"not",	"pattern calc.not(X_0:bit):bit ",	"CMDvarNOT;",	""	]
[ "calc",	"not",	"pattern calc.not(X_0:bte):bte ",	"CMDvarNOT;",	""	]
[ "calc",	"not",	"pattern calc.not(X_0:int):int ",	"CMDvarNOT;",	""	]
[ "calc",	"not",	"pattern calc.not(X_0:lng):lng ",	"CMDvarNOT;",	""	]
[ "calc",	"not",	"pattern calc.not(X_0:sht):sht ",	"CMDvarNOT;",	""	]
[ "calc",	"oid",	"pattern calc.oid(X_0:bit):oid ",	"CMDvarCONVERT;",	""	]
[ "calc",	"oid",	"pattern calc.oid(X_0:bte):oid ",	"CMDvarCONVERT;",	""	]
[ "calc",	"oid",	"pattern calc.oid(X_0:dbl):oid ",	"CMDvarCONVERT;",	""	]
[ "calc",	"oid",	"pattern calc.oid(X_0:flt):oid ",	"CMDvarCONVERT;",	""	]
[ "calc",	"oid",	"pattern calc.oid(X_0:int):oid ",	"CMDvarCONVERT;",	""	]
[ "calc",	"oid",	"pattern calc.oid(X_0:lng):oid ",	"CMDvarCONVERT;",	""	]
[ "calc",	"oid",	"pattern calc.oid(X_0:oid):oid ",	"CMDvarCONVERT;",	""	]
[ "calc",	"oid",	"pattern calc.oid(X_0:sht):oid ",	"CMDvarCONVERT;",	""	]
[ "calc",	"oid",	"pattern calc.oid(X_0:str):oid ",	"CMDvarCONVERT;",	""	]
[ "calc",	"oid",	"pattern calc.oid(X_0:void):oid ",	"CMDvarCONVERT;",	""	]
[ "calc",	"or",	"pattern calc.or(X_0:bit, X_1:bit):bit ",	"CMDvarOR;",	""	]
[ "calc",	"or",	"pattern calc.or(X_0:bte, X_1:bte):bte ",	"CMDvarOR;",	""	]
[ "calc",	"or",	"pattern calc.or(X_0:int, X_1:int):int ",	"CMDvarOR;",	""	]
[ "calc",	"or",	"pattern calc.or(X_0:lng, X_1:lng):lng ",	"CMDvarOR;",	""	]
[ "calc",	"or",	"pattern calc.or(X_0:sht, X_1:sht):sht ",	"CMDvarOR;",	""	]
[ "calc",	"ptr",	"command calc.ptr(X_0:ptr):ptr ",	"CMDvarCONVERTptr;",	""	]
[ "calc",	"rotate_xor_hash",	"pattern calc.rotate_xor_hash(X_0:lng, X_1:int, X_2:any_1):lng ",	"MKEYrotate_xor_hash;",	""	]
[ "calc",	"round",	"command calc.round(X_0:bte, X_1:bte, X_2:int, X_3:int):bte ",	"bte_round_wrap;",	""	]
[ "calc",	"round",	"command calc.round(X_0:dbl, X_1:bte):dbl ",	"dbl_round_wrap;",	""	]
[ "calc",	"round",	"command calc.round(X_0:flt, X_1:bte):flt ",	"flt_round_wrap;",	""	]
[ "calc",	"round",	"command calc.round(X_0:int, X_1:bte, X_2:int, X_3:int):int ",	"int_round_wrap;",	""	]
[ "calc",	"round",	"command calc.round(X_0:lng, X_1:bte, X_2:int, X_3:int):lng ",	"lng_round_wrap;",	""	]
[ "calc",	"round",	"command calc.round(X_0:sht, X_1:bte, X_2:int, X_3:int):sht ",	"sht_round_wrap;",	""	]
[ "calc",	"rowid",	"pattern calc.rowid(X_0:any_1, X_1:str, X_2:str):oid ",	"sql_rowid;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:bte, X_1:bte):bte ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:bte, X_1:int):bte ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:bte, X_1:lng):bte ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:bte, X_1:sht):bte ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:int, X_1:bte):int ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:int, X_1:int):int ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:int, X_1:lng):int ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:int, X_1:sht):int ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:lng, X_1:bte):lng ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:lng, X_1:int):lng ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:lng, X_1:lng):lng ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:lng, X_1:sht):lng ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:sht, X_1:bte):sht ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:sht, X_1:int):sht ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:sht, X_1:lng):sht ",	"CMDvarRSH;",	""	]
[ "calc",	"rsh_noerror",	"pattern calc.rsh_noerror(X_0:sht, X_1:sht):sht ",	"CMDvarRSH;",	""	]
[ "calc",	"second_interval",	"command calc.second_interval(X_0:int, X_1:bte, X_2:int, X_3:int):lng ",	"bte_dec2second_interval;",	""	]
[ "calc",	"second_interval",	"command calc.second_interval(X_0:int, X_1:int, X_2:int, X_3:int):lng ",	"int_dec2second_interval;",	""	]
[ "calc",	"second_interval",	"command calc.second_interval(X_0:int, X_1:lng, X_2:int, X_3:int):lng ",	"lng_dec2second_interval;",	""	]
[ "calc",	"second_interval",	"pattern calc.second_interval(X_0:bte, X_1:int, X_2:int):lng ",	"second_interval;",	""	]
[ "calc",	"second_interval",	"pattern calc.second_interval(X_0:int, X_1:int, X_2:int):lng ",	"second_interval;",	""	]
[ "calc",	"second_interval",	"pattern calc.second_interval(X_0:lng, X_1:int, X_2:int):lng ",	"second_interval;",	""	]
[ "calc",	"second_interval",	"pattern calc.second_interval(X_0:sht, X_1:int, X_2:int):lng ",	"second_interval;",	""	]
[ "calc",	"second_interval",	"pattern calc.second_interval(X_0:daytime, X_1:int, X_2:int):lng ",	"second_interval_daytime;",	""	]
[ "calc",	"second_interval",	"pattern calc.second_interval(X_0:str, X_1:int, X_2:int):lng ",	"second_interval_str;",	""	]
[ "calc",	"second_interval",	"command calc.second_interval(X_0:int, X_1:sht, X_2:int, X_3:int):lng ",	"sht_dec2second_interval;",	""	]
[ "calc",	"sht",	"pattern calc.sht(X_0:bit):sht ",	"CMDvarCONVERT;",	""	]
[ "calc",	"sht",	"pattern calc.sht(X_0:bte):sht ",	"CMDvarCONVERT;",	""	]
[ "calc",	"sht",	"pattern calc.sht(X_0:dbl):sht ",	"CMDvarCONVERT;",	""	]
[ "calc",	"sht",	"pattern calc.sht(X_0:flt):sht ",	"CMDvarCONVERT;",	""	]
[ "calc",	"sht",	"pattern calc.sht(X_0:int):sht ",	"CMDvarCONVERT;",	""	]
[ "calc",	"sht",	"pattern calc.sht(X_0:lng):sht ",	"CMDvarCONVERT;",	""	]
[ "calc",	"sht",	"pattern calc.sht(X_0:oid):sht ",	"CMDvarCONVERT;",	""	]
[ "calc",	"sht",	"pattern calc.sht(X_0:sht):sht ",	"CMDvarCONVERT;",	""	]
[ "calc",	"sht",	"pattern calc.sht(X_0:str):sht ",	"CMDvarCONVERT;",	""	]
[ "calc",	"sht",	"pattern calc.sht(X_0:void):sht ",	"CMDvarCONVERT;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:int, X_1:bte):sht ",	"bte_dec2_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:int, X_1:bte, X_2:int, X_3:int):sht ",	"bte_dec2dec_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:bte, X_1:int, X_2:int):sht ",	"bte_num2dec_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:dbl, X_1:int, X_2:int):sht ",	"dbl_num2dec_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:flt, X_1:int, X_2:int):sht ",	"flt_num2dec_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:int, X_1:int):sht ",	"int_dec2_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:int, X_1:int, X_2:int, X_3:int):sht ",	"int_dec2dec_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:int, X_1:int, X_2:int):sht ",	"int_num2dec_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:int, X_1:lng):sht ",	"lng_dec2_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:int, X_1:lng, X_2:int, X_3:int):sht ",	"lng_dec2dec_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:lng, X_1:int, X_2:int):sht ",	"lng_num2dec_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:void, X_1:int, X_2:int):sht ",	"nil_2dec_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:int, X_1:sht):sht ",	"sht_dec2_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:int, X_1:sht, X_2:int, X_3:int):sht ",	"sht_dec2dec_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:sht, X_1:int, X_2:int):sht ",	"sht_num2dec_sht;",	""	]
[ "calc",	"sht",	"command calc.sht(X_0:str, X_1:int, X_2:int):sht ",	"str_2dec_sht;",	""	]
[ "calc",	"sign",	"pattern calc.sign(X_0:bte):bte ",	"CMDvarSIGN;",	""	]
[ "calc",	"sign",	"pattern calc.sign(X_0:dbl):bte ",	"CMDvarSIGN;",	""	]
[ "calc",	"sign",	"pattern calc.sign(X_0:flt):bte ",	"CMDvarSIGN;",	""	]
[ "calc",	"sign",	"pattern calc.sign(X_0:int):bte ",	"CMDvarSIGN;",	""	]
[ "calc",	"sign",	"pattern calc.sign(X_0:lng):bte ",	"CMDvarSIGN;",	""	]
[ "calc",	"sign",	"pattern calc.sign(X_0:sht):bte ",	"CMDvarSIGN;",	""	]
[ "calc",	"str",	"pattern calc.str(X_0:any):str ",	"CMDvarCONVERT;",	""	]
[ "calc",	"str",	"pattern calc.str(X_0:int, X_1:int, X_2:int, X_3:int, X_4:any_1, X_5:int):str ",	"SQLstr_cast;",	""	]
[ "calc",	"str",	"command calc.str(X_0:uuid):str ",	"UUIDuuid2str;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:bte, X_1:bte):bte ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:bte, X_1:dbl):dbl ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:bte, X_1:flt):flt ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:bte, X_1:int):int ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:bte, X_1:lng):lng ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:bte, X_1:sht):sht ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:dbl, X_1:bte):dbl ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:dbl, X_1:dbl):dbl ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:dbl, X_1:flt):dbl ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:dbl, X_1:int):dbl ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:dbl, X_1:lng):dbl ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:dbl, X_1:sht):dbl ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:flt, X_1:bte):flt ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:flt, X_1:dbl):dbl ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:flt, X_1:flt):flt ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:flt, X_1:int):flt ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:flt, X_1:lng):flt ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:flt, X_1:sht):flt ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:int, X_1:bte):int ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:int, X_1:dbl):dbl ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:int, X_1:flt):flt ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:int, X_1:int):int ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:int, X_1:lng):lng ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:int, X_1:sht):int ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:lng, X_1:bte):lng ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:lng, X_1:dbl):dbl ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:lng, X_1:flt):flt ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:lng, X_1:int):lng ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:lng, X_1:lng):lng ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:lng, X_1:sht):lng ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:sht, X_1:bte):sht ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:sht, X_1:dbl):dbl ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:sht, X_1:flt):flt ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:sht, X_1:int):int ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:sht, X_1:lng):lng ",	"CMDvarSUB;",	""	]
[ "calc",	"sub_noerror",	"pattern calc.sub_noerror(X_0:sht, X_1:sht):sht ",	"CMDvarSUB;",	""	]
[ "calc",	"timestamp",	"command calc.timestamp(X_0:date):timestamp ",	"MTIMEtimestamp_fromdate;",	""	]
[ "calc",	"timestamp",	"command calc.timestamp(X_0:lng):timestamp ",	"MTIMEtimestamp_frommsec;",	""	]
[ "calc",	"timestamp",	"command calc.timestamp(X_0:int):timestamp ",	"MTIMEtimestamp_fromsecond;",	""	]
[ "calc",	"timestamp",	"command calc.timestamp(X_0:str):timestamp ",	"MTIMEtimestamp_fromstr;",	""	]
[ "calc",	"timestamp",	"command calc.timestamp(X_0:timestamp):timestamp ",	"MTIMEtimestamp_timestamp;",	""	]
[ "calc",	"timestamp",	"pattern calc.timestamp(X_0:date, X_1:int):timestamp ",	"date_2_timestamp;",	""	]
[ "calc",	"timestamp",	"pattern calc.timestamp(X_0:void, X_1:int):timestamp ",	"nil_2time_timestamp;",	""	]
[ "calc",	"timestamp",	"pattern calc.timestamp(X_0:str, X_1:int):timestamp ",	"str_2time_timestamp;",	""	]
[ "calc",	"timestamp",	"pattern calc.timestamp(X_0:str, X_1:int, X_2:int):timestamp ",	"str_2time_timestamptz;",	""	]
[ "calc",	"timestamp",	"pattern calc.timestamp(X_0:timestamp, X_1:int):timestamp ",	"timestamp_2time_timestamp;",	""	]
[ "calc",	"url",	"command calc.url(X_0:str):url ",	"URLnew;",	""	]
[ "calc",	"url",	"command calc.url(X_0:url):url ",	"URLnoop;",	""	]
[ "calc",	"uuid",	"command calc.uuid(X_0:str):uuid ",	"UUIDstr2uuid;",	""	]
[ "calc",	"uuid",	"command calc.uuid(X_0:uuid):uuid ",	"UUIDuuid2uuid;",	""	]
[ "calc",	"void",	"pattern calc.void(X_0:bit):void ",	"CMDvarCONVERT;",	""	]
[ "calc",	"void",	"pattern calc.void(X_0:bte):void ",	"CMDvarCONVERT;",	""	]
[ "calc",	"void",	"pattern calc.void(X_0:dbl):void ",	"CMDvarCONVERT;",	""	]
[ "calc",	"void",	"pattern calc.void(X_0:flt):void ",	"CMDvarCONVERT;",	""	]
[ "calc",	"void",	"pattern calc.void(X_0:int):void ",	"CMDvarCONVERT;",	""	]
[ "calc",	"void",	"pattern calc.void(X_0:lng):void ",	"CMDvarCONVERT;",	""	]
[ "calc",	"void",	"pattern calc.void(X_0:oid):void ",	"CMDvarCONVERT;",	""	]
[ "calc",	"void",	"pattern calc.void(X_0:sht):void ",	"CMDvarCONVERT;",	""	]
[ "calc",	"void",	"pattern calc.void(X_0:str):void ",	"CMDvarCONVERT;",	""	]
[ "calc",	"void",	"pattern calc.void(X_0:void):void ",	"CMDvarCONVERT;",	""	]
[ "calc",	"wkb",	"function calc.wkb(wkt:str, srid:int, type:int):wkb;",	"",	""	]
[ "calc",	"wkb",	"command calc.wkb(X_0:wkb, X_1:int, X_2:int):wkb ",	"geom_2_geom;",	""	]
[ "calc",	"wkb",	"command calc.wkb(X_0:wkb):wkb ",	"wkbFromWKB;",	""	]
[ "calc",	"xml",	"command calc.xml(X_0:str):xml ",	"XMLstr2xml;",	""	]
[ "calc",	"xml",	"command calc.xml(X_0:xml):xml ",	"XMLxml2xml;",	""	]
[ "calc",	"xor",	"pattern calc.xor(X_0:bit, X_1:bit):bit ",	"CMDvarXOR;",	""	]
[ "calc",	"xor",	"pattern calc.xor(X_0:bte, X_1:bte):bte ",	"CMDvarXOR;",	""	]
[ "calc",	"xor",	"pattern calc.xor(X_0:int, X_1:int):int ",	"CMDvarXOR;",	""	]
[ "calc",	"xor",	"pattern calc.xor(X_0:lng, X_1:lng):lng ",	"CMDvarXOR;",	""	]
[ "calc",	"xor",	"pattern calc.xor(X_0:sht, X_1:sht):sht ",	"CMDvarXOR;",	""	]
[ "capi",	"eval",	"pattern capi.eval(X_0:ptr, X_1:bit, X_2:str):any ",	"CUDFevalStd;",	""	]
[ "capi",	"eval",	"pattern capi.eval(X_0:ptr, X_1:bit, X_2:str, X_3:any...):any... ",	"CUDFevalStd;",	""	]
[ "capi",	"eval_aggr",	"pattern capi.eval_aggr(X_0:ptr, X_1:bit, X_2:str, X_3:any...):any... ",	"CUDFevalAggr;",	""	]
[ "capi",	"prelude",	"command capi.prelude():void ",	"CUDFprelude;",	""	]
[ "capi",	"subeval_aggr",	"pattern capi.subeval_aggr(X_0:ptr, X_1:bit, X_2:str, X_3:any...):any... ",	"CUDFevalAggr;",	""	]
[ "clients",	"addUser",	"pattern clients.addUser(X_0:str, X_1:str):oid ",	"CLTaddUser;",	""	]
[ "clients",	"backendsum",	"command clients.backendsum(X_0:str):str ",	"CLTbackendsum;",	""	]
[ "clients",	"changePassword",	"pattern clients.changePassword(X_0:str, X_1:str):void ",	"CLTchangePassword;",	""	]
[ "clients",	"changeUsername",	"pattern clients.changeUsername(X_0:str, X_1:str):void ",	"CLTchangeUsername;",	""	]
[ "clients",	"checkPermission",	"pattern clients.checkPermission(X_0:str, X_1:str):void ",	"CLTcheckPermission;",	""	]
[ "clients",	"getId",	"pattern clients.getId():int ",	"CLTgetClientId;",	""	]
[ "clients",	"getInfo",	"pattern clients.getInfo() (X_0:bat[:str], X_1:bat[:str]) ",	"CLTInfo;",	""	]
[ "clients",	"getLogins",	"command clients.getLogins() (X_0:bat[:oid], X_1:bat[:str]) ",	"CLTLogin;",	""	]
[ "clients",	"getPasswordHash",	"pattern clients.getPasswordHash(X_0:str):str ",	"CLTgetPasswordHash;",	""	]
[ "clients",	"getScenario",	"pattern clients.getScenario():str ",	"CLTgetScenario;",	""	]
[ "clients",	"getUsername",	"pattern clients.getUsername():str ",	"CLTgetUsername;",	""	]
[ "clients",	"getUsers",	"pattern clients.getUsers() (X_0:bat[:oid], X_1:bat[:str]) ",	"CLTgetUsers;",	""	]
[ "clients",	"getprofile",	"pattern clients.getprofile() (X_0:str, X_1:int, X_2:int, X_3:int, X_4:int) ",	"CLTgetProfile;",	""	]
[ "clients",	"md5sum",	"command clients.md5sum(X_0:str):str ",	"CLTmd5sum;",	""	]
[ "clients",	"quit",	"pattern clients.quit():void ",	"CLTquit;",	""	]
[ "clients",	"quit",	"pattern clients.quit(X_0:int):void ",	"CLTquit;",	""	]
[ "clients",	"removeUser",	"pattern clients.removeUser(X_0:str):void ",	"CLTremoveUser;",	""	]
[ "clients",	"ripemd160sum",	"command clients.ripemd160sum(X_0:str):str ",	"CLTripemd160sum;",	""	]
[ "clients",	"setListing",	"pattern clients.setListing(X_0:int):int ",	"CLTsetListing;",	""	]
[ "clients",	"setPassword",	"pattern clients.setPassword(X_0:str, X_1:str):void ",	"CLTsetPassword;",	""	]
[ "clients",	"setScenario",	"pattern clients.setScenario(X_0:str):str ",	"CLTsetScenario;",	""	]
[ "clients",	"setmemorylimit",	"pattern clients.setmemorylimit(X_0:int):void ",	"CLTsetmemorylimit;",	""	]
[ "clients",	"setmemorylimit",	"pattern clients.setmemorylimit(X_0:int, X_1:int):void ",	"CLTsetmemorylimit;",	""	]
[ "clients",	"setoptimizer",	"pattern clients.setoptimizer(X_0:int, X_1:str):void ",	"CLTsetoptimizer;",	""	]
[ "clients",	"setoptimizer",	"pattern clients.setoptimizer(X_0:str):void ",	"CLTsetoptimizer;",	""	]
[ "clients",	"setprinttimeout",	"command clients.setprinttimeout(X_0:int):void ",	"CLTsetPrintTimeout;",	""	]
[ "clients",	"setquerytimeout",	"pattern clients.setquerytimeout(X_0:bte, X_1:int):void ",	"CLTqueryTimeout;",	""	]
[ "clients",	"setquerytimeout",	"pattern clients.setquerytimeout(X_0:int):void ",	"CLTqueryTimeout;",	""	]
[ "clients",	"setquerytimeout",	"pattern clients.setquerytimeout(X_0:int, X_1:int):void ",	"CLTqueryTimeout;",	""	]
[ "clients",	"setquerytimeout",	"pattern clients.setquerytimeout(X_0:sht, X_1:int):void ",	"CLTqueryTimeout;",	""	]
[ "clients",	"setsession",	"pattern clients.setsession(X_0:lng):void ",	"CLTsetSessionTimeout;",	""	]
[ "clients",	"setsessiontimeout",	"pattern clients.setsessiontimeout(X_0:bte, X_1:int):void ",	"CLTsessionTimeout;",	""	]
[ "clients",	"setsessiontimeout",	"pattern clients.setsessiontimeout(X_0:int):void ",	"CLTsessionTimeout;",	""	]
[ "clients",	"setsessiontimeout",	"pattern clients.setsessiontimeout(X_0:int, X_1:int):void ",	"CLTsessionTimeout;",	""	]
[ "clients",	"setsessiontimeout",	"pattern clients.setsessiontimeout(X_0:sht, X_1:int):void ",	"CLTsessionTimeout;",	""	]
[ "clients",	"settimeout",	"pattern clients.settimeout(X_0:lng):void ",	"CLTsetTimeout;",	""	]
[ "clients",	"settimeout",	"pattern clients.settimeout(X_0:lng, X_1:lng):void ",	"CLTsetTimeout;",	""	]
[ "clients",	"setworkerlimit",	"pattern clients.setworkerlimit(X_0:int):void ",	"CLTsetworkerlimit;",	""	]
[ "clients",	"setworkerlimit",	"pattern clients.setworkerlimit(X_0:int, X_1:int):void ",	"CLTsetworkerlimit;",	""	]
[ "clients",	"sha1sum",	"command clients.sha1sum(X_0:str):str ",	"CLTsha1sum;",	""	]
[ "clients",	"sha2sum",	"command clients.sha2sum(X_0:str, X_1:int):str ",	"CLTsha2sum;",	""	]
[ "clients",	"shutdown",	"pattern clients.shutdown(X_0:int):str ",	"CLTshutdown;",	""	]
[ "clients",	"shutdown",	"pattern clients.shutdown(X_0:int, X_1:bit):str ",	"CLTshutdown;",	""	]
[ "clients",	"stop",	"pattern clients.stop(X_0:int):void ",	"CLTstop;",	""	]
[ "clients",	"stopsession",	"pattern clients.stopsession(X_0:bte):void ",	"CLTstopSession;",	""	]
[ "clients",	"stopsession",	"pattern clients.stopsession(X_0:int):void ",	"CLTstopSession;",	""	]
[ "clients",	"stopsession",	"pattern clients.stopsession(X_0:sht):void ",	"CLTstopSession;",	""	]
[ "clients",	"suspend",	"pattern clients.suspend(X_0:int):void ",	"CLTsuspend;",	""	]
[ "clients",	"wakeup",	"pattern clients.wakeup(X_0:int):void ",	"CLTwakeup;",	""	]
[ "color",	"blue",	"command color.blue(X_0:color):int ",	"CLRblue;",	""	]
[ "color",	"cb",	"command color.cb(X_0:color):int ",	"CLRcb;",	""	]
[ "color",	"color",	"command color.color(X_0:str):color ",	"CLRcolor;",	""	]
[ "color",	"cr",	"command color.cr(X_0:color):int ",	"CLRcr;",	""	]
[ "color",	"green",	"command color.green(X_0:color):int ",	"CLRgreen;",	""	]
[ "color",	"hsv",	"command color.hsv(X_0:flt, X_1:flt, X_2:flt):color ",	"CLRhsv;",	""	]
[ "color",	"hue",	"command color.hue(X_0:color):flt ",	"CLRhue;",	""	]
[ "color",	"hue",	"command color.hue(X_0:color):int ",	"CLRhueInt;",	""	]
[ "color",	"luminance",	"command color.luminance(X_0:color):int ",	"CLRluminance;",	""	]
[ "color",	"red",	"command color.red(X_0:color):int ",	"CLRred;",	""	]
[ "color",	"rgb",	"command color.rgb(X_0:int, X_1:int, X_2:int):color ",	"CLRrgb;",	""	]
[ "color",	"saturation",	"command color.saturation(X_0:color):flt ",	"CLRsaturation;",	""	]
[ "color",	"saturation",	"command color.saturation(X_0:color):int ",	"CLRsaturationInt;",	""	]
[ "color",	"str",	"command color.str(X_0:color):str ",	"CLRstr;",	""	]
[ "color",	"value",	"command color.value(X_0:color):flt ",	"CLRvalue;",	""	]
[ "color",	"value",	"command color.value(X_0:color):int ",	"CLRvalueInt;",	""	]
[ "color",	"ycc",	"command color.ycc(X_0:int, X_1:int, X_2:int):color ",	"CLRycc;",	""	]
[ "factories",	"getArrival",	"command factories.getArrival():bat[:timestamp] ",	"FCTgetArrival;",	""	]
[ "factories",	"getCaller",	"command factories.getCaller():int ",	"FCTgetCaller;",	""	]
[ "factories",	"getDeparture",	"command factories.getDeparture():bat[:timestamp] ",	"FCTgetDeparture;",	""	]
[ "factories",	"getOwners",	"command factories.getOwners():bat[:str] ",	"FCTgetOwners;",	""	]
[ "factories",	"getPlants",	"command factories.getPlants() (X_0:bat[:str], X_1:bat[:str]) ",	"FCTgetPlants;",	""	]
[ "factories",	"shutdown",	"pattern factories.shutdown(X_0:str, X_1:str):void ",	"FCTshutdown;",	""	]
[ "fits",	"attach",	"pattern fits.attach(X_0:str):void ",	"FITSattach;",	""	]
[ "fits",	"export",	"pattern fits.export(X_0:str):void ",	"FITSexportTable;",	""	]
[ "fits",	"fitstest",	"command fits.fitstest(X_0:str):int ",	"FITStest;",	""	]
[ "fits",	"listdir",	"pattern fits.listdir(X_0:str):void ",	"FITSdir;",	""	]
[ "fits",	"listdirpattern",	"pattern fits.listdirpattern(X_0:str, X_1:str):void ",	"FITSdirpat;",	""	]
[ "fits",	"load",	"pattern fits.load(X_0:str):void ",	"FITSloadTable;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:bte], X_1:bat[:bte]) (X_2:bat[:oid], X_3:bat[:oid]) ",	"VLTgenerator_join;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:dbl], X_1:bat[:dbl]) (X_2:bat[:oid], X_3:bat[:oid]) ",	"VLTgenerator_join;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:flt], X_1:bat[:flt]) (X_2:bat[:oid], X_3:bat[:oid]) ",	"VLTgenerator_join;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:int], X_1:bat[:int]) (X_2:bat[:oid], X_3:bat[:oid]) ",	"VLTgenerator_join;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:lng], X_1:bat[:lng]) (X_2:bat[:oid], X_3:bat[:oid]) ",	"VLTgenerator_join;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:sht], X_1:bat[:sht]) (X_2:bat[:oid], X_3:bat[:oid]) ",	"VLTgenerator_join;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:bte], X_1:bat[:bte], X_2:bat[:bte], X_3:bit, X_4:bit) (X_5:bat[:oid], X_6:bat[:oid]) ",	"VLTgenerator_rangejoin;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:dbl], X_1:bat[:dbl], X_2:bat[:dbl], X_3:bit, X_4:bit) (X_5:bat[:oid], X_6:bat[:oid]) ",	"VLTgenerator_rangejoin;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:flt], X_1:bat[:flt], X_2:bat[:flt], X_3:bit, X_4:bit) (X_5:bat[:oid], X_6:bat[:oid]) ",	"VLTgenerator_rangejoin;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:int], X_1:bat[:int], X_2:bat[:int], X_3:bit, X_4:bit) (X_5:bat[:oid], X_6:bat[:oid]) ",	"VLTgenerator_rangejoin;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:lng], X_1:bat[:lng], X_2:bat[:lng], X_3:bit, X_4:bit) (X_5:bat[:oid], X_6:bat[:oid]) ",	"VLTgenerator_rangejoin;",	""	]
[ "generator",	"join",	"pattern generator.join(X_0:bat[:sht], X_1:bat[:sht], X_2:bat[:sht], X_3:bit, X_4:bit) (X_5:bat[:oid], X_6:bat[:oid]) ",	"VLTgenerator_rangejoin;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:bte, X_1:bte):bat[:bte] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:bte, X_1:bte, X_2:bte):bat[:bte] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:dbl, X_1:dbl):bat[:dbl] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:dbl, X_1:dbl, X_2:dbl):bat[:dbl] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:flt, X_1:flt):bat[:flt] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:flt, X_1:flt, X_2:flt):bat[:flt] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:int, X_1:int):bat[:int] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:int, X_1:int, X_2:int):bat[:int] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:lng, X_1:lng):bat[:lng] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:lng, X_1:lng, X_2:lng):bat[:lng] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:sht, X_1:sht):bat[:sht] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:sht, X_1:sht, X_2:sht):bat[:sht] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"parameters",	"pattern generator.parameters(X_0:timestamp, X_1:timestamp, X_2:lng):bat[:timestamp] ",	"VLTgenerator_noop;",	""	]
[ "generator",	"projection",	"pattern generator.projection(X_0:bat[:oid], X_1:bat[:bte]):bat[:bte] ",	"VLTgenerator_projection;",	""	]
[ "generator",	"projection",	"pattern generator.projection(X_0:bat[:oid], X_1:bat[:dbl]):bat[:dbl] ",	"VLTgenerator_projection;",	""	]
[ "generator",	"projection",	"pattern generator.projection(X_0:bat[:oid], X_1:bat[:flt]):bat[:flt] ",	"VLTgenerator_projection;",	""	]
[ "generator",	"projection",	"pattern generator.projection(X_0:bat[:oid], X_1:bat[:int]):bat[:int] ",	"VLTgenerator_projection;",	""	]
[ "generator",	"projection",	"pattern generator.projection(X_0:bat[:oid], X_1:bat[:lng]):bat[:lng] ",	"VLTgenerator_projection;",	""	]
[ "generator",	"projection",	"pattern generator.projection(X_0:bat[:oid], X_1:bat[:sht]):bat[:sht] ",	"VLTgenerator_projection;",	""	]
[ "generator",	"projection",	"pattern generator.projection(X_0:bat[:oid], X_1:bat[:timestamp]):bat[:timestamp] ",	"VLTgenerator_projection;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:bte], X_1:bat[:oid], X_2:bte, X_3:bte, X_4:bit, X_5:bit, X_6:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:bte], X_1:bte, X_2:bte, X_3:bit, X_4:bit, X_5:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:dbl], X_1:bat[:oid], X_2:dbl, X_3:dbl, X_4:bit, X_5:bit, X_6:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:dbl], X_1:dbl, X_2:dbl, X_3:bit, X_4:bit, X_5:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:flt], X_1:bat[:oid], X_2:flt, X_3:flt, X_4:bit, X_5:bit, X_6:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:flt], X_1:flt, X_2:flt, X_3:bit, X_4:bit, X_5:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:int], X_1:bat[:oid], X_2:int, X_3:int, X_4:bit, X_5:bit, X_6:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:int], X_1:int, X_2:int, X_3:bit, X_4:bit, X_5:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:lng], X_1:bat[:oid], X_2:lng, X_3:lng, X_4:bit, X_5:bit, X_6:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:lng], X_1:lng, X_2:lng, X_3:bit, X_4:bit, X_5:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:sht], X_1:bat[:oid], X_2:sht, X_3:sht, X_4:bit, X_5:bit, X_6:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:sht], X_1:sht, X_2:sht, X_3:bit, X_4:bit, X_5:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:timestamp], X_1:bat[:oid], X_2:timestamp, X_3:timestamp, X_4:bit, X_5:bit, X_6:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"select",	"pattern generator.select(X_0:bat[:timestamp], X_1:timestamp, X_2:timestamp, X_3:bit, X_4:bit, X_5:bit):bat[:oid] ",	"VLTgenerator_subselect;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:bte, X_1:bte):bat[:bte] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:bte, X_1:bte, X_2:bte):bat[:bte] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:dbl, X_1:dbl):bat[:dbl] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:dbl, X_1:dbl, X_2:dbl):bat[:dbl] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:flt, X_1:flt):bat[:flt] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:flt, X_1:flt, X_2:flt):bat[:flt] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:int, X_1:int):bat[:int] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:int, X_1:int, X_2:int):bat[:int] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:lng, X_1:lng):bat[:lng] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:lng, X_1:lng, X_2:lng):bat[:lng] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:sht, X_1:sht):bat[:sht] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:sht, X_1:sht, X_2:sht):bat[:sht] ",	"VLTgenerator_table;",	""	]
[ "generator",	"series",	"pattern generator.series(X_0:timestamp, X_1:timestamp, X_2:lng):bat[:timestamp] ",	"VLTgenerator_table;",	""	]
[ "generator",	"thetaselect",	"pattern generator.thetaselect(X_0:bat[:bte], X_1:bat[:oid], X_2:bte, X_3:str):bat[:oid] ",	"VLTgenerator_thetasubselect;",	""	]
[ "generator",	"thetaselect",	"pattern generator.thetaselect(X_0:bat[:dbl], X_1:bat[:oid], X_2:dbl, X_3:str):bat[:oid] ",	"VLTgenerator_thetasubselect;",	""	]
[ "generator",	"thetaselect",	"pattern generator.thetaselect(X_0:bat[:flt], X_1:bat[:oid], X_2:flt, X_3:str):bat[:oid] ",	"VLTgenerator_thetasubselect;",	""	]
[ "generator",	"thetaselect",	"pattern generator.thetaselect(X_0:bat[:int], X_1:bat[:oid], X_2:int, X_3:str):bat[:oid] ",	"VLTgenerator_thetasubselect;",	""	]
[ "generator",	"thetaselect",	"pattern generator.thetaselect(X_0:bat[:lng], X_1:bat[:oid], X_2:lng, X_3:str):bat[:oid] ",	"VLTgenerator_thetasubselect;",	""	]
[ "generator",	"thetaselect",	"pattern generator.thetaselect(X_0:bat[:sht], X_1:bat[:oid], X_2:sht, X_3:str):bat[:oid] ",	"VLTgenerator_thetasubselect;",	""	]
[ "generator",	"thetaselect",	"pattern generator.thetaselect(X_0:bat[:timestamp], X_1:bat[:oid], X_2:timestamp, X_3:str):bat[:oid] ",	"VLTgenerator_thetasubselect;",	""	]
[ "geom",	"Area",	"command geom.Area(X_0:wkb):dbl ",	"wkbArea;",	""	]
[ "geom",	"AsBinary",	"command geom.AsBinary(X_0:wkb):str ",	"wkbAsBinary;",	""	]
[ "geom",	"AsEWKT",	"function geom.AsEWKT(w:wkb):str;",	"",	""	]
[ "geom",	"AsText",	"function geom.AsText(w:wkb):str;",	"",	""	]
[ "geom",	"BdMPolyFromText",	"function geom.BdMPolyFromText(wkt:str, srid:int):wkb;",	"",	""	]
[ "geom",	"BdPolyFromText",	"function geom.BdPolyFromText(wkt:str, srid:int):wkb;",	"",	""	]
[ "geom",	"Boundary",	"command geom.Boundary(X_0:wkb):wkb ",	"wkbBoundary;",	""	]
[ "geom",	"Buffer",	"command geom.Buffer(X_0:wkb, X_1:dbl):wkb ",	"wkbBuffer;",	""	]
[ "geom",	"Centroid",	"command geom.Centroid(X_0:wkb):wkb ",	"wkbCentroid;",	""	]
[ "geom",	"Contains",	"command geom.Contains(X_0:wkb, X_1:wkb):bit ",	"wkbContains;",	""	]
[ "geom",	"Contains",	"command geom.Contains(X_0:wkb, X_1:dbl, X_2:dbl):bit ",	"wkbContains_point;",	""	]
[ "geom",	"Contains",	"command geom.Contains(X_0:wkb, X_1:bat[:dbl], X_2:bat[:dbl]):bat[:bit] ",	"wkbContains_point_bat;",	""	]
[ "geom",	"ConvexHull",	"command geom.ConvexHull(X_0:wkb):wkb ",	"wkbConvexHull;",	""	]
[ "geom",	"CoordDim",	"command geom.CoordDim(X_0:wkb):int ",	"wkbCoordDim;",	""	]
[ "geom",	"CoveredBy",	"command geom.CoveredBy(X_0:wkb, X_1:wkb):bit ",	"wkbCoveredBy;",	""	]
[ "geom",	"Covers",	"command geom.Covers(X_0:wkb, X_1:wkb):bit ",	"wkbCovers;",	""	]
[ "geom",	"Crosses",	"command geom.Crosses(X_0:wkb, X_1:wkb):bit ",	"wkbCrosses;",	""	]
[ "geom",	"DWithin",	"command geom.DWithin(X_0:wkb, X_1:wkb, X_2:dbl):bit ",	"wkbDWithin;",	""	]
[ "geom",	"DelaunayTriangles",	"command geom.DelaunayTriangles(X_0:wkb, X_1:dbl, X_2:int):wkb ",	"wkbDelaunayTriangles;",	""	]
[ "geom",	"Difference",	"command geom.Difference(X_0:wkb, X_1:wkb):wkb ",	"wkbDifference;",	""	]
[ "geom",	"Dimension",	"command geom.Dimension(X_0:wkb):int ",	"wkbDimension;",	""	]
[ "geom",	"Disjoint",	"command geom.Disjoint(X_0:wkb, X_1:wkb):bit ",	"wkbDisjoint;",	""	]
[ "geom",	"Distance",	"command geom.Distance(X_0:wkb, X_1:wkb):dbl ",	"wkbDistance;",	""	]
[ "geom",	"Dump",	"command geom.Dump(X_0:wkb) (X_1:bat[:str], X_2:bat[:wkb]) ",	"wkbDump;",	""	]
[ "geom",	"DumpPoints",	"command geom.DumpPoints(X_0:wkb) (X_1:bat[:str], X_2:bat[:wkb]) ",	"wkbDumpPoints;",	""	]
[ "geom",	"EndPoint",	"command geom.EndPoint(X_0:wkb):wkb ",	"wkbEndPoint;",	""	]
[ "geom",	"Envelope",	"command geom.Envelope(X_0:wkb):wkb ",	"wkbEnvelope;",	""	]
[ "geom",	"EnvelopeFromCoordinates",	"command geom.EnvelopeFromCoordinates(X_0:dbl, X_1:dbl, X_2:dbl, X_3:dbl, X_4:int):wkb ",	"wkbEnvelopeFromCoordinates;",	""	]
[ "geom",	"Equals",	"command geom.Equals(X_0:wkb, X_1:wkb):bit ",	"wkbEquals;",	""	]
[ "geom",	"ExteriorRing",	"command geom.ExteriorRing(X_0:wkb):wkb ",	"wkbExteriorRing;",	""	]
[ "geom",	"Force2D",	"function geom.Force2D(g:wkb):wkb;",	"",	""	]
[ "geom",	"Force3D",	"function geom.Force3D(g:wkb):wkb;",	"",	""	]
[ "geom",	"ForceDimensions",	"command geom.ForceDimensions(X_0:wkb, X_1:int):wkb ",	"wkbForceDim;",	""	]
[ "geom",	"FromBinary",	"command geom.FromBinary(X_0:str):wkb ",	"wkbFromBinary;",	""	]
[ "geom",	"FromText",	"command geom.FromText(X_0:str, X_1:int, X_2:int):wkb ",	"wkbFromText;",	""	]
[ "geom",	"GeomCollFromText",	"function geom.GeomCollFromText(wkt:str):wkb;",	"",	""	]
[ "geom",	"GeomCollFromText",	"function geom.GeomCollFromText(wkt:str, srid:int):wkb;",	"",	""	]
[ "geom",	"GeomFromText",	"function geom.GeomFromText(wkt:str):wkb;",	"",	""	]
[ "geom",	"GeomFromText",	"function geom.GeomFromText(wkt:str, srid:int):wkb;",	"",	""	]
[ "geom",	"GeometryN",	"command geom.GeometryN(X_0:wkb, X_1:int):wkb ",	"wkbGeometryN;",	""	]
[ "geom",	"GeometryType",	"command geom.GeometryType(X_0:wkb, X_1:int):str ",	"wkbGeometryType;",	""	]
[ "geom",	"GeometryType1",	"function geom.GeometryType1(w:wkb):str;",	"",	""	]
[ "geom",	"GeometryType2",	"function geom.GeometryType2(w:wkb):str;",	"",	""	]
[ "geom",	"GetCoordinate",	"command geom.GetCoordinate(X_0:wkb, X_1:int):dbl ",	"wkbGetCoordinate;",	""	]
[ "geom",	"InteriorRingN",	"command geom.InteriorRingN(X_0:wkb, X_1:int):wkb ",	"wkbInteriorRingN;",	""	]
[ "geom",	"InteriorRings",	"command geom.InteriorRings(X_0:wkb):wkba ",	"wkbInteriorRings;",	""	]
[ "geom",	"Intersection",	"command geom.Intersection(X_0:wkb, X_1:wkb):wkb ",	"wkbIntersection;",	""	]
[ "geom",	"Intersects",	"command geom.Intersects(X_0:wkb, X_1:wkb):bit ",	"wkbIntersects;",	""	]
[ "geom",	"IsClosed",	"command geom.IsClosed(X_0:wkb):bit ",	"wkbIsClosed;",	""	]
[ "geom",	"IsEmpty",	"command geom.IsEmpty(X_0:wkb):bit ",	"wkbIsEmpty;",	""	]
[ "geom",	"IsRing",	"command geom.IsRing(X_0:wkb):bit ",	"wkbIsRing;",	""	]
[ "geom",	"IsSimple",	"command geom.IsSimple(X_0:wkb):bit ",	"wkbIsSimple;",	""	]
[ "geom",	"IsValid",	"command geom.IsValid(X_0:wkb):bit ",	"wkbIsValid;",	""	]
[ "geom",	"IsValidDetail",	"command geom.IsValidDetail(X_0:wkb):str ",	"wkbIsValidDetail;",	""	]
[ "geom",	"IsValidReason",	"command geom.IsValidReason(X_0:wkb):str ",	"wkbIsValidReason;",	""	]
[ "geom",	"Length",	"command geom.Length(X_0:wkb):dbl ",	"wkbLength;",	""	]
[ "geom",	"LineFromText",	"function geom.LineFromText(wkt:str):wkb;",	"",	""	]
[ "geom",	"LineFromText",	"function geom.LineFromText(wkt:str, srid:int):wkb;",	"",	""	]
[ "geom",	"MLineFromText",	"function geom.MLineFromText(wkt:str):wkb;",	"",	""	]
[ "geom",	"MLineFromText",	"function geom.MLineFromText(wkt:str, srid:int):wkb;",	"",	""	]
[ "geom",	"MLineStringToPolygon",	"command geom.MLineStringToPolygon(X_0:str, X_1:int, X_2:int):wkb ",	"wkbMLineStringToPolygon;",	""	]
[ "geom",	"MPointFromText",	"function geom.MPointFromText(wkt:str):wkb;",	"",	""	]
[ "geom",	"MPointFromText",	"function geom.MPointFromText(wkt:str, srid:int):wkb;",	"",	""	]
[ "geom",	"MPolyFromText",	"function geom.MPolyFromText(wkt:str):wkb;",	"",	""	]
[ "geom",	"MPolyFromText",	"function geom.MPolyFromText(wkt:str, srid:int):wkb;",	"",	""	]
[ "geom",	"MakeBox2D",	"command geom.MakeBox2D(X_0:wkb, X_1:wkb):mbr ",	"wkbBox2D;",	""	]
[ "geom",	"MakeEnvelope",	"function geom.MakeEnvelope(xmin:dbl, ymin:dbl, xmax:dbl, ymax:dbl):wkb;",	"",	""	]
[ "geom",	"MakeEnvelope",	"function geom.MakeEnvelope(xmin:dbl, ymin:dbl, xmax:dbl, ymax:dbl, srid:int):wkb;",	"",	""	]
[ "geom",	"MakeLine",	"command geom.MakeLine(X_0:wkb, X_1:wkb):wkb ",	"wkbMakeLine;",	""	]
[ "geom",	"MakeLine",	"command geom.MakeLine(X_0:bat[:wkb]):wkb ",	"wkbMakeLineAggr;",	""	]
[ "geom",	"MakePoint",	"function geom.MakePoint(x:dbl, y:dbl):wkb;",	"",	""	]
[ "geom",	"MakePoint",	"function geom.MakePoint(x:dbl, y:dbl, z:dbl):wkb;",	"",	""	]
[ "geom",	"MakePoint",	"function geom.MakePoint(x:dbl, y:dbl, z:dbl, m:dbl):wkb;",	"",	""	]
[ "geom",	"MakePointM",	"function geom.MakePointM(x:dbl, y:dbl, m:dbl):wkb;",	"",	""	]
[ "geom",	"MakePointXYZM",	"command geom.MakePointXYZM(X_0:dbl, X_1:dbl, X_2:dbl, X_3:dbl, X_4:int):wkb ",	"wkbMakePoint;",	""	]
[ "geom",	"MakePolygon",	"function geom.MakePolygon(external:wkb):wkb;",	"",	""	]
[ "geom",	"MakePolygon",	"function geom.MakePolygon(external:wkb, srid:int):wkb;",	"",	""	]
[ "geom",	"NPoints",	"function geom.NPoints(w:wkb):int;",	"",	""	]
[ "geom",	"NRings",	"function geom.NRings(w:wkb):int;",	"",	""	]
[ "geom",	"NumGeometries",	"command geom.NumGeometries(X_0:wkb):int ",	"wkbNumGeometries;",	""	]
[ "geom",	"NumInteriorRings",	"function geom.NumInteriorRings(w:wkb):int;",	"",	""	]
[ "geom",	"NumPoints",	"function geom.NumPoints(w:wkb):int;",	"",	""	]
[ "geom",	"NumRings",	"command geom.NumRings(X_0:wkb, X_1:int):int ",	"wkbNumRings;",	""	]
[ "geom",	"Overlaps",	"command geom.Overlaps(X_0:wkb, X_1:wkb):bit ",	"wkbOverlaps;",	""	]
[ "geom",	"PointFromText",	"function geom.PointFromText(wkt:str):wkb;",	"",	""	]
[ "geom",	"PointFromText",	"function geom.PointFromText(wkt:str, srid:int):wkb;",	"",	""	]
[ "geom",	"PointN",	"command geom.PointN(X_0:wkb, X_1:int):wkb ",	"wkbPointN;",	""	]
[ "geom",	"PointOnSurface",	"command geom.PointOnSurface(X_0:wkb):wkb ",	"wkbPointOnSurface;",	""	]
[ "geom",	"PointsNum",	"command geom.PointsNum(X_0:wkb, X_1:int):int ",	"wkbNumPoints;",	""	]
[ "geom",	"Polygon",	"command geom.Polygon(X_0:wkb, X_1:bat[:wkb], X_2:int):wkb ",	"wkbMakePolygon;",	""	]
[ "geom",	"PolygonFromText",	"function geom.PolygonFromText(wkt:str):wkb;",	"",	""	]
[ "geom",	"PolygonFromText",	"function geom.PolygonFromText(wkt:str, srid:int):wkb;",	"",	""	]
[ "geom",	"Relate",	"command geom.Relate(X_0:wkb, X_1:wkb, X_2:str):bit ",	"wkbRelate;",	""	]
[ "geom",	"Segmentize",	"command geom.Segmentize(X_0:wkb, X_1:dbl):wkb ",	"wkbSegmentize;",	""	]
[ "geom",	"StartPoint",	"command geom.StartPoint(X_0:wkb):wkb ",	"wkbStartPoint;",	""	]
[ "geom",	"SymDifference",	"command geom.SymDifference(X_0:wkb, X_1:wkb):wkb ",	"wkbSymDifference;",	""	]
[ "geom",	"ToText",	"command geom.ToText(X_0:wkb, X_1:int):str ",	"wkbAsText;",	""	]
[ "geom",	"Touches",	"command geom.Touches(X_0:wkb, X_1:wkb):bit ",	"wkbTouches;",	""	]
[ "geom",	"Transform",	"command geom.Transform(X_0:wkb, X_1:int, X_2:int, X_3:str, X_4:str):wkb ",	"wkbTransform;",	""	]
[ "geom",	"Translate",	"function geom.Translate(g:wkb, dx:dbl, dy:dbl):wkb;",	"",	""	]
[ "geom",	"Translate",	"function geom.Translate(g:wkb, dx:dbl, dy:dbl, dz:dbl):wkb;",	"",	""	]
[ "geom",	"Translate3D",	"command geom.Translate3D(X_0:wkb, X_1:dbl, X_2:dbl, X_3:dbl):wkb ",	"wkbTranslate;",	""	]
[ "geom",	"Union",	"command geom.Union(X_0:wkb, X_1:wkb):wkb ",	"wkbUnion;",	""	]
[ "geom",	"Union",	"command geom.Union(X_0:bat[:wkb]):wkb ",	"wkbUnionAggr;",	""	]
[ "geom",	"Within",	"command geom.Within(X_0:wkb, X_1:wkb):bit ",	"wkbWithin;",	""	]
[ "geom",	"X",	"function geom.X(w:wkb):dbl;",	"",	""	]
[ "geom",	"XMaxFromMBR",	"function geom.XMaxFromMBR(b:mbr):dbl;",	"",	""	]
[ "geom",	"XMaxFromWKB",	"function geom.XMaxFromWKB(g:wkb):dbl;",	"",	""	]
[ "geom",	"XMinFromMBR",	"function geom.XMinFromMBR(b:mbr):dbl;",	"",	""	]
[ "geom",	"XMinFromWKB",	"function geom.XMinFromWKB(g:wkb):dbl;",	"",	""	]
[ "geom",	"Y",	"function geom.Y(w:wkb):dbl;",	"",	""	]
[ "geom",	"YMaxFromMBR",	"function geom.YMaxFromMBR(b:mbr):dbl;",	"",	""	]
[ "geom",	"YMaxFromWKB",	"function geom.YMaxFromWKB(g:wkb):dbl;",	"",	""	]
[ "geom",	"YMinFromMBR",	"function geom.YMinFromMBR(b:mbr):dbl;",	"",	""	]
[ "geom",	"YMinFromWKB",	"function geom.YMinFromWKB(g:wkb):dbl;",	"",	""	]
[ "geom",	"Z",	"function geom.Z(w:wkb):dbl;",	"",	""	]
[ "geom",	"coordinateFromMBR",	"command geom.coordinateFromMBR(X_0:mbr, X_1:int):dbl ",	"wkbCoordinateFromMBR;",	""	]
[ "geom",	"coordinateFromWKB",	"command geom.coordinateFromWKB(X_0:wkb, X_1:int):dbl ",	"wkbCoordinateFromWKB;",	""	]
[ "geom",	"epilogue",	"command geom.epilogue():void ",	"geom_epilogue;",	""	]
[ "geom",	"getSRID",	"command geom.getSRID(X_0:wkb):int ",	"wkbGetSRID;",	""	]
[ "geom",	"getType",	"command geom.getType(X_0:int, X_1:int):str ",	"geoGetType;",	""	]
[ "geom",	"hasM",	"command geom.hasM(X_0:int):int ",	"geoHasM;",	""	]
[ "geom",	"hasZ",	"command geom.hasZ(X_0:int):int ",	"geoHasZ;",	""	]
[ "geom",	"mbr",	"command geom.mbr(X_0:wkb):mbr ",	"wkbMBR;",	""	]
[ "geom",	"mbrAbove",	"command geom.mbrAbove(X_0:mbr, X_1:mbr):bit ",	"mbrAbove;",	""	]
[ "geom",	"mbrAbove",	"command geom.mbrAbove(X_0:wkb, X_1:wkb):bit ",	"mbrAbove_wkb;",	""	]
[ "geom",	"mbrBelow",	"command geom.mbrBelow(X_0:mbr, X_1:mbr):bit ",	"mbrBelow;",	""	]
[ "geom",	"mbrBelow",	"command geom.mbrBelow(X_0:wkb, X_1:wkb):bit ",	"mbrBelow_wkb;",	""	]
[ "geom",	"mbrContained",	"command geom.mbrContained(X_0:mbr, X_1:mbr):bit ",	"mbrContained;",	""	]
[ "geom",	"mbrContained",	"command geom.mbrContained(X_0:wkb, X_1:wkb):bit ",	"mbrContained_wkb;",	""	]
[ "geom",	"mbrContains",	"command geom.mbrContains(X_0:mbr, X_1:mbr):bit ",	"mbrContains;",	""	]
[ "geom",	"mbrContains",	"command geom.mbrContains(X_0:wkb, X_1:wkb):bit ",	"mbrContains_wkb;",	""	]
[ "geom",	"mbrDistance",	"command geom.mbrDistance(X_0:mbr, X_1:mbr):dbl ",	"mbrDistance;",	""	]
[ "geom",	"mbrDistance",	"command geom.mbrDistance(X_0:wkb, X_1:wkb):dbl ",	"mbrDistance_wkb;",	""	]
[ "geom",	"mbrEqual",	"command geom.mbrEqual(X_0:mbr, X_1:mbr):bit ",	"mbrEqual;",	""	]
[ "geom",	"mbrEqual",	"command geom.mbrEqual(X_0:wkb, X_1:wkb):bit ",	"mbrEqual_wkb;",	""	]
[ "geom",	"mbrLeft",	"command geom.mbrLeft(X_0:mbr, X_1:mbr):bit ",	"mbrLeft;",	""	]
[ "geom",	"mbrLeft",	"command geom.mbrLeft(X_0:wkb, X_1:wkb):bit ",	"mbrLeft_wkb;",	""	]
[ "geom",	"mbrOverlapOrAbove",	"command geom.mbrOverlapOrAbove(X_0:mbr, X_1:mbr):bit ",	"mbrOverlapOrAbove;",	""	]
[ "geom",	"mbrOverlapOrAbove",	"command geom.mbrOverlapOrAbove(X_0:wkb, X_1:wkb):bit ",	"mbrOverlapOrAbove_wkb;",	""	]
[ "geom",	"mbrOverlapOrBelow",	"command geom.mbrOverlapOrBelow(X_0:mbr, X_1:mbr):bit ",	"mbrOverlapOrBelow;",	""	]
[ "geom",	"mbrOverlapOrBelow",	"command geom.mbrOverlapOrBelow(X_0:wkb, X_1:wkb):bit ",	"mbrOverlapOrBelow_wkb;",	""	]
[ "geom",	"mbrOverlapOrLeft",	"command geom.mbrOverlapOrLeft(X_0:mbr, X_1:mbr):bit ",	"mbrOverlapOrLeft;",	""	]
[ "geom",	"mbrOverlapOrLeft",	"command geom.mbrOverlapOrLeft(X_0:wkb, X_1:wkb):bit ",	"mbrOverlapOrLeft_wkb;",	""	]
[ "geom",	"mbrOverlapOrRight",	"command geom.mbrOverlapOrRight(X_0:mbr, X_1:mbr):bit ",	"mbrOverlapOrRight;",	""	]
[ "geom",	"mbrOverlapOrRight",	"command geom.mbrOverlapOrRight(X_0:wkb, X_1:wkb):bit ",	"mbrOverlapOrRight_wkb;",	""	]
[ "geom",	"mbrOverlaps",	"command geom.mbrOverlaps(X_0:mbr, X_1:mbr):bit ",	"mbrOverlaps;",	""	]
[ "geom",	"mbrOverlaps",	"command geom.mbrOverlaps(X_0:wkb, X_1:wkb):bit ",	"mbrOverlaps_wkb;",	""	]
[ "geom",	"mbrRight",	"command geom.mbrRight(X_0:mbr, X_1:mbr):bit ",	"mbrRight;",	""	]
[ "geom",	"mbrRight",	"command geom.mbrRight(X_0:wkb, X_1:wkb):bit ",	"mbrRight_wkb;",	""	]
[ "geom",	"prelude",	"command geom.prelude():void ",	"geom_prelude;",	""	]
[ "geom",	"setSRID",	"command geom.setSRID(X_0:wkb, X_1:int):wkb ",	"wkbSetSRID;",	""	]
[ "group",	"group",	"command group.group(X_0:bat[:any_1]):bat[:oid] ",	"GRPgroup11;",	""	]
[ "group",	"group",	"command group.group(X_0:bat[:any_1]) (X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:lng]) ",	"GRPgroup1;",	""	]
[ "group",	"group",	"command group.group(X_0:bat[:any_1], X_1:bat[:oid]):bat[:oid] ",	"GRPgroup21;",	""	]
[ "group",	"group",	"command group.group(X_0:bat[:any_1], X_1:bat[:oid]) (X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:lng]) ",	"GRPgroup2;",	""	]
[ "group",	"group",	"command group.group(X_0:bat[:any_1]) (X_1:bat[:oid], X_2:bat[:oid]) ",	"GRPgroup3;",	""	]
[ "group",	"group",	"command group.group(X_0:bat[:any_1], X_1:bat[:oid]) (X_2:bat[:oid], X_3:bat[:oid]) ",	"GRPgroup4;",	""	]
[ "group",	"groupdone",	"command group.groupdone(X_0:bat[:any_1]):bat[:oid] ",	"GRPgroup11;",	""	]
[ "group",	"groupdone",	"command group.groupdone(X_0:bat[:any_1]) (X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:lng]) ",	"GRPgroup1;",	""	]
[ "group",	"groupdone",	"command group.groupdone(X_0:bat[:any_1], X_1:bat[:oid]):bat[:oid] ",	"GRPgroup21;",	""	]
[ "group",	"groupdone",	"command group.groupdone(X_0:bat[:any_1], X_1:bat[:oid]) (X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:lng]) ",	"GRPgroup2;",	""	]
[ "group",	"groupdone",	"command group.groupdone(X_0:bat[:any_1]) (X_1:bat[:oid], X_2:bat[:oid]) ",	"GRPgroup3;",	""	]
[ "group",	"groupdone",	"command group.groupdone(X_0:bat[:any_1], X_1:bat[:oid]) (X_2:bat[:oid], X_3:bat[:oid]) ",	"GRPgroup4;",	""	]
[ "group",	"multicolumn",	"pattern group.multicolumn(X_0:bat[:any]...) (X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:any]) ",	"GROUPmulticolumngroup;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid]):bat[:oid] ",	"GRPsubgroup21;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid]) (X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:lng]) ",	"GRPsubgroup2;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid]):bat[:oid] ",	"GRPsubgroup31;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid]) (X_3:bat[:oid], X_4:bat[:oid], X_5:bat[:lng]) ",	"GRPsubgroup3;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:lng]):bat[:oid] ",	"GRPsubgroup41;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:lng]) (X_4:bat[:oid], X_5:bat[:oid], X_6:bat[:lng]) ",	"GRPsubgroup4;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:lng]):bat[:oid] ",	"GRPsubgroup51;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:lng]) (X_5:bat[:oid], X_6:bat[:oid], X_7:bat[:lng]) ",	"GRPsubgroup5;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid]) (X_2:bat[:oid], X_3:bat[:oid]) ",	"GRPsubgroup6;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid]) (X_3:bat[:oid], X_4:bat[:oid]) ",	"GRPsubgroup7;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:lng]) (X_4:bat[:oid], X_5:bat[:oid]) ",	"GRPsubgroup8;",	""	]
[ "group",	"subgroup",	"command group.subgroup(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:lng]) (X_5:bat[:oid], X_6:bat[:oid]) ",	"GRPsubgroup9;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid]):bat[:oid] ",	"GRPsubgroup21;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid]) (X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:lng]) ",	"GRPsubgroup2;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid]):bat[:oid] ",	"GRPsubgroup31;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid]) (X_3:bat[:oid], X_4:bat[:oid], X_5:bat[:lng]) ",	"GRPsubgroup3;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:lng]):bat[:oid] ",	"GRPsubgroup41;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:lng]) (X_4:bat[:oid], X_5:bat[:oid], X_6:bat[:lng]) ",	"GRPsubgroup4;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:lng]):bat[:oid] ",	"GRPsubgroup51;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:lng]) (X_5:bat[:oid], X_6:bat[:oid], X_7:bat[:lng]) ",	"GRPsubgroup5;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid]) (X_2:bat[:oid], X_3:bat[:oid]) ",	"GRPsubgroup6;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid]) (X_3:bat[:oid], X_4:bat[:oid]) ",	"GRPsubgroup7;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:lng]) (X_4:bat[:oid], X_5:bat[:oid]) ",	"GRPsubgroup8;",	""	]
[ "group",	"subgroupdone",	"command group.subgroupdone(X_0:bat[:any_1], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid], X_4:bat[:lng]) (X_5:bat[:oid], X_6:bat[:oid]) ",	"GRPsubgroup9;",	""	]
[ "identifier",	"identifier",	"command identifier.identifier(X_0:str):identifier ",	"IDentifier;",	""	]
[ "identifier",	"prelude",	"command identifier.prelude():void ",	"IDprelude;",	""	]
[ "inet",	"!=",	"command inet.!=(X_0:inet, X_1:inet):bit ",	"INET_comp_NEQ;",	""	]
[ "inet",	"<",	"command inet.<(X_0:inet, X_1:inet):bit ",	"INET_comp_LT;",	""	]
[ "inet",	"<<",	"command inet.<<(X_0:inet, X_1:inet):bit ",	"INET_comp_CW;",	""	]
[ "inet",	"<<=",	"command inet.<<=(X_0:inet, X_1:inet):bit ",	"INET_comp_CWE;",	""	]
[ "inet",	"<=",	"command inet.<=(X_0:inet, X_1:inet):bit ",	"INET_comp_LE;",	""	]
[ "inet",	"=",	"command inet.=(X_0:inet, X_1:inet):bit ",	"INET_comp_EQ;",	""	]
[ "inet",	">",	"command inet.>(X_0:inet, X_1:inet):bit ",	"INET_comp_GT;",	""	]
[ "inet",	">=",	"command inet.>=(X_0:inet, X_1:inet):bit ",	"INET_comp_GE;",	""	]
[ "inet",	">>",	"command inet.>>(X_0:inet, X_1:inet):bit ",	"INET_comp_CS;",	""	]
[ "inet",	">>=",	"command inet.>>=(X_0:inet, X_1:inet):bit ",	"INET_comp_CSE;",	""	]
[ "inet",	"abbrev",	"command inet.abbrev(X_0:inet):str ",	"INETabbrev;",	""	]
[ "inet",	"broadcast",	"command inet.broadcast(X_0:inet):inet ",	"INETbroadcast;",	""	]
[ "inet",	"host",	"command inet.host(X_0:inet):str ",	"INEThost;",	""	]
[ "inet",	"hostmask",	"command inet.hostmask(X_0:inet):inet ",	"INEThostmask;",	""	]
[ "inet",	"isnil",	"command inet.isnil(X_0:inet):bit ",	"INET_isnil;",	""	]
[ "inet",	"masklen",	"command inet.masklen(X_0:inet):int ",	"INETmasklen;",	""	]
[ "inet",	"netmask",	"command inet.netmask(X_0:inet):inet ",	"INETnetmask;",	""	]
[ "inet",	"network",	"command inet.network(X_0:inet):inet ",	"INETnetwork;",	""	]
[ "inet",	"new",	"command inet.new(X_0:str):inet ",	"INETnew;",	""	]
[ "inet",	"setmasklen",	"command inet.setmasklen(X_0:inet, X_1:int):inet ",	"INETsetmasklen;",	""	]
[ "inet",	"text",	"command inet.text(X_0:inet):str ",	"INETtext;",	""	]
[ "inspect",	"equalType",	"pattern inspect.equalType(X_0:any, X_1:any):bit ",	"INSPECTequalType;",	""	]
[ "inspect",	"getAtomNames",	"command inspect.getAtomNames():bat[:str] ",	"INSPECTatom_names;",	""	]
[ "inspect",	"getAtomSizes",	"command inspect.getAtomSizes():bat[:int] ",	"INSPECTatom_sizes;",	""	]
[ "inspect",	"getAtomSuper",	"command inspect.getAtomSuper():bat[:str] ",	"INSPECTatom_sup_names;",	""	]
[ "inspect",	"getComment",	"pattern inspect.getComment(X_0:str, X_1:str):bat[:str] ",	"INSPECTgetComment;",	""	]
[ "inspect",	"getDefinition",	"pattern inspect.getDefinition(X_0:str, X_1:str):bat[:str] ",	"INSPECTgetDefinition;",	""	]
[ "inspect",	"getEnvironment",	"command inspect.getEnvironment() (X_0:bat[:str], X_1:bat[:str]) ",	"INSPECTgetEnvironment;",	""	]
[ "inspect",	"getEnvironment",	"command inspect.getEnvironment(X_0:str):str ",	"INSPECTgetEnvironmentKey;",	""	]
[ "inspect",	"getExistence",	"pattern inspect.getExistence(X_0:str, X_1:str):bit ",	"INSPECTgetExistence;",	""	]
[ "inspect",	"getFunction",	"pattern inspect.getFunction():bat[:str] ",	"INSPECTgetAllFunctions;",	""	]
[ "inspect",	"getKind",	"pattern inspect.getKind():bat[:str] ",	"INSPECTgetkind;",	""	]
[ "inspect",	"getModule",	"pattern inspect.getModule():bat[:str] ",	"INSPECTgetAllModules;",	""	]
[ "inspect",	"getSignature",	"pattern inspect.getSignature(X_0:str, X_1:str):bat[:str] ",	"INSPECTgetSignature;",	""	]
[ "inspect",	"getSignatures",	"pattern inspect.getSignatures():bat[:str] ",	"INSPECTgetAllSignatures;",	""	]
[ "inspect",	"getSize",	"pattern inspect.getSize(X_0:str, X_1:str):lng ",	"INSPECTgetFunctionSize;",	""	]
[ "inspect",	"getSize",	"pattern inspect.getSize():lng ",	"INSPECTgetSize;",	""	]
[ "inspect",	"getSource",	"pattern inspect.getSource(X_0:str, X_1:str):str ",	"INSPECTgetSource;",	""	]
[ "inspect",	"getType",	"pattern inspect.getType(X_0:any_1):str ",	"INSPECTtypeName;",	""	]
[ "inspect",	"optimizer_stats",	"pattern inspect.optimizer_stats() (X_0:bat[:str], X_1:bat[:int], X_2:bat[:lng]) ",	"OPTstatistics;",	""	]
[ "io",	"export",	"command io.export(X_0:bat[:any_2], X_1:str):void ",	"IOexport;",	""	]
[ "io",	"import",	"command io.import(X_0:bat[:any_2], X_1:str):void ",	"IOimport;",	""	]
[ "io",	"print",	"pattern io.print(X_0:any_1):void ",	"IOprint_val;",	""	]
[ "io",	"print",	"pattern io.print(X_0:any_1, X_1:any...):void ",	"IOprint_val;",	""	]
[ "io",	"print",	"pattern io.print(X_0:bat[:any_1]):void ",	"IOprint_val;",	""	]
[ "io",	"print",	"pattern io.print(X_0:bat[:any]...):void ",	"IOtable;",	""	]
[ "io",	"printf",	"pattern io.printf(X_0:str):void ",	"IOprintf;",	""	]
[ "io",	"printf",	"pattern io.printf(X_0:str, X_1:any...):void ",	"IOprintf;",	""	]
[ "io",	"printf",	"pattern io.printf(X_0:streams, X_1:str):void ",	"IOprintfStream;",	""	]
[ "io",	"printf",	"pattern io.printf(X_0:streams, X_1:str, X_2:any...):void ",	"IOprintfStream;",	""	]
[ "io",	"setmallocsuccesscount",	"command io.setmallocsuccesscount(X_0:lng):void ",	"IOsetmallocsuccesscount;",	""	]
[ "io",	"stdin",	"pattern io.stdin():bstream ",	"io_stdin;",	""	]
[ "io",	"stdout",	"pattern io.stdout():streams ",	"io_stdout;",	""	]
[ "iterator",	"new",	"pattern iterator.new(X_0:bat[:any_2]) (X_1:oid, X_2:any_2) ",	"ITRbunIterator;",	""	]
[ "iterator",	"new",	"command iterator.new(X_0:bat[:any_2], X_1:lng) (X_2:lng, X_3:bat[:any_2]) ",	"ITRnewChunk;",	""	]
[ "iterator",	"next",	"pattern iterator.next(X_0:bat[:any_2]) (X_1:oid, X_2:any_2) ",	"ITRbunNext;",	""	]
[ "iterator",	"next",	"command iterator.next(X_0:bat[:any_2], X_1:lng) (X_2:lng, X_3:bat[:any_2]) ",	"ITRnextChunk;",	""	]
[ "iterator",	"next",	"command iterator.next(X_0:dbl, X_1:dbl):dbl ",	"ITRnext_dbl;",	""	]
[ "iterator",	"next",	"command iterator.next(X_0:flt, X_1:flt):flt ",	"ITRnext_flt;",	""	]
[ "iterator",	"next",	"command iterator.next(X_0:int, X_1:int):int ",	"ITRnext_int;",	""	]
[ "iterator",	"next",	"command iterator.next(X_0:lng, X_1:lng):lng ",	"ITRnext_lng;",	""	]
[ "iterator",	"next",	"command iterator.next(X_0:oid, X_1:oid):oid ",	"ITRnext_oid;",	""	]
[ "iterator",	"next",	"command iterator.next(X_0:sht, X_1:sht):sht ",	"ITRnext_sht;",	""	]
[ "json",	"dump",	"pattern json.dump(X_0:json):bat[:str] ",	"JSONdump;",	""	]
[ "json",	"filter",	"command json.filter(X_0:json, X_1:str):json ",	"JSONfilter;",	""	]
[ "json",	"filter",	"command json.filter(X_0:json, X_1:bte, X_2:str):json ",	"JSONfilterArrayDefault_bte;",	""	]
[ "json",	"filter",	"command json.filter(X_0:json, X_1:int, X_2:str):json ",	"JSONfilterArrayDefault_int;",	""	]
[ "json",	"filter",	"command json.filter(X_0:json, X_1:lng, X_2:str):json ",	"JSONfilterArrayDefault_lng;",	""	]
[ "json",	"filter",	"command json.filter(X_0:json, X_1:sht, X_2:str):json ",	"JSONfilterArrayDefault_sht;",	""	]
[ "json",	"filter",	"command json.filter(X_0:json, X_1:bte):json ",	"JSONfilterArray_bte;",	""	]
[ "json",	"filter",	"command json.filter(X_0:json, X_1:int):json ",	"JSONfilterArray_int;",	""	]
[ "json",	"filter",	"command json.filter(X_0:json, X_1:lng):json ",	"JSONfilterArray_lng;",	""	]
[ "json",	"filter",	"command json.filter(X_0:json, X_1:sht):json ",	"JSONfilterArray_sht;",	""	]
[ "json",	"fold",	"pattern json.fold(X_0:bat[:any]):json ",	"JSONfold;",	""	]
[ "json",	"fold",	"pattern json.fold(X_0:bat[:oid], X_1:bat[:str], X_2:bat[:any]):json ",	"JSONfold;",	""	]
[ "json",	"fold",	"pattern json.fold(X_0:bat[:str], X_1:bat[:any]):json ",	"JSONfold;",	""	]
[ "json",	"integer",	"command json.integer(X_0:json):lng ",	"JSONjson2integer;",	""	]
[ "json",	"isarray",	"command json.isarray(X_0:json):bit ",	"JSONisarray;",	""	]
[ "json",	"isobject",	"command json.isobject(X_0:json):bit ",	"JSONisobject;",	""	]
[ "json",	"isvalid",	"command json.isvalid(X_0:str):bit ",	"JSONisvalid;",	""	]
[ "json",	"keyarray",	"command json.keyarray(X_0:json):json ",	"JSONkeyArray;",	""	]
[ "json",	"keys",	"command json.keys(X_0:json):bat[:str] ",	"JSONkeyTable;",	""	]
[ "json",	"length",	"command json.length(X_0:json):int ",	"JSONlength;",	""	]
[ "json",	"new",	"command json.new(X_0:str):json ",	"JSONstr2json;",	""	]
[ "json",	"number",	"command json.number(X_0:json):dbl ",	"JSONjson2number;",	""	]
[ "json",	"prelude",	"command json.prelude():void ",	"JSONprelude;",	""	]
[ "json",	"renderarray",	"pattern json.renderarray(X_0:any...):json ",	"JSONrenderarray;",	""	]
[ "json",	"renderobject",	"pattern json.renderobject(X_0:any...):json ",	"JSONrenderobject;",	""	]
[ "json",	"resultSet",	"command json.resultSet(X_0:bat[:uuid], X_1:bat[:lng], X_2:bat[:json]):json ",	"JSONresultSet;",	""	]
[ "json",	"str",	"command json.str(X_0:json):str ",	"JSONjson2str;",	""	]
[ "json",	"text",	"command json.text(X_0:json):str ",	"JSONjson2text;",	""	]
[ "json",	"text",	"command json.text(X_0:json, X_1:str):str ",	"JSONjson2textSeparator;",	""	]
[ "json",	"unfold",	"pattern json.unfold(X_0:json) (X_1:bat[:oid], X_2:bat[:str], X_3:bat[:json]) ",	"JSONunfold;",	""	]
[ "json",	"unfold",	"pattern json.unfold(X_0:json) (X_1:bat[:str], X_2:bat[:json]) ",	"JSONunfold;",	""	]
[ "json",	"valuearray",	"command json.valuearray(X_0:json):json ",	"JSONvalueArray;",	""	]
[ "json",	"values",	"command json.values(X_0:json):bat[:json] ",	"JSONvalueTable;",	""	]
[ "language",	"assert",	"unsafe command language.assert(X_0:bit, X_1:str):void ",	"MALassertBit;",	""	]
[ "language",	"assert",	"unsafe command language.assert(X_0:int, X_1:str):void ",	"MALassertInt;",	""	]
[ "language",	"assert",	"unsafe command language.assert(X_0:lng, X_1:str):void ",	"MALassertLng;",	""	]
[ "language",	"assert",	"unsafe command language.assert(X_0:oid, X_1:str):void ",	"MALassertOid;",	""	]
[ "language",	"assert",	"unsafe command language.assert(X_0:sht, X_1:str):void ",	"MALassertSht;",	""	]
[ "language",	"assert",	"unsafe command language.assert(X_0:str, X_1:str):void ",	"MALassertStr;",	""	]
[ "language",	"assert",	"unsafe pattern language.assert(X_0:any_1, X_1:str, X_2:str, X_3:any_2):void ",	"MALassertTriple;",	""	]
[ "language",	"block",	"pattern language.block(X_0:int, X_1:any...):int ",	"deblockdataflow;",	""	]
[ "language",	"call",	"pattern language.call(X_0:bat[:str]):void ",	"CMDcallBAT;",	""	]
[ "language",	"call",	"pattern language.call(X_0:str, X_1:str):void ",	"CMDcallFunction;",	""	]
[ "language",	"call",	"pattern language.call(X_0:str):void ",	"CMDcallString;",	""	]
[ "language",	"dataflow",	"pattern language.dataflow():bit ",	"MALstartDataflow;",	""	]
[ "language",	"pass",	"pattern language.pass(X_0:any_1):void ",	"MALpass;",	""	]
[ "language",	"raise",	"unsafe command language.raise(X_0:str):str ",	"CMDraise;",	""	]
[ "language",	"register",	"pattern language.register(X_0:str, X_1:str, X_2:str, X_3:str):void ",	"CMDregisterFunction;",	""	]
[ "language",	"sink",	"pattern language.sink(X_0:any...):void ",	"MALgarbagesink;",	""	]
[ "language",	"source",	"pattern language.source(X_0:str):void ",	"CMDevalFile;",	""	]
[ "logging",	"compinfo",	"pattern logging.compinfo() (X_0:bat[:int], X_1:bat[:str], X_2:bat[:str]) ",	"TRACERcomp_info;",	""	]
[ "logging",	"flush",	"command logging.flush():void ",	"TRACERflush_buffer;",	""	]
[ "logging",	"resetadapter",	"command logging.resetadapter():void ",	"TRACERreset_adapter;",	""	]
[ "logging",	"resetcomplevel",	"command logging.resetcomplevel(X_0:str):void ",	"TRACERreset_component_level;",	""	]
[ "logging",	"resetflushlevel",	"command logging.resetflushlevel():void ",	"TRACERreset_flush_level;",	""	]
[ "logging",	"resetlayerlevel",	"command logging.resetlayerlevel(X_0:str):void ",	"TRACERreset_layer_level;",	""	]
[ "logging",	"setadapter",	"command logging.setadapter(X_0:str):void ",	"TRACERset_adapter;",	""	]
[ "logging",	"setcomplevel",	"command logging.setcomplevel(X_0:str, X_1:str):void ",	"TRACERset_component_level;",	""	]
[ "logging",	"setflushlevel",	"command logging.setflushlevel(X_0:str):void ",	"TRACERset_flush_level;",	""	]
[ "logging",	"setlayerlevel",	"command logging.setlayerlevel(X_0:str, X_1:str):void ",	"TRACERset_layer_level;",	""	]
[ "mal",	"manifold",	"pattern mal.manifold(X_0:str, X_1:str, X_2:any...):bat[:any] ",	"MANIFOLDevaluate;",	""	]
[ "mal",	"multiplex",	"pattern mal.multiplex(X_0:str, X_1:str, X_2:any...):any... ",	"MANIFOLDremapMultiplex;",	""	]
[ "manual",	"functions",	"pattern manual.functions() (X_0:bat[:str], X_1:bat[:str], X_2:bat[:str], X_3:bat[:str], X_4:bat[:str]) ",	"MANUALcreateOverview;",	""	]
[ "mapi",	"bind",	"pattern mapi.bind(X_0:int, X_1:str):bat[:any_2] ",	"SERVERbindBAT;",	""	]
[ "mapi",	"bind",	"pattern mapi.bind(X_0:int, X_1:str, X_2:str, X_3:int):bat[:any_2] ",	"SERVERbindBAT;",	""	]
[ "mapi",	"bind",	"pattern mapi.bind(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int):bat[:any_2] ",	"SERVERbindBAT;",	""	]
[ "mapi",	"connect",	"pattern mapi.connect(X_0:str, X_1:int, X_2:str, X_3:str, X_4:str):int ",	"SERVERconnect;",	""	]
[ "mapi",	"destroy",	"command mapi.destroy(X_0:int):void ",	"SERVERdestroy;",	""	]
[ "mapi",	"disconnect",	"command mapi.disconnect(X_0:int):void ",	"SERVERdisconnect;",	""	]
[ "mapi",	"disconnect",	"command mapi.disconnect():int ",	"SERVERdisconnectALL;",	""	]
[ "mapi",	"disconnect",	"command mapi.disconnect(X_0:str):int ",	"SERVERdisconnectWithAlias;",	""	]
[ "mapi",	"error",	"command mapi.error(X_0:int):int ",	"SERVERerror;",	""	]
[ "mapi",	"explain",	"command mapi.explain(X_0:int):str ",	"SERVERexplain;",	""	]
[ "mapi",	"fetch_all_rows",	"command mapi.fetch_all_rows(X_0:int):lng ",	"SERVERfetch_all_rows;",	""	]
[ "mapi",	"fetch_field",	"command mapi.fetch_field(X_0:int, X_1:int):bte ",	"SERVERfetch_field_bte;",	""	]
[ "mapi",	"fetch_field",	"command mapi.fetch_field(X_0:int, X_1:int):int ",	"SERVERfetch_field_int;",	""	]
[ "mapi",	"fetch_field",	"command mapi.fetch_field(X_0:int, X_1:int):lng ",	"SERVERfetch_field_lng;",	""	]
[ "mapi",	"fetch_field",	"command mapi.fetch_field(X_0:int, X_1:int):oid ",	"SERVERfetch_field_oid;",	""	]
[ "mapi",	"fetch_field",	"command mapi.fetch_field(X_0:int, X_1:int):sht ",	"SERVERfetch_field_sht;",	""	]
[ "mapi",	"fetch_field",	"command mapi.fetch_field(X_0:int, X_1:int):str ",	"SERVERfetch_field_str;",	""	]
[ "mapi",	"fetch_field",	"command mapi.fetch_field(X_0:int, X_1:int):void ",	"SERVERfetch_field_void;",	""	]
[ "mapi",	"fetch_field_array",	"command mapi.fetch_field_array(X_0:int):bat[:str] ",	"SERVERfetch_field_bat;",	""	]
[ "mapi",	"fetch_line",	"command mapi.fetch_line(X_0:int):str ",	"SERVERfetch_line;",	""	]
[ "mapi",	"fetch_reset",	"command mapi.fetch_reset(X_0:int):int ",	"SERVERfetch_reset;",	""	]
[ "mapi",	"fetch_row",	"command mapi.fetch_row(X_0:int):int ",	"SERVERfetch_row;",	""	]
[ "mapi",	"finish",	"command mapi.finish(X_0:int):int ",	"SERVERfinish;",	""	]
[ "mapi",	"getError",	"command mapi.getError(X_0:int):str ",	"SERVERgetError;",	""	]
[ "mapi",	"get_field_count",	"command mapi.get_field_count(X_0:int):int ",	"SERVERget_field_count;",	""	]
[ "mapi",	"get_row_count",	"command mapi.get_row_count(X_0:int):lng ",	"SERVERget_row_count;",	""	]
[ "mapi",	"listen",	"command mapi.listen():int ",	"SERVERlisten_default;",	""	]
[ "mapi",	"listen",	"command mapi.listen(X_0:int):int ",	"SERVERlisten_port;",	""	]
[ "mapi",	"listen",	"command mapi.listen(X_0:str):int ",	"SERVERlisten_usock;",	""	]
[ "mapi",	"lookup",	"command mapi.lookup(X_0:str):int ",	"SERVERlookup;",	""	]
[ "mapi",	"malclient",	"command mapi.malclient(X_0:streams, X_1:streams):void ",	"SERVERclient;",	""	]
[ "mapi",	"next_result",	"command mapi.next_result(X_0:int):int ",	"SERVERnext_result;",	""	]
[ "mapi",	"ping",	"command mapi.ping(X_0:int):int ",	"SERVERping;",	""	]
[ "mapi",	"prelude",	"command mapi.prelude():int ",	"SERVERlisten_default;",	""	]
[ "mapi",	"prepare",	"command mapi.prepare(X_0:int, X_1:str):int ",	"SERVERprepare;",	""	]
[ "mapi",	"put",	"pattern mapi.put(X_0:int, X_1:str, X_2:any_1):void ",	"SERVERput;",	""	]
[ "mapi",	"put",	"pattern mapi.put(X_0:str, X_1:any_1):str ",	"SERVERputLocal;",	""	]
[ "mapi",	"query",	"command mapi.query(X_0:int, X_1:str):int ",	"SERVERquery;",	""	]
[ "mapi",	"query_array",	"pattern mapi.query_array(X_0:int, X_1:str, X_2:str...):int ",	"SERVERquery_array;",	""	]
[ "mapi",	"query_handle",	"command mapi.query_handle(X_0:int, X_1:str):int ",	"SERVERquery_handle;",	""	]
[ "mapi",	"reconnect",	"command mapi.reconnect(X_0:int):void ",	"SERVERreconnect;",	""	]
[ "mapi",	"reconnect",	"pattern mapi.reconnect(X_0:str, X_1:int, X_2:str, X_3:str, X_4:str, X_5:str):int ",	"SERVERreconnectAlias;",	""	]
[ "mapi",	"reconnect",	"pattern mapi.reconnect(X_0:str, X_1:int, X_2:str, X_3:str, X_4:str):int ",	"SERVERreconnectWithoutAlias;",	""	]
[ "mapi",	"resume",	"command mapi.resume():void ",	"SERVERresume;",	""	]
[ "mapi",	"rows_affected",	"command mapi.rows_affected(X_0:int):lng ",	"SERVERrows_affected;",	""	]
[ "mapi",	"rpc",	"pattern mapi.rpc(X_0:int, X_1:str):bat[:any_2] ",	"SERVERmapi_rpc_bat;",	""	]
[ "mapi",	"rpc",	"pattern mapi.rpc(X_0:int, X_1:str...):any ",	"SERVERmapi_rpc_single_row;",	""	]
[ "mapi",	"rpc",	"command mapi.rpc(X_0:int, X_1:str):int ",	"SERVERquery;",	""	]
[ "mapi",	"setAlias",	"command mapi.setAlias(X_0:int, X_1:str):void ",	"SERVERsetAlias;",	""	]
[ "mapi",	"stop",	"command mapi.stop():void ",	"SERVERstop;",	""	]
[ "mapi",	"suspend",	"command mapi.suspend():void ",	"SERVERsuspend;",	""	]
[ "mapi",	"trace",	"command mapi.trace(X_0:int, X_1:int):void ",	"SERVERtrace;",	""	]
[ "mask",	"mask",	"pattern mask.mask(X_0:bat[:oid]):bat[:msk] ",	"MSKmask;",	""	]
[ "mask",	"umask",	"pattern mask.umask(X_0:bat[:msk]):bat[:oid] ",	"MSKumask;",	""	]
[ "mat",	"new",	"pattern mat.new(X_0:bat[:any_2]...):bat[:any_2] ",	"MATpack;",	""	]
[ "mat",	"pack",	"pattern mat.pack(X_0:bat[:any_2]...):bat[:any_2] ",	"MATpack;",	""	]
[ "mat",	"pack",	"pattern mat.pack(X_0:any_2...):bat[:any_2] ",	"MATpackValues;",	""	]
[ "mat",	"packIncrement",	"pattern mat.packIncrement(X_0:bat[:any_2], X_1:bat[:any_2]):bat[:any_2] ",	"MATpackIncrement;",	""	]
[ "mat",	"packIncrement",	"pattern mat.packIncrement(X_0:bat[:any_2], X_1:int):bat[:any_2] ",	"MATpackIncrement;",	""	]
[ "mdb",	"List",	"pattern mdb.List(X_0:str, X_1:str):void ",	"MDBlist3Detail;",	""	]
[ "mdb",	"List",	"pattern mdb.List():void ",	"MDBlistDetail;",	""	]
[ "mdb",	"dump",	"pattern mdb.dump():void ",	"MDBdump;",	""	]
[ "mdb",	"getContext",	"command mdb.getContext(X_0:str):str ",	"MDBgetExceptionContext;",	""	]
[ "mdb",	"getDebug",	"pattern mdb.getDebug():int ",	"MDBgetDebug;",	""	]
[ "mdb",	"getDebugFlags",	"pattern mdb.getDebugFlags() (X_0:bat[:str], X_1:bat[:bit]) ",	"MDBgetDebugFlags;",	""	]
[ "mdb",	"getDefinition",	"pattern mdb.getDefinition():bat[:str] ",	"MDBgetDefinition;",	""	]
[ "mdb",	"getException",	"command mdb.getException(X_0:str):str ",	"MDBgetExceptionVariable;",	""	]
[ "mdb",	"getReason",	"command mdb.getReason(X_0:str):str ",	"MDBgetExceptionReason;",	""	]
[ "mdb",	"getStackDepth",	"pattern mdb.getStackDepth():int ",	"MDBStkDepth;",	""	]
[ "mdb",	"getStackFrame",	"pattern mdb.getStackFrame() (X_0:bat[:str], X_1:bat[:str]) ",	"MDBgetStackFrame;",	""	]
[ "mdb",	"getStackFrame",	"pattern mdb.getStackFrame(X_0:int) (X_1:bat[:str], X_2:bat[:str]) ",	"MDBgetStackFrameN;",	""	]
[ "mdb",	"getStackTrace",	"pattern mdb.getStackTrace() (X_0:bat[:int], X_1:bat[:str]) ",	"MDBStkTrace;",	""	]
[ "mdb",	"getVMsize",	"pattern mdb.getVMsize():lng ",	"MDBgetVMsize;",	""	]
[ "mdb",	"inspect",	"pattern mdb.inspect(X_0:str, X_1:str):void ",	"MDBinspect;",	""	]
[ "mdb",	"list",	"pattern mdb.list(X_0:str, X_1:str):void ",	"MDBlist3;",	""	]
[ "mdb",	"list",	"pattern mdb.list():void ",	"MDBlist;",	""	]
[ "mdb",	"listMapi",	"pattern mdb.listMapi():void ",	"MDBlistMapi;",	""	]
[ "mdb",	"modules",	"command mdb.modules():bat[:str] ",	"CMDmodules;",	""	]
[ "mdb",	"setCatch",	"pattern mdb.setCatch(X_0:bit):void ",	"MDBsetCatch;",	""	]
[ "mdb",	"setDebug",	"pattern mdb.setDebug(X_0:int):int ",	"MDBsetDebug;",	""	]
[ "mdb",	"setDebug",	"pattern mdb.setDebug(X_0:str):int ",	"MDBsetDebugStr;",	""	]
[ "mdb",	"setTrace",	"pattern mdb.setTrace(X_0:bit):void ",	"MDBsetTrace;",	""	]
[ "mdb",	"setTrace",	"pattern mdb.setTrace(X_0:str):void ",	"MDBsetVarTrace;",	""	]
[ "mdb",	"setVMsize",	"pattern mdb.setVMsize(X_0:lng):lng ",	"MDBsetVMsize;",	""	]
[ "mdb",	"start",	"pattern mdb.start():void ",	"MDBstart;",	""	]
[ "mdb",	"start",	"pattern mdb.start(X_0:int):void ",	"MDBstart;",	""	]
[ "mdb",	"start",	"pattern mdb.start(X_0:str, X_1:str):void ",	"MDBstartFactory;",	""	]
[ "mdb",	"stop",	"pattern mdb.stop():void ",	"MDBstop;",	""	]
[ "mdb",	"var",	"pattern mdb.var(X_0:str, X_1:str):void ",	"MDBvar3;",	""	]
[ "mdb",	"var",	"pattern mdb.var():void ",	"MDBvar;",	""	]
[ "mkey",	"bulk_rotate_xor_hash",	"command mkey.bulk_rotate_xor_hash(X_0:bat[:lng], X_1:int, X_2:bat[:any_1]):bat[:lng] ",	"MKEYbulk_rotate_xor_hash;",	""	]
[ "mkey",	"bulk_rotate_xor_hash",	"pattern mkey.bulk_rotate_xor_hash(X_0:bat[:lng], X_1:int, X_2:any):bat[:lng] ",	"MKEYbulkconst_rotate_xor_hash;",	""	]
[ "mkey",	"bulk_rotate_xor_hash",	"command mkey.bulk_rotate_xor_hash(X_0:lng, X_1:int, X_2:bat[:any_1]):bat[:lng] ",	"MKEYconstbulk_rotate_xor_hash;",	""	]
[ "mkey",	"bulk_rotate_xor_hash",	"pattern mkey.bulk_rotate_xor_hash(X_0:lng, X_1:int, X_2:any):lng ",	"MKEYrotate_xor_hash;",	""	]
[ "mkey",	"hash",	"pattern mkey.hash(X_0:any):lng ",	"MKEYhash;",	""	]
[ "mkey",	"hash",	"pattern mkey.hash(X_0:bit):lng ",	"MKEYhash;",	""	]
[ "mkey",	"hash",	"pattern mkey.hash(X_0:bte):lng ",	"MKEYhash;",	""	]
[ "mkey",	"hash",	"pattern mkey.hash(X_0:dbl):lng ",	"MKEYhash;",	""	]
[ "mkey",	"hash",	"pattern mkey.hash(X_0:flt):lng ",	"MKEYhash;",	""	]
[ "mkey",	"hash",	"pattern mkey.hash(X_0:int):lng ",	"MKEYhash;",	""	]
[ "mkey",	"hash",	"pattern mkey.hash(X_0:lng):lng ",	"MKEYhash;",	""	]
[ "mkey",	"hash",	"pattern mkey.hash(X_0:sht):lng ",	"MKEYhash;",	""	]
[ "mkey",	"hash",	"pattern mkey.hash(X_0:str):lng ",	"MKEYhash;",	""	]
[ "mkey",	"rotate",	"command mkey.rotate(X_0:lng, X_1:int):lng ",	"MKEYrotate;",	""	]
[ "mmath",	"acos",	"command mmath.acos(X_0:dbl):dbl ",	"MATHunary_ACOSdbl;",	""	]
[ "mmath",	"acos",	"command mmath.acos(X_0:flt):flt ",	"MATHunary_ACOSflt;",	""	]
[ "mmath",	"asin",	"command mmath.asin(X_0:dbl):dbl ",	"MATHunary_ASINdbl;",	""	]
[ "mmath",	"asin",	"command mmath.asin(X_0:flt):flt ",	"MATHunary_ASINflt;",	""	]
[ "mmath",	"atan",	"command mmath.atan(X_0:dbl):dbl ",	"MATHunary_ATANdbl;",	""	]
[ "mmath",	"atan",	"command mmath.atan(X_0:flt):flt ",	"MATHunary_ATANflt;",	""	]
[ "mmath",	"atan2",	"command mmath.atan2(X_0:dbl, X_1:dbl):dbl ",	"MATHbinary_ATAN2dbl;",	""	]
[ "mmath",	"atan2",	"command mmath.atan2(X_0:flt, X_1:flt):flt ",	"MATHbinary_ATAN2flt;",	""	]
[ "mmath",	"cbrt",	"command mmath.cbrt(X_0:dbl):dbl ",	"MATHunary_CBRTdbl;",	""	]
[ "mmath",	"cbrt",	"command mmath.cbrt(X_0:flt):flt ",	"MATHunary_CBRTflt;",	""	]
[ "mmath",	"ceil",	"command mmath.ceil(X_0:dbl):dbl ",	"MATHunary_CEILdbl;",	""	]
[ "mmath",	"ceil",	"command mmath.ceil(X_0:flt):flt ",	"MATHunary_CEILflt;",	""	]
[ "mmath",	"cos",	"command mmath.cos(X_0:dbl):dbl ",	"MATHunary_COSdbl;",	""	]
[ "mmath",	"cos",	"command mmath.cos(X_0:flt):flt ",	"MATHunary_COSflt;",	""	]
[ "mmath",	"cosh",	"command mmath.cosh(X_0:dbl):dbl ",	"MATHunary_COSHdbl;",	""	]
[ "mmath",	"cosh",	"command mmath.cosh(X_0:flt):flt ",	"MATHunary_COSHflt;",	""	]
[ "mmath",	"cot",	"command mmath.cot(X_0:dbl):dbl ",	"MATHunary_COTdbl;",	""	]
[ "mmath",	"cot",	"command mmath.cot(X_0:flt):flt ",	"MATHunary_COTflt;",	""	]
[ "mmath",	"degrees",	"command mmath.degrees(X_0:dbl):dbl ",	"MATHunary_DEGREESdbl;",	""	]
[ "mmath",	"degrees",	"command mmath.degrees(X_0:flt):flt ",	"MATHunary_DEGREESflt;",	""	]
[ "mmath",	"exp",	"command mmath.exp(X_0:dbl):dbl ",	"MATHunary_EXPdbl;",	""	]
[ "mmath",	"exp",	"command mmath.exp(X_0:flt):flt ",	"MATHunary_EXPflt;",	""	]
[ "mmath",	"fabs",	"command mmath.fabs(X_0:dbl):dbl ",	"MATHunary_FABSdbl;",	""	]
[ "mmath",	"finite",	"command mmath.finite(X_0:dbl):bit ",	"MATHunary_FINITE;",	""	]
[ "mmath",	"floor",	"command mmath.floor(X_0:dbl):dbl ",	"MATHunary_FLOORdbl;",	""	]
[ "mmath",	"floor",	"command mmath.floor(X_0:flt):flt ",	"MATHunary_FLOORflt;",	""	]
[ "mmath",	"fmod",	"pattern mmath.fmod(X_0:dbl, X_1:dbl):dbl ",	"CMDvarMODsignal;",	""	]
[ "mmath",	"fmod",	"pattern mmath.fmod(X_0:flt, X_1:flt):flt ",	"CMDvarMODsignal;",	""	]
[ "mmath",	"isinf",	"command mmath.isinf(X_0:dbl):int ",	"MATHunary_ISINF;",	""	]
[ "mmath",	"isnan",	"command mmath.isnan(X_0:dbl):bit ",	"MATHunary_ISNAN;",	""	]
[ "mmath",	"log",	"command mmath.log(X_0:dbl):dbl ",	"MATHunary_LOGdbl;",	""	]
[ "mmath",	"log",	"command mmath.log(X_0:flt):flt ",	"MATHunary_LOGflt;",	""	]
[ "mmath",	"log10",	"command mmath.log10(X_0:dbl):dbl ",	"MATHunary_LOG10dbl;",	""	]
[ "mmath",	"log10",	"command mmath.log10(X_0:flt):flt ",	"MATHunary_LOG10flt;",	""	]
[ "mmath",	"log2",	"command mmath.log2(X_0:dbl):dbl ",	"MATHunary_LOG2dbl;",	""	]
[ "mmath",	"log2",	"command mmath.log2(X_0:flt):flt ",	"MATHunary_LOG2flt;",	""	]
[ "mmath",	"log2arg",	"command mmath.log2arg(X_0:dbl, X_1:dbl):dbl ",	"MATHbinary_LOGdbl;",	""	]
[ "mmath",	"log2arg",	"command mmath.log2arg(X_0:flt, X_1:flt):flt ",	"MATHbinary_LOGflt;",	""	]
[ "mmath",	"pi",	"command mmath.pi():dbl ",	"MATHpi;",	""	]
[ "mmath",	"pow",	"command mmath.pow(X_0:dbl, X_1:dbl):dbl ",	"MATHbinary_POWdbl;",	""	]
[ "mmath",	"pow",	"command mmath.pow(X_0:flt, X_1:flt):flt ",	"MATHbinary_POWflt;",	""	]
[ "mmath",	"prelude",	"command mmath.prelude():void ",	"MATHprelude;",	""	]
[ "mmath",	"radians",	"command mmath.radians(X_0:dbl):dbl ",	"MATHunary_RADIANSdbl;",	""	]
[ "mmath",	"radians",	"command mmath.radians(X_0:flt):flt ",	"MATHunary_RADIANSflt;",	""	]
[ "mmath",	"rand",	"unsafe command mmath.rand():int ",	"MATHrandint;",	""	]
[ "mmath",	"rand",	"unsafe command mmath.rand(X_0:int):int ",	"MATHrandintarg;",	""	]
[ "mmath",	"round",	"command mmath.round(X_0:dbl, X_1:int):dbl ",	"MATHbinary_ROUNDdbl;",	""	]
[ "mmath",	"round",	"command mmath.round(X_0:flt, X_1:int):flt ",	"MATHbinary_ROUNDflt;",	""	]
[ "mmath",	"sin",	"command mmath.sin(X_0:dbl):dbl ",	"MATHunary_SINdbl;",	""	]
[ "mmath",	"sin",	"command mmath.sin(X_0:flt):flt ",	"MATHunary_SINflt;",	""	]
[ "mmath",	"sinh",	"command mmath.sinh(X_0:dbl):dbl ",	"MATHunary_SINHdbl;",	""	]
[ "mmath",	"sinh",	"command mmath.sinh(X_0:flt):flt ",	"MATHunary_SINHflt;",	""	]
[ "mmath",	"sqlrand",	"command mmath.sqlrand(X_0:int):int ",	"MATHsqlrandint;",	""	]
[ "mmath",	"sqrt",	"command mmath.sqrt(X_0:dbl):dbl ",	"MATHunary_SQRTdbl;",	""	]
[ "mmath",	"sqrt",	"command mmath.sqrt(X_0:flt):flt ",	"MATHunary_SQRTflt;",	""	]
[ "mmath",	"srand",	"command mmath.srand(X_0:int):void ",	"MATHsrandint;",	""	]
[ "mmath",	"tan",	"command mmath.tan(X_0:dbl):dbl ",	"MATHunary_TANdbl;",	""	]
[ "mmath",	"tan",	"command mmath.tan(X_0:flt):flt ",	"MATHunary_TANflt;",	""	]
[ "mmath",	"tanh",	"command mmath.tanh(X_0:dbl):dbl ",	"MATHunary_TANHdbl;",	""	]
[ "mmath",	"tanh",	"command mmath.tanh(X_0:flt):flt ",	"MATHunary_TANHflt;",	""	]
[ "mtime",	"addmonths",	"command mtime.addmonths(X_0:date, X_1:int):date ",	"MTIMEdate_addmonths;",	""	]
[ "mtime",	"century",	"command mtime.century(X_0:date):int ",	"MTIMEdate_extract_century;",	""	]
[ "mtime",	"century",	"command mtime.century(X_0:timestamp):int ",	"MTIMEtimestamp_century;",	""	]
[ "mtime",	"current_date",	"command mtime.current_date():date ",	"MTIMEcurrent_date;",	""	]
[ "mtime",	"current_time",	"command mtime.current_time():daytime ",	"MTIMEcurrent_time;",	""	]
[ "mtime",	"current_timestamp",	"command mtime.current_timestamp():timestamp ",	"MTIMEcurrent_timestamp;",	""	]
[ "mtime",	"date_add_msec_interval",	"command mtime.date_add_msec_interval(X_0:date, X_1:lng):date ",	"MTIMEdate_add_msec_interval;",	""	]
[ "mtime",	"date_sub_month_interval",	"command mtime.date_sub_month_interval(X_0:date, X_1:int):date ",	"MTIMEdate_submonths;",	""	]
[ "mtime",	"date_sub_msec_interval",	"command mtime.date_sub_msec_interval(X_0:date, X_1:lng):date ",	"MTIMEdate_sub_msec_interval;",	""	]
[ "mtime",	"date_to_str",	"command mtime.date_to_str(X_0:date, X_1:str):str ",	"MTIMEdate_to_str;",	""	]
[ "mtime",	"day",	"command mtime.day(X_0:date):int ",	"MTIMEdate_extract_day;",	""	]
[ "mtime",	"day",	"command mtime.day(X_0:lng):lng ",	"MTIMEsql_day;",	""	]
[ "mtime",	"day",	"command mtime.day(X_0:timestamp):int ",	"MTIMEtimestamp_day;",	""	]
[ "mtime",	"dayofweek",	"command mtime.dayofweek(X_0:date):int ",	"MTIMEdate_extract_dayofweek;",	""	]
[ "mtime",	"dayofyear",	"command mtime.dayofyear(X_0:date):int ",	"MTIMEdate_extract_dayofyear;",	""	]
[ "mtime",	"decade",	"command mtime.decade(X_0:date):int ",	"MTIMEdate_extract_decade;",	""	]
[ "mtime",	"decade",	"command mtime.decade(X_0:timestamp):int ",	"MTIMEtimestamp_decade;",	""	]
[ "mtime",	"diff",	"command mtime.diff(X_0:date, X_1:date):lng ",	"MTIMEdate_diff;",	""	]
[ "mtime",	"diff",	"command mtime.diff(X_0:daytime, X_1:daytime):lng ",	"MTIMEdaytime_diff_msec;",	""	]
[ "mtime",	"diff",	"command mtime.diff(X_0:timestamp, X_1:timestamp):lng ",	"MTIMEtimestamp_diff_msec;",	""	]
[ "mtime",	"epoch",	"command mtime.epoch(X_0:timestamp):int ",	"MTIMEseconds_since_epoch;",	""	]
[ "mtime",	"epoch",	"command mtime.epoch(X_0:lng):timestamp ",	"MTIMEtimestamp_frommsec_epoch;",	""	]
[ "mtime",	"epoch",	"command mtime.epoch(X_0:int):timestamp ",	"MTIMEtimestamp_fromsecond_epoch;",	""	]
[ "mtime",	"epoch_ms",	"command mtime.epoch_ms(X_0:date):lng ",	"MTIMEdate_extract_epoch_ms;",	""	]
[ "mtime",	"epoch_ms",	"command mtime.epoch_ms(X_0:daytime):lng ",	"MTIMEdaytime_extract_epoch_ms;",	""	]
[ "mtime",	"epoch_ms",	"command mtime.epoch_ms(X_0:lng):lng ",	"MTIMEmsec_extract_epoch_ms;",	""	]
[ "mtime",	"epoch_ms",	"command mtime.epoch_ms(X_0:timestamp):lng ",	"MTIMEtimestamp_extract_epoch_ms;",	""	]
[ "mtime",	"hours",	"command mtime.hours(X_0:daytime):int ",	"MTIMEdaytime_extract_hours;",	""	]
[ "mtime",	"hours",	"command mtime.hours(X_0:lng):int ",	"MTIMEsql_hours;",	""	]
[ "mtime",	"hours",	"command mtime.hours(X_0:timestamp):int ",	"MTIMEtimestamp_hours;",	""	]
[ "mtime",	"local_timezone",	"command mtime.local_timezone():lng ",	"MTIMElocal_timezone_msec;",	""	]
[ "mtime",	"minutes",	"command mtime.minutes(X_0:daytime):int ",	"MTIMEdaytime_extract_minutes;",	""	]
[ "mtime",	"minutes",	"command mtime.minutes(X_0:lng):int ",	"MTIMEsql_minutes;",	""	]
[ "mtime",	"minutes",	"command mtime.minutes(X_0:timestamp):int ",	"MTIMEtimestamp_minutes;",	""	]
[ "mtime",	"month",	"command mtime.month(X_0:date):int ",	"MTIMEdate_extract_month;",	""	]
[ "mtime",	"month",	"command mtime.month(X_0:int):int ",	"MTIMEsql_month;",	""	]
[ "mtime",	"month",	"command mtime.month(X_0:timestamp):int ",	"MTIMEtimestamp_month;",	""	]
[ "mtime",	"quarter",	"command mtime.quarter(X_0:date):int ",	"MTIMEdate_extract_quarter;",	""	]
[ "mtime",	"quarter",	"command mtime.quarter(X_0:timestamp):int ",	"MTIMEtimestamp_quarter;",	""	]
[ "mtime",	"seconds",	"command mtime.seconds(X_0:lng):int ",	"MTIMEsql_seconds;",	""	]
[ "mtime",	"sql_seconds",	"command mtime.sql_seconds(X_0:daytime):int ",	"MTIMEdaytime_extract_sql_seconds;",	""	]
[ "mtime",	"sql_seconds",	"command mtime.sql_seconds(X_0:timestamp):int ",	"MTIMEtimestamp_sql_seconds;",	""	]
[ "mtime",	"str_to_date",	"command mtime.str_to_date(X_0:str, X_1:str):date ",	"MTIMEstr_to_date;",	""	]
[ "mtime",	"str_to_time",	"command mtime.str_to_time(X_0:str, X_1:str):daytime ",	"MTIMEstr_to_time;",	""	]
[ "mtime",	"str_to_timestamp",	"command mtime.str_to_timestamp(X_0:str, X_1:str):timestamp ",	"MTIMEstr_to_timestamp;",	""	]
[ "mtime",	"time_add_msec_interval",	"command mtime.time_add_msec_interval(X_0:daytime, X_1:lng):daytime ",	"MTIMEtime_add_msec_interval;",	""	]
[ "mtime",	"time_sub_msec_interval",	"command mtime.time_sub_msec_interval(X_0:daytime, X_1:lng):daytime ",	"MTIMEtime_sub_msec_interval;",	""	]
[ "mtime",	"time_to_str",	"command mtime.time_to_str(X_0:daytime, X_1:str):str ",	"MTIMEtime_to_str;",	""	]
[ "mtime",	"timestamp_add_month_interval",	"command mtime.timestamp_add_month_interval(X_0:timestamp, X_1:int):timestamp ",	"MTIMEtimestamp_add_month_interval;",	""	]
[ "mtime",	"timestamp_add_msec_interval",	"command mtime.timestamp_add_msec_interval(X_0:timestamp, X_1:lng):timestamp ",	"MTIMEtimestamp_add_msec_interval;",	""	]
[ "mtime",	"timestamp_sub_month_interval",	"command mtime.timestamp_sub_month_interval(X_0:timestamp, X_1:int):timestamp ",	"MTIMEtimestamp_sub_month_interval;",	""	]
[ "mtime",	"timestamp_sub_msec_interval",	"command mtime.timestamp_sub_msec_interval(X_0:timestamp, X_1:lng):timestamp ",	"MTIMEtimestamp_sub_msec_interval;",	""	]
[ "mtime",	"timestamp_to_str",	"command mtime.timestamp_to_str(X_0:timestamp, X_1:str):str ",	"MTIMEtimestamp_to_str;",	""	]
[ "mtime",	"usweekofyear",	"command mtime.usweekofyear(X_0:date):int ",	"MTIMEdate_extract_usweekofyear;",	""	]
[ "mtime",	"weekofyear",	"command mtime.weekofyear(X_0:date):int ",	"MTIMEdate_extract_weekofyear;",	""	]
[ "mtime",	"year",	"command mtime.year(X_0:date):int ",	"MTIMEdate_extract_year;",	""	]
[ "mtime",	"year",	"command mtime.year(X_0:int):int ",	"MTIMEsql_year;",	""	]
[ "mtime",	"year",	"command mtime.year(X_0:timestamp):int ",	"MTIMEtimestamp_year;",	""	]
[ "netcdf",	"attach",	"pattern netcdf.attach(X_0:str):void ",	"NCDFattach;",	""	]
[ "netcdf",	"importvar",	"command netcdf.importvar(X_0:str, X_1:int):str ",	"NCDFimportVarStmt;",	""	]
[ "netcdf",	"importvariable",	"pattern netcdf.importvariable(X_0:int, X_1:str):void ",	"NCDFimportVariable;",	""	]
[ "netcdf",	"test",	"command netcdf.test(X_0:str):int ",	"NCDFtest;",	""	]
[ "oltp",	"disable",	"unsafe pattern oltp.disable():void ",	"OLTPdisable;",	""	]
[ "oltp",	"enable",	"unsafe pattern oltp.enable():void ",	"OLTPenable;",	""	]
[ "oltp",	"init",	"unsafe pattern oltp.init():void ",	"OLTPinit;",	""	]
[ "oltp",	"isenabled",	"unsafe command oltp.isenabled():int ",	"OLTPis_enabled;",	""	]
[ "oltp",	"lock",	"unsafe pattern oltp.lock(X_0:int...):void ",	"OLTPlock;",	""	]
[ "oltp",	"release",	"unsafe pattern oltp.release(X_0:int...):void ",	"OLTPrelease;",	""	]
[ "oltp",	"reset",	"unsafe pattern oltp.reset():void ",	"OLTPreset;",	""	]
[ "oltp",	"table",	"unsafe pattern oltp.table() (X_0:bat[:timestamp], X_1:bat[:str], X_2:bat[:int], X_3:bat[:int]) ",	"OLTPtable;",	""	]
[ "optimizer",	"aliases",	"pattern optimizer.aliases():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"aliases",	"pattern optimizer.aliases(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"bincopyfrom",	"pattern optimizer.bincopyfrom():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"bincopyfrom",	"pattern optimizer.bincopyfrom(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"candidates",	"pattern optimizer.candidates():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"candidates",	"pattern optimizer.candidates(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"coercions",	"pattern optimizer.coercions():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"coercions",	"pattern optimizer.coercions(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"commonTerms",	"pattern optimizer.commonTerms():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"commonTerms",	"pattern optimizer.commonTerms(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"constants",	"pattern optimizer.constants():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"constants",	"pattern optimizer.constants(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"costModel",	"pattern optimizer.costModel():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"costModel",	"pattern optimizer.costModel(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"dataflow",	"pattern optimizer.dataflow():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"dataflow",	"pattern optimizer.dataflow(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"deadcode",	"pattern optimizer.deadcode():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"deadcode",	"pattern optimizer.deadcode(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"default_fast",	"function optimizer.default_fast():void;",	"",	""	]
[ "optimizer",	"default_pipe",	"function optimizer.default_pipe():void;",	"",	""	]
[ "optimizer",	"defaultfast",	"pattern optimizer.defaultfast():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"defaultfast",	"pattern optimizer.defaultfast(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"emptybind",	"pattern optimizer.emptybind():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"emptybind",	"pattern optimizer.emptybind(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"epilogue",	"command optimizer.epilogue():void ",	"optimizer_epilogue;",	""	]
[ "optimizer",	"evaluate",	"pattern optimizer.evaluate():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"evaluate",	"pattern optimizer.evaluate(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"garbageCollector",	"pattern optimizer.garbageCollector():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"garbageCollector",	"pattern optimizer.garbageCollector(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"generator",	"pattern optimizer.generator():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"generator",	"pattern optimizer.generator(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"inline",	"pattern optimizer.inline():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"inline",	"pattern optimizer.inline(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"jit",	"pattern optimizer.jit():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"jit",	"pattern optimizer.jit(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"json",	"pattern optimizer.json():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"json",	"pattern optimizer.json(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"macro",	"pattern optimizer.macro(X_0:str, X_1:str):void ",	"OPTmacro;",	""	]
[ "optimizer",	"macro",	"pattern optimizer.macro(X_0:str, X_1:str, X_2:str, X_3:str):void ",	"OPTmacro;",	""	]
[ "optimizer",	"mask",	"pattern optimizer.mask():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"mask",	"pattern optimizer.mask(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"matpack",	"pattern optimizer.matpack():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"matpack",	"pattern optimizer.matpack(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"mergetable",	"pattern optimizer.mergetable():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"mergetable",	"pattern optimizer.mergetable(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"minimal_fast",	"function optimizer.minimal_fast():void;",	"",	""	]
[ "optimizer",	"minimal_pipe",	"function optimizer.minimal_pipe():void;",	"",	""	]
[ "optimizer",	"minimalfast",	"pattern optimizer.minimalfast():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"minimalfast",	"pattern optimizer.minimalfast(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"mitosis",	"pattern optimizer.mitosis():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"mitosis",	"pattern optimizer.mitosis(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"multiplex",	"pattern optimizer.multiplex():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"multiplex",	"pattern optimizer.multiplex(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"no_mitosis_pipe",	"function optimizer.no_mitosis_pipe():void;",	"",	""	]
[ "optimizer",	"oltp",	"pattern optimizer.oltp():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"oltp",	"pattern optimizer.oltp(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"oltp_pipe",	"function optimizer.oltp_pipe():void;",	"",	""	]
[ "optimizer",	"optimize",	"pattern optimizer.optimize(X_0:str, X_1:str):void ",	"QOToptimize;",	""	]
[ "optimizer",	"orcam",	"pattern optimizer.orcam(X_0:str, X_1:str):void ",	"OPTorcam;",	""	]
[ "optimizer",	"orcam",	"pattern optimizer.orcam(X_0:str, X_1:str, X_2:str, X_3:str):void ",	"OPTorcam;",	""	]
[ "optimizer",	"postfix",	"pattern optimizer.postfix():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"postfix",	"pattern optimizer.postfix(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"prelude",	"pattern optimizer.prelude():void ",	"optimizer_prelude;",	""	]
[ "optimizer",	"profiler",	"pattern optimizer.profiler():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"profiler",	"pattern optimizer.profiler(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"projectionpath",	"pattern optimizer.projectionpath():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"projectionpath",	"pattern optimizer.projectionpath(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"pushselect",	"pattern optimizer.pushselect():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"pushselect",	"pattern optimizer.pushselect(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"querylog",	"pattern optimizer.querylog():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"querylog",	"pattern optimizer.querylog(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"reduce",	"pattern optimizer.reduce():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"reduce",	"pattern optimizer.reduce(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"remap",	"pattern optimizer.remap():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"remap",	"pattern optimizer.remap(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"remoteQueries",	"pattern optimizer.remoteQueries():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"remoteQueries",	"pattern optimizer.remoteQueries(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"reorder",	"pattern optimizer.reorder():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"reorder",	"pattern optimizer.reorder(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"sequential_pipe",	"function optimizer.sequential_pipe():void;",	"",	""	]
[ "optimizer",	"sql_append",	"pattern optimizer.sql_append():str ",	"OPTsql_append;",	""	]
[ "optimizer",	"sql_append",	"pattern optimizer.sql_append(X_0:str, X_1:str):str ",	"OPTsql_append;",	""	]
[ "optimizer",	"volcano",	"pattern optimizer.volcano():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"volcano",	"pattern optimizer.volcano(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "optimizer",	"volcano_pipe",	"function optimizer.volcano_pipe():void;",	"",	""	]
[ "optimizer",	"wlc",	"pattern optimizer.wlc():str ",	"OPTwrapper;",	""	]
[ "optimizer",	"wlc",	"pattern optimizer.wlc(X_0:str, X_1:str):str ",	"OPTwrapper;",	""	]
[ "pcre",	"imatch",	"command pcre.imatch(X_0:str, X_1:str):bit ",	"PCREimatch;",	""	]
[ "pcre",	"index",	"command pcre.index(X_0:pcre, X_1:str):int ",	"PCREindex;",	""	]
[ "pcre",	"match",	"command pcre.match(X_0:str, X_1:str):bit ",	"PCREmatch;",	""	]
[ "pcre",	"patindex",	"command pcre.patindex(X_0:str, X_1:str):int ",	"PCREpatindex;",	""	]
[ "pcre",	"pcre_quote",	"command pcre.pcre_quote(X_0:str):str ",	"PCREquote;",	""	]
[ "pcre",	"prelude",	"command pcre.prelude():void ",	"pcre_init;",	""	]
[ "pcre",	"replace",	"command pcre.replace(X_0:str, X_1:str, X_2:str, X_3:str):str ",	"PCREreplace_wrap;",	""	]
[ "pcre",	"replace_first",	"command pcre.replace_first(X_0:str, X_1:str, X_2:str, X_3:str):str ",	"PCREreplace_wrap;",	""	]
[ "pcre",	"sql2pcre",	"command pcre.sql2pcre(X_0:str, X_1:str):str ",	"PCREsql2pcre;",	""	]
[ "profiler",	"cleanup",	"pattern profiler.cleanup():void ",	"CMDcleanupTraces;",	""	]
[ "profiler",	"closestream",	"pattern profiler.closestream():void ",	"CMDcloseProfilerStream;",	""	]
[ "profiler",	"cpuload",	"command profiler.cpuload(X_0:lng, X_1:lng, X_2:lng, X_3:lng, X_4:lng) (X_5:int, X_6:int) ",	"CMDcpuloadPercentage;",	""	]
[ "profiler",	"cpustats",	"command profiler.cpustats() (X_0:lng, X_1:lng, X_2:lng, X_3:lng, X_4:lng) ",	"CMDcpustats;",	""	]
[ "profiler",	"getDiskReads",	"command profiler.getDiskReads():lng ",	"CMDgetDiskReads;",	""	]
[ "profiler",	"getDiskWrites",	"command profiler.getDiskWrites():lng ",	"CMDgetDiskWrites;",	""	]
[ "profiler",	"getSystemTime",	"command profiler.getSystemTime():lng ",	"CMDgetSystemTime;",	""	]
[ "profiler",	"getTrace",	"pattern profiler.getTrace(X_0:str):bat[:any_1] ",	"CMDgetTrace;",	""	]
[ "profiler",	"getUserTime",	"command profiler.getUserTime():lng ",	"CMDgetUserTime;",	""	]
[ "profiler",	"getlimit",	"command profiler.getlimit():int ",	"CMDgetprofilerlimit;",	""	]
[ "profiler",	"noop",	"command profiler.noop():void ",	"CMDnoopProfiler;",	""	]
[ "profiler",	"openstream",	"pattern profiler.openstream():void ",	"CMDopenProfilerStream;",	""	]
[ "profiler",	"setheartbeat",	"command profiler.setheartbeat(X_0:int):void ",	"CMDsetHeartbeat;",	""	]
[ "profiler",	"setlimit",	"command profiler.setlimit(X_0:int):void ",	"CMDsetprofilerlimit;",	""	]
[ "profiler",	"start",	"pattern profiler.start():void ",	"CMDstartProfiler;",	""	]
[ "profiler",	"starttrace",	"pattern profiler.starttrace():void ",	"CMDstartTrace;",	""	]
[ "profiler",	"stop",	"pattern profiler.stop():void ",	"CMDstopProfiler;",	""	]
[ "profiler",	"stoptrace",	"pattern profiler.stoptrace():void ",	"CMDstopTrace;",	""	]
[ "pyapi3",	"eval",	"unsafe pattern pyapi3.eval(X_0:ptr, X_1:str):any ",	"PYAPI3PyAPIevalStd;",	""	]
[ "pyapi3",	"eval",	"unsafe pattern pyapi3.eval(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalStd;",	""	]
[ "pyapi3",	"eval_aggr",	"unsafe pattern pyapi3.eval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalAggr;",	""	]
[ "pyapi3",	"eval_loader",	"unsafe pattern pyapi3.eval_loader(X_0:ptr, X_1:str):any... ",	"PYAPI3PyAPIevalLoader;",	""	]
[ "pyapi3",	"eval_loader",	"unsafe pattern pyapi3.eval_loader(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalLoader;",	""	]
[ "pyapi3",	"prelude",	"command pyapi3.prelude():void ",	"PYAPI3PyAPIprelude;",	""	]
[ "pyapi3",	"subeval_aggr",	"unsafe pattern pyapi3.subeval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalAggr;",	""	]
[ "pyapi3map",	"eval",	"pattern pyapi3map.eval(X_0:ptr, X_1:str):any ",	"PYAPI3PyAPIevalStdMap;",	""	]
[ "pyapi3map",	"eval",	"pattern pyapi3map.eval(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalStdMap;",	""	]
[ "pyapi3map",	"eval_aggr",	"pattern pyapi3map.eval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalAggrMap;",	""	]
[ "pyapi3map",	"subeval_aggr",	"pattern pyapi3map.subeval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"PYAPI3PyAPIevalAggrMap;",	""	]
[ "querylog",	"append",	"pattern querylog.append(X_0:str, X_1:str, X_2:str, X_3:timestamp):void ",	"QLOGappend;",	""	]
[ "querylog",	"call",	"pattern querylog.call(X_0:timestamp, X_1:timestamp, X_2:str, X_3:lng, X_4:lng, X_5:lng, X_6:int, X_7:int):void ",	"QLOGcall;",	""	]
[ "querylog",	"context",	"command querylog.context(X_0:str, X_1:str, X_2:str, X_3:str):void ",	"QLOGcontextNaive;",	""	]
[ "querylog",	"define",	"command querylog.define(X_0:str, X_1:str, X_2:int):void ",	"QLOGdefineNaive;",	""	]
[ "querylog",	"disable",	"command querylog.disable():void ",	"QLOGdisable;",	""	]
[ "querylog",	"empty",	"command querylog.empty():void ",	"QLOGempty;",	""	]
[ "querylog",	"enable",	"command querylog.enable():void ",	"QLOGenable;",	""	]
[ "querylog",	"enable",	"command querylog.enable(X_0:int):void ",	"QLOGenableThreshold;",	""	]
[ "querylog",	"isset",	"command querylog.isset():int ",	"QLOGissetFcn;",	""	]
[ "rapi",	"eval",	"pattern rapi.eval(X_0:ptr, X_1:str):any ",	"RAPIevalStd;",	""	]
[ "rapi",	"eval",	"pattern rapi.eval(X_0:ptr, X_1:str, X_2:any...):any... ",	"RAPIevalStd;",	""	]
[ "rapi",	"eval_aggr",	"pattern rapi.eval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"RAPIevalAggr;",	""	]
[ "rapi",	"prelude",	"command rapi.prelude():void ",	"RAPIprelude;",	""	]
[ "rapi",	"subeval_aggr",	"pattern rapi.subeval_aggr(X_0:ptr, X_1:str, X_2:any...):any... ",	"RAPIevalAggr;",	""	]
[ "remote",	"batbincopy",	"pattern remote.batbincopy():bat[:any] ",	"RMTbincopyfrom;",	""	]
[ "remote",	"batbincopy",	"pattern remote.batbincopy(X_0:bat[:any]):void ",	"RMTbincopyto;",	""	]
[ "remote",	"batload",	"pattern remote.batload(X_0:any_1, X_1:int):bat[:any_1] ",	"RMTbatload;",	""	]
[ "remote",	"bintype",	"pattern remote.bintype():void ",	"RMTbintype;",	""	]
[ "remote",	"connect",	"pattern remote.connect(X_0:str, X_1:str, X_2:str, X_3:str):str ",	"RMTconnect;",	""	]
[ "remote",	"connect",	"command remote.connect(X_0:str, X_1:str, X_2:str, X_3:str, X_4:bit):str ",	"RMTconnectScen;",	""	]
[ "remote",	"connect",	"pattern remote.connect(X_0:str, X_1:str):str ",	"RMTconnectTable;",	""	]
[ "remote",	"disconnect",	"command remote.disconnect(X_0:str):void ",	"RMTdisconnect;",	""	]
[ "remote",	"epilogue",	"command remote.epilogue():void ",	"RMTepilogue;",	""	]
[ "remote",	"exec",	"pattern remote.exec(X_0:str, X_1:str, X_2:str):str ",	"RMTexec;",	""	]
[ "remote",	"exec",	"pattern remote.exec(X_0:str, X_1:str, X_2:str):str... ",	"RMTexec;",	""	]
[ "remote",	"exec",	"pattern remote.exec(X_0:str, X_1:str, X_2:str, X_3:ptr, X_4:str...):void ",	"RMTexec;",	""	]
[ "remote",	"exec",	"pattern remote.exec(X_0:str, X_1:str, X_2:str, X_3:str...):str ",	"RMTexec;",	""	]
[ "remote",	"exec",	"pattern remote.exec(X_0:str, X_1:str, X_2:str, X_3:str...):str... ",	"RMTexec;",	""	]
[ "remote",	"exec",	"pattern remote.exec(X_0:str, X_1:str, X_2:str, X_3:str...):void ",	"RMTexec;",	""	]
[ "remote",	"get",	"pattern remote.get(X_0:str, X_1:str):any ",	"RMTget;",	""	]
[ "remote",	"isalive",	"command remote.isalive(X_0:str):int ",	"RMTisalive;",	""	]
[ "remote",	"prelude",	"command remote.prelude():void ",	"RMTprelude;",	""	]
[ "remote",	"put",	"pattern remote.put(X_0:str, X_1:any):str ",	"RMTput;",	""	]
[ "remote",	"register",	"pattern remote.register(X_0:str, X_1:str, X_2:str):str ",	"RMTregister;",	""	]
[ "remote",	"register_supervisor",	"command remote.register_supervisor(X_0:str, X_1:str):int ",	"RMTregisterSupervisor;",	""	]
[ "remote",	"resolve",	"command remote.resolve(X_0:str):bat[:str] ",	"RMTresolve;",	""	]
[ "sample",	"subuniform",	"pattern sample.subuniform(X_0:bat[:any], X_1:dbl):bat[:oid] ",	"SAMPLEuniform;",	""	]
[ "sample",	"subuniform",	"pattern sample.subuniform(X_0:bat[:any], X_1:dbl, X_2:int):bat[:oid] ",	"SAMPLEuniform;",	""	]
[ "sample",	"subuniform",	"pattern sample.subuniform(X_0:bat[:any], X_1:lng):bat[:oid] ",	"SAMPLEuniform;",	""	]
[ "sample",	"subuniform",	"pattern sample.subuniform(X_0:bat[:any], X_1:lng, X_2:int):bat[:oid] ",	"SAMPLEuniform;",	""	]
[ "shp",	"attach",	"pattern shp.attach(X_0:str):void ",	"SHPattach;",	""	]
[ "shp",	"import",	"pattern shp.import(X_0:int):void ",	"SHPimport;",	""	]
[ "shp",	"import",	"pattern shp.import(X_0:int, X_1:wkb):void ",	"SHPpartialimport;",	""	]
[ "sql",	"abort",	"unsafe pattern sql.abort():void ",	"SQLabort;",	""	]
[ "sql",	"affectedRows",	"unsafe pattern sql.affectedRows(X_0:int, X_1:lng):int ",	"mvc_affected_rows_wrap;",	""	]
[ "sql",	"all",	"pattern sql.all(X_0:bit, X_1:bit, X_2:bit):bit ",	"SQLall_cmp;",	""	]
[ "sql",	"alpha",	"command sql.alpha(X_0:dbl, X_1:dbl):dbl ",	"SQLcst_alpha_cst;",	""	]
[ "sql",	"analyze",	"unsafe pattern sql.analyze(X_0:int, X_1:lng):void ",	"sql_analyze;",	""	]
[ "sql",	"analyze",	"unsafe pattern sql.analyze(X_0:int, X_1:lng, X_2:str):void ",	"sql_analyze;",	""	]
[ "sql",	"analyze",	"unsafe pattern sql.analyze(X_0:int, X_1:lng, X_2:str, X_3:str):void ",	"sql_analyze;",	""	]
[ "sql",	"analyze",	"unsafe pattern sql.analyze(X_0:int, X_1:lng, X_2:str, X_3:str, X_4:str):void ",	"sql_analyze;",	""	]
[ "sql",	"any",	"pattern sql.any(X_0:bit, X_1:bit, X_2:bit):bit ",	"SQLany_cmp;",	""	]
[ "sql",	"append",	"pattern sql.append(X_0:int, X_1:str, X_2:str, X_3:str, X_4:lng, X_5:any):int ",	"mvc_append_wrap;",	""	]
[ "sql",	"argRecord",	"pattern sql.argRecord():str ",	"SQLargRecord;",	""	]
[ "sql",	"argRecord",	"pattern sql.argRecord(X_0:any...):str ",	"SQLargRecord;",	""	]
[ "sql",	"assert",	"pattern sql.assert(X_0:bit, X_1:str):void ",	"SQLassert;",	""	]
[ "sql",	"assert",	"pattern sql.assert(X_0:int, X_1:str):void ",	"SQLassertInt;",	""	]
[ "sql",	"assert",	"pattern sql.assert(X_0:lng, X_1:str):void ",	"SQLassertLng;",	""	]
[ "sql",	"avg",	"pattern sql.avg(X_0:bte, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLavg;",	""	]
[ "sql",	"avg",	"pattern sql.avg(X_0:dbl, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLavg;",	""	]
[ "sql",	"avg",	"pattern sql.avg(X_0:flt, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLavg;",	""	]
[ "sql",	"avg",	"pattern sql.avg(X_0:int, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLavg;",	""	]
[ "sql",	"avg",	"pattern sql.avg(X_0:lng, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLavg;",	""	]
[ "sql",	"avg",	"pattern sql.avg(X_0:sht, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLavg;",	""	]
[ "sql",	"avg",	"pattern sql.avg(X_0:bte, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):bte ",	"SQLavginteger;",	""	]
[ "sql",	"avg",	"pattern sql.avg(X_0:int, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):int ",	"SQLavginteger;",	""	]
[ "sql",	"avg",	"pattern sql.avg(X_0:lng, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):lng ",	"SQLavginteger;",	""	]
[ "sql",	"avg",	"pattern sql.avg(X_0:sht, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):sht ",	"SQLavginteger;",	""	]
[ "sql",	"bind",	"pattern sql.bind(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int) (X_5:bat[:oid], X_6:bat[:any_1]) ",	"mvc_bind_wrap;",	""	]
[ "sql",	"bind",	"pattern sql.bind(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int):bat[:any_1] ",	"mvc_bind_wrap;",	""	]
[ "sql",	"bind",	"pattern sql.bind(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int, X_5:int, X_6:int) (X_7:bat[:oid], X_8:bat[:any_1]) ",	"mvc_bind_wrap;",	""	]
[ "sql",	"bind",	"pattern sql.bind(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int, X_5:int, X_6:int):bat[:any_1] ",	"mvc_bind_wrap;",	""	]
[ "sql",	"bind_idxbat",	"pattern sql.bind_idxbat(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int) (X_5:bat[:oid], X_6:bat[:any_1]) ",	"mvc_bind_idxbat_wrap;",	""	]
[ "sql",	"bind_idxbat",	"pattern sql.bind_idxbat(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int):bat[:any_1] ",	"mvc_bind_idxbat_wrap;",	""	]
[ "sql",	"bind_idxbat",	"pattern sql.bind_idxbat(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int, X_5:int, X_6:int) (X_7:bat[:oid], X_8:bat[:any_1]) ",	"mvc_bind_idxbat_wrap;",	""	]
[ "sql",	"bind_idxbat",	"pattern sql.bind_idxbat(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int, X_5:int, X_6:int):bat[:any_1] ",	"mvc_bind_idxbat_wrap;",	""	]
[ "sql",	"claim",	"unsafe pattern sql.claim(X_0:int, X_1:str, X_2:str, X_3:lng):lng ",	"mvc_claim_wrap;",	""	]
[ "sql",	"clear_table",	"unsafe pattern sql.clear_table(X_0:str, X_1:str):lng ",	"mvc_clear_table_wrap;",	""	]
[ "sql",	"commit",	"unsafe pattern sql.commit():void ",	"SQLcommit;",	""	]
[ "sql",	"copy_from",	"unsafe pattern sql.copy_from(X_0:ptr, X_1:str, X_2:str, X_3:str, X_4:str, X_5:str, X_6:lng, X_7:lng, X_8:int, X_9:str, X_10:int, X_11:int):bat[:any]... ",	"mvc_import_table_wrap;",	""	]
[ "sql",	"copy_rejects",	"pattern sql.copy_rejects() (X_0:bat[:lng], X_1:bat[:int], X_2:bat[:str], X_3:bat[:str]) ",	"COPYrejects;",	""	]
[ "sql",	"copy_rejects_clear",	"unsafe pattern sql.copy_rejects_clear():void ",	"COPYrejects_clear;",	""	]
[ "sql",	"corr",	"pattern sql.corr(X_0:bte, X_1:bte, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcorr;",	""	]
[ "sql",	"corr",	"pattern sql.corr(X_0:dbl, X_1:dbl, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcorr;",	""	]
[ "sql",	"corr",	"pattern sql.corr(X_0:flt, X_1:flt, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcorr;",	""	]
[ "sql",	"corr",	"pattern sql.corr(X_0:int, X_1:int, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcorr;",	""	]
[ "sql",	"corr",	"pattern sql.corr(X_0:lng, X_1:lng, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcorr;",	""	]
[ "sql",	"corr",	"pattern sql.corr(X_0:sht, X_1:sht, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcorr;",	""	]
[ "sql",	"count",	"pattern sql.count(X_0:any_1, X_1:bit, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):lng ",	"SQLcount;",	""	]
[ "sql",	"covariance",	"pattern sql.covariance(X_0:bte, X_1:bte, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_samp;",	""	]
[ "sql",	"covariance",	"pattern sql.covariance(X_0:dbl, X_1:dbl, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_samp;",	""	]
[ "sql",	"covariance",	"pattern sql.covariance(X_0:flt, X_1:flt, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_samp;",	""	]
[ "sql",	"covariance",	"pattern sql.covariance(X_0:int, X_1:int, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_samp;",	""	]
[ "sql",	"covariance",	"pattern sql.covariance(X_0:lng, X_1:lng, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_samp;",	""	]
[ "sql",	"covariance",	"pattern sql.covariance(X_0:sht, X_1:sht, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_samp;",	""	]
[ "sql",	"covariancep",	"pattern sql.covariancep(X_0:bte, X_1:bte, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_pop;",	""	]
[ "sql",	"covariancep",	"pattern sql.covariancep(X_0:dbl, X_1:dbl, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_pop;",	""	]
[ "sql",	"covariancep",	"pattern sql.covariancep(X_0:flt, X_1:flt, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_pop;",	""	]
[ "sql",	"covariancep",	"pattern sql.covariancep(X_0:int, X_1:int, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_pop;",	""	]
[ "sql",	"covariancep",	"pattern sql.covariancep(X_0:lng, X_1:lng, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_pop;",	""	]
[ "sql",	"covariancep",	"pattern sql.covariancep(X_0:sht, X_1:sht, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):dbl ",	"SQLcovar_pop;",	""	]
[ "sql",	"createorderindex",	"unsafe pattern sql.createorderindex(X_0:str, X_1:str, X_2:str):void ",	"sql_createorderindex;",	""	]
[ "sql",	"cume_dist",	"pattern sql.cume_dist(X_0:any_1, X_1:bit, X_2:bit):dbl ",	"SQLcume_dist;",	""	]
[ "sql",	"current_time",	"pattern sql.current_time():daytime ",	"SQLcurrent_daytime;",	""	]
[ "sql",	"current_timestamp",	"pattern sql.current_timestamp():timestamp ",	"SQLcurrent_timestamp;",	""	]
[ "sql",	"date_trunc",	"command sql.date_trunc(X_0:str, X_1:bat[:timestamp]):bat[:timestamp] ",	"bat_date_trunc;",	""	]
[ "sql",	"date_trunc",	"command sql.date_trunc(X_0:str, X_1:timestamp):timestamp ",	"date_trunc;",	""	]
[ "sql",	"db_users",	"pattern sql.db_users():bat[:str] ",	"db_users_wrap;",	""	]
[ "sql",	"delete",	"unsafe pattern sql.delete(X_0:int, X_1:str, X_2:str, X_3:any):int ",	"mvc_delete_wrap;",	""	]
[ "sql",	"delta",	"command sql.delta(X_0:bat[:any_3], X_1:bat[:oid], X_2:bat[:any_3]):bat[:any_3] ",	"DELTAbat;",	""	]
[ "sql",	"deltas",	"pattern sql.deltas(X_0:str) (X_1:bat[:int], X_2:bat[:bit], X_3:bat[:lng], X_4:bat[:lng], X_5:bat[:lng], X_6:bat[:lng], X_7:bat[:int]) ",	"mvc_delta_values;",	""	]
[ "sql",	"deltas",	"pattern sql.deltas(X_0:str, X_1:str) (X_2:bat[:int], X_3:bat[:bit], X_4:bat[:lng], X_5:bat[:lng], X_6:bat[:lng], X_7:bat[:lng], X_8:bat[:int]) ",	"mvc_delta_values;",	""	]
[ "sql",	"deltas",	"pattern sql.deltas(X_0:str, X_1:str, X_2:str) (X_3:bat[:int], X_4:bat[:bit], X_5:bat[:lng], X_6:bat[:lng], X_7:bat[:lng], X_8:bat[:lng], X_9:bat[:int]) ",	"mvc_delta_values;",	""	]
[ "sql",	"dense_rank",	"pattern sql.dense_rank(X_0:any_1, X_1:bit, X_2:bit):int ",	"SQLdense_rank;",	""	]
[ "sql",	"diff",	"pattern sql.diff(X_0:any_1):bit ",	"SQLdiff;",	""	]
[ "sql",	"diff",	"pattern sql.diff(X_0:bit, X_1:any_1):bit ",	"SQLdiff;",	""	]
[ "sql",	"drop_hash",	"unsafe pattern sql.drop_hash(X_0:str, X_1:str):void ",	"SQLdrop_hash;",	""	]
[ "sql",	"droporderindex",	"unsafe pattern sql.droporderindex(X_0:str, X_1:str, X_2:str):void ",	"sql_droporderindex;",	""	]
[ "sql",	"dump_cache",	"pattern sql.dump_cache() (X_0:bat[:str], X_1:bat[:int]) ",	"dump_cache;",	""	]
[ "sql",	"dump_opt_stats",	"pattern sql.dump_opt_stats() (X_0:bat[:str], X_1:bat[:int]) ",	"dump_opt_stats;",	""	]
[ "sql",	"dump_trace",	"pattern sql.dump_trace() (X_0:bat[:lng], X_1:bat[:str]) ",	"dump_trace;",	""	]
[ "sql",	"emptybind",	"pattern sql.emptybind(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int) (X_5:bat[:oid], X_6:bat[:any_1]) ",	"mvc_bind_wrap;",	""	]
[ "sql",	"emptybind",	"pattern sql.emptybind(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int):bat[:any_1] ",	"mvc_bind_wrap;",	""	]
[ "sql",	"emptybind",	"pattern sql.emptybind(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int, X_5:int, X_6:int) (X_7:bat[:oid], X_8:bat[:any_1]) ",	"mvc_bind_wrap;",	""	]
[ "sql",	"emptybind",	"pattern sql.emptybind(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int, X_5:int, X_6:int):bat[:any_1] ",	"mvc_bind_wrap;",	""	]
[ "sql",	"emptybindidx",	"pattern sql.emptybindidx(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int) (X_5:bat[:oid], X_6:bat[:any_1]) ",	"mvc_bind_idxbat_wrap;",	""	]
[ "sql",	"emptybindidx",	"pattern sql.emptybindidx(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int):bat[:any_1] ",	"mvc_bind_idxbat_wrap;",	""	]
[ "sql",	"emptybindidx",	"pattern sql.emptybindidx(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int, X_5:int, X_6:int) (X_7:bat[:oid], X_8:bat[:any_1]) ",	"mvc_bind_idxbat_wrap;",	""	]
[ "sql",	"emptybindidx",	"pattern sql.emptybindidx(X_0:int, X_1:str, X_2:str, X_3:str, X_4:int, X_5:int, X_6:int):bat[:any_1] ",	"mvc_bind_idxbat_wrap;",	""	]
[ "sql",	"epilogue",	"command sql.epilogue():void ",	"SQLepilogue;",	""	]
[ "sql",	"eval",	"pattern sql.eval(X_0:str):void ",	"SQLstatement;",	""	]
[ "sql",	"eval",	"pattern sql.eval(X_0:str, X_1:bit):void ",	"SQLstatement;",	""	]
[ "sql",	"evalAlgebra",	"pattern sql.evalAlgebra(X_0:str, X_1:bit):void ",	"RAstatement;",	""	]
[ "sql",	"exportChunk",	"unsafe pattern sql.exportChunk(X_0:streams, X_1:int):void ",	"mvc_export_chunk_wrap;",	""	]
[ "sql",	"exportChunk",	"unsafe pattern sql.exportChunk(X_0:streams, X_1:int, X_2:int, X_3:int):void ",	"mvc_export_chunk_wrap;",	""	]
[ "sql",	"exportHead",	"unsafe pattern sql.exportHead(X_0:streams, X_1:int):void ",	"mvc_export_head_wrap;",	""	]
[ "sql",	"exportOperation",	"unsafe pattern sql.exportOperation():void ",	"mvc_export_operation_wrap;",	""	]
[ "sql",	"exportResult",	"unsafe pattern sql.exportResult(X_0:streams, X_1:int):void ",	"mvc_export_result_wrap;",	""	]
[ "sql",	"export_table",	"unsafe pattern sql.export_table(X_0:str, X_1:str, X_2:str, X_3:str, X_4:str, X_5:str, X_6:int, X_7:bat[:str], X_8:bat[:str], X_9:bat[:str], X_10:bat[:int], X_11:bat[:int], X_12:any...):int ",	"mvc_export_row_wrap;",	""	]
[ "sql",	"export_table",	"unsafe pattern sql.export_table(X_0:str, X_1:str, X_2:str, X_3:str, X_4:str, X_5:str, X_6:int, X_7:bat[:str], X_8:bat[:str], X_9:bat[:str], X_10:bat[:int], X_11:bat[:int], X_12:bat[:any]...):int ",	"mvc_export_table_wrap;",	""	]
[ "sql",	"first_value",	"pattern sql.first_value(X_0:any_1, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):any_1 ",	"SQLfirst_value;",	""	]
[ "sql",	"getVariable",	"pattern sql.getVariable(X_0:int, X_1:str, X_2:str):any_1 ",	"getVariable;",	""	]
[ "sql",	"getVersion",	"command sql.getVersion(X_0:int):lng ",	"mvc_getVersion;",	""	]
[ "sql",	"get_value",	"pattern sql.get_value(X_0:str, X_1:str):lng ",	"mvc_get_value;",	""	]
[ "sql",	"grow",	"pattern sql.grow(X_0:bat[:oid], X_1:any_1):int ",	"mvc_grow_wrap;",	""	]
[ "sql",	"hot_snapshot",	"unsafe pattern sql.hot_snapshot(X_0:str):void ",	"SQLhot_snapshot;",	""	]
[ "sql",	"hot_snapshot",	"unsafe pattern sql.hot_snapshot(X_0:str, X_1:bit):void ",	"SQLhot_snapshot_wrap;",	""	]
[ "sql",	"importColumn",	"pattern sql.importColumn(X_0:str, X_1:bit, X_2:str, X_3:int, X_4:oid) (X_5:bat[:any], X_6:oid) ",	"mvc_bin_import_column_wrap;",	""	]
[ "sql",	"importTable",	"unsafe pattern sql.importTable(X_0:str, X_1:str, X_2:int, X_3:bit, X_4:str...):bat[:any]... ",	"mvc_bin_import_table_wrap;",	""	]
[ "sql",	"include",	"pattern sql.include(X_0:str):void ",	"SQLinclude;",	""	]
[ "sql",	"index",	"command sql.index(X_0:str, X_1:bit):bte ",	"STRindex_bte;",	""	]
[ "sql",	"index",	"command sql.index(X_0:str, X_1:bit):int ",	"STRindex_int;",	""	]
[ "sql",	"index",	"command sql.index(X_0:str, X_1:bit):sht ",	"STRindex_sht;",	""	]
[ "sql",	"lag",	"pattern sql.lag(X_0:any_1, X_1:any, X_2:any_1, X_3:bit, X_4:bit):any_1 ",	"SQLlag;",	""	]
[ "sql",	"lag",	"pattern sql.lag(X_0:any_1, X_1:any, X_2:bit, X_3:bit):any_1 ",	"SQLlag;",	""	]
[ "sql",	"lag",	"pattern sql.lag(X_0:any_1, X_1:bit, X_2:bit):any_1 ",	"SQLlag;",	""	]
[ "sql",	"last_value",	"pattern sql.last_value(X_0:any_1, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):any_1 ",	"SQLlast_value;",	""	]
[ "sql",	"lead",	"pattern sql.lead(X_0:any_1, X_1:any, X_2:any_1, X_3:bit, X_4:bit):any_1 ",	"SQLlead;",	""	]
[ "sql",	"lead",	"pattern sql.lead(X_0:any_1, X_1:any, X_2:bit, X_3:bit):any_1 ",	"SQLlead;",	""	]
[ "sql",	"lead",	"pattern sql.lead(X_0:any_1, X_1:bit, X_2:bit):any_1 ",	"SQLlead;",	""	]
[ "sql",	"logfile",	"unsafe pattern sql.logfile(X_0:str):void ",	"mvc_logfile;",	""	]
[ "sql",	"max",	"pattern sql.max(X_0:any_1, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):any_1 ",	"SQLmax;",	""	]
[ "sql",	"min",	"pattern sql.min(X_0:any_1, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):any_1 ",	"SQLmin;",	""	]
[ "sql",	"ms_trunc",	"command sql.ms_trunc(X_0:dbl, X_1:int):dbl ",	"dbl_trunc_wrap;",	""	]
[ "sql",	"ms_trunc",	"command sql.ms_trunc(X_0:flt, X_1:int):flt ",	"flt_trunc_wrap;",	""	]
[ "sql",	"mvc",	"pattern sql.mvc():int ",	"SQLmvc;",	""	]
[ "sql",	"next_value",	"unsafe pattern sql.next_value(X_0:str, X_1:str):lng ",	"mvc_next_value;",	""	]
[ "sql",	"nth_value",	"pattern sql.nth_value(X_0:any_1, X_1:lng, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):any_1 ",	"SQLnth_value;",	""	]
[ "sql",	"ntile",	"pattern sql.ntile(X_0:any, X_1:any_1, X_2:bit, X_3:bit):any_1 ",	"SQLntile;",	""	]
[ "sql",	"optimizer_updates",	"pattern sql.optimizer_updates():void ",	"SQLoptimizersUpdate;",	""	]
[ "sql",	"optimizers",	"command sql.optimizers() (X_0:bat[:str], X_1:bat[:str], X_2:bat[:str]) ",	"getPipeCatalog;",	""	]
[ "sql",	"password",	"pattern sql.password(X_0:str):str ",	"db_password_wrap;",	""	]
[ "sql",	"percent_rank",	"pattern sql.percent_rank(X_0:any_1, X_1:bit, X_2:bit):dbl ",	"SQLpercent_rank;",	""	]
[ "sql",	"prelude",	"pattern sql.prelude():void ",	"SQLprelude;",	""	]
[ "sql",	"prepared_statements",	"pattern sql.prepared_statements() (X_0:bat[:int], X_1:bat[:str], X_2:bat[:int], X_3:bat[:str], X_4:bat[:timestamp]) ",	"SQLsession_prepared_statements;",	""	]
[ "sql",	"prepared_statements_args",	"pattern sql.prepared_statements_args() (X_0:bat[:int], X_1:bat[:str], X_2:bat[:int], X_3:bat[:int], X_4:bat[:bte], X_5:bat[:int], X_6:bat[:str], X_7:bat[:str], X_8:bat[:str]) ",	"SQLsession_prepared_statements_args;",	""	]
[ "sql",	"prod",	"pattern sql.prod(X_0:bte, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):lng ",	"SQLprod;",	""	]
[ "sql",	"prod",	"pattern sql.prod(X_0:dbl, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLprod;",	""	]
[ "sql",	"prod",	"pattern sql.prod(X_0:flt, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLprod;",	""	]
[ "sql",	"prod",	"pattern sql.prod(X_0:flt, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):flt ",	"SQLprod;",	""	]
[ "sql",	"prod",	"pattern sql.prod(X_0:int, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):lng ",	"SQLprod;",	""	]
[ "sql",	"prod",	"pattern sql.prod(X_0:lng, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):lng ",	"SQLprod;",	""	]
[ "sql",	"prod",	"pattern sql.prod(X_0:sht, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):lng ",	"SQLprod;",	""	]
[ "sql",	"project",	"command sql.project(X_0:bat[:oid], X_1:bat[:oid], X_2:bat[:oid]):bat[:oid] ",	"BATleftproject;",	""	]
[ "sql",	"projectdelta",	"command sql.projectdelta(X_0:bat[:oid], X_1:bat[:any_3], X_2:bat[:oid], X_3:bat[:any_3]):bat[:any_3] ",	"DELTAproject;",	""	]
[ "sql",	"querylog_calls",	"pattern sql.querylog_calls() (X_0:bat[:oid], X_1:bat[:timestamp], X_2:bat[:timestamp], X_3:bat[:str], X_4:bat[:lng], X_5:bat[:lng], X_6:bat[:lng], X_7:bat[:int], X_8:bat[:int]) ",	"sql_querylog_calls;",	""	]
[ "sql",	"querylog_catalog",	"pattern sql.querylog_catalog() (X_0:bat[:oid], X_1:bat[:str], X_2:bat[:timestamp], X_3:bat[:str], X_4:bat[:str], X_5:bat[:str], X_6:bat[:int], X_7:bat[:lng]) ",	"sql_querylog_catalog;",	""	]
[ "sql",	"querylog_disable",	"unsafe command sql.querylog_disable():void ",	"QLOGdisable;",	""	]
[ "sql",	"querylog_empty",	"unsafe pattern sql.querylog_empty():void ",	"sql_querylog_empty;",	""	]
[ "sql",	"querylog_enable",	"unsafe command sql.querylog_enable():void ",	"QLOGenable;",	""	]
[ "sql",	"querylog_enable",	"unsafe command sql.querylog_enable(X_0:int):void ",	"QLOGenableThreshold;",	""	]
[ "sql",	"rank",	"pattern sql.rank(X_0:any_1, X_1:bit, X_2:bit):int ",	"SQLrank;",	""	]
[ "sql",	"register",	"pattern sql.register(X_0:str, X_1:str, X_2:str, X_3:str):int ",	"RAstatement2;",	""	]
[ "sql",	"register",	"pattern sql.register(X_0:str, X_1:str, X_2:str, X_3:str, X_4:str):int ",	"RAstatement2;",	""	]
[ "sql",	"restart",	"unsafe pattern sql.restart(X_0:str, X_1:str, X_2:lng):lng ",	"mvc_restart_seq;",	""	]
[ "sql",	"resultSet",	"unsafe pattern sql.resultSet(X_0:bat[:str], X_1:bat[:str], X_2:bat[:str], X_3:bat[:int], X_4:bat[:int], X_5:any...):int ",	"mvc_row_result_wrap;",	""	]
[ "sql",	"resultSet",	"unsafe pattern sql.resultSet(X_0:str, X_1:str, X_2:str, X_3:int, X_4:int, X_5:int, X_6:any):int ",	"mvc_scalar_value_wrap;",	""	]
[ "sql",	"resultSet",	"unsafe pattern sql.resultSet(X_0:bat[:str], X_1:bat[:str], X_2:bat[:str], X_3:bat[:int], X_4:bat[:int], X_5:bat[:any]...):int ",	"mvc_table_result_wrap;",	""	]
[ "sql",	"resume_log_flushing",	"unsafe pattern sql.resume_log_flushing():void ",	"SQLresume_log_flushing;",	""	]
[ "sql",	"row_number",	"pattern sql.row_number(X_0:any_1, X_1:bit, X_2:bit):int ",	"SQLrow_number;",	""	]
[ "sql",	"rt_credentials",	"pattern sql.rt_credentials(X_0:str) (X_1:bat[:str], X_2:bat[:str], X_3:bat[:str]) ",	"sql_rt_credentials_wrap;",	""	]
[ "sql",	"sessions",	"pattern sql.sessions() (X_0:bat[:int], X_1:bat[:str], X_2:bat[:timestamp], X_3:bat[:timestamp], X_4:bat[:str], X_5:bat[:int], X_6:bat[:int], X_7:bat[:int], X_8:bat[:int]) ",	"sql_sessions_wrap;",	""	]
[ "sql",	"setVariable",	"unsafe pattern sql.setVariable(X_0:int, X_1:str, X_2:str, X_3:any_1):int ",	"setVariable;",	""	]
[ "sql",	"set_protocol",	"unsafe pattern sql.set_protocol(X_0:int):int ",	"SQLset_protocol;",	""	]
[ "sql",	"shutdown",	"pattern sql.shutdown(X_0:bte):str ",	"SQLshutdown_wrap;",	""	]
[ "sql",	"shutdown",	"pattern sql.shutdown(X_0:bte, X_1:bit):str ",	"SQLshutdown_wrap;",	""	]
[ "sql",	"shutdown",	"pattern sql.shutdown(X_0:int):str ",	"SQLshutdown_wrap;",	""	]
[ "sql",	"shutdown",	"pattern sql.shutdown(X_0:int, X_1:bit):str ",	"SQLshutdown_wrap;",	""	]
[ "sql",	"shutdown",	"pattern sql.shutdown(X_0:sht):str ",	"SQLshutdown_wrap;",	""	]
[ "sql",	"shutdown",	"pattern sql.shutdown(X_0:sht, X_1:bit):str ",	"SQLshutdown_wrap;",	""	]
[ "sql",	"sql_variables",	"pattern sql.sql_variables() (X_0:bat[:str], X_1:bat[:str], X_2:bat[:str], X_3:bat[:str]) ",	"sql_variables;",	""	]
[ "sql",	"stdev",	"pattern sql.stdev(X_0:bte, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_samp;",	""	]
[ "sql",	"stdev",	"pattern sql.stdev(X_0:dbl, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_samp;",	""	]
[ "sql",	"stdev",	"pattern sql.stdev(X_0:flt, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_samp;",	""	]
[ "sql",	"stdev",	"pattern sql.stdev(X_0:int, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_samp;",	""	]
[ "sql",	"stdev",	"pattern sql.stdev(X_0:lng, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_samp;",	""	]
[ "sql",	"stdev",	"pattern sql.stdev(X_0:sht, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_samp;",	""	]
[ "sql",	"stdevp",	"pattern sql.stdevp(X_0:bte, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_pop;",	""	]
[ "sql",	"stdevp",	"pattern sql.stdevp(X_0:dbl, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_pop;",	""	]
[ "sql",	"stdevp",	"pattern sql.stdevp(X_0:flt, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_pop;",	""	]
[ "sql",	"stdevp",	"pattern sql.stdevp(X_0:int, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_pop;",	""	]
[ "sql",	"stdevp",	"pattern sql.stdevp(X_0:lng, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_pop;",	""	]
[ "sql",	"stdevp",	"pattern sql.stdevp(X_0:sht, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLstddev_pop;",	""	]
[ "sql",	"storage",	"pattern sql.storage() (X_0:bat[:str], X_1:bat[:str], X_2:bat[:str], X_3:bat[:str], X_4:bat[:str], X_5:bat[:str], X_6:bat[:lng], X_7:bat[:int], X_8:bat[:lng], X_9:bat[:lng], X_10:bat[:lng], X_11:bat[:bit], X_12:bat[:lng], X_13:bat[:bit], X_14:bat[:bit], X_15:bat[:bit], X_16:bat[:lng]) ",	"sql_storage;",	""	]
[ "sql",	"storage",	"pattern sql.storage(X_0:str) (X_1:bat[:str], X_2:bat[:str], X_3:bat[:str], X_4:bat[:str], X_5:bat[:str], X_6:bat[:str], X_7:bat[:lng], X_8:bat[:int], X_9:bat[:lng], X_10:bat[:lng], X_11:bat[:lng], X_12:bat[:bit], X_13:bat[:lng], X_14:bat[:bit], X_15:bat[:bit], X_16:bat[:bit], X_17:bat[:lng]) ",	"sql_storage;",	""	]
[ "sql",	"storage",	"pattern sql.storage(X_0:str, X_1:str) (X_2:bat[:str], X_3:bat[:str], X_4:bat[:str], X_5:bat[:str], X_6:bat[:str], X_7:bat[:str], X_8:bat[:lng], X_9:bat[:int], X_10:bat[:lng], X_11:bat[:lng], X_12:bat[:lng], X_13:bat[:bit], X_14:bat[:lng], X_15:bat[:bit], X_16:bat[:bit], X_17:bat[:bit], X_18:bat[:lng]) ",	"sql_storage;",	""	]
[ "sql",	"storage",	"pattern sql.storage(X_0:str, X_1:str, X_2:str) (X_3:bat[:str], X_4:bat[:str], X_5:bat[:str], X_6:bat[:str], X_7:bat[:str], X_8:bat[:str], X_9:bat[:lng], X_10:bat[:int], X_11:bat[:lng], X_12:bat[:lng], X_13:bat[:lng], X_14:bat[:bit], X_15:bat[:lng], X_16:bat[:bit], X_17:bat[:bit], X_18:bat[:bit], X_19:bat[:lng]) ",	"sql_storage;",	""	]
[ "sql",	"str_group_concat",	"pattern sql.str_group_concat(X_0:str, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):str ",	"SQLstrgroup_concat;",	""	]
[ "sql",	"str_group_concat",	"pattern sql.str_group_concat(X_0:str, X_1:str, X_2:bit, X_3:bit, X_4:int, X_5:oid, X_6:oid):str ",	"SQLstrgroup_concat;",	""	]
[ "sql",	"strings",	"command sql.strings(X_0:str):str ",	"STRstrings;",	""	]
[ "sql",	"subdelta",	"command sql.subdelta(X_0:bat[:oid], X_1:bat[:oid], X_2:bat[:oid], X_3:bat[:oid]):bat[:oid] ",	"DELTAsub;",	""	]
[ "sql",	"sum",	"pattern sql.sum(X_0:bte, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):lng ",	"SQLsum;",	""	]
[ "sql",	"sum",	"pattern sql.sum(X_0:dbl, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLsum;",	""	]
[ "sql",	"sum",	"pattern sql.sum(X_0:flt, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLsum;",	""	]
[ "sql",	"sum",	"pattern sql.sum(X_0:flt, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):flt ",	"SQLsum;",	""	]
[ "sql",	"sum",	"pattern sql.sum(X_0:int, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):lng ",	"SQLsum;",	""	]
[ "sql",	"sum",	"pattern sql.sum(X_0:lng, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):lng ",	"SQLsum;",	""	]
[ "sql",	"sum",	"pattern sql.sum(X_0:sht, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):lng ",	"SQLsum;",	""	]
[ "sql",	"suspend_log_flushing",	"unsafe pattern sql.suspend_log_flushing():void ",	"SQLsuspend_log_flushing;",	""	]
[ "sql",	"tid",	"pattern sql.tid(X_0:int, X_1:str, X_2:str):bat[:oid] ",	"SQLtid;",	""	]
[ "sql",	"tid",	"pattern sql.tid(X_0:int, X_1:str, X_2:str, X_3:int, X_4:int):bat[:oid] ",	"SQLtid;",	""	]
[ "sql",	"transaction",	"unsafe pattern sql.transaction():void ",	"SQLtransaction2;",	""	]
[ "sql",	"transaction",	"unsafe pattern sql.transaction():void ",	"SQLtransaction2;",	""	]
[ "sql",	"transaction_begin",	"unsafe pattern sql.transaction_begin(X_0:int, X_1:str):void ",	"SQLtransaction_begin;",	""	]
[ "sql",	"transaction_commit",	"unsafe pattern sql.transaction_commit(X_0:int, X_1:str):void ",	"SQLtransaction_commit;",	""	]
[ "sql",	"transaction_release",	"unsafe pattern sql.transaction_release(X_0:int, X_1:str):void ",	"SQLtransaction_release;",	""	]
[ "sql",	"transaction_rollback",	"unsafe pattern sql.transaction_rollback(X_0:int, X_1:str):void ",	"SQLtransaction_rollback;",	""	]
[ "sql",	"unionfunc",	"pattern sql.unionfunc(X_0:str, X_1:str, X_2:any...):any... ",	"SQLunionfunc;",	""	]
[ "sql",	"update",	"pattern sql.update(X_0:int, X_1:str, X_2:str, X_3:str, X_4:any, X_5:any):int ",	"mvc_update_wrap;",	""	]
[ "sql",	"update_schemas",	"unsafe pattern sql.update_schemas():void ",	"SYSupdate_schemas;",	""	]
[ "sql",	"update_tables",	"unsafe pattern sql.update_tables():void ",	"SYSupdate_tables;",	""	]
[ "sql",	"variance",	"pattern sql.variance(X_0:bte, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_samp;",	""	]
[ "sql",	"variance",	"pattern sql.variance(X_0:dbl, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_samp;",	""	]
[ "sql",	"variance",	"pattern sql.variance(X_0:flt, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_samp;",	""	]
[ "sql",	"variance",	"pattern sql.variance(X_0:int, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_samp;",	""	]
[ "sql",	"variance",	"pattern sql.variance(X_0:lng, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_samp;",	""	]
[ "sql",	"variance",	"pattern sql.variance(X_0:sht, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_samp;",	""	]
[ "sql",	"variancep",	"pattern sql.variancep(X_0:bte, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_pop;",	""	]
[ "sql",	"variancep",	"pattern sql.variancep(X_0:dbl, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_pop;",	""	]
[ "sql",	"variancep",	"pattern sql.variancep(X_0:flt, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_pop;",	""	]
[ "sql",	"variancep",	"pattern sql.variancep(X_0:int, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_pop;",	""	]
[ "sql",	"variancep",	"pattern sql.variancep(X_0:lng, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_pop;",	""	]
[ "sql",	"variancep",	"pattern sql.variancep(X_0:sht, X_1:bit, X_2:bit, X_3:int, X_4:oid, X_5:oid):dbl ",	"SQLvar_pop;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:any_1, X_1:int, X_2:int, X_3:int, X_4:bte):oid ",	"SQLwindow_bound;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:any_1, X_1:int, X_2:int, X_3:int, X_4:dbl):oid ",	"SQLwindow_bound;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:any_1, X_1:int, X_2:int, X_3:int, X_4:flt):oid ",	"SQLwindow_bound;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:any_1, X_1:int, X_2:int, X_3:int, X_4:int):oid ",	"SQLwindow_bound;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:any_1, X_1:int, X_2:int, X_3:int, X_4:lng):oid ",	"SQLwindow_bound;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:any_1, X_1:int, X_2:int, X_3:int, X_4:sht):oid ",	"SQLwindow_bound;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:bit, X_1:any_1, X_2:int, X_3:int, X_4:int, X_5:bte):oid ",	"SQLwindow_bound;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:bit, X_1:any_1, X_2:int, X_3:int, X_4:int, X_5:dbl):oid ",	"SQLwindow_bound;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:bit, X_1:any_1, X_2:int, X_3:int, X_4:int, X_5:flt):oid ",	"SQLwindow_bound;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:bit, X_1:any_1, X_2:int, X_3:int, X_4:int, X_5:int):oid ",	"SQLwindow_bound;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:bit, X_1:any_1, X_2:int, X_3:int, X_4:int, X_5:lng):oid ",	"SQLwindow_bound;",	""	]
[ "sql",	"window_bound",	"pattern sql.window_bound(X_0:bit, X_1:any_1, X_2:int, X_3:int, X_4:int, X_5:sht):oid ",	"SQLwindow_bound;",	""	]
[ "sqlcatalog",	"alter_add_range_partition",	"pattern sqlcatalog.alter_add_range_partition(X_0:str, X_1:str, X_2:str, X_3:str, X_4:any_1, X_5:any_1, X_6:bit, X_7:int):void ",	"SQLalter_add_range_partition;",	""	]
[ "sqlcatalog",	"alter_add_table",	"pattern sqlcatalog.alter_add_table(X_0:str, X_1:str, X_2:str, X_3:str, X_4:int):void ",	"SQLalter_add_table;",	""	]
[ "sqlcatalog",	"alter_add_value_partition",	"pattern sqlcatalog.alter_add_value_partition(X_0:str, X_1:str, X_2:str, X_3:str, X_4:bit, X_5:int):void ",	"SQLalter_add_value_partition;",	""	]
[ "sqlcatalog",	"alter_add_value_partition",	"pattern sqlcatalog.alter_add_value_partition(X_0:str, X_1:str, X_2:str, X_3:str, X_4:bit, X_5:int, X_6:any...):void ",	"SQLalter_add_value_partition;",	""	]
[ "sqlcatalog",	"alter_del_table",	"pattern sqlcatalog.alter_del_table(X_0:str, X_1:str, X_2:str, X_3:str, X_4:int):void ",	"SQLalter_del_table;",	""	]
[ "sqlcatalog",	"alter_seq",	"pattern sqlcatalog.alter_seq(X_0:str, X_1:str, X_2:ptr, X_3:bat[:lng]):void ",	"SQLalter_seq;",	""	]
[ "sqlcatalog",	"alter_seq",	"pattern sqlcatalog.alter_seq(X_0:str, X_1:str, X_2:ptr, X_3:lng):void ",	"SQLalter_seq;",	""	]
[ "sqlcatalog",	"alter_set_table",	"pattern sqlcatalog.alter_set_table(X_0:str, X_1:str, X_2:int):void ",	"SQLalter_set_table;",	""	]
[ "sqlcatalog",	"alter_table",	"pattern sqlcatalog.alter_table(X_0:str, X_1:str, X_2:ptr, X_3:int):void ",	"SQLalter_table;",	""	]
[ "sqlcatalog",	"alter_user",	"pattern sqlcatalog.alter_user(X_0:str, X_1:str, X_2:int, X_3:str, X_4:str, X_5:str):void ",	"SQLalter_user;",	""	]
[ "sqlcatalog",	"comment_on",	"pattern sqlcatalog.comment_on(X_0:int, X_1:str):void ",	"SQLcomment_on;",	""	]
[ "sqlcatalog",	"create_function",	"pattern sqlcatalog.create_function(X_0:str, X_1:str, X_2:ptr):void ",	"SQLcreate_function;",	""	]
[ "sqlcatalog",	"create_role",	"pattern sqlcatalog.create_role(X_0:str, X_1:str, X_2:int):void ",	"SQLcreate_role;",	""	]
[ "sqlcatalog",	"create_schema",	"pattern sqlcatalog.create_schema(X_0:str, X_1:str, X_2:int):void ",	"SQLcreate_schema;",	""	]
[ "sqlcatalog",	"create_seq",	"pattern sqlcatalog.create_seq(X_0:str, X_1:str, X_2:ptr, X_3:int):void ",	"SQLcreate_seq;",	""	]
[ "sqlcatalog",	"create_table",	"pattern sqlcatalog.create_table(X_0:str, X_1:str, X_2:ptr, X_3:int):void ",	"SQLcreate_table;",	""	]
[ "sqlcatalog",	"create_trigger",	"pattern sqlcatalog.create_trigger(X_0:str, X_1:str, X_2:str, X_3:int, X_4:int, X_5:int, X_6:str, X_7:str, X_8:str, X_9:str):void ",	"SQLcreate_trigger;",	""	]
[ "sqlcatalog",	"create_type",	"pattern sqlcatalog.create_type(X_0:str, X_1:str, X_2:str):void ",	"SQLcreate_type;",	""	]
[ "sqlcatalog",	"create_user",	"pattern sqlcatalog.create_user(X_0:str, X_1:str, X_2:int, X_3:str, X_4:str, X_5:str):void ",	"SQLcreate_user;",	""	]
[ "sqlcatalog",	"create_view",	"pattern sqlcatalog.create_view(X_0:str, X_1:str, X_2:ptr, X_3:int):void ",	"SQLcreate_view;",	""	]
[ "sqlcatalog",	"drop_constraint",	"pattern sqlcatalog.drop_constraint(X_0:str, X_1:str, X_2:str, X_3:int, X_4:int):void ",	"SQLdrop_constraint;",	""	]
[ "sqlcatalog",	"drop_function",	"pattern sqlcatalog.drop_function(X_0:str, X_1:str, X_2:int, X_3:int, X_4:int):void ",	"SQLdrop_function;",	""	]
[ "sqlcatalog",	"drop_index",	"pattern sqlcatalog.drop_index(X_0:str, X_1:str, X_2:int):void ",	"SQLdrop_index;",	""	]
[ "sqlcatalog",	"drop_role",	"pattern sqlcatalog.drop_role(X_0:str, X_1:int):void ",	"SQLdrop_role;",	""	]
[ "sqlcatalog",	"drop_role",	"pattern sqlcatalog.drop_role(X_0:str, X_1:str, X_2:int):void ",	"SQLdrop_role;",	""	]
[ "sqlcatalog",	"drop_schema",	"pattern sqlcatalog.drop_schema(X_0:str, X_1:int, X_2:int):void ",	"SQLdrop_schema;",	""	]
[ "sqlcatalog",	"drop_seq",	"pattern sqlcatalog.drop_seq(X_0:str, X_1:str, X_2:int):void ",	"SQLdrop_seq;",	""	]
[ "sqlcatalog",	"drop_table",	"pattern sqlcatalog.drop_table(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"SQLdrop_table;",	""	]
[ "sqlcatalog",	"drop_trigger",	"pattern sqlcatalog.drop_trigger(X_0:str, X_1:str, X_2:int):void ",	"SQLdrop_trigger;",	""	]
[ "sqlcatalog",	"drop_type",	"pattern sqlcatalog.drop_type(X_0:str, X_1:str, X_2:int):void ",	"SQLdrop_type;",	""	]
[ "sqlcatalog",	"drop_user",	"pattern sqlcatalog.drop_user(X_0:str, X_1:int):void ",	"SQLdrop_user;",	""	]
[ "sqlcatalog",	"drop_user",	"pattern sqlcatalog.drop_user(X_0:str, X_1:str, X_2:int):void ",	"SQLdrop_user;",	""	]
[ "sqlcatalog",	"drop_view",	"pattern sqlcatalog.drop_view(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"SQLdrop_view;",	""	]
[ "sqlcatalog",	"grant",	"pattern sqlcatalog.grant(X_0:str, X_1:str, X_2:str, X_3:int, X_4:str, X_5:int, X_6:int):void ",	"SQLgrant;",	""	]
[ "sqlcatalog",	"grant_function",	"pattern sqlcatalog.grant_function(X_0:str, X_1:int, X_2:str, X_3:int, X_4:int, X_5:int):void ",	"SQLgrant_function;",	""	]
[ "sqlcatalog",	"grant_roles",	"pattern sqlcatalog.grant_roles(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"SQLgrant_roles;",	""	]
[ "sqlcatalog",	"rename_column",	"pattern sqlcatalog.rename_column(X_0:str, X_1:str, X_2:str, X_3:str):void ",	"SQLrename_column;",	""	]
[ "sqlcatalog",	"rename_schema",	"pattern sqlcatalog.rename_schema(X_0:str, X_1:str):void ",	"SQLrename_schema;",	""	]
[ "sqlcatalog",	"rename_table",	"pattern sqlcatalog.rename_table(X_0:str, X_1:str, X_2:str, X_3:str):void ",	"SQLrename_table;",	""	]
[ "sqlcatalog",	"rename_user",	"pattern sqlcatalog.rename_user(X_0:str, X_1:str, X_2:int):void ",	"SQLrename_user;",	""	]
[ "sqlcatalog",	"revoke",	"pattern sqlcatalog.revoke(X_0:str, X_1:str, X_2:str, X_3:int, X_4:str, X_5:int, X_6:int):void ",	"SQLrevoke;",	""	]
[ "sqlcatalog",	"revoke_function",	"pattern sqlcatalog.revoke_function(X_0:str, X_1:int, X_2:str, X_3:int, X_4:int, X_5:int):void ",	"SQLrevoke_function;",	""	]
[ "sqlcatalog",	"revoke_roles",	"pattern sqlcatalog.revoke_roles(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"SQLrevoke_roles;",	""	]
[ "status",	"batStatistics",	"command status.batStatistics() (X_0:bat[:str], X_1:bat[:str]) ",	"SYSgdkEnv;",	""	]
[ "status",	"cpuStatistics",	"command status.cpuStatistics() (X_0:bat[:str], X_1:bat[:lng]) ",	"SYScpuStatistics;",	""	]
[ "status",	"getThreads",	"command status.getThreads() (X_0:bat[:int], X_1:bat[:str]) ",	"SYSgdkThread;",	""	]
[ "status",	"ioStatistics",	"command status.ioStatistics() (X_0:bat[:str], X_1:bat[:lng]) ",	"SYSioStatistics;",	""	]
[ "status",	"memStatistics",	"command status.memStatistics() (X_0:bat[:str], X_1:bat[:lng]) ",	"SYSmemStatistics;",	""	]
[ "status",	"memUsage",	"command status.memUsage(X_0:lng) (X_1:bat[:str], X_2:bat[:lng]) ",	"SYSmem_usage;",	""	]
[ "status",	"mem_cursize",	"command status.mem_cursize():lng ",	"SYSgetmem_cursize;",	""	]
[ "status",	"mem_maxsize",	"command status.mem_maxsize():lng ",	"SYSgetmem_maxsize;",	""	]
[ "status",	"mem_maxsize",	"command status.mem_maxsize(X_0:lng):void ",	"SYSsetmem_maxsize;",	""	]
[ "status",	"vmStatistics",	"command status.vmStatistics(X_0:lng) (X_1:bat[:str], X_2:bat[:lng]) ",	"SYSvm_usage;",	""	]
[ "status",	"vm_cursize",	"command status.vm_cursize():lng ",	"SYSgetvm_cursize;",	""	]
[ "status",	"vm_maxsize",	"command status.vm_maxsize():lng ",	"SYSgetvm_maxsize;",	""	]
[ "status",	"vm_maxsize",	"command status.vm_maxsize(X_0:lng):void ",	"SYSsetvm_maxsize;",	""	]
[ "str",	"ascii",	"command str.ascii(X_0:str):int ",	"STRascii;",	""	]
[ "str",	"endsWith",	"command str.endsWith(X_0:str, X_1:str):bit ",	"STRSuffix;",	""	]
[ "str",	"epilogue",	"command str.epilogue():void ",	"STRepilogue;",	""	]
[ "str",	"insert",	"command str.insert(X_0:str, X_1:int, X_2:int, X_3:str):str ",	"STRinsert;",	""	]
[ "str",	"length",	"command str.length(X_0:str):int ",	"STRLength;",	""	]
[ "str",	"like",	"command str.like(X_0:str, X_1:str):bit ",	"STRlikewrap;",	""	]
[ "str",	"like3",	"command str.like3(X_0:str, X_1:str, X_2:str):bit ",	"STRlikewrap3;",	""	]
[ "str",	"locate",	"command str.locate(X_0:str, X_1:str):int ",	"STRlocate;",	""	]
[ "str",	"locate3",	"command str.locate3(X_0:str, X_1:str, X_2:int):int ",	"STRlocate3;",	""	]
[ "str",	"lpad",	"command str.lpad(X_0:str, X_1:int):str ",	"STRLpad;",	""	]
[ "str",	"lpad3",	"command str.lpad3(X_0:str, X_1:int, X_2:str):str ",	"STRLpad3;",	""	]
[ "str",	"ltrim",	"command str.ltrim(X_0:str):str ",	"STRLtrim;",	""	]
[ "str",	"ltrim2",	"command str.ltrim2(X_0:str, X_1:str):str ",	"STRLtrim2;",	""	]
[ "str",	"nbytes",	"command str.nbytes(X_0:str):int ",	"STRBytes;",	""	]
[ "str",	"prefix",	"command str.prefix(X_0:str, X_1:int):str ",	"STRprefix;",	""	]
[ "str",	"prelude",	"command str.prelude():void ",	"STRprelude;",	""	]
[ "str",	"r_search",	"command str.r_search(X_0:str, X_1:str):int ",	"STRReverseStrSearch;",	""	]
[ "str",	"repeat",	"command str.repeat(X_0:str, X_1:int):str ",	"STRrepeat;",	""	]
[ "str",	"replace",	"command str.replace(X_0:str, X_1:str, X_2:str, X_3:str):str ",	"PCREreplace_wrap;",	""	]
[ "str",	"replace",	"command str.replace(X_0:str, X_1:str, X_2:str):str ",	"STRreplace;",	""	]
[ "str",	"rpad",	"command str.rpad(X_0:str, X_1:int):str ",	"STRRpad;",	""	]
[ "str",	"rpad3",	"command str.rpad3(X_0:str, X_1:int, X_2:str):str ",	"STRRpad3;",	""	]
[ "str",	"rtrim",	"command str.rtrim(X_0:str):str ",	"STRRtrim;",	""	]
[ "str",	"rtrim2",	"command str.rtrim2(X_0:str, X_1:str):str ",	"STRRtrim2;",	""	]
[ "str",	"search",	"command str.search(X_0:str, X_1:str):int ",	"STRstrSearch;",	""	]
[ "str",	"space",	"command str.space(X_0:int):str ",	"STRspace;",	""	]
[ "str",	"splitpart",	"command str.splitpart(X_0:str, X_1:str, X_2:int):str ",	"STRsplitpart;",	""	]
[ "str",	"startsWith",	"command str.startsWith(X_0:str, X_1:str):bit ",	"STRPrefix;",	""	]
[ "str",	"str",	"command str.str(X_0:str):str ",	"STRtostr;",	""	]
[ "str",	"string",	"command str.string(X_0:str, X_1:int):str ",	"STRTail;",	""	]
[ "str",	"string3",	"command str.string3(X_0:str, X_1:int, X_2:int):str ",	"STRSubString;",	""	]
[ "str",	"stringleft",	"command str.stringleft(X_0:str, X_1:int):str ",	"STRprefix;",	""	]
[ "str",	"stringright",	"command str.stringright(X_0:str, X_1:int):str ",	"STRsuffix;",	""	]
[ "str",	"substitute",	"command str.substitute(X_0:str, X_1:str, X_2:str, X_3:bit):str ",	"STRSubstitute;",	""	]
[ "str",	"substring",	"command str.substring(X_0:str, X_1:int):str ",	"STRsubstringTail;",	""	]
[ "str",	"substring3",	"command str.substring3(X_0:str, X_1:int, X_2:int):str ",	"STRsubstring;",	""	]
[ "str",	"suffix",	"command str.suffix(X_0:str, X_1:int):str ",	"STRsuffix;",	""	]
[ "str",	"toLower",	"command str.toLower(X_0:str):str ",	"STRLower;",	""	]
[ "str",	"toUpper",	"command str.toUpper(X_0:str):str ",	"STRUpper;",	""	]
[ "str",	"trim",	"command str.trim(X_0:str):str ",	"STRStrip;",	""	]
[ "str",	"trim2",	"command str.trim2(X_0:str, X_1:str):str ",	"STRStrip2;",	""	]
[ "str",	"unicode",	"command str.unicode(X_0:int):str ",	"STRFromWChr;",	""	]
[ "str",	"unicodeAt",	"command str.unicodeAt(X_0:str, X_1:int):int ",	"STRWChrAt;",	""	]
[ "streams",	"blocked",	"unsafe command streams.blocked(X_0:streams):streams ",	"open_block_streamwrap;",	""	]
[ "streams",	"close",	"unsafe command streams.close(X_0:streams):void ",	"mnstr_close_streamwrap;",	""	]
[ "streams",	"create",	"unsafe command streams.create(X_0:streams, X_1:int):bstream ",	"bstream_create_wrapwrap;",	""	]
[ "streams",	"destroy",	"unsafe command streams.destroy(X_0:bstream):void ",	"bstream_destroy_wrapwrap;",	""	]
[ "streams",	"flush",	"unsafe command streams.flush(X_0:streams):void ",	"mnstr_flush_streamwrap;",	""	]
[ "streams",	"openRead",	"unsafe command streams.openRead(X_0:str):streams ",	"mnstr_open_rastreamwrap;",	""	]
[ "streams",	"openReadBytes",	"unsafe command streams.openReadBytes(X_0:str):streams ",	"mnstr_open_rstreamwrap;",	""	]
[ "streams",	"openWrite",	"unsafe command streams.openWrite(X_0:str):streams ",	"mnstr_open_wastreamwrap;",	""	]
[ "streams",	"openWriteBytes",	"unsafe command streams.openWriteBytes(X_0:str):streams ",	"mnstr_open_wstreamwrap;",	""	]
[ "streams",	"read",	"unsafe command streams.read(X_0:bstream, X_1:int):int ",	"bstream_read_wrapwrap;",	""	]
[ "streams",	"readInt",	"unsafe command streams.readInt(X_0:streams):int ",	"mnstr_readIntwrap;",	""	]
[ "streams",	"readStr",	"unsafe command streams.readStr(X_0:streams):str ",	"mnstr_read_stringwrap;",	""	]
[ "streams",	"writeInt",	"unsafe command streams.writeInt(X_0:streams, X_1:int):void ",	"mnstr_writeIntwrap;",	""	]
[ "streams",	"writeStr",	"unsafe command streams.writeStr(X_0:streams, X_1:str):void ",	"mnstr_write_stringwrap;",	""	]
[ "sysmon",	"pause",	"pattern sysmon.pause(X_0:int):void ",	"SYSMONpause;",	""	]
[ "sysmon",	"pause",	"pattern sysmon.pause(X_0:lng):void ",	"SYSMONpause;",	""	]
[ "sysmon",	"pause",	"pattern sysmon.pause(X_0:sht):void ",	"SYSMONpause;",	""	]
[ "sysmon",	"queue",	"pattern sysmon.queue() (X_0:bat[:lng], X_1:bat[:int], X_2:bat[:str], X_3:bat[:timestamp], X_4:bat[:str], X_5:bat[:str], X_6:bat[:timestamp], X_7:bat[:int], X_8:bat[:int]) ",	"SYSMONqueue;",	""	]
[ "sysmon",	"resume",	"pattern sysmon.resume(X_0:int):void ",	"SYSMONresume;",	""	]
[ "sysmon",	"resume",	"pattern sysmon.resume(X_0:lng):void ",	"SYSMONresume;",	""	]
[ "sysmon",	"resume",	"pattern sysmon.resume(X_0:sht):void ",	"SYSMONresume;",	""	]
[ "sysmon",	"stop",	"pattern sysmon.stop(X_0:int):void ",	"SYSMONstop;",	""	]
[ "sysmon",	"stop",	"pattern sysmon.stop(X_0:lng):void ",	"SYSMONstop;",	""	]
[ "sysmon",	"stop",	"pattern sysmon.stop(X_0:sht):void ",	"SYSMONstop;",	""	]
[ "sysmon",	"user_statistics",	"pattern sysmon.user_statistics() (X_0:bat[:str], X_1:bat[:lng], X_2:bat[:lng], X_3:bat[:timestamp], X_4:bat[:timestamp], X_5:bat[:lng], X_6:bat[:str]) ",	"SYSMONstatistics;",	""	]
[ "tokenizer",	"append",	"command tokenizer.append(X_0:str):oid ",	"TKNZRappend;",	""	]
[ "tokenizer",	"close",	"command tokenizer.close():void ",	"TKNZRclose;",	""	]
[ "tokenizer",	"depositFile",	"command tokenizer.depositFile(X_0:str):void ",	"TKNZRdepositFile;",	""	]
[ "tokenizer",	"getCardinality",	"command tokenizer.getCardinality():bat[:lng] ",	"TKNZRgetCardinality;",	""	]
[ "tokenizer",	"getCount",	"command tokenizer.getCount():bat[:lng] ",	"TKNZRgetCount;",	""	]
[ "tokenizer",	"getIndex",	"command tokenizer.getIndex():bat[:oid] ",	"TKNZRgetIndex;",	""	]
[ "tokenizer",	"getLevel",	"command tokenizer.getLevel(X_0:int):bat[:str] ",	"TKNZRgetLevel;",	""	]
[ "tokenizer",	"locate",	"pattern tokenizer.locate(X_0:str):oid ",	"TKNZRlocate;",	""	]
[ "tokenizer",	"open",	"command tokenizer.open(X_0:str):void ",	"TKNZRopen;",	""	]
[ "tokenizer",	"take",	"pattern tokenizer.take(X_0:oid):str ",	"TKNZRtakeOid;",	""	]
[ "txtsim",	"editdistance",	"command txtsim.editdistance(X_0:str, X_1:str):int ",	"levenshteinbasic_impl;",	""	]
[ "txtsim",	"editdistance2",	"command txtsim.editdistance2(X_0:str, X_1:str):int ",	"levenshteinbasic2_impl;",	""	]
[ "txtsim",	"levenshtein",	"command txtsim.levenshtein(X_0:str, X_1:str, X_2:int, X_3:int, X_4:int):int ",	"levenshtein_impl;",	""	]
[ "txtsim",	"levenshtein",	"command txtsim.levenshtein(X_0:str, X_1:str):int ",	"levenshteinbasic_impl;",	""	]
[ "txtsim",	"qgramnormalize",	"command txtsim.qgramnormalize(X_0:str):str ",	"CMDqgramnormalize;",	""	]
[ "txtsim",	"qgramselfjoin",	"command txtsim.qgramselfjoin(X_0:bat[:oid], X_1:bat[:oid], X_2:bat[:int], X_3:bat[:int], X_4:flt, X_5:int) (X_6:bat[:int], X_7:bat[:int]) ",	"CMDqgramselfjoin;",	""	]
[ "txtsim",	"similarity",	"command txtsim.similarity(X_0:str, X_1:str):dbl ",	"fstrcmp0_impl;",	""	]
[ "txtsim",	"similarity",	"command txtsim.similarity(X_0:str, X_1:str, X_2:dbl):dbl ",	"fstrcmp_impl;",	""	]
[ "txtsim",	"soundex",	"command txtsim.soundex(X_0:str):str ",	"soundex_impl;",	""	]
[ "txtsim",	"str2qgrams",	"command txtsim.str2qgrams(X_0:str):bat[:str] ",	"CMDstr2qgrams;",	""	]
[ "txtsim",	"stringdiff",	"command txtsim.stringdiff(X_0:str, X_1:str):int ",	"stringdiff_impl;",	""	]
[ "udf",	"fuse",	"command udf.fuse(X_0:bte, X_1:bte):sht ",	"UDFfuse_bte_sht;",	""	]
[ "udf",	"fuse",	"command udf.fuse(X_0:int, X_1:int):lng ",	"UDFfuse_int_lng;",	""	]
[ "udf",	"fuse",	"command udf.fuse(X_0:sht, X_1:sht):int ",	"UDFfuse_sht_int;",	""	]
[ "udf",	"reverse",	"command udf.reverse(X_0:str):str ",	"UDFreverse;",	""	]
[ "url",	"getAnchor",	"command url.getAnchor(X_0:url):str ",	"URLgetAnchor;",	""	]
[ "url",	"getBasename",	"command url.getBasename(X_0:url):str ",	"URLgetBasename;",	""	]
[ "url",	"getContext",	"command url.getContext(X_0:url):str ",	"URLgetContext;",	""	]
[ "url",	"getDomain",	"command url.getDomain(X_0:url):str ",	"URLgetDomain;",	""	]
[ "url",	"getExtension",	"command url.getExtension(X_0:url):str ",	"URLgetExtension;",	""	]
[ "url",	"getFile",	"command url.getFile(X_0:url):str ",	"URLgetFile;",	""	]
[ "url",	"getHost",	"command url.getHost(X_0:url):str ",	"URLgetHost;",	""	]
[ "url",	"getPort",	"command url.getPort(X_0:url):str ",	"URLgetPort;",	""	]
[ "url",	"getProtocol",	"command url.getProtocol(X_0:url):str ",	"URLgetProtocol;",	""	]
[ "url",	"getQuery",	"command url.getQuery(X_0:url):str ",	"URLgetQuery;",	""	]
[ "url",	"getRobotURL",	"command url.getRobotURL(X_0:url):str ",	"URLgetRobotURL;",	""	]
[ "url",	"getUser",	"command url.getUser(X_0:url):str ",	"URLgetUser;",	""	]
[ "url",	"isaURL",	"command url.isaURL(X_0:str):bit ",	"URLisaURL;",	""	]
[ "url",	"new",	"command url.new(X_0:str, X_1:str, X_2:str):url ",	"URLnew3;",	""	]
[ "url",	"new",	"command url.new(X_0:str, X_1:str, X_2:int, X_3:str):url ",	"URLnew4;",	""	]
[ "url",	"url",	"command url.url(X_0:str):url ",	"URLnew;",	""	]
[ "url",	"url",	"command url.url(X_0:url):url ",	"URLnoop;",	""	]
[ "user",	"main",	"function user.main():void;",	"",	""	]
[ "uuid",	"isaUUID",	"command uuid.isaUUID(X_0:str):bit ",	"UUIDisaUUID;",	""	]
[ "uuid",	"new",	"unsafe command uuid.new():uuid ",	"UUIDgenerateUuid;",	""	]
[ "uuid",	"new",	"unsafe command uuid.new(X_0:int):uuid ",	"UUIDgenerateUuidInt;",	""	]
[ "uuid",	"str",	"command uuid.str(X_0:uuid):str ",	"UUIDuuid2str;",	""	]
[ "uuid",	"uuid",	"command uuid.uuid(X_0:str):uuid ",	"UUIDstr2uuid;",	""	]
[ "wlc",	"action",	"pattern wlc.action(X_0:str):void ",	"WLCaction;",	""	]
[ "wlc",	"alter_add_range_partition",	"pattern wlc.alter_add_range_partition(X_0:str, X_1:str, X_2:str, X_3:str, X_4:str, X_5:str, X_6:bit, X_7:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"alter_add_table",	"pattern wlc.alter_add_table(X_0:str, X_1:str, X_2:str, X_3:str, X_4:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"alter_add_value_partition",	"pattern wlc.alter_add_value_partition(X_0:str, X_1:str, X_2:str, X_3:str, X_4:bit, X_5:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"alter_add_value_partition",	"pattern wlc.alter_add_value_partition(X_0:str, X_1:str, X_2:str, X_3:str, X_4:bit, X_5:int, X_6:str...):void ",	"WLCgeneric;",	""	]
[ "wlc",	"alter_del_table",	"pattern wlc.alter_del_table(X_0:str, X_1:str, X_2:str, X_3:str, X_4:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"alter_seq",	"pattern wlc.alter_seq(X_0:str, X_1:str, X_2:lng):void ",	"WLCgeneric;",	""	]
[ "wlc",	"alter_seq",	"pattern wlc.alter_seq(X_0:str, X_1:str, X_2:ptr, X_3:bat[:lng]):void ",	"WLCgeneric;",	""	]
[ "wlc",	"alter_set_table",	"pattern wlc.alter_set_table(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"alter_table",	"pattern wlc.alter_table(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"alter_user",	"pattern wlc.alter_user(X_0:str, X_1:str, X_2:int, X_3:str, X_4:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"append",	"pattern wlc.append(X_0:str, X_1:str, X_2:str, X_3:any):int ",	"WLCappend;",	""	]
[ "wlc",	"catalog",	"pattern wlc.catalog(X_0:str):void ",	"WLCcatalog;",	""	]
[ "wlc",	"clear_table",	"pattern wlc.clear_table(X_0:str, X_1:str):int ",	"WLCclear_table;",	""	]
[ "wlc",	"comment_on",	"pattern wlc.comment_on(X_0:int, X_1:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"commit",	"pattern wlc.commit():void ",	"WLCcommitCmd;",	""	]
[ "wlc",	"commit",	"pattern wlc.commit():void ",	"WLCcommitCmd;",	""	]
[ "wlc",	"create_function",	"pattern wlc.create_function(X_0:str, X_1:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"create_role",	"pattern wlc.create_role(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"create_schema",	"pattern wlc.create_schema(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"create_seq",	"pattern wlc.create_seq(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"create_table",	"pattern wlc.create_table(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"create_trigger",	"pattern wlc.create_trigger(X_0:str, X_1:str, X_2:str, X_3:int, X_4:int, X_5:int, X_6:str, X_7:str, X_8:str, X_9:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"create_type",	"pattern wlc.create_type(X_0:str, X_1:str, X_2:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"create_user",	"pattern wlc.create_user(X_0:str, X_1:str, X_2:int, X_3:str, X_4:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"create_view",	"pattern wlc.create_view(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"delete",	"pattern wlc.delete(X_0:str, X_1:str, X_2:any):int ",	"WLCdelete;",	""	]
[ "wlc",	"drop_constraint",	"pattern wlc.drop_constraint(X_0:str, X_1:str, X_2:str, X_3:int, X_4:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_function",	"pattern wlc.drop_function(X_0:str, X_1:str, X_2:int, X_3:int, X_4:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_index",	"pattern wlc.drop_index(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_role",	"pattern wlc.drop_role(X_0:str, X_1:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_role",	"pattern wlc.drop_role(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_schema",	"pattern wlc.drop_schema(X_0:str, X_1:int, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_seq",	"pattern wlc.drop_seq(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_table",	"pattern wlc.drop_table(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_trigger",	"pattern wlc.drop_trigger(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_type",	"pattern wlc.drop_type(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_user",	"pattern wlc.drop_user(X_0:str, X_1:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_user",	"pattern wlc.drop_user(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"drop_view",	"pattern wlc.drop_view(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"epilogue",	"command wlc.epilogue():void ",	"WLCepilogue;",	""	]
[ "wlc",	"flush",	"pattern wlc.flush():void ",	"WLCflush;",	""	]
[ "wlc",	"getbeat",	"pattern wlc.getbeat(X_0:int):str ",	"WLCgetbeat;",	""	]
[ "wlc",	"getclock",	"pattern wlc.getclock():str ",	"WLCgetclock;",	""	]
[ "wlc",	"gettick",	"pattern wlc.gettick():lng ",	"WLCgettick;",	""	]
[ "wlc",	"grant",	"pattern wlc.grant(X_0:str, X_1:str, X_2:str, X_3:int, X_4:str, X_5:int, X_6:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"grant_function",	"pattern wlc.grant_function(X_0:str, X_1:int, X_2:str, X_3:int, X_4:int, X_5:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"grant_roles",	"pattern wlc.grant_roles(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"init",	"pattern wlc.init():void ",	"WLCinitCmd;",	""	]
[ "wlc",	"master",	"pattern wlc.master():void ",	"WLCmaster;",	""	]
[ "wlc",	"master",	"pattern wlc.master(X_0:str):void ",	"WLCmaster;",	""	]
[ "wlc",	"query",	"pattern wlc.query(X_0:str):void ",	"WLCquery;",	""	]
[ "wlc",	"rename_column",	"pattern wlc.rename_column(X_0:str, X_1:str, X_2:str, X_3:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"rename_schema",	"pattern wlc.rename_schema(X_0:str, X_1:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"rename_table",	"pattern wlc.rename_table(X_0:str, X_1:str, X_2:str, X_3:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"rename_user",	"pattern wlc.rename_user(X_0:str, X_1:str, X_2:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"revoke",	"pattern wlc.revoke(X_0:str, X_1:str, X_2:str, X_3:int, X_4:str, X_5:int, X_6:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"revoke_function",	"pattern wlc.revoke_function(X_0:str, X_1:int, X_2:str, X_3:int, X_4:int, X_5:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"revoke_roles",	"pattern wlc.revoke_roles(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"WLCgeneric;",	""	]
[ "wlc",	"rollback",	"pattern wlc.rollback():void ",	"WLCcommitCmd;",	""	]
[ "wlc",	"rollback",	"pattern wlc.rollback():void ",	"WLCrollbackCmd;",	""	]
[ "wlc",	"setbeat",	"pattern wlc.setbeat(X_0:int):void ",	"WLCsetbeat;",	""	]
[ "wlc",	"stop",	"pattern wlc.stop():void ",	"WLCstop;",	""	]
[ "wlc",	"transaction",	"unsafe pattern wlc.transaction():void ",	"WLCgeneric;",	""	]
[ "wlc",	"transaction_begin",	"pattern wlc.transaction_begin(X_0:int, X_1:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"transaction_commit",	"pattern wlc.transaction_commit(X_0:int, X_1:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"transaction_release",	"pattern wlc.transaction_release(X_0:int, X_1:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"transaction_rollback",	"pattern wlc.transaction_rollback(X_0:int, X_1:str):void ",	"WLCgeneric;",	""	]
[ "wlc",	"update",	"pattern wlc.update(X_0:str, X_1:str, X_2:str, X_3:any, X_4:any):int ",	"WLCupdate;",	""	]
[ "wlr",	"accept",	"pattern wlr.accept():void ",	"WLRaccept;",	""	]
[ "wlr",	"action",	"pattern wlr.action(X_0:str):void ",	"WLRaction;",	""	]
[ "wlr",	"alter_add_range_partition",	"pattern wlr.alter_add_range_partition(X_0:str, X_1:str, X_2:str, X_3:str, X_4:str, X_5:str, X_6:bit, X_7:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"alter_add_table",	"pattern wlr.alter_add_table(X_0:str, X_1:str, X_2:str, X_3:str, X_4:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"alter_add_value_partition",	"pattern wlr.alter_add_value_partition(X_0:str, X_1:str, X_2:str, X_3:str, X_4:bit, X_5:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"alter_add_value_partition",	"pattern wlr.alter_add_value_partition(X_0:str, X_1:str, X_2:str, X_3:str, X_4:bit, X_5:int, X_6:str...):void ",	"WLRgeneric;",	""	]
[ "wlr",	"alter_del_table",	"pattern wlr.alter_del_table(X_0:str, X_1:str, X_2:str, X_3:str, X_4:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"alter_seq",	"pattern wlr.alter_seq(X_0:str, X_1:str, X_2:lng):void ",	"WLRgeneric;",	""	]
[ "wlr",	"alter_seq",	"pattern wlr.alter_seq(X_0:str, X_1:str, X_2:ptr, X_3:bat[:lng]):void ",	"WLRgeneric;",	""	]
[ "wlr",	"alter_set_table",	"pattern wlr.alter_set_table(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"alter_table",	"pattern wlr.alter_table(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"alter_user",	"pattern wlr.alter_user(X_0:str, X_1:str, X_2:int, X_3:str, X_4:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"append",	"pattern wlr.append(X_0:str, X_1:str, X_2:str, X_3:any...):int ",	"WLRappend;",	""	]
[ "wlr",	"catalog",	"pattern wlr.catalog(X_0:str):void ",	"WLRcatalog;",	""	]
[ "wlr",	"clear_table",	"pattern wlr.clear_table(X_0:str, X_1:str):int ",	"WLRclear_table;",	""	]
[ "wlr",	"comment_on",	"pattern wlr.comment_on(X_0:int, X_1:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"commit",	"pattern wlr.commit():void ",	"WLRcommit;",	""	]
[ "wlr",	"create_function",	"pattern wlr.create_function(X_0:str, X_1:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"create_role",	"pattern wlr.create_role(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"create_schema",	"pattern wlr.create_schema(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"create_seq",	"pattern wlr.create_seq(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"create_table",	"pattern wlr.create_table(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"create_trigger",	"pattern wlr.create_trigger(X_0:str, X_1:str, X_2:str, X_3:int, X_4:int, X_5:int, X_6:str, X_7:str, X_8:str, X_9:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"create_type",	"pattern wlr.create_type(X_0:str, X_1:str, X_2:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"create_user",	"pattern wlr.create_user(X_0:str, X_1:str, X_2:int, X_3:str, X_4:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"create_view",	"pattern wlr.create_view(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"delete",	"pattern wlr.delete(X_0:str, X_1:str, X_2:oid...):int ",	"WLRdelete;",	""	]
[ "wlr",	"drop_constraint",	"pattern wlr.drop_constraint(X_0:str, X_1:str, X_2:str, X_3:int, X_4:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_function",	"pattern wlr.drop_function(X_0:str, X_1:str, X_2:int, X_3:int, X_4:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_index",	"pattern wlr.drop_index(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_role",	"pattern wlr.drop_role(X_0:str, X_1:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_role",	"pattern wlr.drop_role(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_schema",	"pattern wlr.drop_schema(X_0:str, X_1:int, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_seq",	"pattern wlr.drop_seq(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_table",	"pattern wlr.drop_table(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_trigger",	"pattern wlr.drop_trigger(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_type",	"pattern wlr.drop_type(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_user",	"pattern wlr.drop_user(X_0:str, X_1:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_user",	"pattern wlr.drop_user(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"drop_view",	"pattern wlr.drop_view(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"getMaster",	"pattern wlr.getMaster():str ",	"WLRgetmaster;",	""	]
[ "wlr",	"getclock",	"pattern wlr.getclock():str ",	"WLRgetclock;",	""	]
[ "wlr",	"gettick",	"pattern wlr.gettick():lng ",	"WLRgettick;",	""	]
[ "wlr",	"grant",	"pattern wlr.grant(X_0:str, X_1:str, X_2:str, X_3:int, X_4:str, X_5:int, X_6:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"grant_function",	"pattern wlr.grant_function(X_0:str, X_1:int, X_2:str, X_3:int, X_4:int, X_5:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"grant_roles",	"pattern wlr.grant_roles(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"master",	"pattern wlr.master(X_0:str):void ",	"WLRmaster;",	""	]
[ "wlr",	"rename_column",	"pattern wlr.rename_column(X_0:str, X_1:str, X_2:str, X_3:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"rename_schema",	"pattern wlr.rename_schema(X_0:str, X_1:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"rename_table",	"pattern wlr.rename_table(X_0:str, X_1:str, X_2:str, X_3:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"rename_user",	"pattern wlr.rename_user(X_0:str, X_1:str, X_2:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"replicate",	"pattern wlr.replicate():void ",	"WLRreplicate;",	""	]
[ "wlr",	"replicate",	"pattern wlr.replicate(X_0:bte):void ",	"WLRreplicate;",	""	]
[ "wlr",	"replicate",	"pattern wlr.replicate(X_0:int):void ",	"WLRreplicate;",	""	]
[ "wlr",	"replicate",	"pattern wlr.replicate(X_0:lng):void ",	"WLRreplicate;",	""	]
[ "wlr",	"replicate",	"pattern wlr.replicate(X_0:sht):void ",	"WLRreplicate;",	""	]
[ "wlr",	"replicate",	"pattern wlr.replicate(X_0:timestamp):void ",	"WLRreplicate;",	""	]
[ "wlr",	"revoke",	"pattern wlr.revoke(X_0:str, X_1:str, X_2:str, X_3:int, X_4:str, X_5:int, X_6:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"revoke_function",	"pattern wlr.revoke_function(X_0:str, X_1:int, X_2:str, X_3:int, X_4:int, X_5:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"revoke_roles",	"pattern wlr.revoke_roles(X_0:str, X_1:str, X_2:int, X_3:int):void ",	"WLRgeneric;",	""	]
[ "wlr",	"rollback",	"pattern wlr.rollback():void ",	"WLRrollback;",	""	]
[ "wlr",	"setbeat",	"pattern wlr.setbeat(X_0:int):void ",	"WLRsetbeat;",	""	]
[ "wlr",	"stop",	"pattern wlr.stop():void ",	"WLRstop;",	""	]
[ "wlr",	"transaction",	"unsafe pattern wlr.transaction():void ",	"WLRgeneric;",	""	]
[ "wlr",	"transaction",	"pattern wlr.transaction(X_0:lng, X_1:str, X_2:str):void ",	"WLRtransaction;",	""	]
[ "wlr",	"transaction_begin",	"pattern wlr.transaction_begin(X_0:int, X_1:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"transaction_commit",	"pattern wlr.transaction_commit(X_0:int, X_1:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"transaction_release",	"pattern wlr.transaction_release(X_0:int, X_1:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"transaction_rollback",	"pattern wlr.transaction_rollback(X_0:int, X_1:str):void ",	"WLRgeneric;",	""	]
[ "wlr",	"update",	"pattern wlr.update(X_0:str, X_1:str, X_2:str, X_3:oid, X_4:any):int ",	"WLRupdate;",	""	]
[ "xml",	"aggr",	"command xml.aggr(X_0:bat[:xml]):xml ",	"BATXMLgroup;",	""	]
[ "xml",	"attribute",	"command xml.attribute(X_0:str, X_1:str):xml ",	"XMLattribute;",	""	]
[ "xml",	"comment",	"command xml.comment(X_0:str):xml ",	"XMLcomment;",	""	]
[ "xml",	"concat",	"command xml.concat(X_0:xml, X_1:xml):xml ",	"XMLconcat;",	""	]
[ "xml",	"content",	"command xml.content(X_0:str):xml ",	"XMLcontent;",	""	]
[ "xml",	"document",	"command xml.document(X_0:str):xml ",	"XMLdocument;",	""	]
[ "xml",	"element",	"command xml.element(X_0:str, X_1:xml, X_2:xml, X_3:xml):xml ",	"XMLelement;",	""	]
[ "xml",	"element",	"command xml.element(X_0:str, X_1:xml):xml ",	"XMLelementSmall;",	""	]
[ "xml",	"epilogue",	"command xml.epilogue():void ",	"XMLepilogue;",	""	]
[ "xml",	"forest",	"pattern xml.forest(X_0:xml...):xml ",	"XMLforest;",	""	]
[ "xml",	"isdocument",	"command xml.isdocument(X_0:str):bit ",	"XMLisdocument;",	""	]
[ "xml",	"parse",	"command xml.parse(X_0:str, X_1:str, X_2:str):xml ",	"XMLparse;",	""	]
[ "xml",	"pi",	"command xml.pi(X_0:str, X_1:str):xml ",	"XMLpi;",	""	]
[ "xml",	"prelude",	"command xml.prelude():void ",	"XMLprelude;",	""	]
[ "xml",	"root",	"command xml.root(X_0:xml, X_1:str, X_2:str):xml ",	"XMLroot;",	""	]
[ "xml",	"str",	"command xml.str(X_0:xml):str ",	"XMLxml2str;",	""	]
[ "xml",	"subaggr",	"command xml.subaggr(X_0:bat[:xml], X_1:bat[:oid], X_2:bat[:any_1], X_3:bit):bat[:xml] ",	"AGGRsubxml;",	""	]
[ "xml",	"subaggr",	"command xml.subaggr(X_0:bat[:xml], X_1:bat[:oid], X_2:bat[:any_1], X_3:bat[:oid], X_4:bit):bat[:xml] ",	"AGGRsubxmlcand;",	""	]
[ "xml",	"text",	"command xml.text(X_0:xml):str ",	"XMLxmltext;",	""	]
[ "xml",	"xml",	"command xml.xml(X_0:str):xml ",	"XMLstr2xml;",	""	]

# 14:47:14 >  
# 14:47:14 >  "Done."
# 14:47:14 >  

