This README describes the implementation of the ODBC driver code
(clients/odbc/driver/*) for the MonetDB SQL frontend.
It is available from
http://dev.monetdb.org/hg/MonetDB/file/default/clients/odbc/driver

This file maybe a little out of date.

Author : Martin van Dinther
Date   : 30 august 2002, updated 4 aug 2016
Version: 2.0


Introduction:
=======================================================================
To enable the usage of the SQL frontend of MonetDB in a generic way,
 access has to be provided via industry standard open database API(s).
Two standard SQL APIs are currently widely accepted: ODBC and JDBC.
ODBC is chosen to be implemented first because:
- it can be implemented as a C library (same programming language as MonetDB)
- its driver manager is available on all platforms where MonetDB is ported
  (on UNIX/Linux we use unixODBC as the driver manager)
- there are JDBC-ODBC bridge drivers available (i.e. Sun) which provide
  a JDBC driver implementation on top of an ODBC driver. This is not
  optimal for performance and stability but we don't have to build it
  ourselves to get this functionality now.
Update 2016: the JDBC-ODBC bridge driver is no longer needed nor supported in JRE.
We provide a 100% pure (type 4) JDBC driver implementation for MonetDB.
See: https://www.monetdb.org/downloads/Java/

Tip:
=======================================================================
To do ODBC driver development/maintenance you need the Microsoft ODBC
 specification to learn what the ODBC API functions and behavior has to be.
This specification is available as MS Windows help file (ODBC.HLP and ODBC.CNT).
It is part of the MS ODBC SDK which has become part of the MS MDAC SDK.

For compilation you need the ODBC API include header files:
	sqltypes.h	/* ODBC type defines */
	sql.h		/* ODBC core API functions */
	sqlext.h	/* ODBC extension (level 1 and 2) API functions */
	sqlucode.h	/* Unicode versions of the ODBC API functions */
We use the ones distributed with unixODBC.
At CWI these are located in /usr/include/


Files organization (in clients/odbc/driver/*):
=======================================================================
All ODBC driver implementation files are located in clients/odbc/driver/

Every ODBC API function which needs to be implemented by the driver
 has its own file with the same name as the function and suffix ".c".
The ODBC API functions all start with SQL, so its easy to locate them.
There are 76 SQL*.c files and thus 76 ODBC API functions implemented.

The ODBC API function prototypes and defines are defined in sqltypes.h,
 sql.h, sqlext.h and sqlucode.h so there are NO SQL*.h files.
Instead of including these sql*.h files from every SQL*.c file
there is a general include file called ODBCGlobal.h which includes
the sql*.h files and other standard external include files.
Every SQL*.c must include this ODBCGlobal.h file as first include.

Besides the SQL*.c files there are the ODBC*.[ch] files.
The files ODBCEnv.[ch] ODBCDbc.[ch], ODBCStmt.[ch], ODBCDesc.[ch]
 and ODBCError.[ch] implement the structures needed to represent the
 handles (pointers to an object) and the internal state of the ODBC objects.
In the implementation section below it is explained why these are necessary.

For convenience there is also an ODBCUtil.[ch] which contains
 general ODBC specific utility functions.

Of course there is a Makefile. Because we use autoconf and automake
the source file is Makefile.ag.

Lastly there is this README documentation file:


MonetDB ODBC Driver Implementation:
=======================================================================
ODBC exists is several versions (1.0, 2.0, 2.1, 2.5, 3.0, 3.5, 3.51 and 3.52).
The latest version was released by Microsoft around 1997.
The unixODBC driver manager and include files support up to version 3.51.
Hence we chose to implement version 3.51.
The version we want to comply with is defined in ODBCGlobal.h. It must
be defined before the ODBC header files (sql.h etc.) are included!

In ODBC the API functions can be grouped in several ways:
a) ODBC 1 or 2 API compliance (Core, extension level 1, extension level 2)
b) ODBC 3 API compliance (ISO 92, X/Open, ODBC, Deprecated)
c) handle type (environment, connection, statement, descriptor)
I chose to use the handle type organization and created new files
ODBC*[ch] to define the structs and functions for the first three handle
types. Descriptor handles are currently not supported.

In ODBC multiple environments (each application uses its own environment),
 multiple database connections (an application can open multiple database
 connections, even to different ODBC drivers), multiple statements (an
 application can have multiple active statements open even within one
 connection), multiple result sets connected to one executed SQL command,
 multiple input parameters per statement, multiple output columns per result
 set.
The management and validity of these handles is all implemented in
the ODBCEnv.[ch], ODBCDbc.[ch], ODBCStmt.[ch] and ODBCDesc.[ch] files.

Error handling in ODBC is done in a special way which is explained here.
Every ODBC API function returns a code (integer) which can be:
  - SQL_SUCCESS			/* no msg available */
  - SQL_SUCCESS_WITH_INFO	/* a warning msg is available */
  - SQL_ERROR			/* an error msg is available */
  - SQL_INVALID_HANDLE		/* no msg could be set because no valid handle */
and some special values (SQL_STILL_EXECUTING, SQL_NEED_DATA) we ignore here.
Only when the return code is SQL_ERROR or SQL_SUCCESS_WITH_INFO an
error message is available. The error message can be retrieved via
 SQLGetDiagRec() (or the deprecated function SQLError()).
The application is not required the retrieve the error message.
When the application calls the next ODBC API function on the same handle
the previous error is discarded.
So errors are recorded per handle and kept until the next function on
the handle is called or when the handle is freed (SQLFreeHandle()).
Also one ODBC API function can post several errors (and/or warnings)
on the handle, so we must be able to store multiple error messages.
This complex internal storage and behavior is implemented in the files
ODBCError.[ch]. Simple functions are created to add an error on a
specific handle (e.g. addDbcError()), to clear all errors on a handle
(e.g. clearStmtErrors()) and retrieve an error (e.g. getStmtError()).

Implementation of the ODBC API functions:
------------------------------------------------------------------------
Although 76 SQL*() functions are implemented, some do not implement the
 requested behavior or parameter option. They just set an error message code
and return SQL_ERROR.

The next ODBC API functions are functionally implemented (some with TODO's):
------------------------------------------------------------------------
- SQLAllocEnv() - SQLAllocConnect() - SQLAllocStmt() - SQLAllocHanlde()
- SQLFreeEnv()  - SQLFreeConnect()  - SQLFreeStmt()  - SQLFreeHanlde()
- SQLGetEnvAttr() - SQLSetEnvAttr()
- SQLConnect() - SQLDriverConnect() - SQLDisconnect()
- SQLBrowseConnect()
- SQLGetConnectAttr() - SQLGetConnectOption()
- SQLSetConnectAttr() - SQLSetConnectOption()
- SQLGetStmtAttr() - SQLGetStmtOption()
- SQLSetStmtAttr() - SQLSetStmtOption()
- SQLGetDescRec() - SQLGetDescField()
- SQLSetDescRec() - SQLSetDescField()
- SQLPrepare()
- SQLBindParameter()   Note: only for InputOutputType: SQL_PARAM_INPUT
- SQLDescribeParam()
- SQLNumParams()
- SQLParamOptions()
- SQLCopyDesc()
- SQLExecute()
- SQLExecDirect()
- SQLNumResultCols()
- SQLBindCol()
- SQLSetPos()   Note: only for Operation: SQL_POSITION and LockType: SQL_LOCK_NO_CHANGE
- SQLFetch()
- SQLFetchScroll() - SQLExtendedFetch()   Note: FetchDirection SQL_FETCH_BOOKMARK is not implemented
- SQLGetData()
- SQLRowCount()
- SQLCloseCursor()
- SQLCancel()
- SQLEndTran() - SQLTransact()
- SQLGetDiagRec() - SQLGetDiagField() - SQLError()
- SQLColAttribute() - SQLColAttributes()
- SQLDescribeCol()
- SQLGetInfo()
- SQLMoreResults()
- SQLNativeSql()
- all catalog retrieval functions:
  - SQLTables()
  - SQLColumns()
  - SQLSpecialColumns()
  - SQLPrimarykeys()
  - SQLForeignkeys()
  - SQLStatistics()
  - SQLTablePrivileges()
  - SQLColumnPrivileges()
  - SQLProcedures()
  - SQLProcedureColumns()
  - SQLGetTypeInfo()
- The Unicode (UTF-16) variants of ODBC API functions which have wide character
  strings (SQL_WCHAR) as arguments are supported. These functions are recognizable
  on their W function name suffix (e.g. SQLConnectW()), see sqlucode.h.
- The ANSI variants of ODBC API functions which have normal character
  strings (SQL_CHAR) as arguments are supported. These functions are recognizable
  on their A function name suffix (e.g. SQLConnectA()), see sqlucode.h.


The next ODBC API functions always return SQL_ERROR (or SQL_INVALID_HANDLE):
------------------------------------------------------------------------
- SQLBulkOperations()
- SQLParamData()
- SQLPutData()
- SQLGetCursorName()
- SQLSetCursorName()
- SQLSetScrollOptions()
- SQLSetParam()      It is mapped to SQLBindParameter(..., SQL_PARAM_INPUT_OUTPUT, ...).
- SQLDrivers()       Note on MS Windows this is implemented by the ODBC Driver Manager
- SQLDataSources()   Note on MS Windows this is implemented by the ODBC Driver Manager


Implementation of the deprecated ODBC API functions:
------------------------------------------------------------------------
Some ODBC API functions are deprecated in ODBC 3.0 (and higher).
They are currently implemented as wrappers around their ODBC 3.0 equivalent.
If you do not implement them you need an ODBC 3.0 (or higher) driver manager
to do the mapping for you else old ODBC applications (pre ODBC 3.0)
will not work with our ODBC driver.

Not implemented ODBC API functions:
------------------------------------------------------------------------
On MS Windows the ODBC functions SQLDrivers(), SQLDataSources() and SQLFunctions()
do not have to be implemented by the driver, those are always implemented
in the ODBC Driver Manager (also with old ODBC 1.0 driver managers).


TODO list:
=======================================================================
With a grep on TODO *.[ch] you will get all places and files in which
 some implementation has to be completed.

TODO 1) Some ODBC API functions which are not implemented, limit the use
 of the ODBC driver functionality.
Most important are:
- SQLBulkOperations()  for SQL_ADD to support bulk inserts
- SQLParamData() and SQLPutData()   for providing data at execution
- SQLBindParameter()   for SQL_PARAM_OUTPUT and SQL_PARAM_INPUT_OUTPUT

TODO 2) No performance analysis or tuning is done yet.
 On the ODBC level not much performance tuning can be done as ODBC is
 a thin wrapper around the Monet SQL frontend API.

