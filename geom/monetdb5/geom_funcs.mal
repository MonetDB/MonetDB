module geom;

function AsText(w:wkb) :str;
	x := ToText(w,0);
	return x;
end AsText;
function AsEWKT(w:wkb) :str;
	x := ToText(w,1);
	return x;
end AsEWKT;

function GeomFromText(wkt:str, srid:int) :wkb; 
	x := FromText(wkt,srid,0);
	return x;
end GeomFromText;
function PointFromText(wkt:str, srid:int) :wkb; 
	x := FromText(wkt,srid,1);
	return x;
end PointFromText;
function LineFromText(wkt:str, srid:int) :wkb;
	x := FromText(wkt,srid,2);
	return x;
end LineFromText;
function PolygonFromText(wkt:str, srid:int) :wkb;
	x := FromText(wkt,srid,4);
	return x;
end PolygonFromText;
function MPointFromText(wkt:str, srid:int) :wkb;
	x := FromText(wkt,srid,5);
	return x;
end MPointFromText;
function MLineFromText(wkt:str, srid:int) :wkb;
	x := FromText(wkt,srid,6);
	return x;
end MLineFromText;
function MPolyFromText(wkt:str, srid:int) :wkb;
	x := FromText(wkt,srid,7);
	return x;
end MPolyFromText;
function GeomCollFromText(wkt:str, srid:int) :wkb;
	x := FromText(wkt,srid,8);
	return x;
end GeomCollFromText;

function GeomFromText(wkt:str) :wkb; 
	x := FromText(wkt,0,0);
	return x;
end GeomFromText;
function PointFromText(wkt:str) :wkb; 
	x := FromText(wkt,0,1);
	return x;
end PointFromText;
function LineFromText(wkt:str) :wkb;
	x := FromText(wkt,0,2);
	return x;
end LineFromText;
function PolygonFromText(wkt:str) :wkb;
	x := FromText(wkt,0,4);
	return x;
end PolygonFromText;
function MPointFromText(wkt:str) :wkb;
	x := FromText(wkt,0,5);
	return x;
end MPointFromText;
function MLineFromText(wkt:str) :wkb;
	x := FromText(wkt,0,6);
	return x;
end MLineFromText;
function MPolyFromText(wkt:str) :wkb;
	x := FromText(wkt,0,7);
	return x;
end MPolyFromText;
function GeomCollFromText(wkt:str) :wkb;
	x := FromText(wkt,0,8);
	return x;
end GeomCollFromText;

#function GeomFromWKB(wkb_raw:????, srid:int) : wkb;
#	x := wkb.FromWKB(wkb_raw, srid, 0);
#	return x;
#end GeomFromWKB;

function NumInteriorRings(w:wkb) :int;
	x := geom.NumRings(w, 0);
	return x;
end NumInteriorRings;
function NRings(w:wkb) :int;
	x := geom.NumRings(w, 1);
	return x;
end NRings;

function BdPolyFromText(wkt:str, srid:int) :wkb;
	x := MLineStringToPolygon(wkt,srid,0);
	return x;
end BdPolyFromText;
function BdMPolyFromText(wkt:str, srid:int) :wkb;
	x := MLineStringToPolygon(wkt,srid,1);
	return x;
end BdMPolyFromText;

function MakePoint(x:dbl, y:dbl) :wkb;
	p := MakePointXYZM(x, y, 0:dbl, 0:dbl, 0);
	return p;
end MakePoint;
function MakePoint(x:dbl, y:dbl, z:dbl) :wkb;
	p := MakePointXYZM(x, y, z, 0:dbl, 10);
	return p;
end MakePoint;
function MakePointM(x:dbl, y:dbl, m:dbl) :wkb;
	p := MakePointXYZM(x, y, 0:dbl, m, 1);
	return p;
end MakePointM;
function MakePoint(x:dbl, y:dbl, z:dbl, m:dbl) :wkb;
	p := MakePointXYZM(x, y, z, m, 11);
	return p;
end MakePoint;


function GeometryType1(w:wkb) :str;
	x := GeometryType(w, 0);
	return x;
end GeometryType1;
function GeometryType2(w:wkb) :str;
	x := GeometryType(w, 1);
	return x;
end GeometryType2;

function X(w:wkb) :dbl;
	c := GetCoordinate(w, 0);
	return c;
end X;
function Y(w:wkb) :dbl;
	c := GetCoordinate(w, 1);
	return c;
end Y;
function Z(w:wkb) :dbl;
	c := GetCoordinate(w, 2);
	return c;
end Z;

function Force2D(g:wkb) :wkb;
	x := ForceDimensions(g, 2);
	return x;
end Force2D;

function Force3D(g:wkb) :wkb;
	x := ForceDimensions(g, 3);
	return x;
end Force3D;

function Translate(g:wkb, dx:dbl, dy:dbl) :wkb;
	x := Translate3D(g,dx,dy,0:dbl);
	return x;
end Translate;

function Translate(g:wkb, dx:dbl, dy:dbl, dz:dbl) :wkb;
	x := Translate3D(g,dx,dy,dz);
	return x;
end Translate;

function NumPoints(w:wkb) :int;
	x := PointsNum(w, 1);
	return x;
end NumPoints;
function NPoints(w:wkb) :int;
	x := PointsNum(w, 0);
	return x;
end NPoints;

function MakeEnvelope(xmin:dbl, ymin:dbl, xmax:dbl, ymax:dbl, srid:int) :wkb;
	x := EnvelopeFromCoordinates(xmin, ymin, xmax, ymax, srid);
	return x;
end MakeEnvelope;

function MakeEnvelope(xmin:dbl, ymin:dbl, xmax:dbl, ymax:dbl) :wkb;
	x := EnvelopeFromCoordinates(xmin, ymin, xmax, ymax, 0);
	return x;
end MakeEnvelope;

function MakePolygon(external:wkb) :wkb;
	x := Polygon(external, nil:bat[:wkb], 0);
	return x;
end MakePolygon;
function MakePolygon(external:wkb, srid:int) :wkb;
	x := Polygon(external, nil:bat[:wkb], srid);
	return x;
end MakePolygon;
#function MakePolygon(external:wkb, internal:bat[:wkb]) :wkb;
#	x := Polygon(external, internal, 0);
#	return x;
#end MakePolygon;

function XMinFromWKB(g:wkb) :dbl;
	x := coordinateFromWKB(g, 1);
	return x;
end XMinFromWKB;
function YMinFromWKB(g:wkb) :dbl;
	x := coordinateFromWKB(g, 2);
	return x;
end YMinFromWKB;
function XMaxFromWKB(g:wkb) :dbl;
	x := coordinateFromWKB(g, 3);
	return x;
end XMaxFromWKB;
function YMaxFromWKB(g:wkb) :dbl;
	x := coordinateFromWKB(g, 4);
	return x;
end YMaxFromWKB;
function XMinFromMBR(b:mbr) :dbl;
	x := coordinateFromMBR(b, 1);
	return x;
end XMinFromMBR;
function YMinFromMBR(b:mbr) :dbl;
	x := coordinateFromMBR(b, 2);
	return x;
end YMinFromMBR;
function XMaxFromMBR(b:mbr) :dbl;
	x := coordinateFromMBR(b, 3);
	return x;
end XMaxFromMBR;
function YMaxFromMBR(b:mbr) :dbl;
	x := coordinateFromMBR(b, 4);
	return x;
end YMaxFromMBR;

module batgeom;

function GeomFromText(wkt:bat[:str], srid:int) :bat[:wkb]; 
	x := FromText(wkt,srid,0);
	return x;
end GeomFromText;
function PointFromText(wkt:bat[:str], srid:int) :bat[ :wkb];
	x := FromText(wkt,srid,1);
	return x;
end PointFromText;
function LineFromText(wkt:bat[:str], srid:int) :bat[ :wkb];
	x := FromText(wkt,srid,2);
	return x;
end LineFromText;
function PolygonFromText(wkt:bat[:str], srid:int) :bat[ :wkb];
	x := FromText(wkt,srid,4);
	return x;
end PolygonFromText;
function MPointFromText(wkt:bat[:str], srid:int) :bat[ :wkb];
	x := FromText(wkt,srid,5);
	return x;
end MPointFromText;
function MLineFromText(wkt:bat[:str], srid:int) :bat[ :wkb];
	x := FromText(wkt,srid,6);
	return x;
end MLineFromText;
function MPolyFromText(wkt:bat[:str], srid:int) :bat[ :wkb];
	x := FromText(wkt,srid,7);
	return x;
end MPolyFromText;
function GeomCollFromText(wkt:bat[:str], srid:int) :bat[ :wkb];
	x := FromText(wkt,srid,8);
	return x;
end GeomCollFromText;

function GeomFromText(wkt:bat[:str]) :bat[:wkb]; 
	x := FromText(wkt,0,0);
	return x;
end GeomFromText;
function PointFromText(wkt:bat[:str]) :bat[ :wkb];
	x := FromText(wkt,0,1);
	return x;
end PointFromText;
function LineFromText(wkt:bat[:str]) :bat[ :wkb];
	x := FromText(wkt,0,2);
	return x;
end LineFromText;
function PolygonFromText(wkt:bat[:str]) :bat[ :wkb];
	x := FromText(wkt,0,4);
	return x;
end PolygonFromText;
function MPointFromText(wkt:bat[:str]) :bat[ :wkb];
	x := FromText(wkt,0,5);
	return x;
end MPointFromText;
function MLineFromText(wkt:bat[:str]) :bat[ :wkb];
	x := FromText(wkt,0,6);
	return x;
end MLineFromText;
function MPolyFromText(wkt:bat[:str]) :bat[ :wkb];
	x := FromText(wkt,0,7);
	return x;
end MPolyFromText;
function GeomCollFromText(wkt:bat[:str]) :bat[ :wkb];
	x := FromText(wkt,0,8);
	return x;
end GeomCollFromText;

function AsText(w:bat[:wkb]) :bat[:str];
	x := ToText(w,0);
	return x;
end AsText;
function AsEWKT(w:bat[:wkb]) :bat[:str];
	x := ToText(w,1);
	return x;
end AsEWKT;

function GeometryType1(w:bat[:wkb]) :bat[:str];
	x := GeometryType(w, 0);
	return x;
end GeometryType1;
function GeometryType2(w:bat[:wkb]) :bat[:str];
	x := GeometryType(w, 1);
	return x;
end GeometryType2;
function MakePoint(x:bat[:dbl], y:bat[:dbl]) :bat[:wkb];
	p := MakePointXYZM(x, y, nil:bat[:dbl], nil:bat, 0);
	return p;
end MakePoint;
function MakePoint(x:bat[:dbl], y:bat[:dbl], z:bat[:dbl]) :bat[:wkb];
	p := MakePointXYZM(x, y, z, nil:bat[:dbl], 10);
	return p;
end MakePoint;
function MakePointM(x:bat[:dbl], y:bat[:dbl], m:bat[:dbl]) :bat[:wkb];
	p := MakePointXYZM(x, y, nil:bat[:dbl], m, 1);
	return p;
end MakePointM;
function MakePoint(x:bat[:dbl], y:bat[:dbl], z:bat[:dbl], m:bat[:dbl]) :bat[:wkb];
	p := MakePointXYZM(x, y, z, m, 11);
	return p;
end MakePoint;

function NumPoints(w:bat[:wkb]) :bat[:int];
	x := PointsNum(w, 1);
	return x;
end NumPoints;
function NPoints(w:bat[:wkb]) :bat[:int];
	x := PointsNum(w, 0);
	return x;
end NPoints;
function X(w:bat[:wkb]) :bat[:dbl];
	c := GetCoordinate(w, 0);
	return c;
end X;
function Y(w:bat[:wkb]) :bat[:dbl];
	c := GetCoordinate(w, 1);
	return c;
end Y;
function Z(w:bat[:wkb]) :bat[:dbl];
	c := GetCoordinate(w, 2);
	return c;
end Z;

function NumInteriorRings(w:bat[:wkb]) :bat[:int];
	x := batgeom.NumRings(w, 0);
	return x;
end NumInteriorRings;
function NRings(w:bat[:wkb]) :bat[:int];
	x := batgeom.NumRings(w, 1);
	return x;
end NRings;

function XMinFromWKB(g:bat[:wkb]) :bat[:dbl];
	x := coordinateFromWKB(g, 1);
	return x;
end XMinFromWKB;
function YMinFromWKB(g:bat[:wkb]) :bat[:dbl];
	x := coordinateFromWKB(g, 2);
	return x;
end YMinFromWKB;
function XMaxFromWKB(g:bat[:wkb]) :bat[:dbl];
	x := coordinateFromWKB(g, 3);
	return x;
end XMaxFromWKB;
function YMaxFromWKB(g:bat[:wkb]) :bat[:dbl];
	x := coordinateFromWKB(g, 4);
	return x;
end YMaxFromWKB;

function XMinFromMBR(b:bat[:mbr]) :bat[:dbl];
	x := coordinateFromMBR(b, 1);
	return x;
end XMinFromMBR;
function YMinFromMBR(b:bat[:mbr]) :bat[:dbl];
	x := coordinateFromMBR(b, 2);
	return x;
end YMinFromMBR;
function XMaxFromMBR(b:bat[:mbr]) :bat[:dbl];
	x := coordinateFromMBR(b, 3);
	return x;
end XMaxFromMBR;
function YMaxFromMBR(b:bat[:mbr]) :bat[:dbl];
	x := coordinateFromMBR(b, 4);
	return x;
end YMaxFromMBR;

function calc.wkb( wkt:str, srid:int, type:int ) :wkb;
        x := geom.FromText(wkt,0,0);
        return x;
end wkb;
