stdout of test 'pyapi3_19` in directory 'sql/backends/monet5/UDF/pyapi3` itself:


# 11:59:04 >  
# 11:59:04 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35428" "--set" "mapi_usock=/var/tmp/mtest-5346/.s.monetdb.35428" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/mytherin/opt/var/MonetDB/mTests_sql_backends_monet5" "--set" "mal_listing=0" "--set" "embedded_r=true" "--set" "embedded_py=true"
# 11:59:04 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_sql_backends_monet5', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.684 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://mytherin-N750JV:35428/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-5346/.s.monetdb.35428
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.5'
# Finished reading the write-ahead log 'sql_logs/sql/log.5'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/Python module loaded
# MonetDB/R   module loaded


# 11:59:04 >  
# 11:59:04 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-5346" "--port=35428"
# 11:59:04 >  

#START TRANSACTION;
#CREATE FUNCTION mapped_query() returns table (i integer) LANGUAGE PYTHON_MAP
#{
#    _conn.execute('CREATE TABLE pyapi19_integers(i INTEGER);')
#    _conn.execute('INSERT INTO pyapi19_integers VALUES (0), (1), (2);')
#    return(1)
#};
#ROLLBACK;
#START TRANSACTION;
#CREATE FUNCTION pyapi19_create_table() returns table (i integer) LANGUAGE P
#{
#    return numpy.arange(100000)
#};
#CREATE FUNCTION pyapi19_load_table() returns table (i integer) LANGUAGE PYTHON_MAP
#{
#    res = _conn.execute('SELECT * FROM pyapi19_integers;')
#    return res['i']
#};
#CREATE TABLE pyapi19_integers AS SELECT * FROM pyapi19_create_table() WITH DATA;
#ROLLBACK;
#START TRANSACTION;
#CREATE TABLE pyapi19_strings(s STRING);
#INSERT INTO pyapi19_strings VALUES ('hello'), ('33'), ('hello world');
[ 3	]
#CREATE FUNCTION mapped_result_query() returns table (i STRING) LANGUAGE PYTHON_MAP
#{
#    res = _conn.execute('SELECT * FROM pyapi19_strings;')
#    return res['s']
#};
#ROLLBACK;
#START TRANSACTION;
#CREATE TABLE pyapi19_dates(d DATE);
#INSERT INTO pyapi19_dates VALUES (cast('2014-10-03' as DATE)), (cast('2000-03-24' as DATE)), ('2033-11-22');
[ 3	]
#CREATE FUNCTION mapped_result_query() returns table (d DATE) LANGUAGE PYTHON_MAP
#{
#    res = _conn.execute('SELECT * FROM pyapi19_dates;')
#    return res
#};
#ROLLBACK;
#START TRANSACTION;
#CREATE FUNCTION pyapi19_create_table() returns table (i integer, j integer, k double, l float, m hugeint, n bigint, o STRING, p DECIMAL) LANGUAGE P
#{
#    result = dict();
#    result['i'] = numpy.arange(100000, 0, -1);
#    result['j'] = numpy.arange(100000, 0 , -1);
#    result['k'] = numpy.arange(100000);
#    result['l'] = numpy.arange(100000, 0 , -1);
#    result['m'] = numpy.arange(100000);
#    result['n'] = numpy.arange(100000, 0 , -1);
#    result['o'] = numpy.arange(100000);
#    result['p'] = numpy.arange(100000);
#CREATE FUNCTION pyapi19_load_table() returns table (i integer, j integer, k double, l float, m hugeint, n bigint, o STRING, p DECIMAL) LANGUAGE PYTHON_MAP
#{
#    res = _conn.execute('SELECT * FROM pyapi19_integers;')
#    return res
#};
#CREATE TABLE pyapi19_integers AS SELECT * FROM pyapi19_create_table() WITH DATA;
#ROLLBACK;

# 11:59:05 >  
# 11:59:05 >  "Done."
# 11:59:05 >  

