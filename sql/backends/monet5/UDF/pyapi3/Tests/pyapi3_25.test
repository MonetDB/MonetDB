statement ok
START TRANSACTION

statement ok
CREATE TABLE pyapi25table(i integer)

statement ok rowcount 4
INSERT INTO pyapi25table VALUES (1), (2), (3), (4)

statement ok
CREATE TABLE pyapi25multiplication(i integer)

statement ok rowcount 1
INSERT INTO pyapi25multiplication VALUES (3)

statement ok
CREATE FUNCTION pyapi25(i integer) returns integer
language PYTHON_MAP
{
    res = _conn.execute('SELECT i FROM pyapi25multiplication;')
    return res['i'] * i
    return i
}

query I rowsort
SELECT pyapi25(i) FROM pyapi25table
----
12
3
6
9

statement ok
UPDATE pyapi25multiplication SET i=10

query I rowsort
SELECT pyapi25(i) FROM pyapi25table
----
10
20
30
40

statement ok
DROP FUNCTION pyapi25

statement ok
DROP TABLE pyapi25table

statement ok
DROP TABLE pyapi25multiplication

statement ok
CREATE TABLE pyapi25table(i integer)

statement ok
INSERT INTO pyapi25table VALUES (1), (2), (3), (4)

statement ok
CREATE FUNCTION pyapi25(i integer) returns integer
language PYTHON
{
    _conn.execute('CREATE TABLE mytable(i INTEGER);')
    _conn.execute('INSERT INTO mytable VALUES (1), (2), (3), (4);')
    return i
}

query I rowsort
SELECT pyapi25(i) FROM pyapi25table
----
1
2
3
4

statement ok
CREATE FUNCTION pyapi25map(i integer) returns integer
language PYTHON_MAP
{
    _conn.execute('UPDATE mytable SET i=i*10;')
    return i
}

query I rowsort
SELECT * FROM mytable
----
1
2
3
4

query I rowsort
SELECT pyapi25map(i) FROM pyapi25table
----
1
2
3
4

query I rowsort
SELECT * FROM mytable
----
10
20
30
40

statement ok
CREATE TABLE pyapi25medians(mean DOUBLE)

statement ok
CREATE FUNCTION pyapi25randomtable() returns TABLE(d DOUBLE) LANGUAGE PYTHON
{
    numpy.random.seed(33)
    return numpy.random.rand(1000000)
}

statement ok
CREATE FUNCTION pyapi25mediancompute(d DOUBLE) RETURNS DOUBLE
language PYTHON_MAP
{
    mean = numpy.mean(d)
    _conn.execute('INSERT INTO pyapi25medians (mean) VALUES (%g);' % mean)
    return 1
}

statement ok
CREATE FUNCTION pyapi25checker(d DOUBLE) RETURNS BOOL LANGUAGE PYTHON {
    actual_mean = numpy.mean(d)
    numpy.random.seed(33)
    expected_mean = numpy.mean(numpy.random.rand(1000000))
    if numpy.abs(expected_mean - actual_mean) < 0.1:
        print("Great success!")
        return(True)
    else:
        print("Incorrect mean %g: expected %g" % (actual_mean, expected_mean))
        print("Values:", d)
        return(False)
}

statement ok
CREATE TABLE randomtable AS SELECT * FROM pyapi25randomtable() WITH DATA

query R rowsort
SELECT pyapi25mediancompute(d) FROM randomtable
----
1.000

query I rowsort
SELECT pyapi25checker(mean) FROM pyapi25medians
----
1

statement ok
CREATE FUNCTION pyapi25errortable() returns TABLE(d DOUBLE) LANGUAGE PYTHON_MAP
{
    _conn.execute('SELECT * FROM HOPEFULLYNONEXISTANTTABLE;')
    return 1
}

statement error
SELECT * FROM pyapi25errortable()
----

statement ok
ROLLBACK

