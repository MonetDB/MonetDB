statement ok
START TRANSACTION

statement ok
CREATE TABLE rval(groupcol integer,datacol integer)

statement ok
INSERT INTO rval VALUES (1,42), (1,84), (2,42), (2,21)

statement ok
CREATE AGGREGATE aggrmedian(val integer) RETURNS integer LANGUAGE P {
	if 'aggr_group' in locals():
		unique = numpy.unique(aggr_group)
		x = numpy.zeros(shape=(unique.size))
		for i in range(0,unique.size):
			x[i] = numpy.median(val[numpy.where(aggr_group==unique[i])])
		return(x)
	else:
		return(numpy.median(val))
}

query I rowsort
SELECT aggrmedian(datacol) FROM rval
----
42

query II rowsort
SELECT groupcol,aggrmedian(datacol) FROM rval GROUP BY groupcol
----
1
63
2
31

statement ok
DROP AGGREGATE aggrmedian

statement ok
DROP TABLE rval

statement ok
ROLLBACK

statement ok
START TRANSACTION

statement ok
CREATE TABLE rval(groupcol integer, secondgroupcol integer, datacol integer)

statement ok
INSERT INTO rval VALUES (0, 0, 1), (0, 0, 2), (0, 1, 3), (0, 1, 4), (1, 0, 5), (1, 0, 6), (1, 1, 7), (1, 1, 8)

statement ok
CREATE AGGREGATE aggrsum(val integer) RETURNS integer LANGUAGE P {
	unique = numpy.unique(aggr_group)
	x = numpy.zeros(shape=(unique.size))
	for i in range(0, unique.size):
		x[i] = numpy.sum(val[numpy.where(aggr_group==unique[i])])
	return x
}

query III rowsort
SELECT groupcol,secondgroupcol,aggrsum(datacol) FROM rval GROUP BY groupcol,secondgroupcol
----
0
0
3
0
1
7
1
0
11
1
1
15

statement ok
DROP AGGREGATE aggrsum

statement ok
DROP TABLE rval

statement ok
ROLLBACK

