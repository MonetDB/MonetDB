stdout of test 'pyapi3_23` in directory 'sql/backends/monet5/UDF/pyapi3` itself:


# 15:43:46 >  
# 15:43:46 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=30334" "--set" "mapi_usock=/var/tmp/mtest-16024/.s.monetdb.30334" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch2/raasveld/build/var/MonetDB/mTests_sql_backends_monet5" "--set" "mal_listing=0" "--set" "embedded_r=true" "--set" "embedded_py=true"
# 15:43:46 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_sql_backends_monet5', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://lyon.ins.cwi.nl:30334/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-16024/.s.monetdb.30334
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/Python module loaded
# MonetDB/R   module loaded


# 15:43:46 >  
# 15:43:46 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-16024" "--port=30334"
# 15:43:46 >  

#START TRANSACTION;
#CREATE AGGREGATE pyapi23(val integer) RETURNS integer LANGUAGE P {
#	if 'aggr_group' in locals():
#		unique = numpy.unique(aggr_group)
#		x = numpy.zeros(shape=(unique.size))
#		for i in range(0,unique.size):
#			x[i] = numpy.sum(val[aggr_group==unique[i]])
#		return(x)
#	else:
#		return(numpy.sum(val))
#};
#CREATE FUNCTION pyapi23datagen() RETURNS TABLE (g int, n int) LANGUAGE PYTHON {
#	numpy.random.seed(42)
#	result = dict()
#	result['g'] = numpy.repeat(numpy.arange(2), 10)
#	numpy.random.shuffle(result['g'])
#	result['n'] = numpy.repeat(10, len(result['g']))
#	return result
#};
#CREATE TABLE pyapi23table as select * from pyapi23datagen() with data;
#select g, pyapi23(n) from pyapi23datagen() group by g;
% .%1,	.%2 # table_name
% g,	%2 # name
% int,	int # type
% 1,	3 # length
[ 0,	100	]
[ 1,	100	]
#select g, pyapi23(n) from pyapi23table group by g;
% sys.pyapi23table,	sys.%1 # table_name
% g,	%1 # name
% int,	int # type
% 1,	3 # length
[ 0,	100	]
[ 1,	100	]
#ROLLBACK;

# 15:43:47 >  
# 15:43:47 >  "Done."
# 15:43:47 >  

