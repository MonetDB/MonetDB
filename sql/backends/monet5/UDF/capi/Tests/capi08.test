statement ok
START TRANSACTION

statement ok
CREATE FUNCTION capi08(inp INTEGER) RETURNS INTEGER LANGUAGE C {
    size_t i;
    result->initialize(result, inp.count);
    for(i = 0; i < inp.count; i++) {
        result->data[i] = inp.data[i] * 2;
    }
}

statement ok
CREATE TABLE integers(i INTEGER)

statement ok
INSERT INTO integers VALUES (1), (2), (3), (4), (5)

query I rowsort
SELECT capi08(i) FROM integers
----
10
2
4
6
8

query I rowsort
SELECT capi08(i) FROM integers
----
10
2
4
6
8

statement ok
DROP FUNCTION capi08

statement ok
CREATE FUNCTION capi08(inp DOUBLE) RETURNS DOUBLE LANGUAGE C {
    size_t i;
    result->initialize(result, inp.count);
    for(i = 0; i < inp.count; i++) {
        result->data[i] = inp.data[i] * 2;
    }
}

query R rowsort
SELECT capi08(i) FROM integers
----
10.000
2.000
4.000
6.000
8.000

query R rowsort
SELECT capi08(i) FROM integers
----
10.000
2.000
4.000
6.000
8.000

statement ok
DROP FUNCTION capi08

statement ok
CREATE FUNCTION capi08(inp1 INTEGER, inp2 INTEGER) RETURNS INTEGER LANGUAGE C {
    size_t i;
    result->initialize(result, inp1.count);
    for(i = 0; i < inp1.count; i++) {
        result->data[i] = inp1.data[i] / inp2.data[i];
    }
}

query I rowsort
SELECT capi08(i * 2, i) FROM integers
----
2
2
2
2
2

statement ok
DROP FUNCTION capi08

statement ok
CREATE FUNCTION capi08(inp2 INTEGER, inp1 INTEGER) RETURNS INTEGER LANGUAGE C {
    size_t i;
    result->initialize(result, inp1.count);
    for(i = 0; i < inp1.count; i++) {
        result->data[i] = inp1.data[i] / inp2.data[i];
    }
}

query I rowsort
SELECT capi08(i, i * 2) FROM integers
----
2
2
2
2
2

statement ok
ROLLBACK

