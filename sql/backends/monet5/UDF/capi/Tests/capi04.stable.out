stdout of test 'capi04` in directory 'sql/backends/monet5/UDF/capi` itself:


# 15:50:30 >  
# 15:50:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=32751" "--set" "mapi_usock=/var/tmp/mtest-20003/.s.monetdb.32751" "--set" "monet_prompt=" "--forcemito" "--dbpath=NONE/var/MonetDB/mTests_sql_backends_monet5_UDF_capi"
# 15:50:30 >  

# MonetDB 5 server v11.28.0
# This is an unreleased version
# Serving database 'mTests_sql_backends_monet5_UDF_capi', using 4 threads
# Compiled for x86_64-apple-darwin15.6.0/64bit with 128bit integers
# Found 8.000 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2017 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://Marks-MBP:32751/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-20003/.s.monetdb.32751
# MonetDB/SQL module loaded

# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 18_index.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 27_rejects.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_profiler.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 60_wlcr.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 12:56:26 >  
# 12:56:26 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-37150" "--port=31836"
# 12:56:26 >  

#START TRANSACTION;
#CREATE FUNCTION capi04(inp STRING) RETURNS STRING LANGUAGE C {
##include <string.h>
#
#	result->initialize(result, inp.count);
#	for(size_t i = 0; i < inp.count; i++) {
#		if (inp.is_null(inp.data[i])) {
#			result->data[i] = result->null_value;
#		} else {
#			// the contract says we must use "malloc" to allocate for the result strings
#			// "malloc" is a function pointer that actually points to GDKmalloc
#			result->data[i] = malloc(strlen(inp.data[i]) + 2);
#			strcpy(result->data[i] + 1, inp.data[i]);
#			result->data[i][0] = 'H';
#CREATE TABLE strings(i STRING);
#INSERT INTO strings VALUES ('ello'), ('ow'), (NULL), ('onestly?'), ('annes');
[ 5	]
#SELECT capi04(i) FROM strings;
% sys.%1 # table_name
% %1 # name
% clob # type
% 9 # length
[ "Hello"	]
[ "How"	]
[ NULL	]
[ "Honestly?"	]
[ "Hannes"	]
#DROP FUNCTION capi04;
#CREATE FUNCTION capi04(inp STRING) RETURNS STRING LANGUAGE C {
#	result->initialize(result, inp.count);
#	for(size_t i = 0; i < inp.count; i++) {
#		result->data[i][0] = 'h';
#	}
#};
#ROLLBACK;
#START TRANSACTION;
#CREATE FUNCTION capi04(inp STRING) RETURNS STRING LANGUAGE C {
##include <string.h>
#
#	result->initialize(result, inp.count);
#	for(size_t i = 0; i < inp.count; i++) {
#		if (inp.is_null(inp.data[i])) {
#			result->data[i] = result->null_value;
#		} else {
#			result->data[i] = malloc(strlen(inp.data[i]) + 2);
#			strcpy(result->data[i] + 1, inp.data[i]);
#			result->data[i] = "hello";
#		}
#	}
#};
#CREATE TABLE strings(i STRING);
#INSERT INTO strings VALUES ('ello'), ('ow'), (NULL), ('onestly?'), ('annes');
[ 5	]
#SELECT capi04(i) FROM strings;
% sys.%1 # table_name
% %1 # name
% clob # type
% 5 # length
[ "hello"	]
[ "hello"	]
[ NULL	]
[ "hello"	]
[ "hello"	]
#ROLLBACK;

# 15:50:31 >  
# 15:50:31 >  "Done."
# 15:50:31 >  

