# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2020 MonetDB B.V.

# This file was generated by using the script sql_rank.mal.sh.

module sql;

pattern sql.diff(b:any_1) :bit
address SQLdiff
comment "return true if cur != prev row";

pattern batsql.diff(b:bat[:any_1]) :bat[:bit]
address SQLdiff
comment "return true if cur != prev row";

pattern sql.diff(p:bit, b:any_1) :bit
address SQLdiff
comment "return true if cur != prev row";

pattern batsql.diff(p:bit, b:bat[:any_1]) :bat[:bit]
address SQLdiff
comment "return true if cur != prev row";

pattern batsql.diff(p:bat[:bit], b:any_1) :bat[:bit]
address SQLdiff
comment "return true if cur != prev row";

pattern batsql.diff(p:bat[:bit], b:bat[:any_1]) :bat[:bit]
address SQLdiff
comment "return true if cur != prev row";

pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:bte) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bte) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:bte) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bte) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:bte]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:bte]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";


pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:sht) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:sht) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:sht) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:sht) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:sht]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:sht]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";


pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:int) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:int) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:int) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:int) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:int]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:int]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";


pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:lng) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:lng) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:lng) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:lng) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:lng]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:lng]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";


pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:flt) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:flt) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:flt) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:flt) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:flt]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:flt]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";


pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, limit:dbl) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:dbl) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, limit:dbl) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:dbl) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:dbl]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, limit:bat[:dbl]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";


pattern sql.row_number(b:any_1, p:bit, o:bit) :int
address SQLrow_number
comment "return the row_numer-ed groups";

pattern batsql.row_number(b:bat[:any_1], p:any_2, o:any_3) :bat[:int]
address SQLrow_number
comment "return the row_numer-ed groups";


pattern sql.rank(b:any_1, p:bit, o:bit) :int
address SQLrank
comment "return the ranked groups";

pattern batsql.rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:int]
address SQLrank
comment "return the ranked groups";


pattern sql.dense_rank(b:any_1, p:bit, o:bit) :int
address SQLdense_rank
comment "return the densely ranked groups";

pattern batsql.dense_rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:int]
address SQLdense_rank
comment "return the densely ranked groups";


pattern sql.percent_rank(b:any_1, p:bit, o:bit) :dbl
address SQLpercent_rank
comment "return the percentage into the total number of groups for each row";

pattern batsql.percent_rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:dbl]
address SQLpercent_rank
comment "return the percentage into the total number of groups for each row";


pattern sql.cume_dist(b:any_1, p:bit, o:bit) :dbl
address SQLcume_dist
comment "return the accumulated distribution of the number of rows per group to the total number of partition rows";

pattern batsql.cume_dist(b:bat[:any_1], p:any_2, o:any_3) :bat[:dbl]
address SQLcume_dist
comment "return the accumulated distribution of the number of rows per group to the total number of partition rows";


pattern sql.lag(b:any_1, p:any_3, o:any_4) :any_1
address SQLlag
comment "return the value in the previous row in the partition or NULL if non existent";

pattern batsql.lag(b:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]
address SQLlag
comment "return the value in the previous row in the partition or NULL if non existent";


pattern sql.lag(b:any_1, l:any_2, p:any_3, o:any_4) :any_1
address SQLlag
comment "return the value in the previous 'l' row in the partition or NULL if non existent";

pattern batsql.lag(b:bat[:any_1], l:any_2, p:any_3, o:any_4) :bat[:any_1]
address SQLlag
comment "return the value in the previous 'l' row in the partition or NULL if non existent";

pattern batsql.lag(b:any_1, l:bat[:any_2], p:any_3, o:any_4) :bat[:any_1]
address SQLlag
comment "return the value in the previous 'l' row in the partition or NULL if non existent";

pattern batsql.lag(b:bat[:any_1], l:bat[:any_2], p:any_3, o:any_4) :bat[:any_1]
address SQLlag
comment "return the value in the previous 'l' row in the partition or NULL if non existent";


pattern sql.lag(b:any_1, l:any_2, d:any_1, p:any_3, o:any_4) :any_1
address SQLlag
comment "return the value in the previous 'l' row in the partition or 'd' if non existent";

pattern batsql.lag(b:bat[:any_1], l:any_2, d:any_1, p:any_3, o:any_4) :bat[:any_1]
address SQLlag
comment "return the value in the previous 'l' row in the partition or 'd' if non existent";

pattern batsql.lag(b:any_1, l:bat[:any_2], d:any_1, p:any_3, o:any_4) :bat[:any_1]
address SQLlag
comment "return the value in the previous 'l' row in the partition or 'd' if non existent";

pattern batsql.lag(b:bat[:any_1], l:bat[:any_2], d:any_1, p:any_3, o:any_4) :bat[:any_1]
address SQLlag
comment "return the value in the previous 'l' row in the partition or 'd' if non existent";

pattern batsql.lag(b:any_1, l:any_2, d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]
address SQLlag
comment "return the value in the previous 'l' row in the partition or 'd' if non existent";

pattern batsql.lag(b:bat[:any_1], l:any_2, d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]
address SQLlag
comment "return the value in the previous 'l' row in the partition or 'd' if non existent";

pattern batsql.lag(b:any_1, l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]
address SQLlag
comment "return the value in the previous 'l' row in the partition or 'd' if non existent";

pattern batsql.lag(b:bat[:any_1], l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]
address SQLlag
comment "return the value in the previous 'l' row in the partition or 'd' if non existent";


pattern sql.lead(b:any_1, p:any_3, o:any_4) :any_1
address SQLlead
comment "return the value in the next row in the partition or NULL if non existent";

pattern batsql.lead(b:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]
address SQLlead
comment "return the value in the next row in the partition or NULL if non existent";


pattern sql.lead(b:any_1, l:any_2, p:any_3, o:any_4) :any_1
address SQLlead
comment "return the value in the next 'l' row in the partition or NULL if non existent";

pattern batsql.lead(b:bat[:any_1], l:any_2, p:any_3, o:any_4) :bat[:any_1]
address SQLlead
comment "return the value in the next 'l' row in the partition or NULL if non existent";

pattern batsql.lead(b:any_1, l:bat[:any_2], p:any_3, o:any_4) :bat[:any_1]
address SQLlead
comment "return the value in the next 'l' row in the partition or NULL if non existent";

pattern batsql.lead(b:bat[:any_1], l:bat[:any_2], p:any_3, o:any_4) :bat[:any_1]
address SQLlead
comment "return the value in the next 'l' row in the partition or NULL if non existent";


pattern sql.lead(b:any_1, l:any_2, d:any_1, p:any_3, o:any_4) :any_1
address SQLlead
comment "return the value in the next 'l' row in the partition or 'd' if non existent";

pattern batsql.lead(b:bat[:any_1], l:any_2, d:any_1, p:any_3, o:any_4) :bat[:any_1]
address SQLlead
comment "return the value in the next 'l' row in the partition or 'd' if non existent";

pattern batsql.lead(b:any_1, l:bat[:any_2], d:any_1, p:any_3, o:any_4) :bat[:any_1]
address SQLlead
comment "return the value in the next 'l' row in the partition or 'd' if non existent";

pattern batsql.lead(b:bat[:any_1], l:bat[:any_2], d:any_1, p:any_3, o:any_4) :bat[:any_1]
address SQLlead
comment "return the value in the next 'l' row in the partition or 'd' if non existent";

pattern batsql.lead(b:any_1, l:any_2, d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]
address SQLlead
comment "return the value in the next 'l' row in the partition or 'd' if non existent";

pattern batsql.lead(b:bat[:any_1], l:any_2, d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]
address SQLlead
comment "return the value in the next 'l' row in the partition or 'd' if non existent";

pattern batsql.lead(b:any_1, l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]
address SQLlead
comment "return the value in the next 'l' row in the partition or 'd' if non existent";

pattern batsql.lead(b:bat[:any_1], l:bat[:any_2], d:bat[:any_1], p:any_3, o:any_4) :bat[:any_1]
address SQLlead
comment "return the value in the next 'l' row in the partition or 'd' if non existent";


pattern sql.ntile(b:any_1, n:any_2, p:any_3, o:any_4) :any_2
address SQLntile
comment "return the groups divided as equally as possible";

pattern batsql.ntile(b:bat[:any_1], n:any_2, p:any_3, o:any_4) :bat[:any_2]
address SQLntile
comment "return the groups divided as equally as possible";

pattern batsql.ntile(b:any_1, n:bat[:any_2], p:any_3, o:any_4) :bat[:any_2]
address SQLntile
comment "return the groups divided as equally as possible";

pattern batsql.ntile(b:bat[:any_1], n:bat[:any_2], p:any_3, o:any_4) :bat[:any_2]
address SQLntile
comment "return the groups divided as equally as possible";


pattern sql.first_value(b:any_1, s:lng, e:lng) :any_1
address SQLfirst_value
comment "return the first value of groups";

pattern batsql.first_value(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1]
address SQLfirst_value
comment "return the first value of groups";


pattern sql.last_value(b:any_1, s:lng, e:lng) :any_1
address SQLlast_value
comment "return the last value of groups";

pattern batsql.last_value(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1]
address SQLlast_value
comment "return the last value of groups";


pattern sql.nth_value(b:any_1, n:any_2, s:lng, e:lng) :any_1
address SQLnth_value
comment "return the nth value of each group";

pattern batsql.nth_value(b:bat[:any_1], n:any_2, s:bat[:lng], e:bat[:lng]) :bat[:any_1]
address SQLnth_value
comment "return the nth value of each group";

pattern batsql.nth_value(b:any_1, n:bat[:any_2], s:lng, e:lng) :bat[:any_1]
address SQLnth_value
comment "return the nth value of each group";

pattern batsql.nth_value(b:bat[:any_1], n:bat[:any_2], s:bat[:lng], e:bat[:lng]) :bat[:any_1]
address SQLnth_value
comment "return the nth value of each group";


pattern sql.min(b:any_1, s:lng, e:lng) :any_1
address SQLmin
comment "return the minimum of groups";

pattern batsql.min(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1]
address SQLmin
comment "return the minimum of groups";

pattern sql.max(b:any_1, s:lng, e:lng) :any_1
address SQLmax
comment "return the maximum of groups";

pattern batsql.max(b:bat[:any_1], s:bat[:lng], e:bat[:lng]) :bat[:any_1]
address SQLmax
comment "return the maximum of groups";

pattern sql.count(b:any_1, ignils:bit, s:lng, e:lng) :lng
address SQLcount
comment "return count of groups";

pattern batsql.count(b:bat[:any_1], ignils:bit, s:bat[:lng], e:bat[:lng]) :bat[:lng]
address SQLcount
comment "return count of groups";

pattern sql.sum(b:bte, s:lng, e:lng) :lng
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:lng]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:bte, s:lng, e:lng) :lng
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:lng]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:sht, s:lng, e:lng) :lng
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:lng]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:sht, s:lng, e:lng) :lng
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:lng]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:int, s:lng, e:lng) :lng
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:lng]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:int, s:lng, e:lng) :lng
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:lng]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:lng, s:lng, e:lng) :lng
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:lng]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:lng, s:lng, e:lng) :lng
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:lng]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:flt, s:lng, e:lng) :flt
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:flt]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:flt, s:lng, e:lng) :flt
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:flt]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:flt, s:lng, e:lng) :dbl
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:flt, s:lng, e:lng) :dbl
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:dbl, s:lng, e:lng) :dbl
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:dbl, s:lng, e:lng) :dbl
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLprod
comment "return the product of groups";

pattern sql.avg(b:bte, s:lng, e:lng) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLavg
comment "return the average of groups";


pattern sql.stdev(b:bte, s:lng, e:lng) :dbl
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern batsql.stdev(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern sql.stdevp(b:bte, s:lng, e:lng) :dbl
address SQLstddev_pop
comment "return the standard deviation population of groups";

pattern batsql.stdevp(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_pop
comment "return the standard deviation population of groups";


pattern sql.variance(b:bte, s:lng, e:lng) :dbl
address SQLvar_samp
comment "return the variance sample of groups";

pattern batsql.variance(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_samp
comment "return the variance sample of groups";

pattern sql.variancep(b:bte, s:lng, e:lng) :dbl
address SQLvar_pop
comment "return the variance population of groups";

pattern batsql.variancep(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_pop
comment "return the variance population of groups";


pattern sql.covariance(b:bte, c:bte, s:lng, e:lng) :dbl
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:bte], c:bte, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bte, c:bat[:bte], s:lng, e:lng) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:bte], c:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";


pattern sql.covariancep(b:bte, c:bte, s:lng, e:lng) :dbl
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:bte], c:bte, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bte, c:bat[:bte], s:lng, e:lng) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:bte], c:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";


pattern sql.corr(b:bte, c:bte, s:lng, e:lng) :dbl
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:bte], c:bte, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bte, c:bat[:bte], s:lng, e:lng) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:bte], c:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";


pattern sql.avg(b:sht, s:lng, e:lng) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLavg
comment "return the average of groups";


pattern sql.stdev(b:sht, s:lng, e:lng) :dbl
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern batsql.stdev(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern sql.stdevp(b:sht, s:lng, e:lng) :dbl
address SQLstddev_pop
comment "return the standard deviation population of groups";

pattern batsql.stdevp(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_pop
comment "return the standard deviation population of groups";


pattern sql.variance(b:sht, s:lng, e:lng) :dbl
address SQLvar_samp
comment "return the variance sample of groups";

pattern batsql.variance(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_samp
comment "return the variance sample of groups";

pattern sql.variancep(b:sht, s:lng, e:lng) :dbl
address SQLvar_pop
comment "return the variance population of groups";

pattern batsql.variancep(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_pop
comment "return the variance population of groups";


pattern sql.covariance(b:sht, c:sht, s:lng, e:lng) :dbl
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:sht], c:sht, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:sht, c:bat[:sht], s:lng, e:lng) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:sht], c:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";


pattern sql.covariancep(b:sht, c:sht, s:lng, e:lng) :dbl
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:sht], c:sht, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:sht, c:bat[:sht], s:lng, e:lng) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:sht], c:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";


pattern sql.corr(b:sht, c:sht, s:lng, e:lng) :dbl
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:sht], c:sht, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:sht, c:bat[:sht], s:lng, e:lng) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:sht], c:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";


pattern sql.avg(b:int, s:lng, e:lng) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLavg
comment "return the average of groups";


pattern sql.stdev(b:int, s:lng, e:lng) :dbl
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern batsql.stdev(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern sql.stdevp(b:int, s:lng, e:lng) :dbl
address SQLstddev_pop
comment "return the standard deviation population of groups";

pattern batsql.stdevp(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_pop
comment "return the standard deviation population of groups";


pattern sql.variance(b:int, s:lng, e:lng) :dbl
address SQLvar_samp
comment "return the variance sample of groups";

pattern batsql.variance(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_samp
comment "return the variance sample of groups";

pattern sql.variancep(b:int, s:lng, e:lng) :dbl
address SQLvar_pop
comment "return the variance population of groups";

pattern batsql.variancep(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_pop
comment "return the variance population of groups";


pattern sql.covariance(b:int, c:int, s:lng, e:lng) :dbl
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:int], c:int, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:int, c:bat[:int], s:lng, e:lng) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:int], c:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";


pattern sql.covariancep(b:int, c:int, s:lng, e:lng) :dbl
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:int], c:int, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:int, c:bat[:int], s:lng, e:lng) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:int], c:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";


pattern sql.corr(b:int, c:int, s:lng, e:lng) :dbl
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:int], c:int, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:int, c:bat[:int], s:lng, e:lng) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:int], c:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";


pattern sql.avg(b:lng, s:lng, e:lng) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLavg
comment "return the average of groups";


pattern sql.stdev(b:lng, s:lng, e:lng) :dbl
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern batsql.stdev(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern sql.stdevp(b:lng, s:lng, e:lng) :dbl
address SQLstddev_pop
comment "return the standard deviation population of groups";

pattern batsql.stdevp(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_pop
comment "return the standard deviation population of groups";


pattern sql.variance(b:lng, s:lng, e:lng) :dbl
address SQLvar_samp
comment "return the variance sample of groups";

pattern batsql.variance(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_samp
comment "return the variance sample of groups";

pattern sql.variancep(b:lng, s:lng, e:lng) :dbl
address SQLvar_pop
comment "return the variance population of groups";

pattern batsql.variancep(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_pop
comment "return the variance population of groups";


pattern sql.covariance(b:lng, c:lng, s:lng, e:lng) :dbl
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:lng], c:lng, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:lng, c:bat[:lng], s:lng, e:lng) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:lng], c:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";


pattern sql.covariancep(b:lng, c:lng, s:lng, e:lng) :dbl
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:lng], c:lng, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:lng, c:bat[:lng], s:lng, e:lng) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:lng], c:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";


pattern sql.corr(b:lng, c:lng, s:lng, e:lng) :dbl
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:lng], c:lng, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:lng, c:bat[:lng], s:lng, e:lng) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:lng], c:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";


pattern sql.avg(b:flt, s:lng, e:lng) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLavg
comment "return the average of groups";


pattern sql.stdev(b:flt, s:lng, e:lng) :dbl
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern batsql.stdev(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern sql.stdevp(b:flt, s:lng, e:lng) :dbl
address SQLstddev_pop
comment "return the standard deviation population of groups";

pattern batsql.stdevp(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_pop
comment "return the standard deviation population of groups";


pattern sql.variance(b:flt, s:lng, e:lng) :dbl
address SQLvar_samp
comment "return the variance sample of groups";

pattern batsql.variance(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_samp
comment "return the variance sample of groups";

pattern sql.variancep(b:flt, s:lng, e:lng) :dbl
address SQLvar_pop
comment "return the variance population of groups";

pattern batsql.variancep(b:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_pop
comment "return the variance population of groups";


pattern sql.covariance(b:flt, c:flt, s:lng, e:lng) :dbl
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:flt], c:flt, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:flt, c:bat[:flt], s:lng, e:lng) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:flt], c:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";


pattern sql.covariancep(b:flt, c:flt, s:lng, e:lng) :dbl
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:flt], c:flt, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:flt, c:bat[:flt], s:lng, e:lng) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:flt], c:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";


pattern sql.corr(b:flt, c:flt, s:lng, e:lng) :dbl
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:flt], c:flt, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:flt, c:bat[:flt], s:lng, e:lng) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:flt], c:bat[:flt], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";


pattern sql.avg(b:dbl, s:lng, e:lng) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLavg
comment "return the average of groups";


pattern sql.stdev(b:dbl, s:lng, e:lng) :dbl
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern batsql.stdev(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_samp
comment "return the standard deviation sample of groups";

pattern sql.stdevp(b:dbl, s:lng, e:lng) :dbl
address SQLstddev_pop
comment "return the standard deviation population of groups";

pattern batsql.stdevp(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_pop
comment "return the standard deviation population of groups";


pattern sql.variance(b:dbl, s:lng, e:lng) :dbl
address SQLvar_samp
comment "return the variance sample of groups";

pattern batsql.variance(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_samp
comment "return the variance sample of groups";

pattern sql.variancep(b:dbl, s:lng, e:lng) :dbl
address SQLvar_pop
comment "return the variance population of groups";

pattern batsql.variancep(b:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_pop
comment "return the variance population of groups";


pattern sql.covariance(b:dbl, c:dbl, s:lng, e:lng) :dbl
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:dbl], c:dbl, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:dbl, c:bat[:dbl], s:lng, e:lng) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:dbl], c:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";


pattern sql.covariancep(b:dbl, c:dbl, s:lng, e:lng) :dbl
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:dbl], c:dbl, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:dbl, c:bat[:dbl], s:lng, e:lng) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:dbl], c:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";


pattern sql.corr(b:dbl, c:dbl, s:lng, e:lng) :dbl
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:dbl], c:dbl, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:dbl, c:bat[:dbl], s:lng, e:lng) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:dbl], c:bat[:dbl], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";


pattern sql.str_group_concat(b:str, s:lng, e:lng) :str
address SQLstrgroup_concat
comment "return the string concatenation of groups";

pattern batsql.str_group_concat(b:bat[:str], s:bat[:lng], e:bat[:lng]) :bat[:str]
address SQLstrgroup_concat
comment "return the string concatenation of groups";


pattern sql.str_group_concat(b:str, sep:str, s:lng, e:lng) :str
address SQLstrgroup_concat
comment "return the string concatenation of groups with a custom separator";

pattern batsql.str_group_concat(b:bat[:str], sep:str, s:bat[:lng], e:bat[:lng]) :bat[:str]
address SQLstrgroup_concat
comment "return the string concatenation of groups with a custom separator";

pattern batsql.str_group_concat(b:str, sep:bat[:str], s:lng, e:lng) :bat[:str]
address SQLstrgroup_concat
comment "return the string concatenation of groups with a custom separator";

pattern batsql.str_group_concat(b:bat[:str], sep:bat[:str], s:bat[:lng], e:bat[:lng]) :bat[:str]
address SQLstrgroup_concat
comment "return the string concatenation of groups with a custom separator";

