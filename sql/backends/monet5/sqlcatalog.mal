# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2020 MonetDB B.V.

# All functions return a void and this are unsafe, having side effects.
module sqlcatalog;

pattern create_seq( sname:str, seqname:str, seq:ptr, action:int)
address SQLcreate_seq 
comment "Catalog operation create_seq";

pattern alter_seq( sname:str, seqname:str, seq:ptr, val:lng) 
address SQLalter_seq 
comment "Catalog operation alter_seq";

pattern alter_seq( sname:str, seqname:str, seq:ptr, val:bat[:lng]) 
address SQLalter_seq 
comment "Catalog operation alter_seq";

pattern drop_seq( sname:str, nme:str, action:int) 
address SQLdrop_seq 
comment "Catalog operation drop_seq";

pattern create_schema(sname:str, auth:str, ifnotexists:int, action:int)
address SQLcreate_schema 
comment "Catalog operation create_schema";

pattern drop_schema( sname:str, s:str, ifexists:int, action:int)
address SQLdrop_schema 
comment "Catalog operation drop_schema";

pattern create_table(sname:str, tname:str, tbl:ptr, temp:int) 
address SQLcreate_table 
comment "Catalog operation create_table";

pattern create_view(sname:str, vname:str, tbl:ptr, temp:int) 
address SQLcreate_view 
comment "Catalog operation create_view";

pattern drop_table( sname:str, name:str, action:int, ifexists:int)
address SQLdrop_table 
comment "Catalog operation drop_table";

pattern drop_view( sname:str, name:str, action:int, ifexists:int)
address SQLdrop_view 
comment "Catalog operation drop_view";

pattern drop_constraint( sname:str, name:str, action:int, ifexists:int)
address SQLdrop_constraint 
comment "Catalog operation drop_constraint";

pattern alter_table( sname:str, tname:str, tbl:ptr, action:int) 
address SQLalter_table 
comment "Catalog operation alter_table";

pattern create_type( sname:str, nme:str, impl:str) 
address SQLcreate_type 
comment "Catalog operation create_type";

pattern drop_type( sname:str, nme:str, action:int) 
address SQLdrop_type 
comment "Catalog operation drop_type";

pattern grant_roles( sname:str, auth:str, grantor:int, admin:int) 
address SQLgrant_roles 
comment "Catalog operation grant_roles";

pattern revoke_roles( sname:str, auth:str, grantor:int, admin:int) 
address SQLrevoke_roles 
comment "Catalog operation revoke_roles";

pattern grant( sname:str, tbl:str, grantee:str, privs:int, cname:str, gr:int, grantor:int) 
address SQLgrant 
comment "Catalog operation grant";

pattern revoke ( sname:str, tbl:str, grantee:str, privs:int, cname:str,grant:int, grantor:int) 
address SQLrevoke 
comment "Catalog operation revoke";

pattern grant_function( sname:str, fcnid:int, grantee:str, privs:int, grant:int, grantor:int) 
address SQLgrant_function 
comment "Catalog operation grant_function";

pattern revoke_function( sname:str, fcnid:int, grantee:str, privs:int, grant:int, grantor:int) 
address SQLrevoke_function 
comment "Catalog operation revoke_function";

pattern create_user( sname:str, passwrd:str, enc:int, schema:str, fullname:str) 
address SQLcreate_user 
comment "Catalog operation create_user";

pattern drop_user(sname:str, action:int) 
address SQLdrop_user 
comment "Catalog operation drop_user";

pattern drop_user(sname:str, auth:str, action:int) 
address SQLdrop_user 
comment "Catalog operation drop_user";


pattern alter_user( sname:str, passwrd:str, enc:int, schema:str, oldpasswrd:str) 
address SQLalter_user 
comment "Catalog operation alter_user";

pattern rename_user( sname:str, newnme:str, action:int) 
address SQLrename_user 
comment "Catalog operation rename_user";

pattern create_role(sname:str,role:str,grator:int) 
address SQLcreate_role 
comment "Catalog operation create_role";

pattern drop_role( auth:str, role:str, action:int) 
address SQLdrop_role 
comment "Catalog operation drop_role";
pattern drop_role( role:str, action:int) 
address SQLdrop_role 
comment "Catalog operation drop_role";

pattern drop_index( sname:str, iname:str, action:int) 
address SQLdrop_index 
comment "Catalog operation drop_index";

pattern drop_function( sname:str, fname:str, fid:int, type:int, action:int)
address SQLdrop_function 
comment "Catalog operation drop_function";

pattern create_function( sname:str, fname:str, fcn:ptr) 
address SQLcreate_function 
comment "Catalog operation create_function";

pattern create_trigger( sname:str, tname:str, triggername:str, time:int, orientation:int, event:int, old:str, new:str, cond:str, qry:str) 
address SQLcreate_trigger 
comment "Catalog operation create_trigger";

pattern drop_trigger(sname:str, nme:str, ifexists:int)
address SQLdrop_trigger 
comment "Catalog operation drop_trigger";

pattern alter_add_table( sname:str, mtnme:str, psnme:str, ptnme:str, action:int) 
address SQLalter_add_table 
comment "Catalog operation alter_add_table";

pattern alter_del_table( sname:str, mtnme:str, psnme:str, ptnme:str, action:int) 
address SQLalter_del_table 
comment "Catalog operation alter_del_table";

pattern alter_set_table( sname:str, tnme:str, access:int) 
address SQLalter_set_table 
comment "Catalog operation alter_set_table";

pattern alter_add_range_partition( sname:str, mtnme:str, psnme:str, ptnme:str, min:any_1, max:any_1, nills:bit, update:int)
address SQLalter_add_range_partition
comment "Catalog operation alter_add_range_partition";

pattern alter_add_value_partition( sname:str, mtnme:str, psnme:str, ptnme:str, nills:bit, update:int)
address SQLalter_add_value_partition
comment "Catalog operation alter_add_value_partition";

pattern alter_add_value_partition( sname:str, mtnme:str, psnme:str, ptnme:str, nills:bit, update:int, arg:any...)
address SQLalter_add_value_partition
comment "Catalog operation alter_add_value_partition";

pattern comment_on(objid:int, remark:str)
address SQLcomment_on
comment "Catalog operation comment_on";

pattern rename_schema(sname:str, newnme:str)
address SQLrename_schema
comment "Catalog operation rename_schema";

pattern rename_table(osname:str, nsname:str, otname:str, ntname:str)
address SQLrename_table
comment "Catalog operation rename_table";

pattern rename_column(sname:str, tname:str, cname:str, newnme:str)
address SQLrename_column
comment "Catalog operation rename_column";
