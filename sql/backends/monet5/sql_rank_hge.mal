# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2020 MonetDB B.V.

# This file was generated by using the script sql_rank_hge.mal.sh.

module sql;

pattern sql.window_bound(b:any_1, unit:int, bound:int, excl:int, start:hge) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, start:hge) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern sql.window_bound(p:bit, b:any_1, unit:int, bound:int, excl:int, start:hge) :lng
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, start:hge) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(b:bat[:any_1], unit:int, bound:int, excl:int, start:bat[:hge]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";

pattern batsql.window_bound(p:bat[:bit], b:bat[:any_1], unit:int, bound:int, excl:int, start:bat[:hge]) :bat[:lng]
address SQLwindow_bound
comment "computes window ranges for each row";


pattern sql.sum(b:bte, s:lng, e:lng) :hge
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:hge]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:bte, s:lng, e:lng) :hge
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:bte], s:bat[:lng], e:bat[:lng]) :bat[:hge]
address SQLprod
comment "return the product of groups";


pattern sql.sum(b:sht, s:lng, e:lng) :hge
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:hge]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:sht, s:lng, e:lng) :hge
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:sht], s:bat[:lng], e:bat[:lng]) :bat[:hge]
address SQLprod
comment "return the product of groups";


pattern sql.sum(b:int, s:lng, e:lng) :hge
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:hge]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:int, s:lng, e:lng) :hge
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:int], s:bat[:lng], e:bat[:lng]) :bat[:hge]
address SQLprod
comment "return the product of groups";


pattern sql.sum(b:lng, s:lng, e:lng) :hge
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:hge]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:lng, s:lng, e:lng) :hge
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:lng], s:bat[:lng], e:bat[:lng]) :bat[:hge]
address SQLprod
comment "return the product of groups";


pattern sql.sum(b:hge, s:lng, e:lng) :hge
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:hge]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:hge, s:lng, e:lng) :hge
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:hge]
address SQLprod
comment "return the product of groups";


pattern sql.avg(b:hge, s:lng, e:lng) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLavg
comment "return the average of groups";

pattern sql.stdev(b:hge, s:lng, e:lng) :dbl
address SQLstddev_samp
comment "return the standard deviation of groups";

pattern batsql.stdev(b:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_samp
comment "return the standard deviation of groups";

pattern sql.stdevp(b:hge, s:lng, e:lng) :dbl
address SQLstddev_pop
comment "return the standard deviation of groups";

pattern batsql.stdevp(b:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLstddev_pop
comment "return the standard deviation of groups";

pattern sql.variance(b:hge, s:lng, e:lng) :dbl
address SQLvar_samp
comment "return the variance of groups";

pattern batsql.variance(b:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_samp
comment "return the variance of groups";

pattern sql.variancep(b:hge, s:lng, e:lng) :dbl
address SQLvar_pop
comment "return the variance of groups";

pattern batsql.variancep(b:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLvar_pop
comment "return the variance of groups";

pattern sql.covariance(b:hge, c:hge, s:lng, e:lng) :dbl
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:hge], c:hge, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:hge, c:bat[:hge], s:lng, e:lng) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern batsql.covariance(b:bat[:hge], c:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_samp
comment "return the covariance sample value of groups";

pattern sql.covariancep(b:hge, c:hge, s:lng, e:lng) :dbl
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:hge], c:hge, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:hge, c:bat[:hge], s:lng, e:lng) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern batsql.covariancep(b:bat[:hge], c:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcovar_pop
comment "return the covariance population value of groups";

pattern sql.corr(b:hge, c:hge, s:lng, e:lng) :dbl
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:hge], c:hge, s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:hge, c:bat[:hge], s:lng, e:lng) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

pattern batsql.corr(b:bat[:hge], c:bat[:hge], s:bat[:lng], e:bat[:lng]) :bat[:dbl]
address SQLcorr
comment "return the correlation value of groups";

