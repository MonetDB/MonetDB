stdout of test 'foreign_key_outer_join_dead_code_elimination-explain-2join-query` in directory 'sql/test/FeatureRequests` itself:


# 01:44:33 >  
# 01:44:33 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=31552" "--set" "mapi_usock=/var/tmp/mtest-6324/.s.monetdb.31552" "--set" "monet_prompt=" "--forcemito" "--dbpath=/ufs/manegold/_/Monet/default/prefix/_/var/MonetDB/mTests_sql_test_FeatureRequests" "--set" "embedded_r=yes" "--set" "embedded_py=true"
# 01:44:33 >  

# MonetDB 5 server v11.28.0
# This is an unreleased version
# Serving database 'mTests_sql_test_FeatureRequests', using 4 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 128bit integers
# Found 31.309 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2018 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://earth.da.cwi.nl:31552/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-6324/.s.monetdb.31552
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/Python2 module loaded
# MonetDB/R   module loaded


# 01:44:33 >  
# 01:44:33 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-6324" "--port=31552"
# 01:44:33 >  

#set optimizer = 'sequential_pipe';

#explain select count(*) from fk left outer join pk1 on fk.fk1 = pk1.pk1 left outer join pk2 on fk.fk2 = pk2.pk2;
% .explain # table_name
% mal # name
% clob # type
% 183 # length
function user.main():void;
    X_1:void := querylog.define("explain select count(*) from fk left outer join pk1 on fk.fk1 = pk1.pk1 left outer join pk2 on fk.fk2 = pk2.pk2;":str, "sequential_pipe":str, 11:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "fk":str);
    X_18:lng := aggr.count(C_5:bat[:oid]);
    sql.resultSet(".%1":str, "%1":str, "bigint":str, 64:int, 0:int, 7:int, X_18:lng);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=0 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions= 0 time=2 usec 
#emptybind            actions= 1 time=4 usec 
#pushselect           actions= 0 time=2 usec 
#aliases              actions= 1 time=3 usec 
#mergetable           actions= 0 time=15 usec 
#deadcode             actions= 2 time=4 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=2 usec 
#commonTerms          actions= 0 time=2 usec 
#projectionpath       actions= 0 time=1 usec 
#reorder              actions= 1 time=24 usec 
#deadcode             actions= 0 time=3 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions=1 time=1 usec 
#candidates           actions=1 time=1 usec 
#postfix              actions= 1 time=2 usec 
#deadcode             actions= 1 time=2 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=18 usec 
#total                actions=26 time=149 usec 

#explain select id       from fk left outer join pk1 on fk.fk1 = pk1.pk1 left outer join pk2 on fk.fk2 = pk2.pk2 order by id;
% .explain # table_name
% mal # name
% clob # type
% 189 # length
function user.main():void;
    X_1:void := querylog.define("explain select id from fk left outer join pk1 on fk.fk1 = pk1.pk1 left outer join pk2 on fk.fk2 = pk2.pk2 order by id;":str, "sequential_pipe":str, 27:int);
    X_39:bat[:str] := bat.pack("sys.fk":str);
    X_40:bat[:str] := bat.pack("id":str);
    X_41:bat[:str] := bat.pack("int":str);
    X_42:bat[:int] := bat.pack(32:int);
    X_43:bat[:int] := bat.pack(0:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "fk":str);
    X_8:bat[:int] := sql.bind(X_4:int, "sys":str, "fk":str, "id":str, 0:int);
    X_29:bat[:int] := algebra.projection(C_5:bat[:oid], X_8:bat[:int]);
    (X_32:bat[:int], X_33:bat[:oid]) := algebra.sort(X_29:bat[:int], false:bit, false:bit, false:bit);
    X_37:bat[:int] := algebra.projection(X_33:bat[:oid], X_29:bat[:int]);
    sql.resultSet(X_39:bat[:str], X_40:bat[:str], X_41:bat[:str], X_42:bat[:int], X_43:bat[:int], X_37:bat[:int]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions= 0 time=4 usec 
#emptybind            actions= 1 time=5 usec 
#pushselect           actions= 0 time=2 usec 
#aliases              actions= 1 time=4 usec 
#mergetable           actions= 0 time=19 usec 
#deadcode             actions= 2 time=5 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 1 time=4 usec 
#commonTerms          actions= 0 time=2 usec 
#projectionpath       actions= 0 time=2 usec 
#reorder              actions= 1 time=16 usec 
#deadcode             actions= 0 time=4 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions=1 time=0 usec 
#candidates           actions=1 time=0 usec 
#postfix              actions= 0 time=0 usec 
#deadcode             actions= 0 time=4 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=36 usec 
#total                actions=26 time=165 usec 

#explain select id , v1  from fk left outer join pk1 on fk.fk1 = pk1.pk1 left outer join pk2 on fk.fk2 = pk2.pk2 order by id;
% .explain # table_name
% mal # name
% clob # type
% 194 # length
function user.main():void;
    X_1:void := querylog.define("explain select id , v1 from fk left outer join pk1 on fk.fk1 = pk1.pk1 left outer join pk2 on fk.fk2 = pk2.pk2 order by id;":str, "sequential_pipe":str, 65:int);
    X_51:bat[:int] := bat.new(nil:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "fk":str);
    X_17:bat[:oid] := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk1_fkey":str, 0:int);
    (X_20:bat[:oid], X_21:bat[:oid]) := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk1_fkey":str, 2:int);
    X_19:bat[:oid] := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk1_fkey":str, 1:int);
    X_22:bat[:oid] := sql.delta(X_17:bat[:oid], X_20:bat[:oid], X_21:bat[:oid], X_19:bat[:oid]);
    X_39:bat[:oid] := algebra.projection(C_5:bat[:oid], X_22:bat[:oid]);
    C_29:bat[:oid] := sql.tid(X_4:int, "sys":str, "pk1":str);
    (X_42:bat[:oid], X_43:bat[:oid]) := algebra.join(X_39:bat[:oid], C_29:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);
    X_8:bat[:int] := sql.bind(X_4:int, "sys":str, "fk":str, "id":str, 0:int);
    X_38:bat[:int] := algebra.projection(C_5:bat[:oid], X_8:bat[:int]);
    X_50:bat[:int] := algebra.projection(X_42:bat[:oid], X_38:bat[:int]);
    C_48:bat[:oid] := bat.mirror(X_38:bat[:int]);
    C_49:bat[:oid] := algebra.difference(C_48:bat[:oid], X_42:bat[:oid], nil:BAT, nil:BAT, false:bit, false:bit, nil:lng);
    X_31:bat[:int] := sql.bind(X_4:int, "sys":str, "pk1":str, "v1":str, 0:int);
    X_53:bat[:int] := bat.append(X_51:bat[:int], X_50:bat[:int], true:bit);
    X_55:bat[:int] := algebra.projection(C_49:bat[:oid], X_38:bat[:int]);
    X_56:bat[:int] := bat.append(X_53:bat[:int], X_55:bat[:int], true:bit);
    X_69:bat[:int] := bat.new(nil:int);
    X_68:bat[:int] := algebra.projectionpath(X_43:bat[:oid], C_29:bat[:oid], X_31:bat[:int]);
    X_70:bat[:int] := bat.append(X_69:bat[:int], X_68:bat[:int], true:bit);
    X_72:bat[:int] := algebra.project(C_49:bat[:oid], nil:int);
    X_73:bat[:int] := bat.append(X_70:bat[:int], X_72:bat[:int], true:bit);
    X_88:bat[:str] := bat.pack(".fk":str, ".pk1":str);
    X_89:bat[:str] := bat.pack("id":str, "v1":str);
    X_90:bat[:str] := bat.pack("int":str, "int":str);
    X_91:bat[:int] := bat.pack(32:int, 32:int);
    X_92:bat[:int] := bat.pack(0:int, 0:int);
    (X_80:bat[:int], X_81:bat[:oid]) := algebra.sort(X_56:bat[:int], false:bit, false:bit, false:bit);
    X_85:bat[:int] := algebra.projection(X_81:bat[:oid], X_56:bat[:int]);
    X_86:bat[:int] := algebra.projection(X_81:bat[:oid], X_73:bat[:int]);
    sql.resultSet(X_88:bat[:str], X_89:bat[:str], X_90:bat[:str], X_91:bat[:int], X_92:bat[:int], X_85:bat[:int], X_86:bat[:int]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 2 time=6 usec 
#evaluate             actions= 0 time=6 usec 
#emptybind            actions= 2 time=8 usec 
#pushselect           actions= 0 time=2 usec 
#aliases              actions= 2 time=7 usec 
#mergetable           actions= 0 time=36 usec 
#deadcode             actions=14 time=11 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 5 time=6 usec 
#commonTerms          actions= 0 time=5 usec 
#projectionpath       actions= 1 time=8 usec 
#reorder              actions= 1 time=28 usec 
#deadcode             actions= 1 time=8 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions=1 time=1 usec 
#candidates           actions=1 time=0 usec 
#postfix              actions= 0 time=0 usec 
#deadcode             actions= 0 time=4 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=43 usec 
#total                actions=26 time=296 usec 

#explain select id , v2  from fk left outer join pk1 on fk.fk1 = pk1.pk1 left outer join pk2 on fk.fk2 = pk2.pk2 order by id;
% .explain # table_name
% mal # name
% clob # type
% 194 # length
function user.main():void;
    X_1:void := querylog.define("explain select id , v2 from fk left outer join pk1 on fk.fk1 = pk1.pk1 left outer join pk2 on fk.fk2 = pk2.pk2 order by id;":str, "sequential_pipe":str, 95:int);
    X_43:bat[:int] := bat.new(nil:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "fk":str);
    X_17:bat[:oid] := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk1_fkey":str, 0:int);
    (X_20:bat[:oid], X_21:bat[:oid]) := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk1_fkey":str, 2:int);
    X_19:bat[:oid] := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk1_fkey":str, 1:int);
    X_22:bat[:oid] := sql.delta(X_17:bat[:oid], X_20:bat[:oid], X_21:bat[:oid], X_19:bat[:oid]);
    X_32:bat[:oid] := algebra.projection(C_5:bat[:oid], X_22:bat[:oid]);
    C_29:bat[:oid] := sql.tid(X_4:int, "sys":str, "pk1":str);
    X_34:bat[:oid] := algebra.join(X_32:bat[:oid], C_29:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);
    X_8:bat[:int] := sql.bind(X_4:int, "sys":str, "fk":str, "id":str, 0:int);
    X_31:bat[:int] := algebra.projection(C_5:bat[:oid], X_8:bat[:int]);
    X_42:bat[:int] := algebra.projection(X_34:bat[:oid], X_31:bat[:int]);
    C_40:bat[:oid] := bat.mirror(X_31:bat[:int]);
    C_41:bat[:oid] := algebra.difference(C_40:bat[:oid], X_34:bat[:oid], nil:BAT, nil:BAT, false:bit, false:bit, nil:lng);
    X_23:bat[:oid] := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk2_fkey":str, 0:int);
    (X_26:bat[:oid], X_27:bat[:oid]) := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk2_fkey":str, 2:int);
    X_25:bat[:oid] := sql.bind_idxbat(X_4:int, "sys":str, "fk":str, "fk_fk2_fkey":str, 1:int);
    X_28:bat[:oid] := sql.delta(X_23:bat[:oid], X_26:bat[:oid], X_27:bat[:oid], X_25:bat[:oid]);
    X_33:bat[:oid] := algebra.projection(C_5:bat[:oid], X_28:bat[:oid]);
    X_45:bat[:int] := bat.append(X_43:bat[:int], X_42:bat[:int], true:bit);
    X_47:bat[:int] := algebra.projection(C_41:bat[:oid], X_31:bat[:int]);
    X_48:bat[:int] := bat.append(X_45:bat[:int], X_47:bat[:int], true:bit);
    X_56:bat[:oid] := bat.new(nil:oid);
    X_55:bat[:oid] := algebra.projection(X_34:bat[:oid], X_33:bat[:oid]);
    X_57:bat[:oid] := bat.append(X_56:bat[:oid], X_55:bat[:oid], true:bit);
    X_58:bat[:oid] := algebra.projection(C_41:bat[:oid], X_33:bat[:oid]);
    X_59:bat[:oid] := bat.append(X_57:bat[:oid], X_58:bat[:oid], true:bit);
    X_85:bat[:int] := bat.new(nil:int);
    C_66:bat[:oid] := sql.tid(X_4:int, "sys":str, "pk2":str);
    (X_76:bat[:oid], X_77:bat[:oid]) := algebra.join(X_59:bat[:oid], C_66:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);
    X_84:bat[:int] := algebra.projection(X_76:bat[:oid], X_48:bat[:int]);
    C_82:bat[:oid] := bat.mirror(X_48:bat[:int]);
    C_83:bat[:oid] := algebra.difference(C_82:bat[:oid], X_76:bat[:oid], nil:BAT, nil:BAT, false:bit, false:bit, nil:lng);
    X_68:bat[:int] := sql.bind(X_4:int, "sys":str, "pk2":str, "v2":str, 0:int);
    X_87:bat[:int] := bat.append(X_85:bat[:int], X_84:bat[:int], true:bit);
    X_89:bat[:int] := algebra.projection(C_83:bat[:oid], X_48:bat[:int]);
    X_90:bat[:int] := bat.append(X_87:bat[:int], X_89:bat[:int], true:bit);
    X_108:bat[:int] := bat.new(nil:int);
    X_107:bat[:int] := algebra.projectionpath(X_77:bat[:oid], C_66:bat[:oid], X_68:bat[:int]);
    X_109:bat[:int] := bat.append(X_108:bat[:int], X_107:bat[:int], true:bit);
    X_111:bat[:int] := algebra.project(C_83:bat[:oid], nil:int);
    X_112:bat[:int] := bat.append(X_109:bat[:int], X_111:bat[:int], true:bit);
    X_127:bat[:str] := bat.pack(".fk":str, ".pk2":str);
    X_128:bat[:str] := bat.pack("id":str, "v2":str);
    X_129:bat[:str] := bat.pack("int":str, "int":str);
    X_130:bat[:int] := bat.pack(32:int, 32:int);
    X_131:bat[:int] := bat.pack(0:int, 0:int);
    (X_119:bat[:int], X_120:bat[:oid]) := algebra.sort(X_90:bat[:int], false:bit, false:bit, false:bit);
    X_124:bat[:int] := algebra.projection(X_120:bat[:oid], X_90:bat[:int]);
    X_125:bat[:int] := algebra.projection(X_120:bat[:oid], X_112:bat[:int]);
    sql.resultSet(X_127:bat[:str], X_128:bat[:str], X_129:bat[:str], X_130:bat[:int], X_131:bat[:int], X_124:bat[:int], X_125:bat[:int]);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 3 time=9 usec 
#aliases              actions= 3 time=11 usec 
#evaluate             actions= 0 time=10 usec 
#emptybind            actions= 4 time=14 usec 
#pushselect           actions= 0 time=2 usec 
#aliases              actions= 2 time=26 usec 
#mergetable           actions= 0 time=52 usec 
#deadcode             actions=14 time=10 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 5 time=6 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 1 time=8 usec 
#reorder              actions= 1 time=27 usec 
#deadcode             actions= 1 time=7 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions=1 time=1 usec 
#candidates           actions=1 time=1 usec 
#postfix              actions= 0 time=0 usec 
#deadcode             actions= 0 time=6 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=42 usec 
#total                actions=26 time=293 usec 

# 01:44:33 >  
# 01:44:33 >  "Done."
# 01:44:33 >  

