#START TRANSACTION;
#CREATE TABLE "t1" ("c0" DECIMAL(18,3),"c1" BINARY LARGE OBJECT NOT NULL,"c2" DECIMAL(18,3),CONSTRAINT "t1_c1_unique" UNIQUE ("c1"));
#ROLLBACK;
#START TRANSACTION;
#CREATE TABLE "t0" ("c0" BOOLEAN NOT NULL);
#CREATE TABLE "t1" ("c0" DECIMAL(18,3));
#CREATE TABLE "t2" ("c0" DECIMAL(18,3),"c2" DATE);
#PREPARE (SELECT DISTINCT t0.c0, INTERVAL '1734780053' SECOND FROM t0, t1) UNION ALL (SELECT ?, ? FROM t2);
#PREPARE (SELECT DISTINCT t0.c0, INTERVAL '1734780053' SECOND FROM t0, t1) UNION ALL (SELECT ?, ? FROM t2);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 12,	3,	1,	0,	3,	2 # length
[ "boolean",	1,	0,	"",	"%10",	"c0"	]
[ "sec_interval",	13,	0,	"",	"%10",	"%2"	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
[ "sec_interval",	13,	0,	NULL,	NULL,	NULL	]
#ROLLBACK;
#START TRANSACTION;
#CREATE TABLE "t0" ("c0" DATE,"c2" INTEGER);
#CREATE TABLE "t1" ("c1" TIMESTAMP,"c2" INTEGER);
#CREATE TABLE "t2" ("c0" DATE,"c1" TIMESTAMP,"c2" INTEGER);
#PREPARE (SELECT ?, t1.c2 FROM t1, t0 WHERE (SELECT DISTINCT (t1.c2) BETWEEN ASYMMETRIC (?) AND (t1.c2) FROM t1 CROSS JOIN 
#((SELECT DISTINCT 6.9089063E7, TRUE FROM t2 WHERE TRUE) EXCEPT (SELECT ALL 0.4, FALSE FROM t2, t1 INNER JOIN t0 ON FALSE)) AS sub0 WHERE FALSE)) INTERSECT DISTINCT (SELECT DISTINCT 0.2, ? FROM t0, t2 WHERE ?);
#PREPARE (SELECT ?, t1.c2 FROM t1, t0 WHERE (SELECT DISTINCT (t1.c2) BETWEEN ASYMMETRIC (?) AND (t1.c2) FROM t1 CROSS JOIN 
#((SELECT DISTINCT 6.9089063E7, TRUE FROM t2 WHERE TRUE) EXCEPT (SELECT ALL 0.4, FALSE FROM t2, t1 INNER JOIN t0 ON FALSE)) AS sub0 WHERE FALSE)) INTERSECT DISTINCT (SELECT DISTINCT 0.2, ? FROM t0, t2 WHERE ?);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 7,	3,	1,	0,	3,	3 # length
[ "decimal",	2,	1,	"",	"%22",	"%14"	]
[ "int",	32,	0,	"",	"%22",	"c2"	]
[ "decimal",	2,	1,	NULL,	NULL,	NULL	]
[ "int",	32,	0,	NULL,	NULL,	NULL	]
[ "int",	32,	0,	NULL,	NULL,	NULL	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
#ROLLBACK;
#PREPARE SELECT 1 WHERE greatest(true, ?);
#PREPARE SELECT 1 WHERE greatest(true, ?);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 7,	1,	1,	0,	2,	2 # length
[ "tinyint",	1,	0,	"",	"%2",	"%2"	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
#PREPARE SELECT DISTINCT ((((CAST(l0t0.c0 AS INT))-(CAST(? AS BIGINT))))*(scale_up(?, ((-438139776)*(-813129345))))) FROM (select 1) AS l0t0(c0);
#PREPARE SELECT DISTINCT ((((CAST(l0t0.c0 AS INT))-(CAST(? AS BIGINT))))*(scale_up(?, ((-438139776)*(-813129345))))) FROM (select 1) AS l0t0(c0);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 12,	2,	1,	0,	2,	2 # length
[ "day_interval",	4,	0,	"",	"%3",	"%3"	]
[ "bigint",	64,	0,	NULL,	NULL,	NULL	]
[ "day_interval",	4,	0,	NULL,	NULL,	NULL	]
#PREPARE SELECT round(-'b', ?);
#PREPARE SELECT round(-'b', ?);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 7,	1,	1,	0,	2,	2 # length
[ "double",	1,	0,	"",	"%2",	"%2"	]
[ "tinyint",	8,	0,	NULL,	NULL,	NULL	]
#PREPARE SELECT sql_max(+ (0.29353363282850464), round(- (sql_min('-Infinity', ?)), ?)) LIMIT 8535194086169274474;
#PREPARE SELECT sql_max(+ (0.29353363282850464), round(- (sql_min('-Infinity', ?)), ?)) LIMIT 8535194086169274474;
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 7,	2,	2,	0,	2,	2 # length
[ "double",	53,	17,	"",	"%2",	"%2"	]
[ "char",	9,	0,	NULL,	NULL,	NULL	]
[ "tinyint",	8,	0,	NULL,	NULL,	NULL	]
#PREPARE (SELECT DISTINCT ((CAST(- (CASE r'' WHEN r'tU1' THEN 1739172851 WHEN ? THEN -1313600539 WHEN r'X(' THEN NULL WHEN r')''CD' THEN 95 END) AS BIGINT))&(least(- (-235253756), 64)))
#WHERE ((rtrim(r'Z'))LIKE(r'rK'))) UNION ALL (SELECT ALL ? WHERE (scale_down(ifthenelse(TRUE, 18, ?), r'4')) IS NULL);
#PREPARE (SELECT DISTINCT ((CAST(- (CASE r'' WHEN r'tU1' THEN 1739172851 WHEN ? THEN -1313600539 WHEN r'X(' THEN NULL WHEN r')''CD' THEN 95 END) AS BIGINT))&(least(- (-235253756), 64)))
#WHERE ((rtrim(r'Z'))LIKE(r'rK'))) UNION ALL (SELECT ALL ? WHERE (scale_down(ifthenelse(TRUE, 18, ?), r'4')) IS NULL);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 7,	3,	1,	0,	3,	2 # length
[ "bigint",	64,	0,	"",	"%10",	"%3"	]
[ "char",	0,	0,	NULL,	NULL,	NULL	]
[ "bigint",	64,	0,	NULL,	NULL,	NULL	]
[ "tinyint",	5,	0,	NULL,	NULL,	NULL	]
#PREPARE VALUES (CASE WHEN true THEN 5 BETWEEN 4 AND 2 END);
#PREPARE VALUES (CASE WHEN true THEN 5 BETWEEN 4 AND 2 END);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 7,	1,	1,	0,	2,	2 # length
[ "boolean",	1,	0,	"",	"%1",	"%1"	]
#START TRANSACTION;
#create view v10(vc0) as (select l0v0.vc0 from (values (1, 2)) as l0v0(vc0, vc1));
#prepare select case when true then false when ? then not exists (select ?, ?, 6) end from v10 as l0v10;
#prepare select case when true then false when ? then not exists (select ?, ?, 6) end from v10 as l0v10;
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 7,	1,	1,	0,	3,	3 # length
[ "boolean",	1,	0,	"",	"%11",	"%11"	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
#ROLLBACK;
#prepare values (0.34, (values ((select ? from (select 1) as t1(x))))), (3, 2);
#prepare values (0.34, (values ((select ? from (select 1) as t1(x))))), (3, 2);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 7,	1,	1,	0,	2,	2 # length
[ "decimal",	3,	2,	"",	"%1",	"%1"	]
[ "tinyint",	2,	0,	"",	"%2",	"%2"	]
[ "tinyint",	2,	0,	NULL,	NULL,	NULL	]
#START TRANSACTION;
#CREATE FUNCTION myintudf(a INT) RETURNS INT RETURN a + 1;
#PREPARE SELECT myintudf(?);
#PREPARE SELECT myintudf(?);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 3,	3,	1,	0,	2,	2 # length
[ "int",	32,	0,	"",	"%2",	"%2"	]
[ "int",	32,	0,	NULL,	NULL,	NULL	]
#EXEC  0(1);
% .%2 # table_name
% %2 # name
% int # type
% 1 # length
[ 2	]
#ROLLBACK;
