#START TRANSACTION;
#CREATE TABLE "t1" ("c0" DECIMAL(18,3),"c1" BINARY LARGE OBJECT NOT NULL,"c2" DECIMAL(18,3),CONSTRAINT "t1_c1_unique" UNIQUE ("c1"));
#ROLLBACK;
#START TRANSACTION;
#CREATE TABLE "t0" ("c0" BOOLEAN NOT NULL);
#CREATE TABLE "t1" ("c0" DECIMAL(18,3));
#CREATE TABLE "t2" ("c0" DECIMAL(18,3),"c2" DATE);
#PREPARE (SELECT DISTINCT t0.c0, INTERVAL '1734780053' SECOND FROM t0, t1) UNION ALL (SELECT ?, ? FROM t2);
#PREPARE (SELECT DISTINCT t0.c0, INTERVAL '1734780053' SECOND FROM t0, t1) UNION ALL (SELECT ?, ? FROM t2);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 12,	2,	1,	0,	2,	2 # length
[ "boolean",	1,	0,	"",	"t0",	"c0"	]
[ "sec_interval",	13,	0,	"",	"%1",	"%1"	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
[ "sec_interval",	13,	0,	NULL,	NULL,	NULL	]
#ROLLBACK;
#START TRANSACTION;
#CREATE TABLE "t0" ("c0" DATE,"c2" INTEGER);
#CREATE TABLE "t1" ("c1" TIMESTAMP,"c2" INTEGER);
#CREATE TABLE "t2" ("c0" DATE,"c1" TIMESTAMP,"c2" INTEGER);
#PREPARE (SELECT ?, t1.c2 FROM t1, t0 WHERE (SELECT DISTINCT (t1.c2) BETWEEN ASYMMETRIC (?) AND (t1.c2) FROM t1 CROSS JOIN 
#((SELECT DISTINCT 6.9089063E7, TRUE FROM t2 WHERE TRUE) EXCEPT (SELECT ALL 0.4, FALSE FROM t2, t1 INNER JOIN t0 ON FALSE)) AS sub0 WHERE FALSE)) INTERSECT DISTINCT (SELECT DISTINCT 0.2, ? FROM t0, t2 WHERE ?);
#PREPARE (SELECT ?, t1.c2 FROM t1, t0 WHERE (SELECT DISTINCT (t1.c2) BETWEEN ASYMMETRIC (?) AND (t1.c2) FROM t1 CROSS JOIN 
#((SELECT DISTINCT 6.9089063E7, TRUE FROM t2 WHERE TRUE) EXCEPT (SELECT ALL 0.4, FALSE FROM t2, t1 INNER JOIN t0 ON FALSE)) AS sub0 WHERE FALSE)) INTERSECT DISTINCT (SELECT DISTINCT 0.2, ? FROM t0, t2 WHERE ?);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	2,	1,	0,	2,	2 # length
[ "decimal",	2,	1,	"",	"%6",	"%6"	]
[ "int",	31,	0,	"",	"t1",	"c2"	]
[ "decimal",	2,	1,	NULL,	NULL,	NULL	]
[ "int",	31,	0,	NULL,	NULL,	NULL	]
[ "int",	31,	0,	NULL,	NULL,	NULL	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
#ROLLBACK;
#PREPARE SELECT 1 WHERE greatest(true, ?);
#PREPARE SELECT 1 WHERE greatest(true, ?);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	1,	1,	0,	2,	2 # length
[ "tinyint",	1,	0,	"",	"%2",	"%2"	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
#PREPARE SELECT (1 + CAST(l0t0.c0 AS BIGINT)) * 2 FROM (select 1) AS l0t0(c0);
#PREPARE SELECT (1 + CAST(l0t0.c0 AS BIGINT)) * 2 FROM (select 1) AS l0t0(c0);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	2,	1,	0,	2,	2 # length
[ "hugeint",	66,	0,	"",	"%3",	"%3"	]
#PREPARE SELECT DISTINCT ((((CAST(l0t0.c0 AS INT))-(CAST(? AS BIGINT))))*(3)) FROM (select 1) AS l0t0(c0);
#PREPARE SELECT DISTINCT ((((CAST(l0t0.c0 AS INT))-(CAST(? AS BIGINT))))*(3)) FROM (select 1) AS l0t0(c0);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	2,	1,	0,	2,	2 # length
[ "hugeint",	66,	0,	"",	"%3",	"%3"	]
[ "bigint",	63,	0,	NULL,	NULL,	NULL	]
#PREPARE SELECT round(-'b', ?);
#PREPARE SELECT round(-'b', ?);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	2,	1,	0,	2,	2 # length
[ "double",	53,	0,	"",	"%2",	"%2"	]
[ "tinyint",	7,	0,	NULL,	NULL,	NULL	]
#PREPARE SELECT sql_max(+ (0.29353363282850464), round(- (sql_min('-Infinity', ?)), ?)) LIMIT 8535194086169274474;
#PREPARE SELECT sql_max(+ (0.29353363282850464), round(- (sql_min('-Infinity', ?)), ?)) LIMIT 8535194086169274474;
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	2,	1,	0,	2,	2 # length
[ "double",	53,	0,	"",	"%2",	"%2"	]
[ "varchar",	9,	0,	NULL,	NULL,	NULL	]
[ "tinyint",	7,	0,	NULL,	NULL,	NULL	]
#PREPARE (SELECT DISTINCT ((CAST(- (CASE r'' WHEN r'tU1' THEN 1739172851 WHEN ? THEN -1313600539 WHEN r'X(' THEN NULL WHEN r')''CD' THEN 95 END) AS BIGINT))&(least(- (-235253756), 64)))
#WHERE ((rtrim(r'Z'))LIKE(r'rK'))) UNION ALL (SELECT ALL ? WHERE (12) IS NULL);
#PREPARE (SELECT DISTINCT ((CAST(- (CASE r'' WHEN r'tU1' THEN 1739172851 WHEN ? THEN -1313600539 WHEN r'X(' THEN NULL WHEN r')''CD' THEN 95 END) AS BIGINT))&(least(- (-235253756), 64)))
#WHERE ((rtrim(r'Z'))LIKE(r'rK'))) UNION ALL (SELECT ALL ? WHERE (12) IS NULL);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	2,	1,	0,	2,	2 # length
[ "bigint",	63,	0,	"",	"%4",	"%4"	]
[ "varchar",	0,	0,	NULL,	NULL,	NULL	]
[ "bigint",	63,	0,	NULL,	NULL,	NULL	]
#PREPARE VALUES (CASE WHEN true THEN 5 BETWEEN 4 AND 2 END);
#PREPARE VALUES (CASE WHEN true THEN 5 BETWEEN 4 AND 2 END);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	1,	1,	0,	2,	2 # length
[ "boolean",	1,	0,	"",	"%1",	"%1"	]
#START TRANSACTION;
#create view v10(vc0) as (select l0v0.vc0 from (values (1, 2)) as l0v0(vc0, vc1));
#prepare select case when true then false when ? then not exists (select ?, ?, 6) end from v10 as l0v10;
#prepare select case when true then false when ? then not exists (select ?, ?, 6) end from v10 as l0v10;
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	1,	1,	0,	3,	3 # length
[ "boolean",	1,	0,	"",	"%12",	"%12"	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
#ROLLBACK;
#prepare values (0.34, (values ((select ? from (select 1) as t1(x))))), (3, 2);
#prepare values (0.34, (values ((select ? from (select 1) as t1(x))))), (3, 2);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	1,	1,	0,	2,	2 # length
[ "decimal",	3,	2,	"",	"%1",	"%1"	]
[ "tinyint",	2,	0,	"",	"%2",	"%2"	]
[ "tinyint",	2,	0,	NULL,	NULL,	NULL	]
#START TRANSACTION;
#CREATE FUNCTION myintudf(a INT) RETURNS INT RETURN a + 1;
#PREPARE SELECT myintudf(?);
#PREPARE SELECT myintudf(?);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 3,	2,	1,	0,	2,	2 # length
[ "int",	31,	0,	"",	"%2",	"%2"	]
[ "int",	31,	0,	NULL,	NULL,	NULL	]
#EXEC 11(1);
% .%2 # table_name
% %2 # name
% int # type
% 1 # length
[ 2	]
#ROLLBACK;
#PREPARE SELECT "quarter"(date '2021-01-02') IN ("second"(TIME '01:00:00'), (select ? where true));
#PREPARE SELECT "quarter"(date '2021-01-02') IN ("second"(TIME '01:00:00'), (select ? where true));
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	1,	1,	0,	2,	2 # length
[ "boolean",	1,	0,	"",	"%7",	"%7"	]
[ "decimal",	9,	6,	NULL,	NULL,	NULL	]
#PREPARE SELECT "quarter"(date '2021-01-02') IN ("second"(TIME '01:00:00'), (select ? where true));
#PREPARE SELECT "quarter"(date '2021-01-02') IN ("second"(TIME '01:00:00'), (select ? where true));
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	1,	1,	0,	2,	2 # length
[ "boolean",	1,	0,	"",	"%7",	"%7"	]
[ "decimal",	9,	6,	NULL,	NULL,	NULL	]
#PREPARE WITH x(a) AS (SELECT ?) SELECT CAST(x.a AS INT) FROM x;
#PREPARE WITH x(a) AS (SELECT ?) SELECT CAST(x.a AS INT) FROM x;
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 3,	2,	1,	0,	1,	1 # length
[ "int",	31,	0,	"",	"x",	"a"	]
[ "int",	31,	0,	NULL,	NULL,	NULL	]
#EXEC 14(1);
% .x # table_name
% a # name
% int # type
% 1 # length
[ 1	]
#START TRANSACTION;
#CREATE TABLE t0 (c0 INT);
#ROLLBACK;
#PREPARE WITH y(a,b) AS (SELECT 1, ?) SELECT "json"."filter"(JSON '"a"', y.b) FROM y CROSS JOIN ((SELECT 1, 4) EXCEPT (SELECT 1,2)) x(x,y);
#PREPARE WITH y(a,b) AS (SELECT 1, ?) SELECT "json"."filter"(JSON '"a"', y.b) FROM y CROSS JOIN ((SELECT 1, 4) EXCEPT (SELECT 1,2)) x(x,y);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	3,	1,	0,	3,	3 # length
[ "json",	0,	0,	"",	"%10",	"%10"	]
[ "hugeint",	127,	0,	NULL,	NULL,	NULL	]
#PREPARE WITH y(a,b) AS (SELECT 1, ?) SELECT "json"."filter"(JSON '"a"', y.b) FROM ((SELECT 1, 4) EXCEPT (SELECT 1,2)) x(x,y) CROSS JOIN y;
#PREPARE WITH y(a,b) AS (SELECT 1, ?) SELECT "json"."filter"(JSON '"a"', y.b) FROM ((SELECT 1, 4) EXCEPT (SELECT 1,2)) x(x,y) CROSS JOIN y;
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	3,	1,	0,	3,	3 # length
[ "json",	0,	0,	"",	"%10",	"%10"	]
[ "hugeint",	127,	0,	NULL,	NULL,	NULL	]
#START TRANSACTION;
#create or replace function mybooludf(a bool) returns bool return a;
#PREPARE (SELECT ?) EXCEPT (SELECT 'a' FROM (SELECT 1) x(x) JOIN ((SELECT FALSE) EXCEPT (SELECT ?)) y(y) ON sys.mybooludf(y.y));
#PREPARE (SELECT ?) EXCEPT (SELECT 'a' FROM (SELECT 1) x(x) JOIN ((SELECT FALSE) EXCEPT (SELECT ?)) y(y) ON sys.mybooludf(y.y));
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 7,	1,	1,	0,	2,	2 # length
[ "varchar",	1,	0,	"",	"%7",	"%7"	]
[ "varchar",	1,	0,	NULL,	NULL,	NULL	]
[ "boolean",	1,	0,	NULL,	NULL,	NULL	]
#EXEC 17('b',true);
% .%7 # table_name
% %7 # name
% varchar # type
% 1 # length
[ "b"	]
#ROLLBACK;
#START TRANSACTION;
#create table deleteall (i integer, j integer);
#insert into deleteall (select a,a as b from generate_series(cast(1 as integer),10000) as a(a));
[ 9999	]
#set optimizer='sequential_pipe';
#prepare select count(*) from deleteall where j in (2001,2007,2016,2028,2037,2047,2053,2059,2063,2067,2076,2087,2094,2099,2110,2115,2124,2135,2142,2147);
#prepare select count(*) from deleteall where j in (2001,2007,2016,2028,2037,2047,2053,2059,2063,2067,2076,2087,2094,2099,2110,2115,2124,2135,2142,2147);
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	varchar,	varchar,	varchar # type
% 6,	2,	1,	0,	2,	2 # length
[ "bigint",	63,	0,	"",	"%2",	"%2"	]
#EXEC 18();
% .%2 # table_name
% %2 # name
% bigint # type
% 2 # length
[ 20	]
#ROLLBACK;
