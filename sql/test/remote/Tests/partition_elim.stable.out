stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql
# MonetDB/SQL module loaded


# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 195 # length
function user.main():void;
    X_1:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0;":str, "default_pipe":str, 33:int); # select: sorted; select: sorted; select: sorted; select: sorted
barrier X_125:bit := language.dataflow(); # select: sorted; select: sorted; select: sorted; select: sorted
    X_34:bat[:dbl] := bat.new(nil:dbl); # select: sorted; select: sorted; select: sorted; select: sorted
    X_4:int := sql.mvc(); # select: sorted; select: sorted; select: sorted; select: sorted
    X_101:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test2":str, "x":str, 0:int, 0:int, 2:int); # select: sorted; select: sorted; select: sorted; select: sorted
    C_96:bat[:oid] := sql.tid(X_4:int, "sys":str, "test2":str, 0:int, 2:int); # select: sorted; select: sorted; select: sorted; select: sorted
    C_106:bat[:oid] := algebra.select(X_101:bat[:dbl], C_96:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit); # select: sorted; select: sorted; select: sorted; select: sorted
    X_108:bat[:dbl] := algebra.projection(C_106:bat[:oid], X_101:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
    X_102:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test2":str, "x":str, 0:int, 1:int, 2:int); # select: sorted; select: sorted; select: sorted; select: sorted
    C_98:bat[:oid] := sql.tid(X_4:int, "sys":str, "test2":str, 1:int, 2:int); # select: sorted; select: sorted; select: sorted; select: sorted
    C_107:bat[:oid] := algebra.select(X_102:bat[:dbl], C_98:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit); # select: sorted; select: sorted; select: sorted; select: sorted
    X_109:bat[:dbl] := algebra.projection(C_107:bat[:oid], X_102:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
    X_120:bat[:dbl] := mat.packIncrement(X_108:bat[:dbl], 2:int); # select: sorted; select: sorted; select: sorted; select: sorted
    X_22:bat[:dbl] := mat.packIncrement(X_120:bat[:dbl], X_109:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
    X_27:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "x":str, 0:int); # select: sorted; select: sorted; select: sorted; select: sorted
    C_24:bat[:oid] := sql.tid(X_4:int, "sys":str, "test3":str); # select: sorted; select: sorted; select: sorted; select: sorted
    C_31:bat[:oid] := algebra.select(X_27:bat[:dbl], C_24:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit); # select: sorted; select: sorted; select: sorted; select: sorted
    X_28:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "y":str, 0:int); # select: sorted; select: sorted; select: sorted; select: sorted
    X_33:bat[:dbl] := algebra.projection(C_31:bat[:oid], X_28:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
    X_32:bat[:dbl] := algebra.projection(C_31:bat[:oid], X_27:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
    X_104:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test2":str, "y":str, 0:int, 1:int, 2:int); # select: sorted; select: sorted; select: sorted; select: sorted
    X_111:bat[:dbl] := algebra.projection(C_107:bat[:oid], X_104:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
    X_103:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test2":str, "y":str, 0:int, 0:int, 2:int); # select: sorted; select: sorted; select: sorted; select: sorted
    X_110:bat[:dbl] := algebra.projection(C_106:bat[:oid], X_103:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
    X_36:bat[:dbl] := bat.append(X_34:bat[:dbl], X_22:bat[:dbl], true:bit); # select: sorted; select: sorted; select: sorted; select: sorted
    X_37:bat[:dbl] := bat.append(X_36:bat[:dbl], X_32:bat[:dbl], true:bit); # select: sorted; select: sorted; select: sorted; select: sorted
    X_38:bat[:dbl] := bat.new(nil:dbl); # select: sorted; select: sorted; select: sorted; select: sorted
    X_122:bat[:dbl] := mat.packIncrement(X_110:bat[:dbl], 2:int); # select: sorted; select: sorted; select: sorted; select: sorted
    X_23:bat[:dbl] := mat.packIncrement(X_122:bat[:dbl], X_111:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
    X_39:bat[:dbl] := bat.append(X_38:bat[:dbl], X_23:bat[:dbl], true:bit); # select: sorted; select: sorted; select: sorted; select: sorted
    X_40:bat[:dbl] := bat.append(X_39:bat[:dbl], X_33:bat[:dbl], true:bit); # select: sorted; select: sorted; select: sorted; select: sorted
    X_42:bat[:str] := bat.pack(".test":str, ".test":str); # select: sorted; select: sorted; select: sorted; select: sorted
    X_43:bat[:str] := bat.pack("x":str, "y":str); # select: sorted; select: sorted; select: sorted; select: sorted
    X_44:bat[:str] := bat.pack("double":str, "double":str); # select: sorted; select: sorted; select: sorted; select: sorted
    X_45:bat[:int] := bat.pack(53:int, 53:int); # select: sorted; select: sorted; select: sorted; select: sorted
    X_46:bat[:int] := bat.pack(0:int, 0:int); # select: sorted; select: sorted; select: sorted; select: sorted
    language.pass(X_101:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
    language.pass(X_102:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
    language.pass(C_31:bat[:oid]); # select: sorted; select: sorted; select: sorted; select: sorted
    language.pass(X_27:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
    language.pass(C_107:bat[:oid]); # select: sorted; select: sorted; select: sorted; select: sorted
    language.pass(C_106:bat[:oid]); # select: sorted; select: sorted; select: sorted; select: sorted
exit X_125:bit; # select: sorted; select: sorted; select: sorted; select: sorted
    sql.resultSet(X_42:bat[:str], X_43:bat[:str], X_44:bat[:str], X_45:bat[:int], X_46:bat[:int], X_37:bat[:dbl], X_40:bat[:dbl]); # select: sorted; select: sorted; select: sorted; select: sorted
end user.main; # select: sorted; select: sorted; select: sorted; select: sorted
#inline               actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#remap                actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#costmodel            actions= 1 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#coercion             actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#aliases              actions= 4 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#evaluate             actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#emptybind            actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#pushselect           actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#aliases              actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#mitosis              actions=2 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#mergetable           actions= 3 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#deadcode             actions= 3 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#aliases              actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#constants            actions= 5 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#commonTerms          actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#projectionpath       actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#deadcode             actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#reorder              actions= 1 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#matpack              actions= 2 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#dataflow             actions= 1 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#multiplex            actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#profiler             actions= 1 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#candidates           actions= 1 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#deadcode             actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#postfix              actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#wlc                  actions= 0 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#garbagecollector     actions= 1 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#total                actions=29 time=0 usec  # select: sorted; select: sorted; select: sorted; select: sorted
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 130 # length
function user.main():void;
    X_1:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1);":str, "default_pipe":str, 45:int);
barrier X_143:bit := language.dataflow();
    X_47:bat[:dbl] := bat.new(nil:dbl);
    X_4:int := sql.mvc();
    X_119:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test2":str, "x":str, 0:int, 0:int, 2:int);
    C_114:bat[:oid] := sql.tid(X_4:int, "sys":str, "test2":str, 0:int, 2:int);
    C_124:bat[:oid] := algebra.select(X_119:bat[:dbl], C_114:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit);
    X_126:bat[:dbl] := algebra.projection(C_124:bat[:oid], X_119:bat[:dbl]);
    X_120:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test2":str, "x":str, 0:int, 1:int, 2:int);
    C_116:bat[:oid] := sql.tid(X_4:int, "sys":str, "test2":str, 1:int, 2:int);
    C_125:bat[:oid] := algebra.select(X_120:bat[:dbl], C_116:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit);
    X_127:bat[:dbl] := algebra.projection(C_125:bat[:oid], X_120:bat[:dbl]);
    X_138:bat[:dbl] := mat.packIncrement(X_126:bat[:dbl], 2:int);
    X_29:bat[:dbl] := mat.packIncrement(X_138:bat[:dbl], X_127:bat[:dbl]);
    X_34:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "x":str, 0:int);
    C_31:bat[:oid] := sql.tid(X_4:int, "sys":str, "test3":str);
    C_44:bat[:oid] := algebra.select(X_34:bat[:dbl], C_31:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit);
    X_35:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "y":str, 0:int);
    X_46:bat[:dbl] := algebra.projection(C_44:bat[:oid], X_35:bat[:dbl]);
    X_45:bat[:dbl] := algebra.projection(C_44:bat[:oid], X_34:bat[:dbl]);
    X_122:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test2":str, "y":str, 0:int, 1:int, 2:int);
    X_129:bat[:dbl] := algebra.projection(C_125:bat[:oid], X_122:bat[:dbl]);
    X_121:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test2":str, "y":str, 0:int, 0:int, 2:int);
    X_128:bat[:dbl] := algebra.projection(C_124:bat[:oid], X_121:bat[:dbl]);
    X_49:bat[:dbl] := bat.append(X_47:bat[:dbl], X_29:bat[:dbl], true:bit);
    X_50:bat[:dbl] := bat.append(X_49:bat[:dbl], X_45:bat[:dbl], true:bit);
    X_51:bat[:dbl] := bat.new(nil:dbl);
    X_140:bat[:dbl] := mat.packIncrement(X_128:bat[:dbl], 2:int);
    X_30:bat[:dbl] := mat.packIncrement(X_140:bat[:dbl], X_129:bat[:dbl]);
    X_52:bat[:dbl] := bat.append(X_51:bat[:dbl], X_30:bat[:dbl], true:bit);
    X_53:bat[:dbl] := bat.append(X_52:bat[:dbl], X_46:bat[:dbl], true:bit);
    X_55:bat[:str] := bat.pack(".test":str, ".test":str);
    X_56:bat[:str] := bat.pack("x":str, "y":str);
    X_57:bat[:str] := bat.pack("double":str, "double":str);
    X_58:bat[:int] := bat.pack(53:int, 53:int);
    X_59:bat[:int] := bat.pack(0:int, 0:int);
    language.pass(X_119:bat[:dbl]);
    language.pass(X_120:bat[:dbl]);
    language.pass(C_44:bat[:oid]);
    language.pass(X_34:bat[:dbl]);
    language.pass(C_125:bat[:oid]);
    language.pass(C_124:bat[:oid]);
exit X_143:bit;
    sql.resultSet(X_55:bat[:str], X_56:bat[:str], X_57:bat[:str], X_58:bat[:int], X_59:bat[:int], X_50:bat[:dbl], X_53:bat[:dbl]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=2 usec 
#aliases              actions=12 time=10 usec 
#evaluate             actions= 8 time=26 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 6 time=12 usec 
#aliases              actions=12 time=8 usec 
#mitosis              actions=1 time=23 usec 
#mergetable           actions= 3 time=48 usec 
#deadcode             actions= 4 time=12 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 6 time=9 usec 
#commonTerms          actions= 0 time=6 usec 
#projectionpath       actions= 0 time=5 usec 
#deadcode             actions= 0 time=9 usec 
#reorder              actions= 1 time=29 usec 
#matpack              actions= 2 time=5 usec 
#dataflow             actions= 1 time=25 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=10 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=242 usec 
#total                actions=26 time=1621 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 184 # length
function user.main():void;
    X_1:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;":str, "default_pipe":str, 21:int); # select: sorted; select: sorted
barrier X_113:bit := language.dataflow(); # select: sorted; select: sorted
    X_30:bat[:str] := bat.pack("sys.test":str, "sys.test":str); # select: sorted; select: sorted
    X_31:bat[:str] := bat.pack("x":str, "y":str); # select: sorted; select: sorted
    X_32:bat[:str] := bat.pack("double":str, "double":str); # select: sorted; select: sorted
    X_33:bat[:int] := bat.pack(53:int, 53:int); # select: sorted; select: sorted
    X_34:bat[:int] := bat.pack(0:int, 0:int); # select: sorted; select: sorted
    X_4:int := sql.mvc(); # select: sorted; select: sorted
    X_89:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "y":str, 0:int, 0:int, 2:int); # select: sorted; select: sorted
    X_87:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "x":str, 0:int, 0:int, 2:int); # select: sorted; select: sorted
    C_82:bat[:oid] := sql.tid(X_4:int, "sys":str, "test3":str, 0:int, 2:int); # select: sorted; select: sorted
    C_92:bat[:oid] := algebra.select(X_87:bat[:dbl], C_82:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit); # select: sorted; select: sorted
    C_94:bat[:oid] := algebra.select(X_89:bat[:dbl], C_92:bat[:oid], 0:dbl, 2:dbl, true:bit, true:bit, false:bit, true:bit); # select: sorted; select: sorted
    X_96:bat[:dbl] := algebra.projection(C_94:bat[:oid], X_87:bat[:dbl]); # select: sorted; select: sorted
    X_90:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "y":str, 0:int, 1:int, 2:int); # select: sorted; select: sorted
    X_88:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "x":str, 0:int, 1:int, 2:int); # select: sorted; select: sorted
    C_84:bat[:oid] := sql.tid(X_4:int, "sys":str, "test3":str, 1:int, 2:int); # select: sorted; select: sorted
    C_93:bat[:oid] := algebra.select(X_88:bat[:dbl], C_84:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit); # select: sorted; select: sorted
    C_95:bat[:oid] := algebra.select(X_90:bat[:dbl], C_93:bat[:oid], 0:dbl, 2:dbl, true:bit, true:bit, false:bit, true:bit); # select: sorted; select: sorted
    X_97:bat[:dbl] := algebra.projection(C_95:bat[:oid], X_88:bat[:dbl]); # select: sorted; select: sorted
    X_108:bat[:dbl] := mat.packIncrement(X_96:bat[:dbl], 2:int); # select: sorted; select: sorted
    X_27:bat[:dbl] := mat.packIncrement(X_108:bat[:dbl], X_97:bat[:dbl]); # select: sorted; select: sorted
    X_98:bat[:dbl] := algebra.projection(C_94:bat[:oid], X_89:bat[:dbl]); # select: sorted; select: sorted
    X_99:bat[:dbl] := algebra.projection(C_95:bat[:oid], X_90:bat[:dbl]); # select: sorted; select: sorted
    X_110:bat[:dbl] := mat.packIncrement(X_98:bat[:dbl], 2:int); # select: sorted; select: sorted
    X_28:bat[:dbl] := mat.packIncrement(X_110:bat[:dbl], X_99:bat[:dbl]); # select: sorted; select: sorted
    language.pass(X_87:bat[:dbl]); # select: sorted; select: sorted
    language.pass(X_88:bat[:dbl]); # select: sorted; select: sorted
    language.pass(C_94:bat[:oid]); # select: sorted; select: sorted
    language.pass(X_89:bat[:dbl]); # select: sorted; select: sorted
    language.pass(C_95:bat[:oid]); # select: sorted; select: sorted
    language.pass(X_90:bat[:dbl]); # select: sorted; select: sorted
exit X_113:bit; # select: sorted; select: sorted
    sql.resultSet(X_30:bat[:str], X_31:bat[:str], X_32:bat[:str], X_33:bat[:int], X_34:bat[:int], X_27:bat[:dbl], X_28:bat[:dbl]); # select: sorted; select: sorted
end user.main; # select: sorted; select: sorted
#inline               actions= 0 time=0 usec  # select: sorted; select: sorted
#remap                actions= 0 time=0 usec  # select: sorted; select: sorted
#costmodel            actions= 1 time=0 usec  # select: sorted; select: sorted
#coercion             actions= 0 time=0 usec  # select: sorted; select: sorted
#aliases              actions= 4 time=0 usec  # select: sorted; select: sorted
#evaluate             actions= 0 time=0 usec  # select: sorted; select: sorted
#emptybind            actions= 0 time=0 usec  # select: sorted; select: sorted
#pushselect           actions= 0 time=0 usec  # select: sorted; select: sorted
#aliases              actions= 0 time=0 usec  # select: sorted; select: sorted
#mitosis              actions=2 time=0 usec  # select: sorted; select: sorted
#mergetable           actions= 4 time=0 usec  # select: sorted; select: sorted
#deadcode             actions= 2 time=0 usec  # select: sorted; select: sorted
#aliases              actions= 0 time=0 usec  # select: sorted; select: sorted
#constants            actions= 3 time=0 usec  # select: sorted; select: sorted
#commonTerms          actions= 0 time=0 usec  # select: sorted; select: sorted
#projectionpath       actions= 0 time=0 usec  # select: sorted; select: sorted
#deadcode             actions= 0 time=0 usec  # select: sorted; select: sorted
#reorder              actions= 1 time=0 usec  # select: sorted; select: sorted
#matpack              actions= 2 time=0 usec  # select: sorted; select: sorted
#dataflow             actions= 1 time=0 usec  # select: sorted; select: sorted
#multiplex            actions= 0 time=0 usec  # select: sorted; select: sorted
#profiler             actions= 1 time=0 usec  # select: sorted; select: sorted
#candidates           actions= 1 time=0 usec  # select: sorted; select: sorted
#deadcode             actions= 0 time=0 usec  # select: sorted; select: sorted
#postfix              actions= 0 time=0 usec  # select: sorted; select: sorted
#wlc                  actions= 0 time=0 usec  # select: sorted; select: sorted
#garbagecollector     actions= 1 time=0 usec  # select: sorted; select: sorted
#total                actions=29 time=1000 usec  # select: sorted; select: sorted
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 163 # length
function user.main():void;
    X_1:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);":str, "default_pipe":str, 27:int);
barrier X_127:bit := language.dataflow();
    X_38:bat[:str] := bat.pack("sys.test":str, "sys.test":str);
    X_39:bat[:str] := bat.pack("x":str, "y":str);
    X_40:bat[:str] := bat.pack("double":str, "double":str);
    X_41:bat[:int] := bat.pack(53:int, 53:int);
    X_42:bat[:int] := bat.pack(0:int, 0:int);
    X_4:int := sql.mvc();
    X_103:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "y":str, 0:int, 0:int, 2:int);
    X_101:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "x":str, 0:int, 0:int, 2:int);
    C_96:bat[:oid] := sql.tid(X_4:int, "sys":str, "test3":str, 0:int, 2:int);
    C_106:bat[:oid] := algebra.select(X_101:bat[:dbl], C_96:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit);
    C_108:bat[:oid] := algebra.select(X_103:bat[:dbl], C_106:bat[:oid], 0:dbl, 2:dbl, true:bit, true:bit, false:bit, true:bit);
    X_110:bat[:dbl] := algebra.projection(C_108:bat[:oid], X_101:bat[:dbl]);
    X_104:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "y":str, 0:int, 1:int, 2:int);
    X_102:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "x":str, 0:int, 1:int, 2:int);
    C_98:bat[:oid] := sql.tid(X_4:int, "sys":str, "test3":str, 1:int, 2:int);
    C_107:bat[:oid] := algebra.select(X_102:bat[:dbl], C_98:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit);
    C_109:bat[:oid] := algebra.select(X_104:bat[:dbl], C_107:bat[:oid], 0:dbl, 2:dbl, true:bit, true:bit, false:bit, true:bit);
    X_111:bat[:dbl] := algebra.projection(C_109:bat[:oid], X_102:bat[:dbl]);
    X_122:bat[:dbl] := mat.packIncrement(X_110:bat[:dbl], 2:int);
    X_35:bat[:dbl] := mat.packIncrement(X_122:bat[:dbl], X_111:bat[:dbl]);
    X_112:bat[:dbl] := algebra.projection(C_108:bat[:oid], X_103:bat[:dbl]);
    X_113:bat[:dbl] := algebra.projection(C_109:bat[:oid], X_104:bat[:dbl]);
    X_124:bat[:dbl] := mat.packIncrement(X_112:bat[:dbl], 2:int);
    X_36:bat[:dbl] := mat.packIncrement(X_124:bat[:dbl], X_113:bat[:dbl]);
    language.pass(X_101:bat[:dbl]);
    language.pass(X_102:bat[:dbl]);
    language.pass(C_108:bat[:oid]);
    language.pass(X_103:bat[:dbl]);
    language.pass(C_109:bat[:oid]);
    language.pass(X_104:bat[:dbl]);
exit X_127:bit;
    sql.resultSet(X_38:bat[:str], X_39:bat[:str], X_40:bat[:str], X_41:bat[:int], X_42:bat[:int], X_35:bat[:dbl], X_36:bat[:dbl]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions= 8 time=7 usec 
#evaluate             actions= 4 time=17 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 3 time=33 usec 
#aliases              actions=14 time=30 usec 
#mitosis              actions=1 time=76 usec 
#mergetable           actions= 4 time=174 usec 
#deadcode             actions= 5 time=38 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions=10 time=31 usec 
#commonTerms          actions= 0 time=22 usec 
#projectionpath       actions= 0 time=15 usec 
#deadcode             actions= 0 time=26 usec 
#reorder              actions= 1 time=108 usec 
#matpack              actions= 2 time=22 usec 
#dataflow             actions= 1 time=82 usec 
#multiplex            actions= 0 time=7 usec 
#profiler             actions=1 time=5 usec 
#candidates           actions=1 time=3 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=215 usec 
#total                actions=26 time=1344 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 167 # length
function user.main():void;
    X_1:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);":str, "default_pipe":str, 33:int);
barrier X_138:bit := language.dataflow();
    X_45:bat[:str] := bat.pack("sys.test":str, "sys.test":str);
    X_46:bat[:str] := bat.pack("x":str, "y":str);
    X_47:bat[:str] := bat.pack("double":str, "double":str);
    X_48:bat[:int] := bat.pack(53:int, 53:int);
    X_49:bat[:int] := bat.pack(0:int, 0:int);
    X_4:int := sql.mvc();
    X_114:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "y":str, 0:int, 0:int, 2:int);
    X_112:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "x":str, 0:int, 0:int, 2:int);
    C_107:bat[:oid] := sql.tid(X_4:int, "sys":str, "test3":str, 0:int, 2:int);
    C_117:bat[:oid] := algebra.select(X_112:bat[:dbl], C_107:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit);
    C_119:bat[:oid] := algebra.select(X_114:bat[:dbl], C_117:bat[:oid], 0:dbl, 2:dbl, true:bit, true:bit, false:bit, true:bit);
    X_121:bat[:dbl] := algebra.projection(C_119:bat[:oid], X_112:bat[:dbl]);
    X_115:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "y":str, 0:int, 1:int, 2:int);
    X_113:bat[:dbl] := sql.bind(X_4:int, "sys":str, "test3":str, "x":str, 0:int, 1:int, 2:int);
    C_109:bat[:oid] := sql.tid(X_4:int, "sys":str, "test3":str, 1:int, 2:int);
    C_118:bat[:oid] := algebra.select(X_113:bat[:dbl], C_109:bat[:oid], 4:dbl, 6:dbl, true:bit, true:bit, false:bit, true:bit);
    C_120:bat[:oid] := algebra.select(X_115:bat[:dbl], C_118:bat[:oid], 0:dbl, 2:dbl, true:bit, true:bit, false:bit, true:bit);
    X_122:bat[:dbl] := algebra.projection(C_120:bat[:oid], X_113:bat[:dbl]);
    X_133:bat[:dbl] := mat.packIncrement(X_121:bat[:dbl], 2:int);
    X_42:bat[:dbl] := mat.packIncrement(X_133:bat[:dbl], X_122:bat[:dbl]);
    X_123:bat[:dbl] := algebra.projection(C_119:bat[:oid], X_114:bat[:dbl]);
    X_124:bat[:dbl] := algebra.projection(C_120:bat[:oid], X_115:bat[:dbl]);
    X_135:bat[:dbl] := mat.packIncrement(X_123:bat[:dbl], 2:int);
    X_43:bat[:dbl] := mat.packIncrement(X_135:bat[:dbl], X_124:bat[:dbl]);
    language.pass(X_112:bat[:dbl]);
    language.pass(X_113:bat[:dbl]);
    language.pass(C_119:bat[:oid]);
    language.pass(X_114:bat[:dbl]);
    language.pass(C_120:bat[:oid]);
    language.pass(X_115:bat[:dbl]);
exit X_138:bit;
    sql.resultSet(X_45:bat[:str], X_46:bat[:str], X_47:bat[:str], X_48:bat[:int], X_49:bat[:int], X_42:bat[:dbl], X_43:bat[:dbl]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=4 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=2 usec 
#aliases              actions=12 time=9 usec 
#evaluate             actions= 6 time=21 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 3 time=10 usec 
#aliases              actions= 8 time=6 usec 
#mitosis              actions=1 time=22 usec 
#mergetable           actions= 4 time=59 usec 
#deadcode             actions= 5 time=11 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 7 time=8 usec 
#commonTerms          actions= 0 time=6 usec 
#projectionpath       actions= 0 time=3 usec 
#deadcode             actions= 0 time=7 usec 
#reorder              actions= 1 time=18 usec 
#matpack              actions= 2 time=7 usec 
#dataflow             actions= 1 time=18 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=9 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=28 usec 
#total                actions=29 time=348 usec 
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

