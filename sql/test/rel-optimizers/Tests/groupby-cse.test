statement ok
create table foo (c1 int, c2 int, c3 int)

statement ok
INSERT INTO
    foo
VALUES
    (1,1,13),
    (1,2,17),
    (2,1,11),
    (1,1,15)

# bar tables is required for the examples that uses join ops
statement ok
create table bar (c1 int, c2 int, c3 int)

statement ok
INSERT INTO
    bar
VALUES
    (10,1,13),
    (10,2,17),
    (20,2,11),
    (10,3,16)

## GROUPBY <--input-- BASETABLE ########################################

# the same expression should be removed from the GROUPBY op list of
# group expressions (->l)
query T nosort
PLAN
SELECT
    c1,
    c1,
    count(c3)
FROM
    foo
GROUP BY
    c1,
    c1
----
project (
| group by (
| | table("sys"."foo") [ "foo"."c1" NOT NULL ]
| ) [ "foo"."c1" NOT NULL ] [ "foo"."c1" NOT NULL, "sys"."count"() NOT NULL as "%1"."%1" ]
) [ "foo"."c1" NOT NULL UNIQUE, "foo"."c1" NOT NULL UNIQUE, "%1"."%1" NOT NULL ]

query III rowsort
SELECT
    c1,
    c1,
    count(c3)
FROM
    foo
GROUP BY
    c1,
    c1
----
1
1
3
2
2
1

# same as before
query T nosort
PLAN
SELECT
    c1 AS c1_alias1,
    c1 AS c1_alias2,
    count(c3)
FROM
    foo
GROUP BY
    c1_alias1,
    c1_alias2
----
project (
| group by (
| | table("sys"."foo") [ "foo"."c1" NOT NULL ]
| ) [ "foo"."c1" NOT NULL as "c1_alias1" ] [ "c1_alias1" NOT NULL, "c1_alias1" NOT NULL as "c1_alias2", "sys"."count"() NOT NULL as "%1"."%1" ]
) [ "c1_alias1" NOT NULL UNIQUE, "c1_alias2" NOT NULL, "%1"."%1" NOT NULL ]

query III rowsort gb-over-bt
SELECT
    c1 AS c1_alias1,
    c1 AS c1_alias2,
    count(c3)
FROM
    foo
GROUP BY
    c1_alias1,
    c1_alias2
----
1
1
3
2
2
1

## GROUPBY <--input-- TABLE ############################################

statement ok
CREATE FUNCTION tableReturnUDF ()
RETURNS TABLE(a1 int, a2 int, a3 int)
BEGIN
    RETURN SELECT c1, c2, c3 FROM foo;
END

# the same expression should be removed from the GROUPBY op list of
# group expressions (->l) exactly like in the case of basetable
query T nosort
PLAN
SELECT
    a1,
    a1,
    count(a3)
FROM
    tableReturnUDF()
GROUP BY
    a1,
    a1
----
project (
| group by (
| | project (
| | | table("sys"."foo") [ "foo"."c1" NOT NULL, "foo"."c3" NOT NULL ]
| | ) [ "foo"."c1" NOT NULL as "%1"."a1", "foo"."c3" NOT NULL as "%1"."a3" ]
| ) [ "%1"."a1" NOT NULL ] [ "%1"."a1" NOT NULL, "sys"."count" no nil ("%1"."a3" NOT NULL) NOT NULL as "%2"."%2" ]
) [ "%1"."a1" NOT NULL UNIQUE, "%1"."a1" NOT NULL UNIQUE, "%2"."%2" NOT NULL ]

query III rowsort
SELECT
    a1,
    a1,
    count(a3)
FROM
    tableReturnUDF()
GROUP BY
    a1,
    a1
----
1
1
3
2
2
1

## GROUPBY <--input-- PROJECT ##########################################

## in this example the order by groups are aliases of the same column
## coming from the inner projection operator
query T nosort
PLAN
SELECT
    c1_alias1,
    c1_alias2,
    c2,
    count(c1_alias2)
FROM (
    SELECT
        c1 AS c1_alias1,
        c1 AS c1_alias2,
        c2,
        c3
    FROM
        foo
) AS sq
GROUP BY
    c1_alias1,
    c1_alias2,
    c2
----
project (
| group by (
| | project (
| | | table("sys"."foo") [ "foo"."c1" NOT NULL, "foo"."c2" NOT NULL ]
| | ) [ "foo"."c1" NOT NULL as "sq"."c1_alias1", "foo"."c2" NOT NULL as "sq"."c2" ]
| ) [ "sq"."c1_alias1" NOT NULL, "sq"."c2" NOT NULL ] [ "sq"."c1_alias1" NOT NULL, "sq"."c1_alias1" NOT NULL as "sq"."c1_alias2", "sq"."c2" NOT NULL, "sys"."count"() NOT NULL as "%1"."%1" ]
) [ "sq"."c1_alias1" NOT NULL, "sq"."c1_alias2" NOT NULL, "sq"."c2" NOT NULL, "%1"."%1" NOT NULL ]

query III rowsort gb-over-pr
SELECT
    c1_alias_1,
    c1_alias_2,
    count(c1_alias_2)
FROM (
    SELECT
        c1 AS c1_alias_1,
        c1 AS c1_alias_2,
        c2,
        c3
    FROM
        foo
) AS sq
GROUP BY
    c1_alias_1,
    c1_alias_2,
    c2
----
1
1
1
1
1
2
2
2
1

query T nosort
PLAN
SELECT
    c1 AS c1_alias_1,
    c1 AS c1_alias_2,
    count(c3)
FROM (
    SELECT
        c1,
        c2,
        c3
    FROM
        foo
) AS sq
GROUP BY
    c1_alias_1,
    c1_alias_2,
    c2
----
project (
| group by (
| | project (
| | | table("sys"."foo") [ "foo"."c1" NOT NULL, "foo"."c2" NOT NULL ]
| | ) [ "foo"."c1" NOT NULL as "sq"."c1", "foo"."c2" NOT NULL as "sq"."c2" ]
| ) [ "sq"."c1" NOT NULL as "c1_alias_1", "sq"."c2" NOT NULL ] [ "c1_alias_1" NOT NULL, "c1_alias_1" NOT NULL as "c1_alias_2", "sys"."count"() NOT NULL as "%1"."%1" ]
) [ "c1_alias_1" NOT NULL, "c1_alias_2" NOT NULL, "%1"."%1" NOT NULL ]

query III rowsort gb-over-pr
SELECT
    c1 AS c1_alias_1,
    c1 AS c1_alias_2,
    count(c3)
FROM (
    SELECT
        c1,
        c2,
        c3
    FROM
        foo
) AS sq
GROUP BY
    c1_alias_1,
    c1_alias_2,
    c2
----
1
1
1
1
1
2
2
2
1

# in this example both outer project/groupby and the inner (subquery)
# projet use aliases for the column c1.
query T nosort
PLAN
SELECT
    c1_in_alias_1 AS c1_out_alias_1,
    c1_in_alias_2 AS c1_out_alias_2,
    count(c3)
FROM (
    SELECT
        c1 as c1_in_alias_1,
        c1 as c1_in_alias_2,
        c2,
        c3
    FROM
        foo
) AS sq
GROUP BY
    c1_out_alias_1,
    c1_out_alias_2,
    c2
----
project (
| group by (
| | project (
| | | table("sys"."foo") [ "foo"."c1" NOT NULL, "foo"."c2" NOT NULL ]
| | ) [ "foo"."c1" NOT NULL as "sq"."c1_in_alias_1", "foo"."c2" NOT NULL as "sq"."c2" ]
| ) [ "sq"."c1_in_alias_1" NOT NULL as "c1_out_alias_1", "sq"."c2" NOT NULL ] [ "c1_out_alias_1" NOT NULL, "c1_out_alias_1" NOT NULL as "c1_out_alias_2", "sys"."count"() NOT NULL as "%1"."%1" ]
) [ "c1_out_alias_1" NOT NULL, "c1_out_alias_2" NOT NULL, "%1"."%1" NOT NULL ]

query III rowsort gb-over-pr
SELECT
    c1_in_alias_1 AS c1_out_alias_1,
    c1_in_alias_2 AS c1_out_alias_2,
    count(c2)
FROM (
    SELECT
        c1 as c1_in_alias_1,
        c1 as c1_in_alias_2,
        c2,
        c3
    FROM
        foo
) AS sq
GROUP BY
    c1_out_alias_1,
    c1_out_alias_2,
    c2
----
1
1
1
1
1
2
2
2
1

# combinations of outer project/groupby and inner (subquery) projet
# aliases for c1 column

query T nosort
PLAN
SELECT
    c1_in_alias_1 AS c1_out_alias_1,
    c1_in_alias_2,
    count(c3)
FROM (
    SELECT
        c1 as c1_in_alias_1,
        c1 as c1_in_alias_2,
        c2,
        c3
    FROM
        foo
) AS sq
GROUP BY
    c1_out_alias_1,
    c1_in_alias_2,
    c2
----
project (
| group by (
| | project (
| | | table("sys"."foo") [ "foo"."c1" NOT NULL, "foo"."c2" NOT NULL ]
| | ) [ "foo"."c1" NOT NULL as "sq"."c1_in_alias_1", "foo"."c2" NOT NULL as "sq"."c2" ]
| ) [ "sq"."c1_in_alias_1" NOT NULL as "c1_out_alias_1", "sq"."c2" NOT NULL ] [ "c1_out_alias_1" NOT NULL, "c1_out_alias_1" NOT NULL as "sq"."c1_in_alias_2", "sys"."count"() NOT NULL as "%1"."%1" ]
) [ "c1_out_alias_1" NOT NULL, "sq"."c1_in_alias_2" NOT NULL, "%1"."%1" NOT NULL ]

query III rowsort gb-over-pr
SELECT
    c1_in_alias_1 AS c1_out_alias_1,
    c1_in_alias_2,
    count(c3)
FROM (
    SELECT
        c1 as c1_in_alias_1,
        c1 as c1_in_alias_2,
        c2,
        c3
    FROM
        foo
) AS sq
GROUP BY
    c1_out_alias_1,
    c1_in_alias_2,
    c2
----
1
1
1
1
1
2
2
2
1

query T nosort
PLAN
SELECT
    c1_in_alias_1,
    c1_in_alias_2 AS c1_out_alias_2,
    count(c3)
FROM (
    SELECT
        c1 as c1_in_alias_1,
        c1 as c1_in_alias_2,
        c2,
        c3
    FROM
        foo
) AS sq
GROUP BY
    c1_in_alias_1,
    c1_out_alias_2,
    c2
----
project (
| group by (
| | project (
| | | table("sys"."foo") [ "foo"."c1" NOT NULL, "foo"."c2" NOT NULL ]
| | ) [ "foo"."c1" NOT NULL as "sq"."c1_in_alias_1", "foo"."c2" NOT NULL as "sq"."c2" ]
| ) [ "sq"."c1_in_alias_1" NOT NULL, "sq"."c2" NOT NULL ] [ "sq"."c1_in_alias_1" NOT NULL, "sq"."c1_in_alias_1" NOT NULL as "c1_out_alias_2", "sys"."count"() NOT NULL as "%1"."%1" ]
) [ "sq"."c1_in_alias_1" NOT NULL, "c1_out_alias_2" NOT NULL, "%1"."%1" NOT NULL ]

query III rowsort gb-over-pr
SELECT
    c1_in_alias_1,
    c1_in_alias_2 AS c1_out_alias_2,
    count(c3)
FROM (
    SELECT
        c1 as c1_in_alias_1,
        c1 as c1_in_alias_2,
        c2,
        c3
    FROM
        foo
) AS sq
GROUP BY
    c1_in_alias_1,
    c1_out_alias_2,
    c2
----
1
1
1
1
1
2
2
2
1

## GROUPBY <--input-- JOIN ############################################

query T nosort
PLAN
SELECT
    foo.c2 AS col,
    count(*)
FROM
    foo JOIN bar
ON
    foo.c2 = bar.c2
GROUP BY
    foo.c2,
    col
----
project (
| group by (
| | join (
| | | table("sys"."foo") [ "foo"."c2" NOT NULL ],
| | | table("sys"."bar") [ "bar"."c2" NOT NULL ]
| | ) [ ("foo"."c2" NOT NULL) = ("bar"."c2" NOT NULL) ]
| ) [ "foo"."c2" NOT NULL ] [ "foo"."c2" NOT NULL as "col", "sys"."count"() NOT NULL as "%1"."%1" ]
) [ "col" NOT NULL, "%1"."%1" NOT NULL ]

query II rowsort
SELECT
    foo.c2 AS col,
    count(*)
FROM
    foo JOIN bar
ON
    foo.c2 = bar.c2
GROUP BY
    foo.c2,
    col
----
1
3
2
2

## GROUPBY <--input-- TOPN/SAMPLE
# this cannot happen since the TOPN/SAMPLE operators are pushed down to
# the projections

## GROUPBY <--input-- SEMI
# this would not make sense since the alias cannot (probably?) exist in
# the expressions of the semijoin operator. and since the groupby_cse is
# only looking in the lower subrel it will not be triggered

## GROUPBY <--input-- UNION
# TODO: the union operator introduces a distinct in the form of group
# bys which are NOT processed by the groupby-cse optimizer. this must be
# investigated more eg
# select c1 ca, c1 cb from foo union select c1 ca, c1 cb from bar;

## GROUPBY <--input-- MERGE
# not applicable

# crash from clickhouse
query IIIII nosort
SELECT c1 AS x, c1 - 1 AS x1, c1 - 2 AS x2, c1 - 3 AS x3, count(*) AS c FROM foo GROUP BY x, x1, x2, x3 ORDER BY c DESC LIMIT 10
----
1
0
-1
-2
3
2
1
0
-1
1

