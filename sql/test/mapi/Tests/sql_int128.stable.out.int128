stdout of test 'sql_int128` in directory 'sql/test/mapi` itself:


# 07:30:43 >  
# 07:30:43 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34256" "--set" "mapi_usock=/var/tmp/mtest-20272/.s.monetdb.34256" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/int128/prefix/_/var/MonetDB/mTests_sql_test_mapi" "--set" "mal_listing=0"
# 07:30:43 >  

#CREATE TABLE mytest(a HUGEINT, b HUGEINT, c HUGEINT, d HUGEINT, e HUGEINT);
#INSERT INTO mytest VALUES (1234567890987654321, 10000000000, NULL, NULL, NULL);
[ 1	]
#explain UPDATE mytest SET a = 1234567890987654321;
% .explain # table_name
% mal # name
% clob # type
% 118 # length
function user.s6_0():void;
    X_2:void := querylog.define("explain update mytest set a = 1234567890987654321;":str, "default_pipe":str, 41:int);
    X_5:int := sql.mvc();
    C_6:bat[:oid] := sql.tid(X_5:int, "sys":str, "mytest":str);
    X_18:bat[:hge] := sql.bind(X_5:int, "sys":str, "mytest":str, "a":str, 0:int);
    X_48:bat[:hge] := algebra.projection(C_6:bat[:oid], X_18:bat[:hge]);
    X_55:bat[:hge] := algebra.project(X_48:bat[:hge], 1234567890987654321:hge);
    X_57:int := sql.update(X_5:int, "sys":str, "mytest":str, "a":str, C_6:bat[:oid], X_55:bat[:hge]);
    X_60:lng := aggr.count(C_6:bat[:oid]);
    sql.affectedRows(X_57:int, X_60:lng);
end user.s6_0;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions= 1 time=2 usec 
#evaluate             actions= 1 time=8 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=2 usec 
#aliases              actions= 1 time=2 usec 
#mergetable           actions= 0 time=13 usec 
#deadcode             actions= 0 time=3 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=1 usec 
#commonTerms          actions= 0 time=1 usec 
#projectionpath       actions= 0 time=1 usec 
#deadcode             actions= 0 time=2 usec 
#reorder              actions= 1 time=8 usec 
#matpack              actions= 0 time=0 usec 
#dataflow             actions= 0 time=3 usec 
#multiplex            actions= 0 time=0 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=2 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=5 usec 
#total                actions=29 time=116 usec 
#explain SET c = a * b;
% .explain # table_name
% mal # name
% clob # type
% 110 # length
function user.s8_0():void;
    X_2:void := querylog.define("explain update mytest set b = 10000000000;":str, "default_pipe":str, 41:int);
    X_5:int := sql.mvc();
    C_6:bat[:oid] := sql.tid(X_5:int, "sys":str, "mytest":str);
    X_18:bat[:hge] := sql.bind(X_5:int, "sys":str, "mytest":str, "a":str, 0:int);
    X_48:bat[:hge] := algebra.projection(C_6:bat[:oid], X_18:bat[:hge]);
    X_55:bat[:hge] := algebra.project(X_48:bat[:hge], 10000000000:hge);
    X_57:int := sql.update(X_5:int, "sys":str, "mytest":str, "b":str, C_6:bat[:oid], X_55:bat[:hge]);
    X_60:lng := aggr.count(C_6:bat[:oid]);
    sql.affectedRows(X_57:int, X_60:lng);
end user.s8_0;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=0 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions= 0 time=0 usec 
#evaluate             actions= 0 time=3 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=2 usec 
#aliases              actions= 0 time=0 usec 
#mergetable           actions= 0 time=18 usec 
#deadcode             actions= 0 time=3 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=1 usec 
#commonTerms          actions= 0 time=1 usec 
#projectionpath       actions= 0 time=1 usec 
#deadcode             actions= 0 time=3 usec 
#reorder              actions= 1 time=10 usec 
#matpack              actions= 0 time=0 usec 
#dataflow             actions= 0 time=4 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=3 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=8 usec 
#total                actions=29 time=141 usec 
#explain SET d = c * b;
% .explain # table_name
% mal # name
% clob # type
% 104 # length
function user.s10_0():void;
    X_1:void := querylog.define("explain update mytest set c = a * b;":str, "default_pipe":str, 39:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "mytest":str);
    X_17:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "a":str, 0:int);
    X_47:bat[:hge] := algebra.projection(C_5:bat[:oid], X_17:bat[:hge]);
    X_22:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "b":str, 0:int);
    X_48:bat[:hge] := algebra.projection(C_5:bat[:oid], X_22:bat[:hge]);
    X_52:bat[:hge] := batcalc.*(X_47:bat[:hge], X_48:bat[:hge], nil:BAT, nil:BAT);
    X_56:int := sql.update(X_4:int, "sys":str, "mytest":str, "c":str, C_5:bat[:oid], X_52:bat[:hge]);
    X_58:lng := aggr.count(C_5:bat[:oid]);
    sql.affectedRows(X_56:int, X_58:lng);
end user.s10_0;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=0 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions= 0 time=0 usec 
#evaluate             actions= 0 time=2 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=2 usec 
#aliases              actions= 0 time=0 usec 
#mergetable           actions= 0 time=16 usec 
#deadcode             actions= 0 time=4 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=1 usec 
#commonTerms          actions= 0 time=1 usec 
#projectionpath       actions= 0 time=1 usec 
#deadcode             actions= 0 time=2 usec 
#reorder              actions= 1 time=9 usec 
#matpack              actions= 0 time=0 usec 
#dataflow             actions= 0 time=3 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=0 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=3 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=9 usec 
#total                actions=29 time=114 usec 
#explain SET e = d + a;
% .explain # table_name
% mal # name
% clob # type
% 104 # length
function user.s12_0():void;
    X_1:void := querylog.define("explain update mytest set d = c * b;":str, "default_pipe":str, 39:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "mytest":str);
    X_28:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "c":str, 0:int);
    X_49:bat[:hge] := algebra.projection(C_5:bat[:oid], X_28:bat[:hge]);
    X_22:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "b":str, 0:int);
    X_48:bat[:hge] := algebra.projection(C_5:bat[:oid], X_22:bat[:hge]);
    X_52:bat[:hge] := batcalc.*(X_49:bat[:hge], X_48:bat[:hge], nil:BAT, nil:BAT);
    X_56:int := sql.update(X_4:int, "sys":str, "mytest":str, "d":str, C_5:bat[:oid], X_52:bat[:hge]);
    X_58:lng := aggr.count(C_5:bat[:oid]);
    sql.affectedRows(X_56:int, X_58:lng);
end user.s12_0;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=0 usec 
#costmodel            actions= 1 time=0 usec 
#coercion             actions= 0 time=0 usec 
#aliases              actions= 0 time=0 usec 
#evaluate             actions= 0 time=2 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=2 usec 
#aliases              actions= 0 time=1 usec 
#mergetable           actions= 0 time=16 usec 
#deadcode             actions= 0 time=3 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=1 usec 
#commonTerms          actions= 0 time=2 usec 
#projectionpath       actions= 0 time=1 usec 
#deadcode             actions= 0 time=2 usec 
#reorder              actions= 1 time=9 usec 
#matpack              actions= 0 time=1 usec 
#dataflow             actions= 0 time=3 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=17 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=5 usec 
#postfix              actions= 0 time=4 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=50 usec 
#total                actions=27 time=445 usec 
#explain UPDATE mytest SET e = d + a;
% .explain # table_name
% mal # name
% clob # type
% 104 # length
function user.s14_0():void;
    X_1:void := querylog.define("explain update mytest set e = d + a;":str, "default_pipe":str, 39:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "mytest":str);
    X_34:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "d":str, 0:int);
    X_50:bat[:hge] := algebra.projection(C_5:bat[:oid], X_34:bat[:hge]);
    X_17:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "a":str, 0:int);
    X_47:bat[:hge] := algebra.projection(C_5:bat[:oid], X_17:bat[:hge]);
    X_52:bat[:hge] := batcalc.+(X_50:bat[:hge], X_47:bat[:hge], nil:BAT, nil:BAT);
    X_56:int := sql.update(X_4:int, "sys":str, "mytest":str, "e":str, C_5:bat[:oid], X_52:bat[:hge]);
    X_58:lng := aggr.count(C_5:bat[:oid]);
    sql.affectedRows(X_56:int, X_58:lng);
end user.s14_0;
# optimizer.mitosis()
# optimizer.dataflow()
#inline               actions= 0 time=1 usec 
#remap                actions= 1 time=121 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=2 usec 
#aliases              actions= 0 time=1 usec 
#evaluate             actions= 0 time=5 usec 
#emptybind            actions= 3 time=25 usec 
#pushselect           actions= 0 time=27 usec 
#aliases              actions= 3 time=6 usec 
#mergetable           actions= 0 time=185 usec 
#deadcode             actions= 8 time=8 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 1 time=4 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=2 usec 
#deadcode             actions= 0 time=5 usec 
#reorder              actions= 1 time=13 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=5 usec 
#postfix              actions= 0 time=3 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=49 usec 
#total                actions=27 time=541 usec 
#UPDATE mytest SET a = 1234567890987654321;
[ 1	]
#UPDATE mytest SET b = 10000000000;
[ 1	]
#UPDATE mytest SET c = a * b;
[ 1	]
#UPDATE mytest SET d = c * b;
[ 1	]
#UPDATE mytest SET e = d + a;
[ 1	]
#SELECT a, b, c, d, e from mytest;
% sys.mytest,	sys.mytest,	sys.mytest,	sys.mytest,	sys.mytest # table_name
% a,	b,	c,	d,	e # name
% hugeint,	hugeint,	hugeint,	hugeint,	hugeint # type
% 19,	11,	29,	39,	39 # length
[ 1234567890987654321,	10000000000,	12345678909876543210000000000,	123456789098765432100000000000000000000,	123456789098765432101234567890987654321	]
#SELECT 123456789098765432101234567890987654321;
% .%2 # table_name
% %2 # name
% hugeint # type
% 39 # length
[ 123456789098765432101234567890987654321	]
#CREATE TABLE sql_int128 (i HUGEINT);
#explain INSERT INTO sql_int128 VALUES (123456789098765432101234567890987654321);
% .explain # table_name
% mal # name
% clob # type
% 147 # length
function user.s24_0():void;
    X_2:void := querylog.define("explain insert into sql_int128 values (123456789098765432101234567890987654321);":str, "default_pipe":str, 8:int);
    X_5:int := sql.mvc();
    X_8:int := sql.append(X_5:int, "sys":str, "sql_int128":str, "i":str, 123456789098765432101234567890987654321:hge);
    sql.affectedRows(X_8:int, 1:lng);
end user.s24_0;
# optimizer.mitosis()
# optimizer.dataflow()
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=14 usec 
#remap                actions= 0 time=5 usec 
#costModel            actions= 1 time=11 usec 
#coercions            actions= 1 time=12 usec 
#evaluate             actions= 1 time=27 usec 
#emptybind            actions= 0 time=6 usec 
#pushselect           actions= 0 time=4 usec 
#aliases              actions= 1 time=15 usec 
#mergetable           actions= 0 time=24 usec 
#deadcode             actions= 0 time=7 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 1 time=13 usec 
#commonTerms          actions= 0 time=6 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=6 usec 
#reorder              actions= 1 time=26 usec 
#reduce               actions=23 time=29 usec 
#matpack              actions= 0 time=6 usec 
#querylog             actions= 0 time=2 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=7 usec 
#garbageCollector     actions= 1 time=14 usec 
#total                actions= 1 time=344 usec 
#INSERT INTO sql_int128 VALUES (123456789098765432101234567890987654321);
[ 1	]
#SELECT * FROM sql_int128;
% sys.sql_int128 # table_name
% i # name
% hugeint # type
% 39 # length
[ 123456789098765432101234567890987654321	]

# 07:30:43 >  
# 07:30:43 >  "Done."
# 07:30:43 >  

