stdout of test 'sql_int128` in directory 'sql/test/mapi` itself:


# 15:17:28 >  
# 15:17:28 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-4496" "--port=35120"
# 15:17:28 >  

#CREATE TABLE mytest(a HUGEINT, b HUGEINT, c HUGEINT, d HUGEINT, e HUGEINT);
#INSERT INTO mytest VALUES (1234567890987654321, 10000000000, NULL, NULL, NULL);
[ 1	]
#explain UPDATE mytest SET a = 1234567890987654321;
% .explain # table_name
% mal # name
% clob # type
% 120 # length
function user.main():void;
    X_1:void := querylog.define("explain update mytest set a = 1234567890987654321;":str, "sequential_pipe":str, 9:int);
    X_4:int := sql.mvc();
    (X_105:int, X_104:ptr) := sql.update_prep(X_4:int, "sys":str, "mytest":str, "a":str);
barrier X_118:bit := language.dataflow();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "mytest":str);
    X_10:bat[:hge] := algebra.project(C_5:bat[:oid], 1234567890987654321:hge);
    X_12:int := sql.update(X_4:int, "sys":str, "mytest":str, "a":str, C_5:bat[:oid], X_10:bat[:hge]);
    X_14:lng := aggr.count(C_5:bat[:oid]);
    sql.affectedRows(X_12:int, X_14:lng);
end user.main;
# optimizer.mitosis()
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=2 usec 
#aliases              actions= 1 time=7 usec 
#evaluate             actions= 0 time=7 usec 
#emptybind            actions= 6 time=12 usec 
#pushselect           actions= 0 time=12 usec 
#aliases              actions= 6 time=7 usec 
#mergetable           actions= 0 time=33 usec 
#parappend            actions= 1 time=18 usec 
#deadcode             actions=22 time=11 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 2 time=6 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=3 usec 
#deadcode             actions= 0 time=5 usec 
#reorder              actions= 1 time=15 usec 
#matpack              actions= 0 time=0 usec 
#dataflow             actions= 1 time=13 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=5 usec 
#postfix              actions= 0 time=4 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=22 usec 
#total                actions=30 time=266 usec 
#explain UPDATE mytest SET b = 10000000000;
% .explain # table_name
% mal # name
% clob # type
% 112 # length
function user.main():void;
    X_1:void := querylog.define("explain update mytest set b = 10000000000;":str, "sequential_pipe":str, 9:int);
    X_4:int := sql.mvc();
    (X_105:int, X_104:ptr) := sql.update_prep(X_4:int, "sys":str, "mytest":str, "b":str);
barrier X_118:bit := language.dataflow();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "mytest":str);
    X_10:bat[:hge] := algebra.project(C_5:bat[:oid], 10000000000:hge);
    X_12:int := sql.update(X_4:int, "sys":str, "mytest":str, "b":str, C_5:bat[:oid], X_10:bat[:hge]);
    X_14:lng := aggr.count(C_5:bat[:oid]);
    sql.affectedRows(X_12:int, X_14:lng);
end user.main;
# optimizer.mitosis()
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=2 usec 
#aliases              actions= 1 time=7 usec 
#evaluate             actions= 0 time=7 usec 
#emptybind            actions= 6 time=11 usec 
#pushselect           actions= 0 time=11 usec 
#aliases              actions= 6 time=6 usec 
#mergetable           actions= 0 time=33 usec 
#parappend            actions= 1 time=16 usec 
#deadcode             actions=22 time=11 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 2 time=4 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=3 usec 
#deadcode             actions= 0 time=5 usec 
#reorder              actions= 1 time=16 usec 
#matpack              actions= 0 time=1 usec 
#dataflow             actions= 1 time=12 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=5 usec 
#postfix              actions= 0 time=4 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=21 usec 
#total                actions=30 time=261 usec 
#explain UPDATE mytest SET c = a * b;
% .explain # table_name
% mal # name
% clob # type
% 107 # length
function user.main():void;
    X_1:void := querylog.define("explain update mytest set c = a * b;":str, "sequential_pipe":str, 19:int);
    X_4:int := sql.mvc();
    (X_106:int, X_105:ptr) := sql.update_prep(X_4:int, "sys":str, "mytest":str, "c":str);
barrier X_119:bit := language.dataflow();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "mytest":str);
    X_8:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "a":str, 0:int);
    X_24:bat[:hge] := algebra.projection(C_5:bat[:oid], X_8:bat[:hge]);
    X_17:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "b":str, 0:int);
    X_25:bat[:hge] := algebra.projection(C_5:bat[:oid], X_17:bat[:hge]);
    X_26:bat[:hge] := batcalc.*(X_24:bat[:hge], X_25:bat[:hge], nil:BAT, nil:BAT);
    X_30:int := sql.update(X_4:int, "sys":str, "mytest":str, "c":str, C_5:bat[:oid], X_26:bat[:hge]);
    X_32:lng := aggr.count(C_5:bat[:oid]);
    sql.affectedRows(X_30:int, X_32:lng);
end user.main;
# optimizer.mitosis()
#inline               actions= 0 time=1 usec 
#remap                actions= 1 time=58 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=3 usec 
#aliases              actions= 0 time=1 usec 
#evaluate             actions= 0 time=7 usec 
#emptybind            actions= 6 time=11 usec 
#pushselect           actions= 0 time=12 usec 
#aliases              actions= 6 time=8 usec 
#mergetable           actions= 0 time=54 usec 
#parappend            actions= 1 time=17 usec 
#deadcode             actions=20 time=11 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 2 time=5 usec 
#commonTerms          actions= 0 time=5 usec 
#projectionpath       actions= 0 time=3 usec 
#deadcode             actions= 0 time=5 usec 
#reorder              actions= 1 time=17 usec 
#matpack              actions= 0 time=0 usec 
#dataflow             actions= 1 time=13 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=0 usec 
#deadcode             actions= 0 time=6 usec 
#postfix              actions= 0 time=5 usec 
#wlc                  actions= 0 time=1 usec 
#garbagecollector     actions= 1 time=38 usec 
#total                actions=30 time=357 usec 
#explain UPDATE mytest SET d = c * b;
% .explain # table_name
% mal # name
% clob # type
% 107 # length
function user.main():void;
    X_1:void := querylog.define("explain update mytest set d = c * b;":str, "sequential_pipe":str, 19:int);
    X_4:int := sql.mvc();
    (X_106:int, X_105:ptr) := sql.update_prep(X_4:int, "sys":str, "mytest":str, "d":str);
barrier X_119:bit := language.dataflow();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "mytest":str);
    X_17:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "c":str, 0:int);
    X_25:bat[:hge] := algebra.projection(C_5:bat[:oid], X_17:bat[:hge]);
    X_8:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "b":str, 0:int);
    X_24:bat[:hge] := algebra.projection(C_5:bat[:oid], X_8:bat[:hge]);
    X_26:bat[:hge] := batcalc.*(X_25:bat[:hge], X_24:bat[:hge], nil:BAT, nil:BAT);
    X_30:int := sql.update(X_4:int, "sys":str, "mytest":str, "d":str, C_5:bat[:oid], X_26:bat[:hge]);
    X_32:lng := aggr.count(C_5:bat[:oid]);
    sql.affectedRows(X_30:int, X_32:lng);
end user.main;
# optimizer.mitosis()
#inline               actions= 0 time=2 usec 
#remap                actions= 1 time=27 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=3 usec 
#aliases              actions= 0 time=0 usec 
#evaluate             actions= 0 time=10 usec 
#emptybind            actions= 6 time=16 usec 
#pushselect           actions= 0 time=15 usec 
#aliases              actions= 6 time=10 usec 
#mergetable           actions= 0 time=67 usec 
#parappend            actions= 1 time=25 usec 
#deadcode             actions=20 time=16 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 2 time=7 usec 
#commonTerms          actions= 0 time=6 usec 
#projectionpath       actions= 0 time=3 usec 
#deadcode             actions= 0 time=8 usec 
#reorder              actions= 1 time=24 usec 
#matpack              actions= 0 time=1 usec 
#dataflow             actions= 1 time=19 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=8 usec 
#postfix              actions= 0 time=7 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=80 usec 
#total                actions=30 time=452 usec 
#explain UPDATE mytest SET e = d + a;
% .explain # table_name
% mal # name
% clob # type
% 107 # length
function user.main():void;
    X_1:void := querylog.define("explain update mytest set e = d + a;":str, "sequential_pipe":str, 19:int);
    X_4:int := sql.mvc();
    (X_106:int, X_105:ptr) := sql.update_prep(X_4:int, "sys":str, "mytest":str, "e":str);
barrier X_119:bit := language.dataflow();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "mytest":str);
    X_17:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "d":str, 0:int);
    X_25:bat[:hge] := algebra.projection(C_5:bat[:oid], X_17:bat[:hge]);
    X_8:bat[:hge] := sql.bind(X_4:int, "sys":str, "mytest":str, "a":str, 0:int);
    X_24:bat[:hge] := algebra.projection(C_5:bat[:oid], X_8:bat[:hge]);
    X_26:bat[:hge] := batcalc.+(X_25:bat[:hge], X_24:bat[:hge], nil:BAT, nil:BAT);
    X_30:int := sql.update(X_4:int, "sys":str, "mytest":str, "e":str, C_5:bat[:oid], X_26:bat[:hge]);
    X_32:lng := aggr.count(C_5:bat[:oid]);
    sql.affectedRows(X_30:int, X_32:lng);
end user.main;
# optimizer.mitosis()
#inline               actions= 0 time=2 usec 
#remap                actions= 1 time=32 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=3 usec 
#aliases              actions= 0 time=1 usec 
#evaluate             actions= 0 time=10 usec 
#emptybind            actions= 6 time=18 usec 
#pushselect           actions= 0 time=16 usec 
#aliases              actions= 6 time=10 usec 
#mergetable           actions= 0 time=69 usec 
#parappend            actions= 1 time=25 usec 
#deadcode             actions=20 time=16 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 2 time=7 usec 
#commonTerms          actions= 0 time=6 usec 
#projectionpath       actions= 0 time=3 usec 
#deadcode             actions= 0 time=8 usec 
#reorder              actions= 1 time=22 usec 
#matpack              actions= 0 time=1 usec 
#dataflow             actions= 1 time=18 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=8 usec 
#postfix              actions= 0 time=8 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=44 usec 
#total                actions=30 time=453 usec 
#UPDATE mytest SET a = 1234567890987654321;
[ 1	]
#UPDATE mytest SET b = 10000000000;
[ 1	]
#UPDATE mytest SET c = a * b;
[ 1	]
#UPDATE mytest SET d = c * b;
[ 1	]
#UPDATE mytest SET e = d + a;
[ 1	]
#SELECT a, b, c, d, e from mytest;
% sys.mytest,	sys.mytest,	sys.mytest,	sys.mytest,	sys.mytest # table_name
% a,	b,	c,	d,	e # name
% hugeint,	hugeint,	hugeint,	hugeint,	hugeint # type
% 19,	11,	29,	39,	39 # length
[ 1234567890987654321,	10000000000,	12345678909876543210000000000,	123456789098765432100000000000000000000,	123456789098765432101234567890987654321	]
#DROP TABLE mytest;
#SELECT 123456789098765432101234567890987654321;
% .%2 # table_name
% %2 # name
% hugeint # type
% 39 # length
[ 123456789098765432101234567890987654321	]
#START TRANSACTION;
#CREATE TABLE sql_int128 (i HUGEINT);
#explain INSERT INTO sql_int128 VALUES (123456789098765432101234567890987654321);
% .explain # table_name
% mal # name
% clob # type
% 150 # length
function user.main():void;
    X_1:void := querylog.define("explain insert into sql_int128 values (123456789098765432101234567890987654321);":str, "sequential_pipe":str, 7:int);
    X_4:int := sql.mvc();
    (X_59:int, X_58:ptr) := sql.append_prep(X_4:int, "sys":str, "sql_int128":str, "i":str);
    X_61:ptr := sql.append_exec(X_58:ptr, 123456789098765432101234567890987654321:hge);
    X_8:int := sql.append_finish(X_59:int, X_61:ptr);
    sql.affectedRows(X_8:int, 1:lng);
end user.main;
# optimizer.mitosis()
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions= 2 time=4 usec 
#evaluate             actions= 0 time=5 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=9 usec 
#aliases              actions= 0 time=1 usec 
#mergetable           actions= 0 time=18 usec 
#parappend            actions= 1 time=11 usec 
#deadcode             actions= 0 time=5 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=1 usec 
#commonTerms          actions= 0 time=2 usec 
#projectionpath       actions= 0 time=2 usec 
#deadcode             actions= 0 time=5 usec 
#reorder              actions= 1 time=13 usec 
#matpack              actions= 0 time=0 usec 
#dataflow             actions= 0 time=5 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=0 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=4 usec 
#postfix              actions= 0 time=3 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=11 usec 
#total                actions=30 time=157 usec 
#INSERT INTO sql_int128 VALUES (123456789098765432101234567890987654321);
[ 1	]
#SELECT * FROM sql_int128;
% sys.sql_int128 # table_name
% i # name
% hugeint # type
% 39 # length
[ 123456789098765432101234567890987654321	]
#ROLLBACK;

# 15:17:28 >  
# 15:17:28 >  "Done."
# 15:17:28 >  

