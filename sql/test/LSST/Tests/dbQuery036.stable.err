stderr of test 'dbQuery036` in directory 'sql/test/LSST` itself:


# 05:57:34 >  
# 05:57:34 >   mserver5 "--config=/ufs/mk/current//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/current//Linux/lib/MonetDB5:/ufs/mk/current//Linux/lib/MonetDB5/lib:/ufs/mk/current//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/current//Linux/var/MonetDB5/dbfarm"  --set mapi_open=true --set xrpc_open=true --set mapi_port=39691 --set xrpc_port=47569 --set monet_prompt= --trace --forcemito --set mal_listing=2  "--dbname=mTests_src_test_LSST" --set mal_listing=0 ; echo ; echo Over..
# 05:57:34 >  

# builtin opt 	gdk_arch = 64bitx86_64-unknown-linux-gnu
# builtin opt 	gdk_version = 1.41.0
# builtin opt 	prefix = /ufs/mk/current//Linux
# builtin opt 	exec_prefix = ${prefix}
# builtin opt 	gdk_dbname = demo
# builtin opt 	gdk_dbfarm = ${prefix}/var/MonetDB/dbfarm
# builtin opt 	gdk_debug = 0
# builtin opt 	gdk_alloc_map = no
# builtin opt 	gdk_vmtrim = yes
# builtin opt 	monet_admin = adm
# builtin opt 	monet_prompt = >
# builtin opt 	monet_welcome = yes
# builtin opt 	monet_mod_path = ${exec_prefix}/lib/MonetDB
# builtin opt 	monet_daemon = no
# builtin opt 	host = localhost
# builtin opt 	mapi_port = 50000
# builtin opt 	mapi_clients = 2
# builtin opt 	mapi_open = false
# builtin opt 	mapi_autosense = false
# builtin opt 	default_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,mitosis,mergetable,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,dataflow,history,multiplex,garbageCollector
# builtin opt 	minimal_pipe = inline,remap,deadcode,multiplex,garbageCollector
# builtin opt 	sql_optimizer = default_pipe
# builtin opt 	sql_debug = 0
# builtin opt 	standoff_ns = 
# builtin opt 	standoff_start = start
# builtin opt 	standoff_end = end
# config opt 	prefix = /ufs/mk/current//Linux
# config opt 	config = ${prefix}/etc/monetdb5.conf
# config opt 	prefix = /ufs/mk/current//Linux
# config opt 	exec_prefix = ${prefix}
# config opt 	gdk_dbfarm = ${prefix}/var/MonetDB5/dbfarm
# config opt 	monet_mod_path = ${exec_prefix}/lib/MonetDB5:${exec_prefix}/lib/MonetDB5/lib:${exec_prefix}/lib/MonetDB5/bin
# config opt 	mero_pidfile = ${prefix}/var/run/MonetDB/merovingian.pid
# config opt 	mero_controlport = 50001
# config opt 	no_mitosis_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,dataflow,history,multiplex,garbageCollector
# config opt 	sequential_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,history,multiplex,garbageCollector
# config opt 	nov2009_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,reduce,dataflow,history,multiplex,garbageCollector
# config opt 	replication_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,reduce,dataflow,history,replication,multiplex,garbageCollector
# config opt 	accumulator_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,reduce,accumulators,dataflow,history,multiplex,garbageCollector
# config opt 	recycler_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,deadcode,constants,commonTerms,joinPath,deadcode,recycle,reduce,dataflow,history,multiplex,garbageCollector
# config opt 	cracker_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,selcrack,deadcode,constants,commonTerms,joinPath,deadcode,reduce,dataflow,history,multiplex,garbageCollector
# config opt 	sidcrack_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,sidcrack,deadcode,constants,commonTerms,joinPath,deadcode,reduce,dataflow,history,multiplex,garbageCollector
# config opt 	octopus_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,mitosis,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,octopus,reduce,dataflow,history,multiplex,garbageCollector
# config opt 	mapreduce_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,mapreduce,mergetable,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,dataflow,history,multiplex,garbageCollector
# config opt 	datacyclotron_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,datacyclotron,mergetable,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,dataflow,history,replication,multiplex,garbageCollector
# config opt 	derive_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,mitosis,mergetable,deadcode,commonTerms,derivePath,joinPath,reorder,deadcode,reduce,dataflow,history,multiplex,garbageCollector
# config opt 	dictionary_pipe = inline,remap,dictionary,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,reduce,dataflow,history,multiplex,garbageCollector
# config opt 	compression_pipe = inline,remap,evaluate,costModel,coercions,emptySet,aliases,mergetable,deadcode,constants,commonTerms,joinPath,deadcode,reduce,dataflow,compression,dataflow,history,multiplex,garbageCollector
# cmdline opt 	config = /ufs/mk/current//Linux/etc/monetdb5.conf
# cmdline opt 	gdk_nr_threads = 0
# cmdline opt 	monet_mod_path = /ufs/mk/current//Linux/lib/MonetDB5:/ufs/mk/current//Linux/lib/MonetDB5/lib:/ufs/mk/current//Linux/lib/MonetDB5/bin
# cmdline opt 	gdk_dbfarm = /ufs/mk/current//Linux/var/MonetDB5/dbfarm
# cmdline opt 	mapi_open = true
# cmdline opt 	xrpc_open = true
# cmdline opt 	mapi_port = 39691
# cmdline opt 	xrpc_port = 47569
# cmdline opt 	monet_prompt = 
# cmdline opt 	mal_listing = 2
# cmdline opt 	gdk_dbname = mTests_src_test_LSST
# cmdline opt 	mal_listing = 0
#warning: please don't forget to set your vault key!
#(see /ufs/mk/current//Linux/etc/monetdb5.conf)

# 05:57:35 >  
# 05:57:35 >  mclient -lsql -ftest -i -e --host=eir --port=39691 
# 05:57:35 >  

MAPI  = (monetdb) /var/tmp/mtest-23209/.s.monetdb.33225
QUERY = SELECT  ROUND(uMag-gMag,0) AS UG, 
                ROUND(gMag-rMag,0) AS GR, 
                ROUND(rMag-iMag,0) AS RI, 
                ROUND(iMag-zMag,0) AS IZ,
                ROUND(zMag-yMag,0) AS ZY,
                COUNT(*) AS pop
        FROM    MovingObject, DiaSource
        WHERE   DiaSource.extendedness < 0.2  -- is a star
          AND DiaSource.diaSourceId = MovingObject.movingObjectId
          AND   (uMag+gMag+rMag+iMag+zMag+yMag) < 150 -- exclude bogus magnitudes (== 999) 
        GROUP BY UG, GR, RI, IZ, ZY
        HAVING pop > 500    -- Common bucktes have 500 or more members, so delete them
ERROR = !SELECT: identifier 'pop' unknown
CODE  = 42000

# 05:57:35 >  
# 05:57:35 >  Done.
# 05:57:35 >  

