stdout of test 'explain_gives_crash.SF-2741829` in directory 'sql/test/BugTracker-2009` itself:


# 13:17:22 >  
# 13:17:22 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=32129" "--set" "mapi_usock=/var/tmp/mtest-23841/.s.monetdb.32129" "--set" "monet_prompt=" "--forcemito" "--dbpath=/export/scratch1/mk/jit//Linux/var/MonetDB/mTests_sql_test_BugTracker-2009"
# 13:17:22 >  

# MonetDB 5 server v11.24.0
# This is an unreleased version
# Serving database 'mTests_sql_test_BugTracker-2009', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:32129/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-23841/.s.monetdb.32129
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 13:17:23 >  
# 13:17:23 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-23841" "--port=32129"
# 13:17:23 >  

#set optimizer='sequential_pipe';
#create table blabla(id integer);
#select '~BeginProfilingOutput~';
% . # table_name
% single_value # name
% char # type
% 22 # length
[ "~BeginProfilingOutput~"	]
#explain alter table blabla add constraint dada unique (id);
% .explain # table_name
% mal # name
% clob # type
% 130 # length
function user.s8_0():void;
    X_1:void := querylog.define("explain alter table blabla add constraint dada unique (id);":str, "sequential_pipe":str, 40:int);
    sqlcatalog.alter_table("sys":str, "blabla":str, 0x7f72801d2510:ptr, 0:int);
    X_46:bat[:int] := bat.new(nil:int);
    (X_47:bat[:oid], C_48:bat[:oid], X_49:bat[:lng]) := group.groupdone(X_46:bat[:int]);
    X_50:lng := aggr.sum(X_49:bat[:lng]);
    X_54:lng := aggr.count(X_49:bat[:lng]);
    X_52:bit := calc.isnil(X_50:lng);
    X_53:lng := calc.ifthenelse(X_52:bit, 0:lng, X_50:lng);
    X_55:bit := calc.!=(X_54:lng, X_53:lng);
    sql.assert(X_55:bit, "40002!UPDATE: UNIQUE constraint 'blabla.dada' violated":str);
    sql.exportOperation();
end user.s8_0;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 7 time=8 usec 
#evaluate             actions= 0 time=3 usec 
#emptybind            actions= 5 time=23 usec 
#aliases              actions= 1 time=6 usec 
#mergetable           actions= 0 time=34 usec 
#deadcode             actions= 5 time=8 usec 
#aliases              actions= 0 time=3 usec 
#constants            actions= 3 time=4 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=4 usec 
#reorder              actions= 1 time=16 usec 
#deadcode             actions= 0 time=4 usec 
#reduce               actions=38 time=20 usec 
#matpack              actions= 0 time=3 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=0 usec 
#candidates           actions= 1 time=0 usec 
#garbagecollector     actions= 1 time=9 usec 
#explain alter table blabla add constraint dada unique (id);
% .explain # table_name
% mal # name
% clob # type
% 130 # length
function user.s10_0():void;
    X_1:void := querylog.define("explain alter table blabla add constraint dada unique (id);":str, "sequential_pipe":str, 40:int);
    sqlcatalog.alter_table("sys":str, "blabla":str, 0x7f72801a19f0:ptr, 0:int);
    X_46:bat[:int] := bat.new(nil:int);
    (X_47:bat[:oid], C_48:bat[:oid], X_49:bat[:lng]) := group.groupdone(X_46:bat[:int]);
    X_50:lng := aggr.sum(X_49:bat[:lng]);
    X_54:lng := aggr.count(X_49:bat[:lng]);
    X_52:bit := calc.isnil(X_50:lng);
    X_53:lng := calc.ifthenelse(X_52:bit, 0:lng, X_50:lng);
    X_55:bit := calc.!=(X_54:lng, X_53:lng);
    sql.assert(X_55:bit, "40002!UPDATE: UNIQUE constraint 'blabla.dada' violated":str);
    sql.exportOperation();
end user.s10_0;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 7 time=7 usec 
#evaluate             actions= 0 time=3 usec 
#emptybind            actions= 5 time=14 usec 
#aliases              actions= 1 time=6 usec 
#mergetable           actions= 0 time=24 usec 
#deadcode             actions= 5 time=9 usec 
#aliases              actions= 0 time=4 usec 
#constants            actions= 3 time=4 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=15 usec 
#deadcode             actions= 0 time=4 usec 
#reduce               actions=38 time=20 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=9 usec 
#select '~EndProfilingOutput~';
% . # table_name
% single_value # name
% char # type
% 20 # length
[ "~EndProfilingOutput~"	]
#select '~BeginProfilingOutput~';
% . # table_name
% single_value # name
% char # type
% 22 # length
[ "~BeginProfilingOutput~"	]
#explain alter table blabla add constraint dada unique (id);
% .explain # table_name
% mal # name
% clob # type
% 130 # length
function user.s18_0():void;
    X_1:void := querylog.define("explain alter table blabla add constraint dada unique (id);":str, "sequential_pipe":str, 40:int);
    sqlcatalog.alter_table("sys":str, "blabla":str, 0x7f72801d2510:ptr, 0:int);
    X_46:bat[:int] := bat.new(nil:int);
    (X_47:bat[:oid], C_48:bat[:oid], X_49:bat[:lng]) := group.groupdone(X_46:bat[:int]);
    X_50:lng := aggr.sum(X_49:bat[:lng]);
    X_54:lng := aggr.count(X_49:bat[:lng]);
    X_52:bit := calc.isnil(X_50:lng);
    X_53:lng := calc.ifthenelse(X_52:bit, 0:lng, X_50:lng);
    X_55:bit := calc.!=(X_54:lng, X_53:lng);
    sql.assert(X_55:bit, "40002!UPDATE: UNIQUE constraint 'blabla.dada' violated":str);
    sql.exportOperation();
end user.s18_0;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 7 time=7 usec 
#evaluate             actions= 0 time=3 usec 
#emptybind            actions= 5 time=13 usec 
#aliases              actions= 1 time=5 usec 
#mergetable           actions= 0 time=25 usec 
#deadcode             actions= 5 time=8 usec 
#aliases              actions= 0 time=4 usec 
#constants            actions= 3 time=4 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=5 usec 
#reorder              actions= 1 time=15 usec 
#deadcode             actions= 0 time=4 usec 
#reduce               actions=38 time=20 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=8 usec 
#select '~EndProfilingOutput~';
% . # table_name
% single_value # name
% char # type
% 20 # length
[ "~EndProfilingOutput~"	]

# 13:17:23 >  
# 13:17:23 >  "Done."
# 13:17:23 >  

