stdout of test 'analytics07` in directory 'sql/test/analytics` itself:


# 13:45:23 >  
# 13:45:23 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35726" "--set" "mapi_usock=/var/tmp/mtest-4188/.s.monetdb.35726" "--set" "monet_prompt=" "--forcemito" "--dbpath=/home/ferreira/repositories/MonetDB-analytics/BUILD/var/MonetDB/mTests_sql_test_analytics" "--set" "embedded_c=true"
# 13:45:23 >  

# MonetDB 5 server v11.32.0
# This is an unreleased version
# Serving database 'mTests_sql_test_analytics', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 128bit integers
# Found 15.492 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2018 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://wired-142.cwi.nl:35726/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-4188/.s.monetdb.35726
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 13:45:24 >  
# 13:45:24 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-4188" "--port=35726"
# 13:45:24 >  

#create table testintervals (aa date, bb int);
#insert into testintervals values (date '2018-01-02', -1), (date '2018-02-04', 3), (date '2018-04-19', 2),
#    (date '2018-05-03', 10), (date '2018-06-06', -12), (date '2018-07-12', 1), (date '2018-08-29', 1131);
[ 7	]
#create table testintervals2 (aa timestamp, bb int);
#insert into testintervals2 values (timestamp '2018-01-02 08:00:10', -1), (timestamp '2018-02-04 19:02:01', 3),
#    (timestamp '2018-04-19 15:49:45', 2), (timestamp '2018-05-03 05:12:04', 10), (timestamp '2018-06-06 02:45:03', -12),
#    (timestamp '2018-07-12 18:26:01', 1), (timestamp '2018-08-29 14:56:33', 1131);
[ 7	]
#create table testintervals3 (aa time, bb int);
#insert into testintervals3 values (time '08:00:10', -1), (time '19:02:01', 3), (time '15:49:45', 2),
#    (time '05:12:04', 10), (time '02:45:03', -12), (time '18:26:01', 1), (time '14:56:33', 1131);
[ 7	]
#start transaction;
#select count(*) over (order by aa range unbounded preceding),
#       count(*) over (order by aa range between unbounded preceding and current row),
#       count(*) over (order by aa range between current row and unbounded following),
#       count(*) over (order by aa range between interval '1' month preceding and current row),
#       count(*) over (order by aa range between current row and interval '30000' second following),
#       count(*) over (order by aa range between unbounded preceding and unbounded following) from testintervals;
% sys.%10,	sys.%20,	sys.%30,	sys.%40,	sys.%50,	sys.%60 # table_name
% %10,	%20,	%30,	%40,	%50,	%60 # name
% bigint,	bigint,	bigint,	bigint,	bigint,	bigint # type
% 1,	1,	1,	1,	1,	1 # length
[ 1,	1,	7,	1,	1,	7	]
[ 2,	2,	6,	1,	1,	7	]
[ 3,	3,	5,	1,	1,	7	]
[ 4,	4,	4,	2,	1,	7	]
[ 5,	5,	3,	1,	1,	7	]
[ 6,	6,	2,	1,	1,	7	]
[ 7,	7,	1,	1,	1,	7	]
#select count(*) over (order by aa range between interval '0' month preceding and interval '0' month following),
#       count(*) over (order by aa range between interval '1' month preceding and interval '1' month following),
#       count(*) over (order by aa range between interval '2' month preceding and interval '1' month following),
#       count(*) over (order by aa range between interval '0' second preceding and interval '0' second following),
#       count(*) over (order by aa range between interval '2629800' second preceding and interval '2629800' second following),
% sys.%10,	sys.%20,	sys.%30,	sys.%40,	sys.%50,	sys.%60 # table_name
% %10,	%20,	%30,	%40,	%50,	%60 # name
% bigint,	bigint,	bigint,	bigint,	bigint,	bigint # type
% 1,	1,	1,	1,	1,	1 # length
[ 1,	1,	1,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
[ 1,	2,	2,	1,	2,	1	]
[ 1,	2,	2,	1,	2,	1	]
[ 1,	1,	3,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
#select count(*) over (order by aa desc range between interval '0' month preceding and interval '0' month following),
#       count(*) over (order by aa desc range between interval '1' month preceding and interval '1' month following),
#       count(*) over (order by aa desc range between interval '2' month preceding and interval '1' month following),
#       count(*) over (order by aa desc range between interval '0' second preceding and interval '0' second following),
#       count(*) over (order by aa desc range between interval '2629800' second preceding and interval '2629800' second following),
% sys.%10,	sys.%20,	sys.%30,	sys.%40,	sys.%50,	sys.%60 # table_name
% %10,	%20,	%30,	%40,	%50,	%60 # name
% bigint,	bigint,	bigint,	bigint,	bigint,	bigint # type
% 1,	1,	1,	1,	1,	1 # length
[ 1,	1,	1,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
[ 1,	2,	3,	1,	2,	1	]
[ 1,	2,	3,	1,	2,	1	]
[ 1,	1,	1,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
#select count(*) over (order by aa range between interval '0' month preceding and interval '0' month following),
#       count(*) over (order by aa range between interval '1' month preceding and interval '1' month following),
#       count(*) over (order by aa range between interval '2' month preceding and interval '1' month following),
#       count(*) over (order by aa range between interval '0' second preceding and interval '0' second following),
#       count(*) over (order by aa range between interval '2629800' second preceding and interval '2629800' second following),
% sys.%10,	sys.%20,	sys.%30,	sys.%40,	sys.%50,	sys.%60 # table_name
% %10,	%20,	%30,	%40,	%50,	%60 # name
% bigint,	bigint,	bigint,	bigint,	bigint,	bigint # type
% 1,	1,	1,	1,	1,	1 # length
[ 1,	1,	1,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
[ 1,	2,	2,	1,	2,	1	]
[ 1,	2,	2,	1,	2,	1	]
[ 1,	1,	3,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
#select count(*) over (order by aa desc range between interval '0' month preceding and interval '0' month following),
#       count(*) over (order by aa desc range between interval '1' month preceding and interval '1' month following),
#       count(*) over (order by aa desc range between interval '2' month preceding and interval '1' month following),
#       count(*) over (order by aa desc range between interval '0' second preceding and interval '0' second following),
#       count(*) over (order by aa desc range between interval '2629800' second preceding and interval '2629800' second following),
% sys.%10,	sys.%20,	sys.%30,	sys.%40,	sys.%50,	sys.%60 # table_name
% %10,	%20,	%30,	%40,	%50,	%60 # name
% bigint,	bigint,	bigint,	bigint,	bigint,	bigint # type
% 1,	1,	1,	1,	1,	1 # length
[ 1,	1,	1,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
[ 1,	2,	3,	1,	2,	1	]
[ 1,	2,	3,	1,	2,	1	]
[ 1,	1,	1,	1,	1,	1	]
[ 1,	1,	2,	1,	1,	1	]
#select count(*) over (order by aa range between interval '0' second preceding and interval '0' second following),
#       count(*) over (order by aa range between interval '3' hour preceding and interval '3' hour following),
#       count(*) over (order by aa range between interval '60' minute preceding and interval '60' minute following),
#       count(*) over (order by aa range between current row and current row) from testintervals3;
% sys.%10,	sys.%20,	sys.%30,	sys.%40 # table_name
% %10,	%20,	%30,	%40 # name
% bigint,	bigint,	bigint,	bigint # type
% 1,	1,	1,	1 # length
[ 1,	2,	1,	1	]
[ 1,	3,	1,	1	]
[ 1,	2,	1,	1	]
[ 1,	2,	2,	1	]
[ 1,	3,	2,	1	]
[ 1,	3,	2,	1	]
[ 1,	2,	2,	1	]
#select count(*) over (order by aa desc range between interval '0' second preceding and interval '0' second following),
#       count(*) over (order by aa desc range between interval '3' hour preceding and interval '3' hour following),
#       count(*) over (order by aa desc range between interval '60' minute preceding and interval '60' minute following),
#       count(*) over (order by aa desc range between current row and current row) from testintervals3;
% sys.%10,	sys.%20,	sys.%30,	sys.%40 # table_name
% %10,	%20,	%30,	%40 # name
% bigint,	bigint,	bigint,	bigint # type
% 1,	1,	1,	1 # length
[ 1,	2,	2,	1	]
[ 1,	3,	2,	1	]
[ 1,	3,	2,	1	]
[ 1,	2,	2,	1	]
[ 1,	2,	1,	1	]
[ 1,	3,	1,	1	]
[ 1,	2,	1,	1	]
#rollback;
#drop table testintervals;
#drop table testintervals2;

# 13:45:24 >  
# 13:45:24 >  "Done."
# 13:45:24 >  

