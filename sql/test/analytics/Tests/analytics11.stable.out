stdout of test 'analytics11` in directory 'sql/test/analytics` itself:


# 14:50:26 >  
# 14:50:26 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33540" "--set" "mapi_usock=/var/tmp/mtest-19672/.s.monetdb.33540" "--forcemito" "--dbpath=/home/ferreira/repositories/MonetDB-grouping-analytics/BUILD/var/MonetDB/mTests_sql_test_analytics" "--set" "embedded_c=true"
# 14:50:26 >  

# MonetDB 5 server v11.34.0 (hg id: 926989675ef4+)
# This is an unreleased version
# Serving database 'mTests_sql_test_analytics', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 128bit integers
# Found 15.527 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2020 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.localdomain:33540/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-19672/.s.monetdb.33540
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

# 14:50:27 >  
# 14:50:27 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-19672" "--port=33540"
# 14:50:27 >  

#CREATE TABLE tbl_ProductSales (ColID int, Product_Category  varchar(64), Product_Name  varchar(64), TotalSales int); 
#INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200),(2,'Game','PKO Game',400),(3,'Fashion','Shirt',500),(4,'Fashion','Shorts',100);
[ 4	]
#INSERT INTO another_T VALUES (1,2,3,4,5,6,7,8), (11,22,33,44,55,66,77,88), (111,222,333,444,555,666,777,888), (1111,2222,3333,4444,5555,6666,7777,8888);
[ 4	]
#SELECT 1
#FROM tbl_ProductSales
#GROUP BY Product_Category;
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ 1	]
[ 1	]
#SELECT 1
#FROM tbl_ProductSales
#GROUP BY ();
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ 1	]
#SELECT
#    GROUPING(Product_Name)
#FROM tbl_ProductSales;
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ 0	]
#SELECT
#    GROUPING(Product_Name)
#FROM tbl_ProductSales GROUP BY ();
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ 0	]
#SELECT
#    GROUPING(Product_Category) AS myalias
#FROM tbl_ProductSales
#GROUP BY Product_Category;
% . # table_name
% myalias # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
#SELECT
#    GROUPING(Product_Category) myalias
#FROM tbl_ProductSales
#GROUP BY Product_Category, Product_Name;
% . # table_name
% myalias # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
#SELECT
#    GROUPING(Product_Name, Product_Category)
#FROM tbl_ProductSales
#GROUP BY Product_Category, Product_Name;
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
#SELECT
#    GROUPING(Product_Category) AS myalias
#FROM tbl_ProductSales
#GROUP BY ROLLUP(Product_Category);
% . # table_name
% myalias # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 1	]
#SELECT
#    GROUPING(Product_Category) AS myalias
#FROM tbl_ProductSales
#GROUP BY Product_Category, ROLLUP(Product_Category);
% . # table_name
% myalias # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
#SELECT
#    GROUPING(Product_Category, Product_Name, ColID)
#FROM tbl_ProductSales
#GROUP BY ROLLUP(Product_Category, Product_Name, ColID);
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 3	]
[ 3	]
[ 7	]
#SELECT
#    GROUPING(Product_Category, Product_Name, ColID)
#FROM tbl_ProductSales
#GROUP BY ROLLUP((Product_Category, Product_Name, ColID));
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 7	]
#SELECT
#    GROUPING(Product_Category, ColID)
#FROM tbl_ProductSales
#GROUP BY ROLLUP((Product_Category, Product_Name, ColID));
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 3	]
#SELECT
#    GROUPING(Product_Category, ColID)
#FROM tbl_ProductSales
#GROUP BY CUBE((Product_Category, Product_Name, ColID));
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 3	]
#SELECT
#    GROUPING(Product_Category)
#FROM tbl_ProductSales
#GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ())
#ORDER BY GROUPING(Product_Category);
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#SELECT
#    GROUPING(Product_Category)
#FROM tbl_ProductSales
#GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ())
#HAVING GROUPING(Product_Category) = 0;
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
#SELECT
#    GROUPING(Product_Category, Product_Name, ColID), GROUPING(Product_Name, ColID)
#FROM tbl_ProductSales
#GROUP BY CUBE((Product_Category, Product_Name, ColID))
#ORDER BY GROUPING(Product_Category, ColID);
% .%1,	.%2 # table_name
% %1,	%2 # name
% tinyint,	tinyint # type
% 1,	1 # length
[ 0,	0	]
[ 0,	0	]
[ 0,	0	]
[ 0,	0	]
[ 7,	3	]
#SELECT
#    GROUPING(Product_Category, Product_Name, ColID) + 1
#FROM tbl_ProductSales
#GROUP BY ROLLUP(Product_Category, Product_Name, ColID)
#HAVING GROUPING(Product_Category, Product_Name, ColID) <> 3
#ORDER BY GROUPING(Product_Category, Product_Name, ColID) DESC;
% .%4 # table_name
% %4 # name
% smallint # type
% 1 # length
[ 8	]
[ 2	]
[ 2	]
[ 2	]
[ 2	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#SELECT
#    GROUPING(Product_Category), AVG(SUM(TotalSales)) OVER (ROWS UNBOUNDED PRECEDING)
#FROM tbl_ProductSales
#GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ());
% .%1,	.%11 # table_name
% %1,	%11 # name
% tinyint,	double # type
% 1,	24 # length
[ 0,	600	]
[ 0,	600	]
[ 1,	466.6666667	]
[ 1,	450	]
[ 1,	460	]
[ 1,	400	]
[ 0,	371.4285714	]
[ 0,	375	]
[ 0,	388.8888889	]
[ 0,	360	]
[ 1,	436.3636364	]
#SELECT
#    GROUPING(Product_Category), RANK() OVER (PARTITION BY SUM(TotalSales))
#FROM tbl_ProductSales
#GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ());
% .%1,	.%6 # table_name
% %1,	%6 # name
% tinyint,	int # type
% 1,	1 # length
[ 1,	1	]
[ 0,	1	]
[ 1,	1	]
[ 0,	1	]
[ 1,	1	]
[ 0,	1	]
[ 1,	1	]
[ 0,	1	]
[ 0,	1	]
[ 0,	1	]
[ 1,	1	]
#SELECT
#    CASE WHEN GROUPING(Product_Category, Product_Name, ColID) * 10 = 30 THEN 2 ELSE NULL END
#FROM tbl_ProductSales
#GROUP BY ROLLUP(Product_Category, Product_Name, ColID);
% .%6 # table_name
% %6 # name
% tinyint # type
% 1 # length
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
[ 2	]
[ 2	]
[ NULL	]
#SELECT
#    GROUPING(Product_Category), AVG(SUM(TotalSales)) OVER (ROWS UNBOUNDED PRECEDING), RANK() OVER (PARTITION BY SUM(TotalSales))
#FROM tbl_ProductSales
#GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ());
% .%1,	.%11,	.%16 # table_name
% %1,	%11,	%16 # name
% tinyint,	double,	int # type
% 1,	24,	1 # length
[ 1,	100,	1	]
[ 0,	100,	1	]
[ 1,	133.3333333,	1	]
[ 0,	150,	1	]
[ 1,	200,	1	]
[ 0,	233.3333333,	1	]
[ 1,	271.4285714,	1	]
[ 0,	300,	1	]
[ 0,	333.3333333,	1	]
[ 0,	360,	1	]
[ 1,	436.3636364,	1	]
#SELECT
#    GROUPING(Product_Category), 
#    SUM(SUM(TotalSales)) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 
#    RANK() OVER (PARTITION BY SUM(ColID))
#FROM tbl_ProductSales
#GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ());
% .%1,	.%11,	.%21,	.%26 # table_name
% %1,	%11,	%21,	%26 # name
% tinyint,	bigint,	bigint,	int # type
% 1,	4,	2,	1 # length
[ 1,	4800,	13,	1	]
[ 0,	4800,	13,	1	]
[ 1,	4800,	13,	1	]
[ 0,	4800,	13,	1	]
[ 0,	4800,	13,	1	]
[ 1,	4800,	13,	1	]
[ 0,	4800,	13,	1	]
[ 1,	4800,	13,	1	]
[ 0,	4800,	13,	1	]
[ 0,	4800,	13,	1	]
[ 1,	4800,	13,	1	]
#CREATE TABLE tbl_X (ColID int, NItems int); 
#INSERT INTO tbl_X VALUES (1,1000),(2,500),(3,323),(4,0);
[ 4	]
#SELECT myalias, COUNT(*) FROM
#(
#    SELECT
#        GROUPING(tbl_ProductSales.ColID, tbl_X.ColID) AS myalias
#    FROM tbl_ProductSales
#    INNER JOIN tbl_X
#    ON tbl_ProductSales.ColID = tbl_X.ColID
#    WHERE tbl_X.NItems < 1000
#    GROUP BY CUBE(tbl_ProductSales.Product_Category, tbl_ProductSales.Product_Name, tbl_ProductSales.ColID), ROLLUP(tbl_X.ColID, tbl_X.NItems)
#) AS SubTables GROUP BY myalias ORDER BY myalias;
% .subtables,	.%4 # table_name
% myalias,	%4 # name
% tinyint,	bigint # type
% 1,	2 # length
[ 0,	24	]
[ 1,	12	]
[ 2,	24	]
[ 3,	9	]
#SELECT
#    GROUPING(tbl_ProductSales.ColID, tbl_X.ColID) AS myalias
#FROM tbl_ProductSales
#INNER JOIN tbl_X
#ON tbl_ProductSales.ColID = tbl_X.ColID
#WHERE tbl_X.NItems < 1000
#GROUP BY CUBE(Product_Category, Product_Name, tbl_ProductSales.ColID), ROLLUP(tbl_X.ColID, tbl_X.NItems)
#ORDER BY SUM(TotalSales) DESC
#LIMIT 1;
% . # table_name
% myalias # name
% tinyint # type
% 1 # length
[ 3	]
#DROP TABLE tbl_ProductSales;

# 14:50:27 >  
# 14:50:27 >  "Done."
# 14:50:27 >  

