stdout of test 'analytics12` in directory 'sql/test/analytics` itself:


# 13:38:13 >  
# 13:38:13 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=36935" "--set" "mapi_usock=/var/tmp/mtest-32373/.s.monetdb.36935" "--forcemito" "--dbpath=/home/ferreira/repositories/MonetDB-grouping-analytics/BUILD/var/MonetDB/mTests_sql_test_analytics" "--set" "embedded_c=true"
# 13:38:13 >  

# MonetDB 5 server v11.36.0 (hg id: a8baa8ce96d6+218824eb44c5+)
# This is an unreleased version
# Serving database 'mTests_sql_test_analytics', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 128bit integers
# Found 15.527 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2020 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.localdomain:36935/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-32373/.s.monetdb.36935
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

# 13:38:13 >  
# 13:38:13 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-32373" "--port=36935"
# 13:38:13 >  

#START TRANSACTION;
#CREATE TABLE tbl_ProductSales (ColID int, Product_Category  varchar(64), Product_Name  varchar(64), TotalSales int); 
#INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200),(2,'Game','PKO Game',400),(3,'Fashion','Shirt',500),(4,'Fashion','Shorts',100);
[ 4	]
#SELECT
#    GROUPING(Product_Category, Product_Name, ColID), GROUPING(ColID, Product_Category, Product_Name),
#    GROUPING(Product_Category, Product_Name), GROUPING(Product_Name, Product_Category)
#FROM tbl_ProductSales
#GROUP BY ROLLUP(Product_Category, Product_Name, ColID);
% .%1,	.%2,	.%3,	.%4 # table_name
% %1,	%2,	%3,	%4 # name
% tinyint,	tinyint,	tinyint,	tinyint # type
% 1,	1,	1,	1 # length
[ 0,	0,	0,	0	]
[ 0,	0,	0,	0	]
[ 0,	0,	0,	0	]
[ 0,	0,	0,	0	]
[ 1,	4,	0,	0	]
[ 1,	4,	0,	0	]
[ 1,	4,	0,	0	]
[ 1,	4,	0,	0	]
[ 3,	5,	1,	2	]
[ 3,	5,	1,	2	]
[ 7,	7,	3,	3	]
#SELECT
#    GROUPING(Product_Name, Product_Name),
#    GROUPING(Product_Category, ColID),
#    GROUPING(ColID, Product_Category),
#    GROUPING(Product_Category) + GROUPING(Product_Category, Product_Name) + GROUPING(Product_Category, Product_Name, ColID),
#    CAST(SUM(ColID) AS BIGINT)
#FROM tbl_ProductSales
#GROUP BY ROLLUP(Product_Category, Product_Name, ColID);
% .%1,	.%2,	.%3,	.%17,	.%10 # table_name
% %1,	%2,	%3,	%17,	%10 # name
% tinyint,	tinyint,	tinyint,	int,	bigint # type
% 1,	1,	1,	2,	2 # length
[ 0,	0,	0,	0,	1	]
[ 0,	0,	0,	0,	2	]
[ 0,	0,	0,	0,	3	]
[ 0,	0,	0,	0,	4	]
[ 0,	1,	2,	1,	1	]
[ 0,	1,	2,	1,	2	]
[ 0,	1,	2,	1,	3	]
[ 0,	1,	2,	1,	4	]
[ 3,	1,	2,	4,	3	]
[ 3,	1,	2,	4,	7	]
[ 3,	3,	3,	11,	10	]
#WITH "groupings" AS (
#    SELECT
#        ROW_NUMBER() OVER (ORDER BY ColID) as "rows",
#        GROUPING(Product_Category, Product_Name, ColID) AS col1, GROUPING(ColID, Product_Category, Product_Name) AS col2,
#        GROUPING(Product_Category, Product_Name) col3, GROUPING(Product_Name, Product_Category) "col4"
#    FROM tbl_ProductSales
#    GROUP BY GROUPING SETS ( Product_Category, (Product_Name), ColID,
#                            ROLLUP (Product_Category, ColID),
#                            CUBE (Product_Name, Product_Category),
% .groupings,	.groupings,	.groupings,	.groupings,	.groupings # table_name
% rows,	col1,	col2,	col3,	col4 # name
% int,	tinyint,	tinyint,	tinyint,	tinyint # type
% 2,	1,	1,	1,	1 # length
[ 10,	1,	4,	0,	0	]
[ 11,	1,	4,	0,	0	]
[ 12,	1,	4,	0,	0	]
[ 13,	1,	4,	0,	0	]
[ 23,	2,	1,	1,	2	]
[ 25,	2,	1,	1,	2	]
[ 27,	2,	1,	1,	2	]
[ 29,	2,	1,	1,	2	]
[ 1,	3,	5,	1,	2	]
[ 2,	3,	5,	1,	2	]
[ 7,	3,	5,	1,	2	]
[ 8,	3,	5,	1,	2	]
[ 14,	3,	5,	1,	2	]
[ 15,	3,	5,	1,	2	]
[ 3,	5,	6,	2,	1	]
[ 4,	5,	6,	2,	1	]
[ 5,	5,	6,	2,	1	]
[ 6,	5,	6,	2,	1	]
[ 16,	5,	6,	2,	1	]
[ 17,	5,	6,	2,	1	]
[ 18,	5,	6,	2,	1	]
[ 19,	5,	6,	2,	1	]
[ 22,	6,	3,	3,	3	]
[ 24,	6,	3,	3,	3	]
[ 26,	6,	3,	3,	3	]
[ 28,	6,	3,	3,	3	]
[ 9,	7,	7,	3,	3	]
[ 20,	7,	7,	3,	3	]
[ 21,	7,	7,	3,	3	]
#ROLLBACK;

# 13:38:13 >  
# 13:38:13 >  "Done."
# 13:38:13 >  

