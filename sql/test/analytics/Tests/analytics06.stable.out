stdout of test 'analytics06` in directory 'sql/test/analytics` itself:


# 15:51:43 >  
# 15:51:43 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=37407" "--set" "mapi_usock=/var/tmp/mtest-20542/.s.monetdb.37407" "--set" "monet_prompt=" "--forcemito" "--dbpath=/home/ferreira/repositories/MonetDB-analytics/BUILD/var/MonetDB/mTests_sql_test_analytics" "--set" "embedded_c=true"
# 15:51:43 >  

# MonetDB 5 server v11.32.0
# This is an unreleased version
# Serving database 'mTests_sql_test_analytics', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 128bit integers
# Found 15.492 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2018 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://wired-142.cwi.nl:37407/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-20542/.s.monetdb.37407
# MonetDB/GIS module loaded
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 18_index.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_views.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 27_rejects.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_profiler.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 60_wlcr.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_lidar.sql
# loading sql script: 75_shp.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql
# MonetDB/SQL module loaded


# 15:51:44 >  
# 15:51:44 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-20542" "--port=37407"
# 15:51:44 >  

#create table testing (aa int, bb int, cc bigint);
#insert into testing values (15, 3, 15), (3, 1, 3), (2, 1, 2), (5, 3, 5), (NULL, 0, NULL), (3, 0, 3), (4, 1, 4), (6, 3, 6), (8, 0, 8), (NULL, 4, NULL);
[ 10	]
#start transaction;
#select count(aa) over (partition by bb), cast(75 + count(aa) over (partition by bb) as bigint) from testing where bb <> 1;
% sys.%4,	sys.%1 # table_name
% %4,	%1 # name
% bigint,	bigint # type
% 1,	2 # length
[ 2,	77	]
[ 2,	77	]
[ 2,	77	]
[ 3,	78	]
[ 3,	78	]
[ 3,	78	]
[ 0,	75	]
#with relation as (select row_number() over () as dd, aa, bb from testing where bb <> 1)
#select aa, bb, dd,
#       count(aa) over (partition by bb rows between dd preceding and current row),
#       count(aa) over (partition by bb rows between dd preceding and dd following),
#       count(aa) over (partition by bb rows between dd + 1 preceding and dd preceding) from relation;
% sys.relation,	sys.relation,	sys.relation,	sys.%5,	sys.%10,	sys.%13 # table_name
% aa,	bb,	dd,	%5,	%10,	%13 # name
% int,	int,	int,	bigint,	bigint,	bigint # type
% 2,	1,	1,	1,	1,	1 # length
[ NULL,	0,	3,	0,	2,	0	]
[ 3,	0,	4,	1,	2,	0	]
[ 8,	0,	6,	2,	2,	0	]
[ 15,	3,	1,	1,	2,	0	]
[ 5,	3,	2,	2,	3,	0	]
[ 6,	3,	5,	3,	3,	0	]
[ NULL,	4,	7,	0,	0,	0	]
#select first_value(aa) over (partition by bb rows between 2 preceding and 1 following),
#       last_value(aa) over (partition by bb rows between 1 preceding and 1 following) from testing;
% sys.%3,	sys.%6 # table_name
% %3,	%6 # name
% int,	int # type
% 2,	1 # length
[ NULL,	3	]
[ NULL,	8	]
[ NULL,	8	]
[ 3,	2	]
[ 3,	4	]
[ 3,	4	]
[ 15,	5	]
[ 15,	6	]
[ 15,	6	]
[ NULL,	NULL	]
#rollback;
#delete from testing where cc is null;
[ 2	]
#select count(cc * cc) over (partition by cc * cc rows between cc * cc preceding and cc * cc preceding) from testing;
% sys.%3 # table_name
% %3 # name
% bigint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
#insert into testing values (-1,-1,-1);
[ 1	]
#drop table testing;

# 15:51:44 >  
# 15:51:44 >  "Done."
# 15:51:44 >  

