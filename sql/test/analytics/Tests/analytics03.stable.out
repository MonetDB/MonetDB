stdout of test 'analytics03` in directory 'sql/test/analytics` itself:


# 17:06:35 >  
# 17:06:35 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34302" "--set" "mapi_usock=/var/tmp/mtest-29260/.s.monetdb.34302" "--set" "monet_prompt=" "--forcemito" "--dbpath=/home/ferreira/repositories/MonetDB-analytics/BUILD/var/MonetDB/mTests_sql_test_analytics" "--set" "embedded_c=true"
# 17:06:35 >  

# MonetDB 5 server v11.32.0
# This is an unreleased version
# Serving database 'mTests_sql_test_analytics', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 128bit integers
# Found 15.492 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2018 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://wired-142.cwi.nl:34302/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-29260/.s.monetdb.34302
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:06:35 >  
# 17:06:35 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-29260" "--port=34302"
# 17:06:35 >  

#create table rowsvsrangevsgroups (aa int, bb int, cc real);
#start transaction;
#insert into rowsvsrangevsgroups values (1,1,1), (2,1,2), (3,1,3), (1,2,1), (1,2,1), (1,2,1), (2,2,2), (3,2,3), (4,2,4), (2,2,2);
[ 10	]
#select cast(sum(aa) over (rows unbounded preceding) as bigint),
#       cast(sum(aa) over (range unbounded preceding) as bigint),
#       cast(sum(aa) over (order by aa rows unbounded preceding) as bigint),
#       cast(sum(aa) over (order by aa range unbounded preceding) as bigint),
#       cast(sum(aa) over (order by aa groups unbounded preceding) as bigint),
#       cast(sum(aa) over (partition by bb order by bb rows unbounded preceding) as bigint),
#       cast(sum(aa) over (partition by bb order by bb range unbounded preceding) as bigint),
% sys.%7,	sys.%16,	sys.%25,	sys.%34,	sys.%43,	sys.%52,	sys.%61,	sys.%70 # table_name
% %7,	%16,	%25,	%34,	%43,	%52,	%61,	%70 # name
% bigint,	bigint,	bigint,	bigint,	bigint,	bigint,	bigint,	bigint # type
% 2,	2,	2,	2,	2,	2,	2,	2 # length
[ 1,	20,	1,	4,	4,	1,	6,	6	]
[ 3,	20,	6,	10,	10,	3,	6,	6	]
[ 6,	20,	13,	16,	16,	6,	6,	6	]
[ 7,	20,	2,	4,	4,	1,	14,	14	]
[ 8,	20,	3,	4,	4,	2,	14,	14	]
[ 9,	20,	4,	4,	4,	3,	14,	14	]
[ 11,	20,	8,	10,	10,	5,	14,	14	]
[ 13,	20,	10,	10,	10,	7,	14,	14	]
[ 16,	20,	16,	16,	16,	10,	14,	14	]
[ 20,	20,	20,	20,	20,	14,	14,	14	]
#select cast(sum(aa) over (order by aa range between unbounded preceding and current row) as bigint),
#       cast(sum(cc) over (order by aa range between unbounded preceding and current row) as bigint),
#       count(*) over (order by aa range between unbounded preceding and current row),
#       count(aa) over (order by aa range between unbounded preceding and current row),
#       min(aa) over (order by aa range between unbounded preceding and current row),
#       max(aa) over (order by aa range between unbounded preceding and current row),
% sys.%7,	sys.%16,	sys.%26,	sys.%35,	sys.%44,	sys.%53,	sys.%62,	sys.%71 # table_name
% %7,	%16,	%26,	%35,	%44,	%53,	%62,	%71 # name
% bigint,	bigint,	bigint,	bigint,	int,	int,	double,	double # type
% 2,	2,	2,	2,	1,	1,	24,	24 # length
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 10,	10,	7,	7,	1,	2,	1.428571429,	1.428571429	]
[ 10,	10,	7,	7,	1,	2,	1.428571429,	1.428571429	]
[ 10,	10,	7,	7,	1,	2,	1.428571429,	1.428571429	]
[ 16,	16,	9,	9,	1,	3,	1.777777778,	1.777777778	]
[ 16,	16,	9,	9,	1,	3,	1.777777778,	1.777777778	]
[ 20,	20,	10,	10,	1,	4,	2,	2	]
#select cast(sum(aa) over (order by aa groups between unbounded preceding and current row) as bigint),
#       cast(sum(cc) over (order by aa groups between unbounded preceding and current row) as bigint),
#       count(*) over (order by aa groups between unbounded preceding and current row),
#       count(aa) over (order by aa groups between unbounded preceding and current row),
#       min(aa) over (order by aa groups between unbounded preceding and current row),
#       max(aa) over (order by aa groups between unbounded preceding and current row),
% sys.%7,	sys.%16,	sys.%26,	sys.%35,	sys.%44,	sys.%53,	sys.%62,	sys.%71 # table_name
% %7,	%16,	%26,	%35,	%44,	%53,	%62,	%71 # name
% bigint,	bigint,	bigint,	bigint,	int,	int,	double,	double # type
% 2,	2,	2,	2,	1,	1,	24,	24 # length
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 10,	10,	7,	7,	1,	2,	1.428571429,	1.428571429	]
[ 10,	10,	7,	7,	1,	2,	1.428571429,	1.428571429	]
[ 10,	10,	7,	7,	1,	2,	1.428571429,	1.428571429	]
[ 16,	16,	9,	9,	1,	3,	1.777777778,	1.777777778	]
[ 16,	16,	9,	9,	1,	3,	1.777777778,	1.777777778	]
[ 20,	20,	10,	10,	1,	4,	2,	2	]
#select cast(sum(aa) over (order by aa groups between 1 preceding and current row) as bigint),
#       avg(cc) over (order by aa groups between 1 preceding and current row) from rowsvsrangevsgroups;
% sys.%7,	sys.%16 # table_name
% %7,	%16 # name
% bigint,	double # type
% 2,	24 # length
[ 4,	1	]
[ 4,	1	]
[ 4,	1	]
[ 4,	1	]
[ 10,	1.428571429	]
[ 10,	1.428571429	]
[ 10,	1.428571429	]
[ 12,	2.4	]
[ 12,	2.4	]
[ 10,	3.333333333	]
#delete from rowsvsrangevsgroups where aa = 2;
[ 3	]
#select cast(sum(aa) over (order by aa range between unbounded preceding and current row) as bigint),
#       cast(sum(cc) over (order by aa range between unbounded preceding and current row) as bigint),
#       count(*) over (order by aa range between unbounded preceding and current row),
#       count(aa) over (order by aa range between unbounded preceding and current row),
#       min(aa) over (order by aa range between unbounded preceding and current row),
#       max(aa) over (order by aa range between unbounded preceding and current row),
% sys.%7,	sys.%16,	sys.%26,	sys.%35,	sys.%44,	sys.%53,	sys.%62,	sys.%71 # table_name
% %7,	%16,	%26,	%35,	%44,	%53,	%62,	%71 # name
% bigint,	bigint,	bigint,	bigint,	int,	int,	double,	double # type
% 2,	2,	1,	1,	1,	1,	24,	24 # length
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 10,	10,	6,	6,	1,	3,	1.666666667,	1.666666667	]
[ 10,	10,	6,	6,	1,	3,	1.666666667,	1.666666667	]
[ 14,	14,	7,	7,	1,	4,	2,	2	]
#select cast(sum(aa) over (order by aa groups between unbounded preceding and current row) as bigint),
#       cast(sum(cc) over (order by aa groups between unbounded preceding and current row) as bigint),
#       count(*) over (order by aa groups between unbounded preceding and current row),
#       count(aa) over (order by aa groups between unbounded preceding and current row),
#       min(aa) over (order by aa groups between unbounded preceding and current row),
#       max(aa) over (order by aa groups between unbounded preceding and current row),
% sys.%7,	sys.%16,	sys.%26,	sys.%35,	sys.%44,	sys.%53,	sys.%62,	sys.%71 # table_name
% %7,	%16,	%26,	%35,	%44,	%53,	%62,	%71 # name
% bigint,	bigint,	bigint,	bigint,	int,	int,	double,	double # type
% 2,	2,	1,	1,	1,	1,	24,	24 # length
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 4,	4,	4,	4,	1,	1,	1,	1	]
[ 10,	10,	6,	6,	1,	3,	1.666666667,	1.666666667	]
[ 10,	10,	6,	6,	1,	3,	1.666666667,	1.666666667	]
[ 14,	14,	7,	7,	1,	4,	2,	2	]
#select cast(sum(aa) over (order by aa groups between 1 preceding and current row) as bigint),
#       avg(cc) over (order by aa groups between 1 preceding and current row) from rowsvsrangevsgroups;
% sys.%7,	sys.%16 # table_name
% %7,	%16 # name
% bigint,	double # type
% 2,	24 # length
[ 4,	1	]
[ 4,	1	]
[ 4,	1	]
[ 4,	1	]
[ 10,	1.666666667	]
[ 10,	1.666666667	]
[ 10,	3.333333333	]
#create table stressme (aa varchar(64), bb int);
#insert into stressme values ('one', 1), ('another', 1), ('stress', 1), (NULL, 2), ('ok', 2), ('check', 3), ('me', 3), ('please', 3), (NULL, 4);
[ 9	]
#select count(aa) over (rows between current row and unbounded following),
#       count(aa) over (range between current row and unbounded following),
#       count(aa) over (order by bb rows between current row and unbounded following),
#       count(aa) over (order by bb range between current row and unbounded following),
#       count(aa) over (order by bb groups between current row and unbounded following),
#       count(aa) over (partition by bb order by bb rows unbounded preceding),
#       count(aa) over (partition by bb order by bb range unbounded preceding),
% sys.%7,	sys.%16,	sys.%25,	sys.%34,	sys.%43,	sys.%52,	sys.%61,	sys.%70 # table_name
% %7,	%16,	%25,	%34,	%43,	%52,	%61,	%70 # name
% bigint,	bigint,	bigint,	bigint,	bigint,	bigint,	bigint,	bigint # type
% 1,	1,	1,	1,	1,	1,	1,	1 # length
[ 7,	7,	7,	7,	7,	1,	3,	3	]
[ 6,	7,	6,	7,	7,	2,	3,	3	]
[ 5,	7,	5,	7,	7,	3,	3,	3	]
[ 4,	7,	4,	4,	4,	0,	1,	1	]
[ 4,	7,	4,	4,	4,	1,	1,	1	]
[ 3,	7,	3,	3,	3,	1,	3,	3	]
[ 2,	7,	2,	3,	3,	2,	3,	3	]
[ 1,	7,	1,	3,	3,	3,	3,	3	]
[ 0,	7,	0,	0,	0,	0,	0,	0	]
#select min(aa) over (rows between current row and unbounded following),
#       min(aa) over (range between current row and unbounded following),
#       min(aa) over (order by bb rows between current row and unbounded following),
#       min(aa) over (order by bb range between current row and unbounded following),
#       min(aa) over (order by bb groups between current row and unbounded following),
#       min(aa) over (partition by bb order by bb rows unbounded preceding),
#       min(aa) over (partition by bb order by bb range unbounded preceding),
% sys.%7,	sys.%16,	sys.%25,	sys.%34,	sys.%43,	sys.%52,	sys.%61,	sys.%70 # table_name
% %7,	%16,	%25,	%34,	%43,	%52,	%61,	%70 # name
% varchar,	varchar,	varchar,	varchar,	varchar,	varchar,	varchar,	varchar # type
% 7,	7,	7,	7,	7,	7,	7,	7 # length
[ "another",	"another",	"another",	"another",	"another",	"one",	"another",	"another"	]
[ "another",	"another",	"another",	"another",	"another",	"another",	"another",	"another"	]
[ "check",	"another",	"check",	"another",	"another",	"another",	"another",	"another"	]
[ "check",	"another",	"check",	"check",	"check",	NULL,	"ok",	"ok"	]
[ "check",	"another",	"check",	"check",	"check",	"ok",	"ok",	"ok"	]
[ "check",	"another",	"check",	"check",	"check",	"check",	"check",	"check"	]
[ "me",	"another",	"me",	"check",	"check",	"check",	"check",	"check"	]
[ "please",	"another",	"please",	"check",	"check",	"check",	"check",	"check"	]
[ NULL,	"another",	NULL,	NULL,	NULL,	NULL,	NULL,	NULL	]
#select max(aa) over (rows between current row and unbounded following),
#       max(aa) over (range between current row and unbounded following),
#       max(aa) over (order by bb rows between current row and unbounded following),
#       max(aa) over (order by bb range between current row and unbounded following),
#       max(aa) over (order by bb groups between current row and unbounded following),
#       max(aa) over (partition by bb order by bb rows unbounded preceding),
#       max(aa) over (partition by bb order by bb range unbounded preceding),
% sys.%7,	sys.%16,	sys.%25,	sys.%34,	sys.%43,	sys.%52,	sys.%61,	sys.%70 # table_name
% %7,	%16,	%25,	%34,	%43,	%52,	%61,	%70 # name
% varchar,	varchar,	varchar,	varchar,	varchar,	varchar,	varchar,	varchar # type
% 6,	6,	6,	6,	6,	6,	6,	6 # length
[ "stress",	"stress",	"stress",	"stress",	"stress",	"one",	"stress",	"stress"	]
[ "stress",	"stress",	"stress",	"stress",	"stress",	"one",	"stress",	"stress"	]
[ "stress",	"stress",	"stress",	"stress",	"stress",	"stress",	"stress",	"stress"	]
[ "please",	"stress",	"please",	"please",	"please",	NULL,	"ok",	"ok"	]
[ "please",	"stress",	"please",	"please",	"please",	"ok",	"ok",	"ok"	]
[ "please",	"stress",	"please",	"please",	"please",	"check",	"please",	"please"	]
[ "please",	"stress",	"please",	"please",	"please",	"me",	"please",	"please"	]
[ "please",	"stress",	"please",	"please",	"please",	"please",	"please",	"please"	]
[ NULL,	"stress",	NULL,	NULL,	NULL,	NULL,	NULL,	NULL	]
#select max(aa) over (order by bb groups between 1 preceding and current row),
#       count(aa) over (order by bb groups between 1 preceding and current row) from stressme;
% sys.%7,	sys.%16 # table_name
% %7,	%16 # name
% varchar,	bigint # type
% 6,	1 # length
[ "stress",	3	]
[ "stress",	3	]
[ "stress",	3	]
[ "stress",	4	]
[ "stress",	4	]
[ "please",	4	]
[ "please",	4	]
[ "please",	4	]
[ "please",	3	]
#delete from stressme where bb = 2;
[ 2	]
#select max(aa) over (order by bb groups between 1 preceding and current row),
#       count(aa) over (order by bb groups between 1 preceding and current row) from stressme;
% sys.%7,	sys.%16 # table_name
% %7,	%16 # name
% varchar,	bigint # type
% 6,	1 # length
[ "stress",	3	]
[ "stress",	3	]
[ "stress",	3	]
[ "stress",	6	]
[ "stress",	6	]
[ "stress",	6	]
[ "please",	3	]
#create table overflowme (aa int, bb int);
#insert into overflowme values (2147483644, 1), (2147483645, 2), (2147483646, 1), (2147483644, 2), (2147483645, 1), (2147483646, 2);
[ 6	]
#select floor(avg(aa) over (rows between current row and unbounded following)),
#       floor(avg(aa) over (range between current row and unbounded following)),
#       floor(avg(aa) over (order by bb rows between current row and unbounded following)),
#       floor(avg(aa) over (order by bb range between current row and unbounded following)),
#       floor(avg(aa) over (partition by bb order by bb rows unbounded preceding)),
#       floor(avg(aa) over (partition by bb order by bb range unbounded preceding)) from overflowme;
% sys.,	sys.,	sys.,	sys.,	sys.,	sys. # table_name
% %63,	%64,	%65,	%66,	%67,	%70 # name
% double,	double,	double,	double,	double,	double # type
% 24,	24,	24,	24,	24,	24 # length
[ 2147483645,	2147483645,	2147483645,	2147483645,	2147483644,	2147483645	]
[ 2147483645,	2147483645,	2147483645,	2147483645,	2147483645,	2147483645	]
[ 2147483645,	2147483645,	2147483645,	2147483645,	2147483645,	2147483645	]
[ 2147483645,	2147483645,	2147483645,	2147483645,	2147483645,	2147483645	]
[ 2147483645,	2147483645,	2147483645,	2147483645,	2147483644,	2147483645	]
[ 2147483646,	2147483645,	2147483646,	2147483645,	2147483645,	2147483645	]
#rollback;
#select min(1) over (partition by 1 order by 1 range between 1 preceding and 1 following);
% .%12 # table_name
% %12 # name
% tinyint # type
% 1 # length
[ 1	]
#drop table rowsvsrangevsgroups;

# 17:06:35 >  
# 17:06:35 >  "Done."
# 17:06:35 >  

