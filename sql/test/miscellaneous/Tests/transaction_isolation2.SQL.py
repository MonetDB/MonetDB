from MonetDBtesting.sqltest import SQLTestCase

with SQLTestCase() as mdb1:
    with SQLTestCase() as mdb2:
        mdb1.connect(username="monetdb", password="monetdb")
        mdb2.connect(username="monetdb", password="monetdb")
        mdb1.execute('start transaction;').assertSucceeded()
        mdb1.execute("CREATE TABLE integers (i int);").assertSucceeded()
        mdb1.execute("insert into integers values (1),(2),(3),(NULL);").assertSucceeded()
        mdb1.execute("CREATE TABLE longs (i bigint);").assertSucceeded()
        mdb1.execute("CREATE TABLE doubles (d double precision);").assertSucceeded()
        mdb1.execute("insert into longs values (1),(2),(3);").assertSucceeded()
        mdb1.execute("insert into integers values (1),(2),(3);").assertSucceeded()
        mdb1.execute("alter table longs add primary key (i)").assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('alter table integers add foreign key(i) references longs(i);').assertSucceeded()
        mdb2.execute('alter table integers add foreign key(i) references longs(i);').assertFailed(err_code="42000", err_message="ALTER TABLE: sys_integers_integers_i_fkey conflicts with another transaction")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute('create trigger ups after delete on integers referencing old row as old_row for each row insert into longs values(0);').assertSucceeded()
        mdb1.execute('create trigger ups2 after delete on integers referencing old row as old_row for each row insert into longs values(10);').assertSucceeded()
        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('create or replace trigger ups after delete on integers referencing old row as old_row for each row insert into longs values(1);').assertSucceeded()
        mdb2.execute('create or replace trigger ups after delete on integers referencing old row as old_row for each row insert into longs values(2);').assertFailed(err_code="42000", err_message="CREATE OR REPLACE TRIGGER: transaction conflict detected")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('drop trigger ups;').assertSucceeded()
        mdb2.execute("alter table doubles add primary key (d)").assertSucceeded()
        mdb2.execute('create or replace trigger ups after delete on integers referencing old row as old_row for each row insert into longs values(3);').assertFailed(err_code="42000", err_message="CREATE OR REPLACE TRIGGER: transaction conflict detected")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('create or replace trigger ups2 after delete on integers referencing old row as old_row for each row insert into longs values(15);').assertSucceeded()
        mdb2.execute('create table floats (f float);').assertSucceeded()
        mdb2.execute("insert into floats values (1),(2),(3);").assertSucceeded()
        mdb2.execute("create index myidx ON floats(f)").assertSucceeded()
        mdb2.execute("alter table floats alter f set not null").assertSucceeded()
        mdb2.execute("alter table floats alter f set default 1").assertSucceeded()
        mdb2.execute('drop trigger ups2;').assertFailed(err_code="42000", err_message="DROP TRIGGER: transaction conflict detected")
        mdb1.execute('drop trigger ups2;').assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('CREATE schema mysch;').assertSucceeded()
        mdb2.execute('CREATE schema mysch;').assertFailed(err_code="42000", err_message="CREATE SCHEMA: transaction conflict detected")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('CREATE TYPE myurl EXTERNAL NAME url;').assertSucceeded()
        mdb2.execute('CREATE TYPE myurl EXTERNAL NAME url;').assertFailed(err_code="42000", err_message="CREATE TYPE: transaction conflict detected")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb1.execute('DROP schema mysch;').assertSucceeded()
        mdb1.execute('DROP TYPE myurl;').assertSucceeded()
        mdb1.execute("drop table integers;").assertSucceeded()
        mdb1.execute("drop table longs;").assertSucceeded()
        mdb1.execute("drop table doubles;").assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()
