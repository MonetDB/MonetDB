stdout of test 'simple_plans` in directory 'sql/test/miscellaneous` itself:


# 11:57:38 >  
# 11:57:38 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-205942" "--port=30914"
# 11:57:38 >  

#start transaction;
#create table myy (col1 int, col2 int);
#insert into myy values (1, 1), (2, 0), (3,3), (4,2);
[ 4	]
#select distinct col1 + col2 from myy order by col1 + col2;
% sys.%1 # table_name
% %1 # name
% bigint # type
% 1 # length
[ 2	]
[ 6	]
#plan select distinct col1 + col2 from myy order by col1 + col2;
% .plan # table_name
% rel # name
% clob # type
% 114 # length
project (
| group by (
| | project (
| | | table("sys"."myy") [ "myy"."col1", "myy"."col2" ] COUNT 
| | ) [ "sys"."sql_add"(bigint["myy"."col1"] as "myy"."col1", bigint["myy"."col2"] as "myy"."col2") as "%1"."%1" ]
| ) [ "%1"."%1" ] [ "%1"."%1" ]
) [ "%1"."%1" ] [ "%1"."%1" ASC ]
#plan select col2 from myy order by col1 ASC, col1 DESC;
% .plan # table_name
% rel # name
% clob # type
% 64 # length
project (
| table("sys"."myy") [ "myy"."col1", "myy"."col2" ] COUNT 
) [ "myy"."col2" ] [ "myy"."col1" ASC, "myy"."col1" NULLS LAST ]
#plan select col2 from myy order by col1 DESC, col1 DESC;
% .plan # table_name
% rel # name
% clob # type
% 71 # length
project (
| table("sys"."myy") [ "myy"."col1", "myy"."col2" ] COUNT 
) [ "myy"."col2" ] [ "myy"."col1" NULLS LAST, "myy"."col1" NULLS LAST ]
#create table myx (x uuid, y uuid);
#plan select * from myx where x in ('1aea00e5db6e0810b554fde31d961965') or y = '1aea00e5db6e0810b554fde31d961965';
% .plan # table_name
% rel # name
% clob # type
% 156 # length
project (
| select (
| | table("sys"."myx") [ "myx"."x", "myx"."y" ] COUNT 
| ) [ ("myx"."x" = uuid[char(32) "1aea00e5db6e0810b554fde31d961965"] NOT NULL) or ("myx"."y" = uuid[char(32) "1aea00e5db6e0810b554fde31d961965"] NOT NULL) ]
) [ "myx"."x", "myx"."y" ]
#plan select * from myx where x in ('1aea00e5db6e0810b554fde31d961965') or y is null;
% .plan # table_name
% rel # name
% clob # type
% 111 # length
project (
| select (
| | table("sys"."myx") [ "myx"."x", "myx"."y" ] COUNT 
| ) [ ("myx"."x" = uuid[char(32) "1aea00e5db6e0810b554fde31d961965"] NOT NULL) or ("myx"."y" * = uuid "NULL") ]
) [ "myx"."x", "myx"."y" ]
#plan select * from myx where x in ('1aea00e5db6e0810b554fde31d961965', '1aea00e5db6e0810b554fde31d961966') or y = '1aea00e5db6e0810b554fde31d961967';
% .plan # table_name
% rel # name
% clob # type
% 219 # length
project (
| select (
| | table("sys"."myx") [ "myx"."x", "myx"."y" ] COUNT 
| ) [ ("myx"."x" in (uuid[char(32) "1aea00e5db6e0810b554fde31d961965"] NOT NULL, uuid[char(32) "1aea00e5db6e0810b554fde31d961966"] NOT NULL)) or ("myx"."y" = uuid[char(32) "1aea00e5db6e0810b554fde31d961967"] NOT NULL) ]
) [ "myx"."x", "myx"."y" ]
#insert into myx values ('1aea00e5db6e0810b554fde31d961965', '1aea00e5db6e0810b554fde31d961967');
[ 1	]
#select * from myx where x in ('1aea00e5db6e0810b554fde31d961966') or y is not null;
% sys.myx,	sys.myx # table_name
% x,	y # name
% uuid,	uuid # type
% 36,	36 # length
[ 1aea00e5-db6e-0810-b554-fde31d961965,	1aea00e5-db6e-0810-b554-fde31d961967	]
#select * from myx where x in ('1aea00e5db6e0810b554fde31d961966') or y is null;
% sys.myx,	sys.myx # table_name
% x,	y # name
% uuid,	uuid # type
% 36,	36 # length
#CREATE TABLE tab0(col0 INTEGER, col1 INTEGER, col2 INTEGER);
#INSERT INTO tab0 VALUES (97,1,99), (15,81,47),(87,21,10);
[ 3	]
#plan select 1 from tab0 where col1 = 1 or col1 = 81;
% .plan # table_name
% rel # name
% clob # type
% 48 # length
project (
| select (
| | table("sys"."tab0") [ "tab0"."col1" ] COUNT 
| ) [ "tab0"."col1" in (int "1", int "81") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where col1 = 1 or col1 = 81 or col1 = 100;
% .plan # table_name
% rel # name
% clob # type
% 55 # length
project (
| select (
| | table("sys"."tab0") [ "tab0"."col1" ] COUNT 
| ) [ "tab0"."col1" in (int "1", int "81", int "100") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where (col1 = 1 or col1 = 81) or (col2 < 0); 
% .plan # table_name
% rel # name
% clob # type
% 75 # length
project (
| select (
| | table("sys"."tab0") [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ ("tab0"."col1" in (int "1", int "81")) or ("tab0"."col2" < int "0") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where ((col1 = 1 or col1 = 81) or col1 = 100) or (col2 > 10);
% .plan # table_name
% rel # name
% clob # type
% 87 # length
project (
| select (
| | table("sys"."tab0") [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ ("tab0"."col1" in (int "1", int "81", int "100")) or ("tab0"."col2" > int "10") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where ((col1 = 1 or col1 = 81) or col2 = 100) or (col1 = 100); --the rightmost comparison to col1 cannot be merged to the other 2
% .plan # table_name
% rel # name
% clob # type
% 110 # length
project (
| select (
| | table("sys"."tab0") [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ (("tab0"."col1" in (int "1", int "81")) or ("tab0"."col2" = int "100")) or ("tab0"."col1" = int "100") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where col1 <> 1 and col1 <> 81;
% .plan # table_name
% rel # name
% clob # type
% 48 # length
project (
| select (
| | table("sys"."tab0") [ "tab0"."col1" ] COUNT 
| ) [ "tab0"."col1" notin (int "1", int "81") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where col1 <> 1 and col1 <> 81 and (col2 < 0); 
% .plan # table_name
% rel # name
% clob # type
% 72 # length
project (
| select (
| | table("sys"."tab0") [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ "tab0"."col2" < int "0", "tab0"."col1" notin (int "1", int "81") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where (col1 <> 1 and col1 <> 81) or (col2 < 0); 
% .plan # table_name
% rel # name
% clob # type
% 78 # length
project (
| select (
| | table("sys"."tab0") [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ ("tab0"."col1" notin (int "1", int "81")) or ("tab0"."col2" < int "0") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where ((col1 <> 1 and col1 <> 81) and col1 <> 100) or (col2 > 10);
% .plan # table_name
% rel # name
% clob # type
% 90 # length
project (
| select (
| | table("sys"."tab0") [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ ("tab0"."col1" notin (int "1", int "81", int "100")) or ("tab0"."col2" > int "10") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where ((col1 <> 1 and col1 <> 81) or col2 = 100) and (col1 <> 100); --the rightmost comparison to col1 cannot be merged to the other 2
% .plan # table_name
% rel # name
% clob # type
% 108 # length
project (
| select (
| | table("sys"."tab0") [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ "tab0"."col1" != int "100", ("tab0"."col1" notin (int "1", int "81")) or ("tab0"."col2" = int "100") ]
) [ tinyint "1" ]
#CREATE TABLE tbl_ProductSales (ColID int, Product_Category  varchar(64), Product_Name  varchar(64), TotalSales int); 
#INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200),(2,'Game','PKO Game',400),(3,'Fashion','Shirt',500),(4,'Fashion','Shorts',100);
[ 4	]
#CREATE TABLE another_T (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT);
#INSERT INTO another_T VALUES (1,2,3,4,5,6,7,8), (11,22,33,44,55,66,77,88), (111,222,333,444,555,666,777,888), (1111,2222,3333,4444,5555,6666,7777,8888);
[ 4	]
#EXPLAIN SELECT 1 FROM another_t t1 INNER JOIN another_t t2 ON t1.col1 BETWEEN t2.col1 AND t2.col1;
% .explain # table_name
% mal # name
% clob # type
% 169 # length
function user.main():void;
    X_1:void := querylog.define("explain select 1 from another_t t1 inner join another_t t2 on t1.col1 between t2.col1 and t2.col1;":str, "sequential_pipe":str, 22:int);
    X_32:bat[:str] := bat.pack(".%1":str);
    X_33:bat[:str] := bat.pack("%1":str);
    X_34:bat[:str] := bat.pack("tinyint":str);
    X_35:bat[:int] := bat.pack(1:int);
    X_36:bat[:int] := bat.pack(0:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str);
    X_11:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int);
    X_15:bat[:int] := algebra.projection(C_5:bat[:oid], X_11:bat[:int]);
    X_17:bat[:oid] := algebra.rangejoin(X_15:bat[:int], X_15:bat[:int], X_15:bat[:int], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_26:bat[:int] := algebra.projection(X_17:bat[:oid], X_15:bat[:int]);
    X_30:bat[:bte] := algebra.project(X_26:bat[:int], 1:bte);
    sql.resultSet(X_32:bat[:str], X_33:bat[:str], X_34:bat[:str], X_35:bat[:int], X_36:bat[:int], X_30:bat[:bte]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions= 1 time=6 usec 
#evaluate             actions= 0 time=5 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=11 usec 
#aliases              actions= 0 time=1 usec 
#mitosis              actions=4 time=28 usec 
#mergetable           actions= 5 time=65 usec 
#deadcode             actions= 9 time=15 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 5 time=7 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=31 usec 
#matpack              actions= 1 time=11 usec 
#dataflow             actions= 1 time=28 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=2 usec 
#deadcode             actions= 0 time=12 usec 
#postfix              actions= 0 time=9 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=46 usec 
#total                actions=29 time=407 usec 
#EXPLAIN SELECT 1 FROM another_t t1 INNER JOIN another_t t2 ON t1.col1 BETWEEN t2.col1 - 1 AND t2.col1 + 1;
% .explain # table_name
% mal # name
% clob # type
% 177 # length
function user.main():void;
    X_1:void := querylog.define("explain select 1 from another_t t1 inner join another_t t2 on t1.col1 between t2.col1 - 1 and t2.col1 + 1;":str, "sequential_pipe":str, 29:int);
    X_42:bat[:str] := bat.pack(".%1":str);
    X_43:bat[:str] := bat.pack("%1":str);
    X_44:bat[:str] := bat.pack("tinyint":str);
    X_45:bat[:int] := bat.pack(1:int);
    X_46:bat[:int] := bat.pack(0:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str);
    X_11:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int);
    X_15:bat[:int] := algebra.projection(C_5:bat[:oid], X_11:bat[:int]);
    X_17:bat[:lng] := batcalc.lng(X_15:bat[:int], nil:BAT);
    X_22:bat[:lng] := batcalc.-(X_17:bat[:lng], 1:lng, nil:BAT);
    X_27:bat[:lng] := batcalc.+(X_17:bat[:lng], 1:lng, nil:BAT);
    X_29:bat[:oid] := algebra.rangejoin(X_17:bat[:lng], X_22:bat[:lng], X_27:bat[:lng], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_36:bat[:int] := algebra.projection(X_29:bat[:oid], X_15:bat[:int]);
    X_40:bat[:bte] := algebra.project(X_36:bat[:int], 1:bte);
    sql.resultSet(X_42:bat[:str], X_43:bat[:str], X_44:bat[:str], X_45:bat[:int], X_46:bat[:int], X_40:bat[:bte]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 2 time=106 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 3 time=5 usec 
#aliases              actions= 3 time=5 usec 
#evaluate             actions= 0 time=5 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=13 usec 
#aliases              actions= 2 time=6 usec 
#mitosis              actions=4 time=30 usec 
#mergetable           actions= 9 time=135 usec 
#deadcode             actions=21 time=18 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions=11 time=9 usec 
#commonTerms          actions= 1 time=18 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 1 time=11 usec 
#reorder              actions= 1 time=36 usec 
#matpack              actions= 1 time=12 usec 
#dataflow             actions= 1 time=31 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=2 usec 
#deadcode             actions= 0 time=13 usec 
#postfix              actions= 0 time=10 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=77 usec 
#total                actions=29 time=620 usec 
#EXPLAIN SELECT 1 FROM another_t t1 INNER JOIN another_t t2 ON t1.col1 BETWEEN t2.col1 AND 2;
% .explain # table_name
% mal # name
% clob # type
% 163 # length
function user.main():void;
    X_1:void := querylog.define("explain select 1 from another_t t1 inner join another_t t2 on t1.col1 between t2.col1 and 2;":str, "sequential_pipe":str, 24:int);
    X_35:bat[:str] := bat.pack(".%1":str);
    X_36:bat[:str] := bat.pack("%1":str);
    X_37:bat[:str] := bat.pack("tinyint":str);
    X_38:bat[:int] := bat.pack(1:int);
    X_39:bat[:int] := bat.pack(0:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str);
    X_11:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int);
    X_15:bat[:int] := algebra.projection(C_5:bat[:oid], X_11:bat[:int]);
    X_19:bat[:int] := algebra.project(X_15:bat[:int], 2:int);
    X_20:bat[:oid] := algebra.rangejoin(X_15:bat[:int], X_15:bat[:int], X_19:bat[:int], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_29:bat[:int] := algebra.projection(X_20:bat[:oid], X_15:bat[:int]);
    X_33:bat[:bte] := algebra.project(X_29:bat[:int], 1:bte);
    sql.resultSet(X_35:bat[:str], X_36:bat[:str], X_37:bat[:str], X_38:bat[:int], X_39:bat[:int], X_33:bat[:bte]);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=2 usec 
#aliases              actions= 2 time=6 usec 
#evaluate             actions= 1 time=16 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=12 usec 
#aliases              actions= 1 time=5 usec 
#mitosis              actions=4 time=39 usec 
#mergetable           actions= 5 time=78 usec 
#deadcode             actions= 9 time=19 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 6 time=8 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=11 usec 
#reorder              actions= 1 time=32 usec 
#matpack              actions= 1 time=10 usec 
#dataflow             actions= 1 time=47 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=2 usec 
#deadcode             actions= 0 time=12 usec 
#postfix              actions= 0 time=8 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=49 usec 
#total                actions=29 time=470 usec 
#EXPLAIN SELECT 1 FROM tbl_productsales t1 INNER JOIN tbl_productsales t2 ON t1.product_category LIKE t2.product_category;
% .explain # table_name
% mal # name
% clob # type
% 192 # length
function user.main():void;
    X_1:void := querylog.define("explain select 1 from tbl_productsales t1 inner join tbl_productsales t2 on t1.product_category like t2.product_category;":str, "sequential_pipe":str, 24:int);
    X_33:bat[:str] := bat.pack(".%1":str);
    X_34:bat[:str] := bat.pack("%1":str);
    X_35:bat[:str] := bat.pack("tinyint":str);
    X_36:bat[:int] := bat.pack(1:int);
    X_37:bat[:int] := bat.pack(0:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "tbl_productsales":str);
    X_11:bat[:str] := sql.bind(X_4:int, "sys":str, "tbl_productsales":str, "product_category":str, 0:int);
    X_15:bat[:str] := algebra.projection(C_5:bat[:oid], X_11:bat[:str]);
    X_19:bat[:str] := bat.single("":str);
    X_20:bat[:oid] := algebra.likejoin(X_15:bat[:str], X_15:bat[:str], X_19:bat[:str], nil:BAT, nil:BAT, true:bit, nil:lng, false:bit);
    X_27:bat[:str] := algebra.projection(X_20:bat[:oid], X_15:bat[:str]);
    X_31:bat[:bte] := algebra.project(X_27:bat[:str], 1:bte);
    sql.resultSet(X_33:bat[:str], X_34:bat[:str], X_35:bat[:str], X_36:bat[:int], X_37:bat[:int], X_31:bat[:bte]);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 2 time=4 usec 
#aliases              actions= 2 time=4 usec 
#evaluate             actions= 0 time=4 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=16 usec 
#aliases              actions= 0 time=0 usec 
#mitosis              actions=4 time=41 usec 
#mergetable           actions= 1 time=64 usec 
#deadcode             actions= 6 time=18 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 3 time=8 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=4 usec 
#deadcode             actions= 0 time=12 usec 
#reorder              actions= 1 time=49 usec 
#matpack              actions= 1 time=13 usec 
#dataflow             actions= 1 time=31 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=2 usec 
#deadcode             actions= 0 time=9 usec 
#postfix              actions= 0 time=6 usec 
#wlc                  actions= 0 time=1 usec 
#garbagecollector     actions= 1 time=45 usec 
#total                actions=29 time=478 usec 
#EXPLAIN SELECT 1 FROM another_t t1 INNER JOIN another_t t2 ON t1.col1 > t2.col1;
% .explain # table_name
% mal # name
% clob # type
% 151 # length
function user.main():void;
    X_1:void := querylog.define("explain select 1 from another_t t1 inner join another_t t2 on t1.col1 > t2.col1;":str, "sequential_pipe":str, 22:int);
    X_30:bat[:str] := bat.pack(".%1":str);
    X_31:bat[:str] := bat.pack("%1":str);
    X_32:bat[:str] := bat.pack("tinyint":str);
    X_33:bat[:int] := bat.pack(1:int);
    X_34:bat[:int] := bat.pack(0:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str);
    X_11:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int);
    X_15:bat[:int] := algebra.projection(C_5:bat[:oid], X_11:bat[:int]);
    X_17:bat[:oid] := algebra.thetajoin(X_15:bat[:int], X_15:bat[:int], nil:BAT, nil:BAT, 1:int, false:bit, nil:lng);
    X_24:bat[:int] := algebra.projection(X_17:bat[:oid], X_15:bat[:int]);
    X_28:bat[:bte] := algebra.project(X_24:bat[:int], 1:bte);
    sql.resultSet(X_30:bat[:str], X_31:bat[:str], X_32:bat[:str], X_33:bat[:int], X_34:bat[:int], X_28:bat[:bte]);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 1 time=4 usec 
#aliases              actions= 1 time=4 usec 
#evaluate             actions= 0 time=4 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=9 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 3 time=7 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=36 usec 
#matpack              actions= 1 time=36 usec 
#dataflow             actions= 1 time=32 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=3 usec 
#deadcode             actions= 0 time=14 usec 
#postfix              actions= 0 time=8 usec 
#wlc                  actions= 0 time=1 usec 
#garbagecollector     actions= 1 time=64 usec 
#total                actions=29 time=621 usec 
#PLAN SELECT 1 FROM another_t WHERE (col1 >= 1 AND col1 <= 2) OR col2 IS NULL;
% .plan # table_name
% rel # name
% clob # type
% 98 # length
project (
| select (
| | table("sys"."another_t") [ "another_t"."col1", "another_t"."col2" ] COUNT 
| ) [ (int "1" <= "another_t"."col1" <= int "2" BETWEEN ) or ("another_t"."col2" * = int "NULL") ]
) [ tinyint "1" ]
#PLAN SELECT (col1 >= 1 AND col1 <= 2) OR col2 IS NULL FROM another_t;
% .plan # table_name
% rel # name
% clob # type
% 103 # length
project (
| table("sys"."another_t") [ "another_t"."col1", "another_t"."col2" ] COUNT 
) [ "sys"."or"(int "1" <= "another_t"."col1" <= int "2", "sys"."isnull"("another_t"."col2") NOT NULL) ]
#CREATE TABLE tabel1 (id_nr INT, dt_sur STRING, edg INT, ede DATE, pc_nml_hur STRING, srt_ukr STRING);
#INSERT INTO tabel1 VALUES (10, 'Koning', NULL, current_date - INTERVAL '1' MONTH, '50', '01'), (20, 'Nes', NULL, NULL, '50', '01');
[ 2	]
#CREATE TABLE tabel2 (id_nr INT, dt_sur STRING, edg INT, ede DATE, pc_nml_hur STRING);
#INSERT INTO tabel2 VALUES (10, 'Koning', NULL, current_date - INTERVAL '1' MONTH, '50'), (10, 'Koning', NULL, NULL, '50'), (20, 'Nes', NULL, NULL, '50');
[ 3	]
#CREATE TABLE tabel3 (id_nr INT, my_date DATE);
#INSERT INTO tabel3 VALUES (10, current_date - INTERVAL '1' MONTH), (10, NULL), (20, NULL);
[ 3	]
#create view view1 as SELECT * FROM tabel1 as a;
#create view view2 as SELECT * FROM tabel2 as a;
#create view view3 as SELECT * FROM tabel3 as a;
#PLAN SELECT 1 FROM view1 s INNER JOIN view2 h ON s.id_nr = h.id_nr LEFT JOIN view2 h2 ON h.id_nr = h2.id_nr INNER JOIN view3 a ON a.id_nr = s.id_nr;
% .plan # table_name
% rel # name
% clob # type
% 76 # length
project (
| join (
| | table("sys"."tabel3") [ "tabel3"."id_nr" as "a"."id_nr" ] COUNT ,
| | project (
| | | left outer join (
| | | | join (
| | | | | project (
| | | | | | table("sys"."tabel1") [ "tabel1"."id_nr" as "a"."id_nr" ] COUNT 
| | | | | ) [ "a"."id_nr" as "s"."id_nr" ],
| | | | | project (
| | | | | | table("sys"."tabel2") [ "tabel2"."id_nr" as "a"."id_nr" ] COUNT 
| | | | | ) [ "a"."id_nr" as "h"."id_nr" ]
| | | | ) [ "s"."id_nr" = "h"."id_nr" ],
| | | | table("sys"."tabel2") [ "tabel2"."id_nr" as "a"."id_nr" ] COUNT 
| | | ) [ "h"."id_nr" = "a"."id_nr" ]
| | ) [ "s"."id_nr" ]
| ) [ "a"."id_nr" = "s"."id_nr" ]
) [ tinyint "1" ]
#rollback;

# 11:57:38 >  
# 11:57:38 >  "Done."
# 11:57:38 >  

