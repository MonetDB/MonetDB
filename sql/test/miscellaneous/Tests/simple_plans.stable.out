stdout of test 'simple_plans` in directory 'sql/test/miscellaneous` itself:


# 11:57:38 >  
# 11:57:38 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-205942" "--port=30914"
# 11:57:38 >  

#start transaction;
#create table myy (col1 int, col2 int);
#insert into myy values (1, 1), (2, 0), (3,3), (4,2);
[ 4	]
#select distinct col1 + col2 from myy order by col1 + col2;
% sys.%2 # table_name
% %2 # name
% bigint # type
% 1 # length
[ 2	]
[ 6	]
#plan select distinct col1 + col2 from myy order by col1 + col2;
% .plan # table_name
% rel # name
% clob # type
% 110 # length
project (
| group by (
| | project (
| | | table(sys.myy) [ "myy"."col1", "myy"."col2" ] COUNT 
| | ) [ sys.sql_add(bigint["myy"."col1"] as "myy"."col1", bigint["myy"."col2"] as "myy"."col2") as "%2"."%2" ]
| ) [ "%2"."%2" ] [ "%2"."%2" ]
) [ "%2"."%2" ] [ "%2"."%2" ASC ]
#create table myx (x uuid, y uuid);
#plan select * from myx where x in ('1aea00e5db6e0810b554fde31d961965') or y = '1aea00e5db6e0810b554fde31d961965';
% .plan # table_name
% rel # name
% clob # type
% 138 # length
project (
| select (
| | table(sys.myx) [ "myx"."x", "myx"."y" ] COUNT 
| ) [ ("myx"."x" = uuid[char(32) "1aea00e5db6e0810b554fde31d961965"]) or ("myx"."y" = uuid[char(32) "1aea00e5db6e0810b554fde31d961965"]) ]
) [ "myx"."x", "myx"."y" ]
#plan select * from myx where x in ('1aea00e5db6e0810b554fde31d961965') or y is null;
% .plan # table_name
% rel # name
% clob # type
% 102 # length
project (
| select (
| | table(sys.myx) [ "myx"."x", "myx"."y" ] COUNT 
| ) [ ("myx"."x" = uuid[char(32) "1aea00e5db6e0810b554fde31d961965"]) or ("myx"."y" * = uuid "NULL") ]
) [ "myx"."x", "myx"."y" ]
#plan select * from myx where x in ('1aea00e5db6e0810b554fde31d961965', '1aea00e5db6e0810b554fde31d961966') or y = '1aea00e5db6e0810b554fde31d961967';
% .plan # table_name
% rel # name
% clob # type
% 192 # length
project (
| select (
| | table(sys.myx) [ "myx"."x", "myx"."y" ] COUNT 
| ) [ ("myx"."x" in (uuid[char(32) "1aea00e5db6e0810b554fde31d961965"], uuid[char(32) "1aea00e5db6e0810b554fde31d961966"])) or ("myx"."y" = uuid[char(32) "1aea00e5db6e0810b554fde31d961967"]) ]
) [ "myx"."x", "myx"."y" ]
#insert into myx values ('1aea00e5db6e0810b554fde31d961965', '1aea00e5db6e0810b554fde31d961967');
[ 1	]
#select * from myx where x in ('1aea00e5db6e0810b554fde31d961966') or y is not null;
% sys.myx,	sys.myx # table_name
% x,	y # name
% uuid,	uuid # type
% 36,	36 # length
[ 1aea00e5-db6e-0810-b554-fde31d961965,	1aea00e5-db6e-0810-b554-fde31d961967	]
#select * from myx where x in ('1aea00e5db6e0810b554fde31d961966') or y is null;
% sys.myx,	sys.myx # table_name
% x,	y # name
% uuid,	uuid # type
% 36,	36 # length
#CREATE TABLE tab0(col0 INTEGER, col1 INTEGER, col2 INTEGER);
#INSERT INTO tab0 VALUES (97,1,99), (15,81,47),(87,21,10);
[ 3	]
#plan select 1 from tab0 where col1 = 1 or col1 = 81;
% .plan # table_name
% rel # name
% clob # type
% 44 # length
project (
| select (
| | table(sys.tab0) [ "tab0"."col1" ] COUNT 
| ) [ "tab0"."col1" in (int "1", int "81") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where col1 = 1 or col1 = 81 or col1 = 100;
% .plan # table_name
% rel # name
% clob # type
% 55 # length
project (
| select (
| | table(sys.tab0) [ "tab0"."col1" ] COUNT 
| ) [ "tab0"."col1" in (int "1", int "81", int "100") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where (col1 = 1 or col1 = 81) or (col2 < 0); 
% .plan # table_name
% rel # name
% clob # type
% 75 # length
project (
| select (
| | table(sys.tab0) [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ ("tab0"."col1" in (int "1", int "81")) or ("tab0"."col2" < int "0") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where ((col1 = 1 or col1 = 81) or col1 = 100) or (col2 > 10);
% .plan # table_name
% rel # name
% clob # type
% 87 # length
project (
| select (
| | table(sys.tab0) [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ ("tab0"."col1" in (int "1", int "81", int "100")) or ("tab0"."col2" > int "10") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where ((col1 = 1 or col1 = 81) or col2 = 100) or (col1 = 100); --the rightmost comparison to col1 cannot be merged to the other 2
% .plan # table_name
% rel # name
% clob # type
% 110 # length
project (
| select (
| | table(sys.tab0) [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ (("tab0"."col1" in (int "1", int "81")) or ("tab0"."col2" = int "100")) or ("tab0"."col1" = int "100") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where col1 <> 1 and col1 <> 81;
% .plan # table_name
% rel # name
% clob # type
% 47 # length
project (
| select (
| | table(sys.tab0) [ "tab0"."col1" ] COUNT 
| ) [ "tab0"."col1" notin (int "1", int "81") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where col1 <> 1 and col1 <> 81 and (col2 < 0); 
% .plan # table_name
% rel # name
% clob # type
% 72 # length
project (
| select (
| | table(sys.tab0) [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ "tab0"."col2" < int "0", "tab0"."col1" notin (int "1", int "81") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where (col1 <> 1 and col1 <> 81) or (col2 < 0); 
% .plan # table_name
% rel # name
% clob # type
% 78 # length
project (
| select (
| | table(sys.tab0) [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ ("tab0"."col1" notin (int "1", int "81")) or ("tab0"."col2" < int "0") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where ((col1 <> 1 and col1 <> 81) and col1 <> 100) or (col2 > 10);
% .plan # table_name
% rel # name
% clob # type
% 90 # length
project (
| select (
| | table(sys.tab0) [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ ("tab0"."col1" notin (int "1", int "81", int "100")) or ("tab0"."col2" > int "10") ]
) [ tinyint "1" ]
#plan select 1 from tab0 where ((col1 <> 1 and col1 <> 81) or col2 = 100) and (col1 <> 100); --the rightmost comparison to col1 cannot be merged to the other 2
% .plan # table_name
% rel # name
% clob # type
% 108 # length
project (
| select (
| | table(sys.tab0) [ "tab0"."col1", "tab0"."col2" ] COUNT 
| ) [ "tab0"."col1" != int "100", ("tab0"."col1" notin (int "1", int "81")) or ("tab0"."col2" = int "100") ]
) [ tinyint "1" ]
#CREATE TABLE tbl_ProductSales (ColID int, Product_Category  varchar(64), Product_Name  varchar(64), TotalSales int); 
#INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200),(2,'Game','PKO Game',400),(3,'Fashion','Shirt',500),(4,'Fashion','Shorts',100);
[ 4	]
#CREATE TABLE another_T (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT);
#INSERT INTO another_T VALUES (1,2,3,4,5,6,7,8), (11,22,33,44,55,66,77,88), (111,222,333,444,555,666,777,888), (1111,2222,3333,4444,5555,6666,7777,8888);
[ 4	]
#EXPLAIN SELECT 1 FROM another_t t1 INNER JOIN another_t t2 ON t1.col1 BETWEEN t2.col1 AND t2.col1;
% .explain # table_name
% mal # name
% clob # type
% 166 # length
function user.main():void;
    X_1:void := querylog.define("explain select 1 from another_t t1 inner join another_t t2 on t1.col1 between t2.col1 and t2.col1;":str, "default_pipe":str, 22:int);
barrier X_137:bit := language.dataflow();
    X_32:bat[:str] := bat.pack(".%3":str);
    X_33:bat[:str] := bat.pack("%3":str);
    X_34:bat[:str] := bat.pack("tinyint":str);
    X_35:bat[:int] := bat.pack(1:int);
    X_36:bat[:int] := bat.pack(0:int);
    X_4:int := sql.mvc();
    C_83:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 0:int, 4:int);
    X_94:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 0:int, 4:int);
    X_99:bat[:int] := algebra.projection(C_83:bat[:oid], X_94:bat[:int]);
    C_12:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str);
    X_14:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int);
    X_16:bat[:int] := algebra.projection(C_12:bat[:oid], X_14:bat[:int]);
    X_103:bat[:oid] := algebra.rangejoin(X_99:bat[:int], X_16:bat[:int], X_16:bat[:int], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_111:bat[:int] := algebra.projection(X_103:bat[:oid], X_99:bat[:int]);
    X_119:bat[:bte] := algebra.project(X_111:bat[:int], 1:bte);
    C_85:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 1:int, 4:int);
    X_95:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 1:int, 4:int);
    X_100:bat[:int] := algebra.projection(C_85:bat[:oid], X_95:bat[:int]);
    X_105:bat[:oid] := algebra.rangejoin(X_100:bat[:int], X_16:bat[:int], X_16:bat[:int], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_112:bat[:int] := algebra.projection(X_105:bat[:oid], X_100:bat[:int]);
    X_120:bat[:bte] := algebra.project(X_112:bat[:int], 1:bte);
    C_87:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 2:int, 4:int);
    X_96:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 2:int, 4:int);
    X_101:bat[:int] := algebra.projection(C_87:bat[:oid], X_96:bat[:int]);
    X_107:bat[:oid] := algebra.rangejoin(X_101:bat[:int], X_16:bat[:int], X_16:bat[:int], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_113:bat[:int] := algebra.projection(X_107:bat[:oid], X_101:bat[:int]);
    X_121:bat[:bte] := algebra.project(X_113:bat[:int], 1:bte);
    C_89:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 3:int, 4:int);
    X_97:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 3:int, 4:int);
    X_102:bat[:int] := algebra.projection(C_89:bat[:oid], X_97:bat[:int]);
    X_109:bat[:oid] := algebra.rangejoin(X_102:bat[:int], X_16:bat[:int], X_16:bat[:int], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_114:bat[:int] := algebra.projection(X_109:bat[:oid], X_102:bat[:int]);
    X_122:bat[:bte] := algebra.project(X_114:bat[:int], 1:bte);
    X_131:bat[:bte] := mat.packIncrement(X_119:bat[:bte], 4:int);
    X_133:bat[:bte] := mat.packIncrement(X_131:bat[:bte], X_120:bat[:bte]);
    X_134:bat[:bte] := mat.packIncrement(X_133:bat[:bte], X_121:bat[:bte]);
    X_30:bat[:bte] := mat.packIncrement(X_134:bat[:bte], X_122:bat[:bte]);
    language.pass(X_99:bat[:int]);
    language.pass(X_100:bat[:int]);
    language.pass(X_101:bat[:int]);
    language.pass(X_16:bat[:int]);
    language.pass(X_102:bat[:int]);
exit X_137:bit;
    sql.resultSet(X_32:bat[:str], X_33:bat[:str], X_34:bat[:str], X_35:bat[:int], X_36:bat[:int], X_30:bat[:bte]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions= 1 time=6 usec 
#evaluate             actions= 0 time=5 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=11 usec 
#aliases              actions= 0 time=1 usec 
#mitosis              actions=4 time=28 usec 
#mergetable           actions= 5 time=65 usec 
#deadcode             actions= 9 time=15 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 5 time=7 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=31 usec 
#matpack              actions= 1 time=11 usec 
#dataflow             actions= 1 time=28 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=2 usec 
#deadcode             actions= 0 time=12 usec 
#postfix              actions= 0 time=9 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=46 usec 
#total                actions=29 time=407 usec 
#EXPLAIN SELECT 1 FROM another_t t1 INNER JOIN another_t t2 ON t1.col1 BETWEEN t2.col1 - 1 AND t2.col1 + 1;
% .explain # table_name
% mal # name
% clob # type
% 174 # length
function user.main():void;
    X_1:void := querylog.define("explain select 1 from another_t t1 inner join another_t t2 on t1.col1 between t2.col1 - 1 and t2.col1 + 1;":str, "default_pipe":str, 31:int);
barrier X_165:bit := language.dataflow();
    X_45:bat[:str] := bat.pack(".%11":str);
    X_46:bat[:str] := bat.pack("%11":str);
    X_47:bat[:str] := bat.pack("tinyint":str);
    X_48:bat[:int] := bat.pack(1:int);
    X_49:bat[:int] := bat.pack(0:int);
    X_4:int := sql.mvc();
    C_99:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 0:int, 4:int);
    X_110:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 0:int, 4:int);
    X_115:bat[:int] := algebra.projection(C_99:bat[:oid], X_110:bat[:int]);
    X_119:bat[:lng] := batcalc.lng(X_115:bat[:int]);
    C_12:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str);
    X_14:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int);
    X_15:bat[:int] := algebra.projection(C_12:bat[:oid], X_14:bat[:int]);
    X_16:bat[:lng] := batcalc.lng(X_15:bat[:int]);
    X_19:bat[:lng] := batcalc.-(X_16:bat[:lng], 1:lng, nil:BAT);
    X_24:bat[:lng] := batcalc.+(X_16:bat[:lng], 1:lng, nil:BAT);
    X_123:bat[:oid] := algebra.rangejoin(X_119:bat[:lng], X_19:bat[:lng], X_24:bat[:lng], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_131:bat[:int] := algebra.projection(X_123:bat[:oid], X_115:bat[:int]);
    X_147:bat[:bte] := algebra.project(X_131:bat[:int], 1:bte);
    C_101:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 1:int, 4:int);
    X_111:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 1:int, 4:int);
    X_116:bat[:int] := algebra.projection(C_101:bat[:oid], X_111:bat[:int]);
    X_120:bat[:lng] := batcalc.lng(X_116:bat[:int]);
    X_125:bat[:oid] := algebra.rangejoin(X_120:bat[:lng], X_19:bat[:lng], X_24:bat[:lng], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_132:bat[:int] := algebra.projection(X_125:bat[:oid], X_116:bat[:int]);
    X_148:bat[:bte] := algebra.project(X_132:bat[:int], 1:bte);
    C_103:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 2:int, 4:int);
    X_112:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 2:int, 4:int);
    X_117:bat[:int] := algebra.projection(C_103:bat[:oid], X_112:bat[:int]);
    X_121:bat[:lng] := batcalc.lng(X_117:bat[:int]);
    X_127:bat[:oid] := algebra.rangejoin(X_121:bat[:lng], X_19:bat[:lng], X_24:bat[:lng], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_133:bat[:int] := algebra.projection(X_127:bat[:oid], X_117:bat[:int]);
    X_149:bat[:bte] := algebra.project(X_133:bat[:int], 1:bte);
    C_105:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 3:int, 4:int);
    X_113:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 3:int, 4:int);
    X_118:bat[:int] := algebra.projection(C_105:bat[:oid], X_113:bat[:int]);
    X_122:bat[:lng] := batcalc.lng(X_118:bat[:int]);
    X_129:bat[:oid] := algebra.rangejoin(X_122:bat[:lng], X_19:bat[:lng], X_24:bat[:lng], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_134:bat[:int] := algebra.projection(X_129:bat[:oid], X_118:bat[:int]);
    X_150:bat[:bte] := algebra.project(X_134:bat[:int], 1:bte);
    X_159:bat[:bte] := mat.packIncrement(X_147:bat[:bte], 4:int);
    X_161:bat[:bte] := mat.packIncrement(X_159:bat[:bte], X_148:bat[:bte]);
    X_162:bat[:bte] := mat.packIncrement(X_161:bat[:bte], X_149:bat[:bte]);
    X_43:bat[:bte] := mat.packIncrement(X_162:bat[:bte], X_150:bat[:bte]);
    language.pass(X_16:bat[:lng]);
    language.pass(X_115:bat[:int]);
    language.pass(X_116:bat[:int]);
    language.pass(X_117:bat[:int]);
    language.pass(X_19:bat[:lng]);
    language.pass(X_24:bat[:lng]);
    language.pass(X_118:bat[:int]);
exit X_165:bit;
    sql.resultSet(X_45:bat[:str], X_46:bat[:str], X_47:bat[:str], X_48:bat[:int], X_49:bat[:int], X_43:bat[:bte]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 2 time=106 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 3 time=5 usec 
#aliases              actions= 3 time=5 usec 
#evaluate             actions= 0 time=5 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=13 usec 
#aliases              actions= 2 time=6 usec 
#mitosis              actions=4 time=30 usec 
#mergetable           actions= 9 time=135 usec 
#deadcode             actions=21 time=18 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions=11 time=9 usec 
#commonTerms          actions= 1 time=18 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 1 time=11 usec 
#reorder              actions= 1 time=36 usec 
#matpack              actions= 1 time=12 usec 
#dataflow             actions= 1 time=31 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=2 usec 
#deadcode             actions= 0 time=13 usec 
#postfix              actions= 0 time=10 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=77 usec 
#total                actions=29 time=620 usec 
#EXPLAIN SELECT 1 FROM another_t t1 INNER JOIN another_t t2 ON t1.col1 BETWEEN t2.col1 AND 2;
% .explain # table_name
% mal # name
% clob # type
% 160 # length
function user.main():void;
    X_1:void := querylog.define("explain select 1 from another_t t1 inner join another_t t2 on t1.col1 between t2.col1 and 2;":str, "default_pipe":str, 24:int);
barrier X_141:bit := language.dataflow();
    X_35:bat[:str] := bat.pack(".%3":str);
    X_36:bat[:str] := bat.pack("%3":str);
    X_37:bat[:str] := bat.pack("tinyint":str);
    X_38:bat[:int] := bat.pack(1:int);
    X_39:bat[:int] := bat.pack(0:int);
    X_4:int := sql.mvc();
    C_87:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 0:int, 4:int);
    X_98:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 0:int, 4:int);
    X_103:bat[:int] := algebra.projection(C_87:bat[:oid], X_98:bat[:int]);
    C_12:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str);
    X_14:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int);
    X_16:bat[:int] := algebra.projection(C_12:bat[:oid], X_14:bat[:int]);
    X_19:bat[:int] := algebra.project(X_16:bat[:int], 2:int);
    X_107:bat[:oid] := algebra.rangejoin(X_103:bat[:int], X_16:bat[:int], X_19:bat[:int], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_115:bat[:int] := algebra.projection(X_107:bat[:oid], X_103:bat[:int]);
    X_123:bat[:bte] := algebra.project(X_115:bat[:int], 1:bte);
    C_89:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 1:int, 4:int);
    X_99:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 1:int, 4:int);
    X_104:bat[:int] := algebra.projection(C_89:bat[:oid], X_99:bat[:int]);
    X_109:bat[:oid] := algebra.rangejoin(X_104:bat[:int], X_16:bat[:int], X_19:bat[:int], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_116:bat[:int] := algebra.projection(X_109:bat[:oid], X_104:bat[:int]);
    X_124:bat[:bte] := algebra.project(X_116:bat[:int], 1:bte);
    C_91:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 2:int, 4:int);
    X_100:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 2:int, 4:int);
    X_105:bat[:int] := algebra.projection(C_91:bat[:oid], X_100:bat[:int]);
    X_111:bat[:oid] := algebra.rangejoin(X_105:bat[:int], X_16:bat[:int], X_19:bat[:int], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_117:bat[:int] := algebra.projection(X_111:bat[:oid], X_105:bat[:int]);
    X_125:bat[:bte] := algebra.project(X_117:bat[:int], 1:bte);
    C_93:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 3:int, 4:int);
    X_101:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 3:int, 4:int);
    X_106:bat[:int] := algebra.projection(C_93:bat[:oid], X_101:bat[:int]);
    X_113:bat[:oid] := algebra.rangejoin(X_106:bat[:int], X_16:bat[:int], X_19:bat[:int], nil:BAT, nil:BAT, true:bit, true:bit, false:bit, false:bit, nil:lng);
    X_118:bat[:int] := algebra.projection(X_113:bat[:oid], X_106:bat[:int]);
    X_126:bat[:bte] := algebra.project(X_118:bat[:int], 1:bte);
    X_135:bat[:bte] := mat.packIncrement(X_123:bat[:bte], 4:int);
    X_137:bat[:bte] := mat.packIncrement(X_135:bat[:bte], X_124:bat[:bte]);
    X_138:bat[:bte] := mat.packIncrement(X_137:bat[:bte], X_125:bat[:bte]);
    X_33:bat[:bte] := mat.packIncrement(X_138:bat[:bte], X_126:bat[:bte]);
    language.pass(X_103:bat[:int]);
    language.pass(X_104:bat[:int]);
    language.pass(X_105:bat[:int]);
    language.pass(X_16:bat[:int]);
    language.pass(X_19:bat[:int]);
    language.pass(X_106:bat[:int]);
exit X_141:bit;
    sql.resultSet(X_35:bat[:str], X_36:bat[:str], X_37:bat[:str], X_38:bat[:int], X_39:bat[:int], X_33:bat[:bte]);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=2 usec 
#aliases              actions= 2 time=6 usec 
#evaluate             actions= 1 time=16 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=12 usec 
#aliases              actions= 1 time=5 usec 
#mitosis              actions=4 time=39 usec 
#mergetable           actions= 5 time=78 usec 
#deadcode             actions= 9 time=19 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 6 time=8 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=11 usec 
#reorder              actions= 1 time=32 usec 
#matpack              actions= 1 time=10 usec 
#dataflow             actions= 1 time=47 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=2 usec 
#deadcode             actions= 0 time=12 usec 
#postfix              actions= 0 time=8 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=49 usec 
#total                actions=29 time=470 usec 
#EXPLAIN SELECT 1 FROM tbl_productsales t1 INNER JOIN tbl_productsales t2 ON t1.product_category LIKE t2.product_category;
% .explain # table_name
% mal # name
% clob # type
% 189 # length
function user.main():void;
    X_1:void := querylog.define("explain select 1 from tbl_productsales t1 inner join tbl_productsales t2 on t1.product_category like t2.product_category;":str, "default_pipe":str, 23:int);
barrier X_116:bit := language.dataflow();
    X_32:bat[:str] := bat.pack(".%3":str);
    X_33:bat[:str] := bat.pack("%3":str);
    X_34:bat[:str] := bat.pack("tinyint":str);
    X_35:bat[:int] := bat.pack(1:int);
    X_36:bat[:int] := bat.pack(0:int);
    X_4:int := sql.mvc();
    C_83:bat[:oid] := sql.tid(X_4:int, "sys":str, "tbl_productsales":str, 0:int, 4:int);
    X_94:bat[:str] := sql.bind(X_4:int, "sys":str, "tbl_productsales":str, "product_category":str, 0:int, 0:int, 4:int);
    X_99:bat[:str] := algebra.projection(C_83:bat[:oid], X_94:bat[:str]);
    C_85:bat[:oid] := sql.tid(X_4:int, "sys":str, "tbl_productsales":str, 1:int, 4:int);
    X_95:bat[:str] := sql.bind(X_4:int, "sys":str, "tbl_productsales":str, "product_category":str, 0:int, 1:int, 4:int);
    X_100:bat[:str] := algebra.projection(C_85:bat[:oid], X_95:bat[:str]);
    C_87:bat[:oid] := sql.tid(X_4:int, "sys":str, "tbl_productsales":str, 2:int, 4:int);
    X_96:bat[:str] := sql.bind(X_4:int, "sys":str, "tbl_productsales":str, "product_category":str, 0:int, 2:int, 4:int);
    X_101:bat[:str] := algebra.projection(C_87:bat[:oid], X_96:bat[:str]);
    C_89:bat[:oid] := sql.tid(X_4:int, "sys":str, "tbl_productsales":str, 3:int, 4:int);
    X_97:bat[:str] := sql.bind(X_4:int, "sys":str, "tbl_productsales":str, "product_category":str, 0:int, 3:int, 4:int);
    X_102:bat[:str] := algebra.projection(C_89:bat[:oid], X_97:bat[:str]);
    X_111:bat[:str] := mat.packIncrement(X_99:bat[:str], 4:int);
    X_112:bat[:str] := mat.packIncrement(X_111:bat[:str], X_100:bat[:str]);
    X_113:bat[:str] := mat.packIncrement(X_112:bat[:str], X_101:bat[:str]);
    X_15:bat[:str] := mat.packIncrement(X_113:bat[:str], X_102:bat[:str]);
    C_12:bat[:oid] := sql.tid(X_4:int, "sys":str, "tbl_productsales":str);
    X_14:bat[:str] := sql.bind(X_4:int, "sys":str, "tbl_productsales":str, "product_category":str, 0:int);
    X_16:bat[:str] := algebra.projection(C_12:bat[:oid], X_14:bat[:str]);
    X_19:bat[:oid] := algebra.likejoin(X_15:bat[:str], X_16:bat[:str], "":str, nil:BAT, nil:BAT, true:bit, nil:lng, false:bit);
    X_26:bat[:str] := algebra.projection(X_19:bat[:oid], X_15:bat[:str]);
    X_30:bat[:bte] := algebra.project(X_26:bat[:str], 1:bte);
    language.pass(X_15:bat[:str]);
exit X_116:bit;
    sql.resultSet(X_32:bat[:str], X_33:bat[:str], X_34:bat[:str], X_35:bat[:int], X_36:bat[:int], X_30:bat[:bte]);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 2 time=4 usec 
#aliases              actions= 2 time=4 usec 
#evaluate             actions= 0 time=4 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=16 usec 
#aliases              actions= 0 time=0 usec 
#mitosis              actions=4 time=41 usec 
#mergetable           actions= 1 time=64 usec 
#deadcode             actions= 6 time=18 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 3 time=8 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=4 usec 
#deadcode             actions= 0 time=12 usec 
#reorder              actions= 1 time=49 usec 
#matpack              actions= 1 time=13 usec 
#dataflow             actions= 1 time=31 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=2 usec 
#deadcode             actions= 0 time=9 usec 
#postfix              actions= 0 time=6 usec 
#wlc                  actions= 0 time=1 usec 
#garbagecollector     actions= 1 time=45 usec 
#total                actions=29 time=478 usec 
#EXPLAIN SELECT 1 FROM another_t t1 INNER JOIN another_t t2 ON t1.col1 > t2.col1;
% .explain # table_name
% mal # name
% clob # type
% 148 # length
function user.main():void;
    X_1:void := querylog.define("explain select 1 from another_t t1 inner join another_t t2 on t1.col1 > t2.col1;":str, "default_pipe":str, 22:int);
barrier X_134:bit := language.dataflow();
    X_30:bat[:str] := bat.pack(".%3":str);
    X_31:bat[:str] := bat.pack("%3":str);
    X_32:bat[:str] := bat.pack("tinyint":str);
    X_33:bat[:int] := bat.pack(1:int);
    X_34:bat[:int] := bat.pack(0:int);
    X_4:int := sql.mvc();
    C_80:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 0:int, 4:int);
    X_91:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 0:int, 4:int);
    X_96:bat[:int] := algebra.projection(C_80:bat[:oid], X_91:bat[:int]);
    C_12:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str);
    X_14:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int);
    X_16:bat[:int] := algebra.projection(C_12:bat[:oid], X_14:bat[:int]);
    X_100:bat[:oid] := algebra.thetajoin(X_96:bat[:int], X_16:bat[:int], nil:BAT, nil:BAT, 1:int, true:bit, nil:lng);
    X_108:bat[:int] := algebra.projection(X_100:bat[:oid], X_96:bat[:int]);
    X_116:bat[:bte] := algebra.project(X_108:bat[:int], 1:bte);
    C_82:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 1:int, 4:int);
    X_92:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 1:int, 4:int);
    X_97:bat[:int] := algebra.projection(C_82:bat[:oid], X_92:bat[:int]);
    X_102:bat[:oid] := algebra.thetajoin(X_97:bat[:int], X_16:bat[:int], nil:BAT, nil:BAT, 1:int, true:bit, nil:lng);
    X_109:bat[:int] := algebra.projection(X_102:bat[:oid], X_97:bat[:int]);
    X_117:bat[:bte] := algebra.project(X_109:bat[:int], 1:bte);
    C_84:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 2:int, 4:int);
    X_93:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 2:int, 4:int);
    X_98:bat[:int] := algebra.projection(C_84:bat[:oid], X_93:bat[:int]);
    X_104:bat[:oid] := algebra.thetajoin(X_98:bat[:int], X_16:bat[:int], nil:BAT, nil:BAT, 1:int, true:bit, nil:lng);
    X_110:bat[:int] := algebra.projection(X_104:bat[:oid], X_98:bat[:int]);
    X_118:bat[:bte] := algebra.project(X_110:bat[:int], 1:bte);
    C_86:bat[:oid] := sql.tid(X_4:int, "sys":str, "another_t":str, 3:int, 4:int);
    X_94:bat[:int] := sql.bind(X_4:int, "sys":str, "another_t":str, "col1":str, 0:int, 3:int, 4:int);
    X_99:bat[:int] := algebra.projection(C_86:bat[:oid], X_94:bat[:int]);
    X_106:bat[:oid] := algebra.thetajoin(X_99:bat[:int], X_16:bat[:int], nil:BAT, nil:BAT, 1:int, true:bit, nil:lng);
    X_111:bat[:int] := algebra.projection(X_106:bat[:oid], X_99:bat[:int]);
    X_119:bat[:bte] := algebra.project(X_111:bat[:int], 1:bte);
    X_128:bat[:bte] := mat.packIncrement(X_116:bat[:bte], 4:int);
    X_130:bat[:bte] := mat.packIncrement(X_128:bat[:bte], X_117:bat[:bte]);
    X_131:bat[:bte] := mat.packIncrement(X_130:bat[:bte], X_118:bat[:bte]);
    X_28:bat[:bte] := mat.packIncrement(X_131:bat[:bte], X_119:bat[:bte]);
    language.pass(X_96:bat[:int]);
    language.pass(X_97:bat[:int]);
    language.pass(X_98:bat[:int]);
    language.pass(X_16:bat[:int]);
    language.pass(X_99:bat[:int]);
exit X_134:bit;
    sql.resultSet(X_30:bat[:str], X_31:bat[:str], X_32:bat[:str], X_33:bat[:int], X_34:bat[:int], X_28:bat[:bte]);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 1 time=4 usec 
#aliases              actions= 1 time=4 usec 
#evaluate             actions= 0 time=4 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=9 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 3 time=7 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=36 usec 
#matpack              actions= 1 time=36 usec 
#dataflow             actions= 1 time=32 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=3 usec 
#deadcode             actions= 0 time=14 usec 
#postfix              actions= 0 time=8 usec 
#wlc                  actions= 0 time=1 usec 
#garbagecollector     actions= 1 time=64 usec 
#total                actions=29 time=621 usec 
#PLAN SELECT 1 FROM another_t WHERE (col1 >= 1 AND col1 <= 2) OR col2 IS NULL;
% .plan # table_name
% rel # name
% clob # type
% 98 # length
project (
| select (
| | table(sys.another_t) [ "another_t"."col1", "another_t"."col2" ] COUNT 
| ) [ (int "1" <= "another_t"."col1" <= int "2" BETWEEN ) or ("another_t"."col2" * = int "NULL") ]
) [ tinyint "1" ]
#PLAN SELECT (col1 >= 1 AND col1 <= 2) OR col2 IS NULL FROM another_t;
% .plan # table_name
% rel # name
% clob # type
% 95 # length
project (
| table(sys.another_t) [ "another_t"."col1", "another_t"."col2" ] COUNT 
) [ sys.or(int "1" <= "another_t"."col1" <= int "2", sys.isnull("another_t"."col2") NOT NULL) ]
#rollback;

# 11:57:38 >  
# 11:57:38 >  "Done."
# 11:57:38 >  

