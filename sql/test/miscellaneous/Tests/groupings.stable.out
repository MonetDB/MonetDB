stdout of test 'groupings` in directory 'sql/test/miscellaneous` itself:


# 14:32:50 >  
# 14:32:50 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-98783" "--port=31431"
# 14:32:50 >  

#START TRANSACTION;
#CREATE TABLE categories (id INTEGER, "description" TEXT);
#CREATE TABLE sections (id INTEGER, "description" TEXT);
#CREATE TABLE products (id INTEGER, categoryid int, sectionid INTEGER, "description" TEXT, price DECIMAL(6,2));
#CREATE TABLE sales (productid INTEGER, sale_day DATE, units INTEGER);
#INSERT INTO categories VALUES (1, 'fresh food'), (2, 'dry food'), (3, 'drinks');
[ 3	]
#INSERT INTO sections VALUES (1, 'front'), (2, 'side'), (3, 'back');
[ 3	]
#INSERT INTO products VALUES (1, 1, 1, 'apples', 1.5), (2, 1, 2, 'melons', 4.0), (3, 2, 2, 'peanuts', 2.0), (4, 3, 1, 'water', 1.0), (5, 3, 3, 'wine', 5.0), (6, 2, 3, 'walnuts', 1.5);
[ 6	]
#INSERT INTO sales VALUES (1, date '2020-03-01', 10), (2, date '2020-03-01', 3), (4, date '2020-03-01', 4), (1, date '2020-03-02', 6), (4, date '2020-03-02', 5), (5, date '2020-03-02', 2), (1, date '2020-03-03', 7), (3, date '2020-03-03', 4), (2, date '2020-03-03', 3), (5, date '2020-03-03', 1), (6, date '2020-03-03', 1);
[ 11	]
#SELECT COALESCE(products."description", 'all_products') AS "description", 
#       COALESCE(sale_day, 'all_days') AS sale_day, 
#       totals.total
#FROM (
#    SELECT productid, sale_day, SUM(units * price) AS total 
#    FROM products
#    LEFT JOIN sales ON sales.productid = products.id
#    GROUP BY ROLLUP(productid, sale_day)
#) AS totals
#LEFT JOIN products ON products.id = totals.productid
#ORDER BY sale_day NULLS LAST, productid NULLS LAST;
% .,	.,	.totals # table_name
% description,	sale_day,	total # name
% clob,	char,	decimal # type
% 12,	10,	14 # length
[ "apples",	"2020-03-01",	15.0000	]
[ "melons",	"2020-03-01",	12.0000	]
[ "water",	"2020-03-01",	4.0000	]
[ "apples",	"2020-03-02",	9.0000	]
[ "water",	"2020-03-02",	5.0000	]
[ "wine",	"2020-03-02",	10.0000	]
[ "apples",	"2020-03-03",	10.5000	]
[ "melons",	"2020-03-03",	12.0000	]
[ "peanuts",	"2020-03-03",	8.0000	]
[ "wine",	"2020-03-03",	5.0000	]
[ "walnuts",	"2020-03-03",	1.5000	]
[ "apples",	"all_days",	34.5000	]
[ "melons",	"all_days",	24.0000	]
[ "peanuts",	"all_days",	8.0000	]
[ "water",	"all_days",	9.0000	]
[ "wine",	"all_days",	15.0000	]
[ "walnuts",	"all_days",	1.5000	]
[ "all_products",	"all_days",	92.0000	]
#SELECT COALESCE(sections."description", 'all_sections') AS section,
#       COALESCE(categories."description", 'all_categories') AS category,
#       totals.total 
#FROM (
#    SELECT categoryid, sectionid, SUM(units * price) AS total 
#    FROM products
#    LEFT JOIN sales ON sales.productid = products.id
#    GROUP BY GROUPING SETS ((categoryid), (sectionid), ())
#) AS totals
#LEFT JOIN categories ON totals.categoryid = categories.id
#LEFT JOIN sections ON totals.sectionid = sections.id;
% .,	.,	.totals # table_name
% section,	category,	total # name
% clob,	clob,	decimal # type
% 12,	14,	14 # length
[ "front",	"all_categories",	43.5000	]
[ "side",	"all_categories",	32.0000	]
[ "back",	"all_categories",	16.5000	]
[ "all_sections",	"fresh food",	58.5000	]
[ "all_sections",	"drinks",	24.0000	]
[ "all_sections",	"dry food",	9.5000	]
[ "all_sections",	"all_categories",	92.0000	]
#CREATE VIEW sales_totals AS
#    SELECT GROUPING(categoryid) AS category_aggregates, 
#           GROUPING(sectionid) AS section_aggregates, 
#           categoryid, sectionid, SUM(units * price) AS total 
#    FROM products
#    LEFT JOIN sales ON sales.productid = products.id
#    GROUP BY GROUPING SETS ((categoryid), (sectionid), ());
#SELECT "description", total
#FROM sales_totals
#LEFT JOIN categories ON sales_totals.categoryid = categories.id
#WHERE category_aggregates = 0;
% .categories,	.sales_totals # table_name
% description,	total # name
% clob,	decimal # type
% 10,	14 # length
[ "fresh food",	58.5000	]
[ "drinks",	24.0000	]
[ "dry food",	9.5000	]
#ROLLBACK;

# 14:32:50 >  
# 14:32:50 >  "Done."
# 14:32:50 >  

