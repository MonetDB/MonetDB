stdout of test 'python-aggregate-no-groups.Bug-6726` in directory 'sql/test/BugTracker-2019` itself:


# 15:34:36 >  
# 15:34:36 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=31329" "--set" "mapi_usock=/var/tmp/mtest-13339/.s.monetdb.31329" "--forcemito" "--dbpath=/home/dinther/dev/dev/INSTALL/var/MonetDB/mTests_sql_test_BugTracker-2019" "--set" "embedded_r=yes" "--set" "embedded_py=2" "--set" "embedded_c=true"
# 15:34:36 >  

# MonetDB 5 server v11.35.4 (hg id: e54cc7e9164a)
# This is an unreleased version
# Serving database 'mTests_sql_test_BugTracker-2019', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 128bit integers
# Found 31.243 GiB available main-memory of which we use 25.463 GiB
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2020 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.localdomain:31329/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-13339/.s.monetdb.31329
# MonetDB/GIS module loaded
# SQL catalog created, loading sql scripts once
# MonetDB/SQL module loaded
# MonetDB/Python2 module loaded
# MonetDB/R   module loaded

# 15:34:36 >  
# 15:34:36 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-13339" "--port=31329"
# 15:34:36 >  

#CREATE AGGREGATE python_aggregate(val INTEGER)
#RETURNS INTEGER
#LANGUAGE PYTHON {
#    try:
#        unique = numpy.unique(aggr_group)
#        x = numpy.zeros(shape=(unique.size))
#        for i in range(0, unique.size):
#            x[i] = numpy.sum(val[aggr_group==unique[i]])
#    except NameError:
#        # aggr_group doesn't exist. no groups, aggregate on all data
#        x = numpy.sum(val)
#    return(x)
#};
#CREATE TABLE grouped_ints(value INTEGER, groupnr INTEGER);
#INSERT INTO grouped_ints VALUES (1, 0), (2, 1), (3, 0), (4, 1), (5, 0);
[ 5	]
#SELECT groupnr, python_aggregate(value) FROM grouped_ints GROUP BY groupnr;
% sys.grouped_ints,	sys.%1 # table_name
% groupnr,	%1 # name
% int,	int # type
% 1,	1 # length
[ 0,	9	]
[ 1,	6	]
#SELECT value, python_aggregate(groupnr) FROM grouped_ints GROUP BY value;
% sys.grouped_ints,	sys.%1 # table_name
% value,	%1 # name
% int,	int # type
% 1,	1 # length
[ 1,	0	]
[ 2,	1	]
[ 3,	0	]
[ 4,	1	]
[ 5,	0	]
#SELECT python_aggregate(groupnr) FROM grouped_ints;
% sys.%1 # table_name
% %1 # name
% int # type
% 1 # length
[ 2	]
#SELECT python_aggregate(value) FROM grouped_ints;
% sys.%1 # table_name
% %1 # name
% int # type
% 2 # length
[ 15	]
#DROP TABLE grouped_ints;
#CREATE TABLE grouped_ints(value INTEGER, groupnr INTEGER, groupnr2 INTEGER);
#INSERT INTO grouped_ints VALUES (1, 0, 0), (2, 0, 0), (3, 0, 1), (4, 0, 1), (5, 1, 0), (6, 1, 0), (7, 1, 1), (8, 1, 1);
[ 8	]
#SELECT groupnr, groupnr2, python_aggregate(value) FROM grouped_ints GROUP BY groupnr, groupnr2;
% sys.grouped_ints,	sys.grouped_ints,	sys.%1 # table_name
% groupnr,	groupnr2,	%1 # name
% int,	int,	int # type
% 1,	1,	2 # length
[ 0,	0,	3	]
[ 0,	1,	7	]
[ 1,	0,	11	]
[ 1,	1,	15	]
#SELECT python_aggregate(groupnr) FROM grouped_ints;
% sys.%1 # table_name
% %1 # name
% int # type
% 1 # length
[ 4	]
#SELECT python_aggregate(groupnr2) FROM grouped_ints;
% sys.%1 # table_name
% %1 # name
% int # type
% 1 # length
[ 4	]
#SELECT python_aggregate(value) FROM grouped_ints;
% sys.%1 # table_name
% %1 # name
% int # type
% 2 # length
[ 36	]
#DROP TABLE grouped_ints;
#DROP AGGREGATE python_aggregate(INTEGER);

# 15:34:37 >  
# 15:34:37 >  "Done."
# 15:34:37 >  

