statement ok
START TRANSACTION

statement ok
CREATE TABLE employee (
  -- define columns (name / type / default value / column constraint)
  id             DECIMAL                           PRIMARY KEY,
  emp_name       VARCHAR(20)                       NOT NULL,
  dep_name       VARCHAR(20)                       NOT NULL,
  salary         DECIMAL(7,2)                      NOT NULL,
  age            DECIMAL(3,0)                      NOT NULL,
  -- define table constraints (it's merely an example table)
  CONSTRAINT empoyee_uk UNIQUE (emp_name, dep_name)
)

statement ok
INSERT INTO employee VALUES ( 1,  'Matthew', 'Management',  4500, 55)

statement ok
INSERT INTO employee VALUES ( 2,  'Olivia',  'Management',  4400, 61)

statement ok
INSERT INTO employee VALUES ( 3,  'Grace',   'Management',  4000, 42)

statement ok
INSERT INTO employee VALUES ( 4,  'Jim',     'Production',  3700, 35)

statement ok
INSERT INTO employee VALUES ( 5,  'Alice',   'Production',  3500, 24)

statement ok
INSERT INTO employee VALUES ( 6,  'Michael', 'Production',  3600, 28)

statement ok
INSERT INTO employee VALUES ( 7,  'Tom',     'Production',  3800, 35)

statement ok
INSERT INTO employee VALUES ( 8,  'Kevin',   'Production',  4000, 52)

statement ok
INSERT INTO employee VALUES ( 9,  'Elvis',   'Service',     4100, 40)

statement ok
INSERT INTO employee VALUES (10,  'Sophia',  'Sales',       4300, 36)

statement ok
INSERT INTO employee VALUES (11,  'Samantha','Sales',       4100, 38)

statement ok
COMMIT WORK

query RTTRR rowsort
SELECT * FROM employee order by 1
----
1.000
Matthew
Management
4500.000
55.000
10.000
Sophia
Sales
4300.000
36.000
11.000
Samantha
Sales
4100.000
38.000
2.000
Olivia
Management
4400.000
61.000
3.000
Grace
Management
4000.000
42.000
4.000
Jim
Production
3700.000
35.000
5.000
Alice
Production
3500.000
24.000
6.000
Michael
Production
3600.000
28.000
7.000
Tom
Production
3800.000
35.000
8.000
Kevin
Production
4000.000
52.000
9.000
Elvis
Service
4100.000
40.000

query RTTRRIRR rowsort
SELECT id,
       emp_name,
       dep_name,
       -- The functions FIRST_VALUE() and LAST_VALUE() explain itself by their name. They act within the actual frame.
       FIRST_VALUE(id) OVER (PARTITION BY dep_name ORDER BY id) AS frame_first_row,
       LAST_VALUE(id)  OVER (PARTITION BY dep_name ORDER BY id) AS frame_last_row,
       COUNT(*)        OVER (PARTITION BY dep_name ORDER BY id) AS frame_count,
       -- The functions LAG() and LEAD() explain itself by their name. They act within the actual partition.
       LAG(id)         OVER (PARTITION BY dep_name ORDER BY id) AS prev_row,
       LEAD(id)        OVER (PARTITION BY dep_name ORDER BY id) AS next_row
FROM   employee
----
1.000
Matthew
Management
1.000
1.000
1
NULL
2.000
10.000
Sophia
Sales
10.000
10.000
1
NULL
11.000
11.000
Samantha
Sales
10.000
11.000
2
10.000
NULL
2.000
Olivia
Management
1.000
2.000
2
1.000
3.000
3.000
Grace
Management
1.000
3.000
3
2.000
NULL
4.000
Jim
Production
4.000
4.000
1
NULL
5.000
5.000
Alice
Production
4.000
5.000
2
4.000
6.000
6.000
Michael
Production
4.000
6.000
3
5.000
7.000
7.000
Tom
Production
4.000
7.000
4
6.000
8.000
8.000
Kevin
Production
4.000
8.000
5
7.000
NULL
9.000
Elvis
Service
9.000
9.000
1
NULL
NULL

query RTTITT rowsort
SELECT id,
       emp_name,
       dep_name,
       ROW_NUMBER()           OVER (PARTITION BY dep_name ORDER BY id) AS row_number_in_frame,
       NTH_VALUE(emp_name, 2) OVER (PARTITION BY dep_name ORDER BY id) AS second_row_in_frame,
       LEAD(emp_name, 2)      OVER (PARTITION BY dep_name ORDER BY id) AS two_rows_ahead
FROM   employee
----
1.000
Matthew
Management
1
NULL
Grace
10.000
Sophia
Sales
1
NULL
NULL
11.000
Samantha
Sales
2
Samantha
NULL
2.000
Olivia
Management
2
Olivia
NULL
3.000
Grace
Management
3
Olivia
NULL
4.000
Jim
Production
1
NULL
Michael
5.000
Alice
Production
2
Alice
Tom
6.000
Michael
Production
3
Alice
Kevin
7.000
Tom
Production
4
Alice
NULL
8.000
Kevin
Production
5
Alice
NULL
9.000
Elvis
Service
1
NULL
NULL

query RTRRR rowsort
SELECT id, dep_name, salary,
       cast(SUM(salary)  OVER  (PARTITION BY dep_name ORDER BY salary
                           ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as DECIMAL(7,2)) as growing_sum,
       cast(SUM(salary)  OVER  (PARTITION BY dep_name ORDER BY salary
                           ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as DECIMAL(7,2)) AS sum_over_1or2or3_rows
FROM   employee
----
1.000
Management
4500.000
12900.000
12900.000
10.000
Sales
4300.000
8400.000
8400.000
11.000
Sales
4100.000
4100.000
4100.000
2.000
Management
4400.000
8400.000
8400.000
3.000
Management
4000.000
4000.000
4000.000
4.000
Production
3700.000
10800.000
10800.000
5.000
Production
3500.000
3500.000
3500.000
6.000
Production
3600.000
7100.000
7100.000
7.000
Production
3800.000
14600.000
11100.000
8.000
Production
4000.000
18600.000
11500.000
9.000
Service
4100.000
4100.000
4100.000

query RTRR rowsort
SELECT id, dep_name, salary,
       cast(SUM(salary)  OVER  (PARTITION BY dep_name ORDER BY salary
                           GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING) as DECIMAL(7,2)) AS sum_over_groups
FROM   employee
----
1.000
Management
4500.000
8900.000
10.000
Sales
4300.000
8400.000
11.000
Sales
4100.000
8400.000
2.000
Management
4400.000
12900.000
3.000
Management
4000.000
8400.000
4.000
Production
3700.000
11100.000
5.000
Production
3500.000
7100.000
6.000
Production
3600.000
10800.000
7.000
Production
3800.000
11500.000
8.000
Production
4000.000
7800.000
9.000
Service
4100.000
4100.000

query RTRR rowsort
SELECT id, dep_name, salary,
       cast(SUM(salary)  OVER  (PARTITION BY dep_name ORDER BY salary
                           RANGE BETWEEN 100.0 PRECEDING AND 50.0 FOLLOWING) as DECIMAL(7,2)) AS sum_over_range
FROM   employee
----
1.000
Management
4500.000
8900.000
10.000
Sales
4300.000
4300.000
11.000
Sales
4100.000
4100.000
2.000
Management
4400.000
4400.000
3.000
Management
4000.000
4000.000
4.000
Production
3700.000
7300.000
5.000
Production
3500.000
3500.000
6.000
Production
3600.000
7100.000
7.000
Production
3800.000
7500.000
8.000
Production
4000.000
4000.000
9.000
Service
4100.000
4100.000

statement ok
DROP TABLE employee

statement ok
CREATE SCHEMA tutorial

statement ok
CREATE TABLE tutorial.dc_bikeshare_q1_2012 (duration_seconds int, start_time timestamp, end_time timestamp, start_terminal varchar(100), end_terminal varchar(100), bike_id_nr int, member_type varchar(16))

statement ok
INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (155, '2012-01-05 12:30:10', '2012-01-05 12:21:05', 'DIEMEN', 'AMS', 1025, 'registered')

statement ok
INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (165, '2012-01-05 12:30:10', '2012-01-05 12:21:15', 'DIEMEN', 'AMS', 2025, 'casual')

statement ok
INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (155, '2012-01-06 16:30:10', '2012-01-06 18:21:05', 'DIEMEN', 'AMS', 1025, 'registered')

statement ok
INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (165, '2012-01-06 16:30:10', '2012-01-06 18:21:15', 'DIEMEN', 'AMS', 2025, 'casual')

statement ok
INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (55, '2012-01-07 10:30:10', '2012-01-07 10:31:05', 'AMS', 'AMS', 1025, 'registered')

statement ok
INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (65, '2012-01-07 10:30:10', '2012-01-07 10:31:15', 'AMS', 'AMS', 2025, 'casual')

query ITTTTIT rowsort
SELECT * FROM tutorial.dc_bikeshare_q1_2012
----
155
2012-01-05 12:30:10
2012-01-05 12:21:05
DIEMEN
AMS
1025
registered
155
2012-01-06 16:30:10
2012-01-06 18:21:05
DIEMEN
AMS
1025
registered
165
2012-01-05 12:30:10
2012-01-05 12:21:15
DIEMEN
AMS
2025
casual
165
2012-01-06 16:30:10
2012-01-06 18:21:15
DIEMEN
AMS
2025
casual
55
2012-01-07 10:30:10
2012-01-07 10:31:05
AMS
AMS
1025
registered
65
2012-01-07 10:30:10
2012-01-07 10:31:15
AMS
AMS
2025
casual

query II rowsort
SELECT duration_seconds,
       cast(SUM(duration_seconds) OVER (ORDER BY start_time) as int) AS running_total
  FROM tutorial.dc_bikeshare_q1_2012
----
155
320
155
640
165
320
165
640
55
760
65
760

query TII rowsort
SELECT start_terminal,
       duration_seconds,
       cast(SUM(duration_seconds) OVER
         (PARTITION BY start_terminal ORDER BY start_time) as int)
         AS running_total
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
----
AMS
55
120
AMS
65
120
DIEMEN
155
320
DIEMEN
155
640
DIEMEN
165
320
DIEMEN
165
640

query TII rowsort
SELECT start_terminal,
       duration_seconds,
       cast(SUM(duration_seconds) OVER
         (PARTITION BY start_terminal) as int) AS start_terminal_total
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
----
AMS
55
120
AMS
65
120
DIEMEN
155
640
DIEMEN
155
640
DIEMEN
165
640
DIEMEN
165
640

query TIIIR rowsort
SELECT start_terminal,
       duration_seconds,
       cast(SUM(duration_seconds) OVER
         (PARTITION BY start_terminal) as int) AS running_total,
       COUNT(duration_seconds) OVER
         (PARTITION BY start_terminal) AS running_count,
       AVG(duration_seconds) OVER
         (PARTITION BY start_terminal) AS running_avg
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
----
AMS
55
120
2
60.000
AMS
65
120
2
60.000
DIEMEN
155
640
4
160.000
DIEMEN
155
640
4
160.000
DIEMEN
165
640
4
160.000
DIEMEN
165
640
4
160.000

query TIIIR rowsort
SELECT start_terminal,
       duration_seconds,
       cast(SUM(duration_seconds) OVER
         (PARTITION BY start_terminal ORDER BY start_time) as int)
         AS running_total,
       COUNT(duration_seconds) OVER
         (PARTITION BY start_terminal ORDER BY start_time)
         AS running_count,
       AVG(duration_seconds) OVER
         (PARTITION BY start_terminal ORDER BY start_time)
         AS running_avg
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
----
AMS
55
120
2
60.000
AMS
65
120
2
60.000
DIEMEN
155
320
2
160.000
DIEMEN
155
640
4
160.000
DIEMEN
165
320
2
160.000
DIEMEN
165
640
4
160.000

query TTII rowsort
SELECT start_terminal,
       start_time,
       duration_seconds,
       ROW_NUMBER() OVER (ORDER BY start_time)
                    AS row_number
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
----
AMS
2012-01-07 10:30:10
55
5
AMS
2012-01-07 10:30:10
65
6
DIEMEN
2012-01-05 12:30:10
155
1
DIEMEN
2012-01-05 12:30:10
165
2
DIEMEN
2012-01-06 16:30:10
155
3
DIEMEN
2012-01-06 16:30:10
165
4

query TTII rowsort
SELECT start_terminal,
       start_time,
       duration_seconds,
       ROW_NUMBER() OVER (PARTITION BY start_terminal
                          ORDER BY start_time)
                    AS row_number
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
----
AMS
2012-01-07 10:30:10
55
1
AMS
2012-01-07 10:30:10
65
2
DIEMEN
2012-01-05 12:30:10
155
1
DIEMEN
2012-01-05 12:30:10
165
2
DIEMEN
2012-01-06 16:30:10
155
3
DIEMEN
2012-01-06 16:30:10
165
4

query TII rowsort
SELECT start_terminal,
       duration_seconds,
       RANK() OVER (PARTITION BY start_terminal
                    ORDER BY start_time)
              AS rank
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
----
AMS
55
1
AMS
65
1
DIEMEN
155
1
DIEMEN
155
3
DIEMEN
165
1
DIEMEN
165
3

query TIIII rowsort
SELECT start_terminal,
       duration_seconds,
       NTILE(4) OVER
         (PARTITION BY start_terminal ORDER BY duration_seconds)
          AS quartile,
       NTILE(5) OVER
         (PARTITION BY start_terminal ORDER BY duration_seconds)
         AS quintile,
       NTILE(100) OVER
         (PARTITION BY start_terminal ORDER BY duration_seconds)
         AS percentile
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
 ORDER BY start_terminal, duration_seconds
----
AMS
55
1
1
1
AMS
65
2
2
2
DIEMEN
155
1
1
1
DIEMEN
155
2
2
2
DIEMEN
165
3
3
3
DIEMEN
165
4
4
4

query TIII rowsort
SELECT start_terminal,
       duration_seconds,
       LAG(duration_seconds, 1) OVER
         (PARTITION BY start_terminal ORDER BY duration_seconds) AS lag,
       LEAD(duration_seconds, 1) OVER
         (PARTITION BY start_terminal ORDER BY duration_seconds) AS lead
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
 ORDER BY start_terminal, duration_seconds
----
AMS
55
NULL
65
AMS
65
55
NULL
DIEMEN
155
155
165
DIEMEN
155
NULL
155
DIEMEN
165
155
165
DIEMEN
165
165
NULL

query TII rowsort
SELECT start_terminal,
       duration_seconds,
       duration_seconds -LAG(duration_seconds, 1) OVER
         (PARTITION BY start_terminal ORDER BY duration_seconds)
         AS difference
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
 ORDER BY start_terminal, duration_seconds
----
AMS
55
NULL
AMS
65
10
DIEMEN
155
0
DIEMEN
155
NULL
DIEMEN
165
0
DIEMEN
165
10

query TII rowsort
SELECT *
  FROM (
    SELECT start_terminal,
           duration_seconds,
           duration_seconds -LAG(duration_seconds, 1) OVER
             (PARTITION BY start_terminal ORDER BY duration_seconds)
             AS difference
      FROM tutorial.dc_bikeshare_q1_2012
     WHERE start_time < '2012-01-08'
     ORDER BY start_terminal, duration_seconds
       ) sub
 WHERE sub.difference IS NOT NULL
----
AMS
65
10
DIEMEN
155
0
DIEMEN
165
0
DIEMEN
165
10

query TIIII rowsort
SELECT start_terminal,
       duration_seconds,
       NTILE(4) OVER
         (PARTITION BY start_terminal ORDER BY duration_seconds)
         AS quartile,
       NTILE(5) OVER
         (PARTITION BY start_terminal ORDER BY duration_seconds)
         AS quintile,
       NTILE(100) OVER
         (PARTITION BY start_terminal ORDER BY duration_seconds)
         AS percentile
  FROM tutorial.dc_bikeshare_q1_2012
 WHERE start_time < '2012-01-08'
 ORDER BY start_terminal, duration_seconds
----
AMS
55
1
1
1
AMS
65
2
2
2
DIEMEN
155
1
1
1
DIEMEN
155
2
2
2
DIEMEN
165
3
3
3
DIEMEN
165
4
4
4

query TIIII rowsort
SELECT start_terminal,
       duration_seconds,
       NTILE(4) OVER ntile_window AS quartile,
       NTILE(5) OVER ntile_window AS quintile,
       NTILE(100) OVER ntile_window AS percentile
  FROM tutorial.dc_bikeshare_q1_2012
WINDOW ntile_window AS
         (PARTITION BY start_terminal ORDER BY duration_seconds)
 WHERE start_time < '2012-01-08'
 ORDER BY start_terminal, duration_seconds
----
AMS
55
1
1
1
AMS
65
2
2
2
DIEMEN
155
1
1
1
DIEMEN
155
2
2
2
DIEMEN
165
3
3
3
DIEMEN
165
4
4
4

statement ok
DROP TABLE tutorial.dc_bikeshare_q1_2012

statement ok
DROP SCHEMA tutorial

