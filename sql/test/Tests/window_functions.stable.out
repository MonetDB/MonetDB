stdout of test 'window_functions` in directory 'sql/test` itself:


# 15:12:24 >  
# 15:12:24 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=32293" "--set" "mapi_usock=/var/tmp/mtest-17193/.s.monetdb.32293" "--set" "monet_prompt=" "--forcemito" "--dbpath=/export/scratch1/dinther/INSTALL/var/MonetDB/mTests_sql_test" "--set" "embedded_c=true"
# 15:12:24 >  

# MonetDB 5 server v11.33.4 (hg id: 026335789147)
# This is an unreleased version
# Serving database 'mTests_sql_test', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 128bit integers
# Found 31.305 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2020 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://catskill.da.cwi.nl:32293/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17193/.s.monetdb.32293
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

# 09:45:22 >  
# 09:45:22 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-22672" "--port=33858"
# 09:45:22 >  

#START TRANSACTION;
#CREATE TABLE employee (
#  -- define columns (name / type / default value / column constraint)
#  id             DECIMAL                           PRIMARY KEY,
#  emp_name       VARCHAR(20)                       NOT NULL,
#  dep_name       VARCHAR(20)                       NOT NULL,
#  salary         DECIMAL(7,2)                      NOT NULL,
#  age            DECIMAL(3,0)                      NOT NULL,
#  -- define table constraints (it's merely an example table)
#  CONSTRAINT empoyee_uk UNIQUE (emp_name, dep_name)
#INSERT INTO employee VALUES ( 1,  'Matthew', 'Management',  4500, 55);
[ 1	]
#INSERT INTO employee VALUES ( 2,  'Olivia',  'Management',  4400, 61);
[ 1	]
#INSERT INTO employee VALUES ( 3,  'Grace',   'Management',  4000, 42);
[ 1	]
#INSERT INTO employee VALUES ( 4,  'Jim',     'Production',  3700, 35);
[ 1	]
#INSERT INTO employee VALUES ( 5,  'Alice',   'Production',  3500, 24);
[ 1	]
#INSERT INTO employee VALUES ( 6,  'Michael', 'Production',  3600, 28);
[ 1	]
#INSERT INTO employee VALUES ( 7,  'Tom',     'Production',  3800, 35);
[ 1	]
#INSERT INTO employee VALUES ( 8,  'Kevin',   'Production',  4000, 52);
[ 1	]
#INSERT INTO employee VALUES ( 9,  'Elvis',   'Service',     4100, 40);
[ 1	]
#INSERT INTO employee VALUES (10,  'Sophia',  'Sales',       4300, 36);
[ 1	]
#INSERT INTO employee VALUES (11,  'Samantha','Sales',       4100, 38);
[ 1	]
#COMMIT;
#SELECT * FROM employee order by 1;
% sys.employee,	sys.employee,	sys.employee,	sys.employee,	sys.employee # table_name
% id,	emp_name,	dep_name,	salary,	age # name
% decimal,	varchar,	varchar,	decimal,	decimal # type
% 20,	8,	10,	9,	4 # length
[ 1.000,	"Matthew",	"Management",	4500.00,	55	]
[ 2.000,	"Olivia",	"Management",	4400.00,	61	]
[ 3.000,	"Grace",	"Management",	4000.00,	42	]
[ 4.000,	"Jim",	"Production",	3700.00,	35	]
[ 5.000,	"Alice",	"Production",	3500.00,	24	]
[ 6.000,	"Michael",	"Production",	3600.00,	28	]
[ 7.000,	"Tom",	"Production",	3800.00,	35	]
[ 8.000,	"Kevin",	"Production",	4000.00,	52	]
[ 9.000,	"Elvis",	"Service",	4100.00,	40	]
[ 10.000,	"Sophia",	"Sales",	4300.00,	36	]
[ 11.000,	"Samantha",	"Sales",	4100.00,	38	]
#SELECT id,
#       emp_name,
#       dep_name,
#       -- The functions FIRST_VALUE() and LAST_VALUE() explain itself by their name. They act within the actual frame.
#       FIRST_VALUE(id) OVER (PARTITION BY dep_name ORDER BY id) AS frame_first_row,
#       LAST_VALUE(id)  OVER (PARTITION BY dep_name ORDER BY id) AS frame_last_row,
#       COUNT(*)        OVER (PARTITION BY dep_name ORDER BY id) AS frame_count,
#       -- The functions LAG() and LEAD() explain itself by their name. They act within the actual partition.
% sys.employee,	sys.employee,	sys.employee,	sys.,	sys.,	sys.,	sys.,	sys. # table_name
% id,	emp_name,	dep_name,	frame_first_row,	frame_last_row,	frame_count,	prev_row,	next_row # name
% decimal,	varchar,	varchar,	decimal,	decimal,	bigint,	decimal,	decimal # type
% 20,	8,	10,	20,	20,	1,	20,	20 # length
[ 1.000,	"Matthew",	"Management",	1.000,	1.000,	1,	NULL,	2.000	]
[ 2.000,	"Olivia",	"Management",	1.000,	2.000,	2,	1.000,	3.000	]
[ 3.000,	"Grace",	"Management",	1.000,	3.000,	3,	2.000,	NULL	]
[ 4.000,	"Jim",	"Production",	4.000,	4.000,	1,	NULL,	5.000	]
[ 5.000,	"Alice",	"Production",	4.000,	5.000,	2,	4.000,	6.000	]
[ 6.000,	"Michael",	"Production",	4.000,	6.000,	3,	5.000,	7.000	]
[ 7.000,	"Tom",	"Production",	4.000,	7.000,	4,	6.000,	8.000	]
[ 8.000,	"Kevin",	"Production",	4.000,	8.000,	5,	7.000,	NULL	]
[ 10.000,	"Sophia",	"Sales",	10.000,	10.000,	1,	NULL,	11.000	]
[ 11.000,	"Samantha",	"Sales",	10.000,	11.000,	2,	10.000,	NULL	]
[ 9.000,	"Elvis",	"Service",	9.000,	9.000,	1,	NULL,	NULL	]
#SELECT id,
#       emp_name,
#       dep_name,
#       ROW_NUMBER()           OVER (PARTITION BY dep_name ORDER BY id) AS row_number_in_frame,
#       NTH_VALUE(emp_name, 2) OVER (PARTITION BY dep_name ORDER BY id) AS second_row_in_frame,
#       LEAD(emp_name, 2)      OVER (PARTITION BY dep_name ORDER BY id) AS two_rows_ahead
#FROM   employee;
% sys.employee,	sys.employee,	sys.employee,	sys.,	sys.,	sys. # table_name
% id,	emp_name,	dep_name,	row_number_in_frame,	second_row_in_frame,	two_rows_ahead # name
% decimal,	varchar,	varchar,	int,	varchar,	varchar # type
% 20,	8,	10,	1,	8,	7 # length
[ 1.000,	"Matthew",	"Management",	1,	NULL,	"Grace"	]
[ 2.000,	"Olivia",	"Management",	2,	"Olivia",	NULL	]
[ 3.000,	"Grace",	"Management",	3,	"Olivia",	NULL	]
[ 4.000,	"Jim",	"Production",	1,	NULL,	"Michael"	]
[ 5.000,	"Alice",	"Production",	2,	"Alice",	"Tom"	]
[ 6.000,	"Michael",	"Production",	3,	"Alice",	"Kevin"	]
[ 7.000,	"Tom",	"Production",	4,	"Alice",	NULL	]
[ 8.000,	"Kevin",	"Production",	5,	"Alice",	NULL	]
[ 10.000,	"Sophia",	"Sales",	1,	NULL,	NULL	]
[ 11.000,	"Samantha",	"Sales",	2,	"Samantha",	NULL	]
[ 9.000,	"Elvis",	"Service",	1,	NULL,	NULL	]
#SELECT id, dep_name, salary,
#       SUM(salary)  OVER  (PARTITION BY dep_name ORDER BY salary
#                           ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as growing_sum,
#       SUM(salary)  OVER  (PARTITION BY dep_name ORDER BY salary
#                           ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS sum_over_1or2or3_rows
#FROM   employee;
% sys.employee,	sys.employee,	sys.employee,	sys.,	sys. # table_name
% id,	dep_name,	salary,	growing_sum,	sum_over_1or2or3_rows # name
% decimal,	varchar,	decimal,	decimal,	decimal # type
% 20,	10,	9,	9,	9 # length
[ 3.000,	"Management",	4000.00,	4000.00,	4000.00	]
[ 2.000,	"Management",	4400.00,	8400.00,	8400.00	]
[ 1.000,	"Management",	4500.00,	12900.00,	12900.00	]
[ 5.000,	"Production",	3500.00,	3500.00,	3500.00	]
[ 6.000,	"Production",	3600.00,	7100.00,	7100.00	]
[ 4.000,	"Production",	3700.00,	10800.00,	10800.00	]
[ 7.000,	"Production",	3800.00,	14600.00,	11100.00	]
[ 8.000,	"Production",	4000.00,	18600.00,	11500.00	]
[ 11.000,	"Sales",	4100.00,	4100.00,	4100.00	]
[ 10.000,	"Sales",	4300.00,	8400.00,	8400.00	]
[ 9.000,	"Service",	4100.00,	4100.00,	4100.00	]
#SELECT id, dep_name, salary,
#       SUM(salary)  OVER  (PARTITION BY dep_name ORDER BY salary
#                           GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS sum_over_groups
#FROM   employee;
% sys.employee,	sys.employee,	sys.employee,	sys. # table_name
% id,	dep_name,	salary,	sum_over_groups # name
% decimal,	varchar,	decimal,	decimal # type
% 20,	10,	9,	9 # length
[ 3.000,	"Management",	4000.00,	8400.00	]
[ 2.000,	"Management",	4400.00,	12900.00	]
[ 1.000,	"Management",	4500.00,	8900.00	]
[ 5.000,	"Production",	3500.00,	7100.00	]
[ 6.000,	"Production",	3600.00,	10800.00	]
[ 4.000,	"Production",	3700.00,	11100.00	]
[ 7.000,	"Production",	3800.00,	11500.00	]
[ 8.000,	"Production",	4000.00,	7800.00	]
[ 11.000,	"Sales",	4100.00,	8400.00	]
[ 10.000,	"Sales",	4300.00,	8400.00	]
[ 9.000,	"Service",	4100.00,	4100.00	]
#SELECT id, dep_name, salary,
#       SUM(salary)  OVER  (PARTITION BY dep_name ORDER BY salary
#                           RANGE BETWEEN 100.0 PRECEDING AND 50.0 FOLLOWING) AS sum_over_range
#FROM   employee;
% sys.employee,	sys.employee,	sys.employee,	sys. # table_name
% id,	dep_name,	salary,	sum_over_range # name
% decimal,	varchar,	decimal,	decimal # type
% 20,	10,	9,	9 # length
[ 3.000,	"Management",	4000.00,	4000.00	]
[ 2.000,	"Management",	4400.00,	4400.00	]
[ 1.000,	"Management",	4500.00,	4500.00	]
[ 5.000,	"Production",	3500.00,	3500.00	]
[ 6.000,	"Production",	3600.00,	3600.00	]
[ 4.000,	"Production",	3700.00,	3700.00	]
[ 7.000,	"Production",	3800.00,	3800.00	]
[ 8.000,	"Production",	4000.00,	4000.00	]
[ 11.000,	"Sales",	4100.00,	4100.00	]
[ 10.000,	"Sales",	4300.00,	4300.00	]
[ 9.000,	"Service",	4100.00,	4100.00	]
#DROP TABLE employee;
#CREATE SCHEMA tutorial;
#CREATE TABLE tutorial.dc_bikeshare_q1_2012 (duration_seconds int, start_time timestamp, end_time timestamp, start_terminal varchar(100), end_terminal varchar(100), bike_id_nr int, member_type varchar(16));
#INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (155, '2012-01-05 12:30:10', '2012-01-05 12:21:05', 'DIEMEN', 'AMS', 1025, 'registered');
[ 1	]
#INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (165, '2012-01-05 12:30:10', '2012-01-05 12:21:15', 'DIEMEN', 'AMS', 2025, 'casual');
[ 1	]
#INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (155, '2012-01-06 16:30:10', '2012-01-06 18:21:05', 'DIEMEN', 'AMS', 1025, 'registered');
[ 1	]
#INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (165, '2012-01-06 16:30:10', '2012-01-06 18:21:15', 'DIEMEN', 'AMS', 2025, 'casual');
[ 1	]
#INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (55, '2012-01-07 10:30:10', '2012-01-07 10:31:05', 'AMS', 'AMS', 1025, 'registered');
[ 1	]
#INSERT INTO tutorial.dc_bikeshare_q1_2012 VALUES (65, '2012-01-07 10:30:10', '2012-01-07 10:31:15', 'AMS', 'AMS', 2025, 'casual');
[ 1	]
#SELECT * FROM tutorial.dc_bikeshare_q1_2012;
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012 # table_name
% duration_seconds,	start_time,	end_time,	start_terminal,	end_terminal,	bike_id_nr,	member_type # name
% int,	timestamp,	timestamp,	varchar,	varchar,	int,	varchar # type
% 3,	26,	26,	6,	3,	4,	10 # length
[ 155,	2012-01-05 12:30:10.000000,	2012-01-05 12:21:05.000000,	"DIEMEN",	"AMS",	1025,	"registered"	]
[ 165,	2012-01-05 12:30:10.000000,	2012-01-05 12:21:15.000000,	"DIEMEN",	"AMS",	2025,	"casual"	]
[ 155,	2012-01-06 16:30:10.000000,	2012-01-06 18:21:05.000000,	"DIEMEN",	"AMS",	1025,	"registered"	]
[ 165,	2012-01-06 16:30:10.000000,	2012-01-06 18:21:15.000000,	"DIEMEN",	"AMS",	2025,	"casual"	]
[ 55,	2012-01-07 10:30:10.000000,	2012-01-07 10:31:05.000000,	"AMS",	"AMS",	1025,	"registered"	]
[ 65,	2012-01-07 10:30:10.000000,	2012-01-07 10:31:15.000000,	"AMS",	"AMS",	2025,	"casual"	]
#SELECT duration_seconds,
#       cast(SUM(duration_seconds) OVER (ORDER BY start_time) as bigint) AS running_total
#  FROM tutorial.dc_bikeshare_q1_2012;
% tutorial.dc_bikeshare_q1_2012,	tutorial. # table_name
% duration_seconds,	running_total # name
% int,	int # type
% 3,	3 # length
[ 155,	320	]
[ 165,	320	]
[ 155,	640	]
[ 165,	640	]
[ 55,	760	]
[ 65,	760	]
#SELECT start_terminal,
#       duration_seconds,
#       cast(SUM(duration_seconds) OVER
#         (PARTITION BY start_terminal ORDER BY start_time) as bigint)
#         AS running_total
#  FROM tutorial.dc_bikeshare_q1_2012
# WHERE start_time < '2012-01-08';
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial. # table_name
% start_terminal,	duration_seconds,	running_total # name
% varchar,	int,	int # type
% 6,	3,	3 # length
[ "AMS",	55,	120	]
[ "AMS",	65,	120	]
[ "DIEMEN",	155,	320	]
[ "DIEMEN",	165,	320	]
[ "DIEMEN",	155,	640	]
[ "DIEMEN",	165,	640	]
#SELECT start_terminal,
#       duration_seconds,
#       cast(SUM(duration_seconds) OVER
#         (PARTITION BY start_terminal) as bigint) AS start_terminal_total
#  FROM tutorial.dc_bikeshare_q1_2012
# WHERE start_time < '2012-01-08';
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial. # table_name
% start_terminal,	duration_seconds,	start_terminal_total # name
% varchar,	int,	int # type
% 6,	3,	3 # length
[ "AMS",	55,	120	]
[ "AMS",	65,	120	]
[ "DIEMEN",	155,	640	]
[ "DIEMEN",	165,	640	]
[ "DIEMEN",	155,	640	]
[ "DIEMEN",	165,	640	]
#SELECT start_terminal,
#       duration_seconds,
#       cast(SUM(duration_seconds) OVER
#         (PARTITION BY start_terminal) as bigint) AS running_total,
#       COUNT(duration_seconds) OVER
#         (PARTITION BY start_terminal) AS running_count,
#       AVG(duration_seconds) OVER
#         (PARTITION BY start_terminal) AS running_avg
#  FROM tutorial.dc_bikeshare_q1_2012
# WHERE start_time < '2012-01-08';
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.,	tutorial.,	tutorial. # table_name
% start_terminal,	duration_seconds,	running_total,	running_count,	running_avg # name
% varchar,	int,	int,	bigint,	double # type
% 6,	3,	3,	1,	24 # length
[ "AMS",	55,	120,	2,	60	]
[ "AMS",	65,	120,	2,	60	]
[ "DIEMEN",	155,	640,	4,	160	]
[ "DIEMEN",	165,	640,	4,	160	]
[ "DIEMEN",	155,	640,	4,	160	]
[ "DIEMEN",	165,	640,	4,	160	]
#SELECT start_terminal,
#       duration_seconds,
#       cast(SUM(duration_seconds) OVER
#         (PARTITION BY start_terminal ORDER BY start_time) as bigint)
#         AS running_total,
#       COUNT(duration_seconds) OVER
#         (PARTITION BY start_terminal ORDER BY start_time)
#         AS running_count,
#       AVG(duration_seconds) OVER
#         (PARTITION BY start_terminal ORDER BY start_time)
#         AS running_avg
#  FROM tutorial.dc_bikeshare_q1_2012
# WHERE start_time < '2012-01-08';
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.,	tutorial.,	tutorial. # table_name
% start_terminal,	duration_seconds,	running_total,	running_count,	running_avg # name
% varchar,	int,	int,	bigint,	double # type
% 6,	3,	3,	1,	24 # length
[ "AMS",	55,	120,	2,	60	]
[ "AMS",	65,	120,	2,	60	]
[ "DIEMEN",	155,	320,	2,	160	]
[ "DIEMEN",	165,	320,	2,	160	]
[ "DIEMEN",	155,	640,	4,	160	]
[ "DIEMEN",	165,	640,	4,	160	]
#SELECT start_terminal,
#       start_time,
#       duration_seconds,
#       ROW_NUMBER() OVER (ORDER BY start_time)
#                    AS row_number
#  FROM tutorial.dc_bikeshare_q1_2012
# WHERE start_time < '2012-01-08';
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial. # table_name
% start_terminal,	start_time,	duration_seconds,	row_number # name
% varchar,	timestamp,	int,	int # type
% 6,	26,	3,	1 # length
[ "DIEMEN",	2012-01-05 12:30:10.000000,	155,	1	]
[ "DIEMEN",	2012-01-05 12:30:10.000000,	165,	2	]
[ "DIEMEN",	2012-01-06 16:30:10.000000,	155,	3	]
[ "DIEMEN",	2012-01-06 16:30:10.000000,	165,	4	]
[ "AMS",	2012-01-07 10:30:10.000000,	55,	5	]
[ "AMS",	2012-01-07 10:30:10.000000,	65,	6	]
#SELECT start_terminal,
#       start_time,
#       duration_seconds,
#       ROW_NUMBER() OVER (PARTITION BY start_terminal
#                          ORDER BY start_time)
#                    AS row_number
#  FROM tutorial.dc_bikeshare_q1_2012
# WHERE start_time < '2012-01-08';
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial. # table_name
% start_terminal,	start_time,	duration_seconds,	row_number # name
% varchar,	timestamp,	int,	int # type
% 6,	26,	3,	1 # length
[ "AMS",	2012-01-07 10:30:10.000000,	55,	1	]
[ "AMS",	2012-01-07 10:30:10.000000,	65,	2	]
[ "DIEMEN",	2012-01-05 12:30:10.000000,	155,	1	]
[ "DIEMEN",	2012-01-05 12:30:10.000000,	165,	2	]
[ "DIEMEN",	2012-01-06 16:30:10.000000,	155,	3	]
[ "DIEMEN",	2012-01-06 16:30:10.000000,	165,	4	]
#SELECT start_terminal,
#       duration_seconds,
#       RANK() OVER (PARTITION BY start_terminal
#                    ORDER BY start_time)
#              AS rank
#  FROM tutorial.dc_bikeshare_q1_2012
# WHERE start_time < '2012-01-08';
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial. # table_name
% start_terminal,	duration_seconds,	rank # name
% varchar,	int,	int # type
% 6,	3,	1 # length
[ "AMS",	55,	1	]
[ "AMS",	65,	1	]
[ "DIEMEN",	155,	1	]
[ "DIEMEN",	165,	1	]
[ "DIEMEN",	155,	3	]
[ "DIEMEN",	165,	3	]
#SELECT start_terminal,
#       duration_seconds,
#       NTILE(4) OVER
#         (PARTITION BY start_terminal ORDER BY duration_seconds)
#          AS quartile,
#       NTILE(5) OVER
#         (PARTITION BY start_terminal ORDER BY duration_seconds)
#         AS quintile,
#       NTILE(100) OVER
#         (PARTITION BY start_terminal ORDER BY duration_seconds)
#         AS percentile
#  FROM tutorial.dc_bikeshare_q1_2012
# WHERE start_time < '2012-01-08'
# ORDER BY start_terminal, duration_seconds;
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.,	tutorial.,	tutorial. # table_name
% start_terminal,	duration_seconds,	quartile,	quintile,	percentile # name
% varchar,	int,	tinyint,	tinyint,	tinyint # type
% 6,	3,	1,	1,	1 # length
[ "AMS",	55,	1,	1,	1	]
[ "AMS",	65,	2,	2,	2	]
[ "DIEMEN",	155,	1,	1,	1	]
[ "DIEMEN",	155,	2,	2,	2	]
[ "DIEMEN",	165,	3,	3,	3	]
[ "DIEMEN",	165,	4,	4,	4	]
#SELECT start_terminal,
#       duration_seconds,
#       LAG(duration_seconds, 1) OVER
#         (PARTITION BY start_terminal ORDER BY duration_seconds) AS lag,
#       LEAD(duration_seconds, 1) OVER
#         (PARTITION BY start_terminal ORDER BY duration_seconds) AS lead
#  FROM tutorial.dc_bikeshare_q1_2012
# WHERE start_time < '2012-01-08'
# ORDER BY start_terminal, duration_seconds;
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.,	tutorial. # table_name
% start_terminal,	duration_seconds,	lag,	lead # name
% varchar,	int,	int,	int # type
% 6,	3,	3,	3 # length
[ "AMS",	55,	NULL,	65	]
[ "AMS",	65,	55,	NULL	]
[ "DIEMEN",	155,	NULL,	155	]
[ "DIEMEN",	155,	155,	165	]
[ "DIEMEN",	165,	155,	165	]
[ "DIEMEN",	165,	165,	NULL	]
#SELECT start_terminal,
#       duration_seconds,
#       duration_seconds -LAG(duration_seconds, 1) OVER
#         (PARTITION BY start_terminal ORDER BY duration_seconds)
#         AS difference
#  FROM tutorial.dc_bikeshare_q1_2012
# WHERE start_time < '2012-01-08'
# ORDER BY start_terminal, duration_seconds;
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial. # table_name
% start_terminal,	duration_seconds,	difference # name
% varchar,	int,	bigint # type
% 6,	3,	2 # length
[ "AMS",	55,	NULL	]
[ "AMS",	65,	10	]
[ "DIEMEN",	155,	NULL	]
[ "DIEMEN",	155,	0	]
[ "DIEMEN",	165,	10	]
[ "DIEMEN",	165,	0	]
#SELECT *
#  FROM (
#    SELECT start_terminal,
#           duration_seconds,
#           duration_seconds -LAG(duration_seconds, 1) OVER
#             (PARTITION BY start_terminal ORDER BY duration_seconds)
#             AS difference
#      FROM tutorial.dc_bikeshare_q1_2012
#     WHERE start_time < '2012-01-08'
#     ORDER BY start_terminal, duration_seconds
#       ) sub
# WHERE sub.difference IS NOT NULL;
% tutorial.sub,	tutorial.sub,	tutorial.sub # table_name
% start_terminal,	duration_seconds,	difference # name
% varchar,	int,	bigint # type
% 6,	3,	2 # length
[ "AMS",	65,	10	]
[ "DIEMEN",	155,	0	]
[ "DIEMEN",	165,	10	]
[ "DIEMEN",	165,	0	]
#SELECT start_terminal,
#       duration_seconds,
#       NTILE(4) OVER
#         (PARTITION BY start_terminal ORDER BY duration_seconds)
#         AS quartile,
#       NTILE(5) OVER
#         (PARTITION BY start_terminal ORDER BY duration_seconds)
#         AS quintile,
#       NTILE(100) OVER
#         (PARTITION BY start_terminal ORDER BY duration_seconds)
#         AS percentile
#  FROM tutorial.dc_bikeshare_q1_2012
# WHERE start_time < '2012-01-08'
# ORDER BY start_terminal, duration_seconds;
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.,	tutorial.,	tutorial. # table_name
% start_terminal,	duration_seconds,	quartile,	quintile,	percentile # name
% varchar,	int,	tinyint,	tinyint,	tinyint # type
% 6,	3,	1,	1,	1 # length
[ "AMS",	55,	1,	1,	1	]
[ "AMS",	65,	2,	2,	2	]
[ "DIEMEN",	155,	1,	1,	1	]
[ "DIEMEN",	155,	2,	2,	2	]
[ "DIEMEN",	165,	3,	3,	3	]
[ "DIEMEN",	165,	4,	4,	4	]
#SELECT start_terminal,
#       duration_seconds,
#       NTILE(4) OVER ntile_window AS quartile,
#       NTILE(5) OVER ntile_window AS quintile,
#       NTILE(100) OVER ntile_window AS percentile
#  FROM tutorial.dc_bikeshare_q1_2012
#WINDOW ntile_window AS
#         (PARTITION BY start_terminal ORDER BY duration_seconds)
# WHERE start_time < '2012-01-08'
# ORDER BY start_terminal, duration_seconds;
% tutorial.dc_bikeshare_q1_2012,	tutorial.dc_bikeshare_q1_2012,	tutorial.,	tutorial.,	tutorial. # table_name
% start_terminal,	duration_seconds,	quartile,	quintile,	percentile # name
% varchar,	int,	tinyint,	tinyint,	tinyint # type
% 6,	3,	1,	1,	1 # length
[ "AMS",	55,	1,	1,	1	]
[ "AMS",	65,	2,	2,	2	]
[ "DIEMEN",	155,	1,	1,	1	]
[ "DIEMEN",	155,	2,	2,	2	]
[ "DIEMEN",	165,	3,	3,	3	]
[ "DIEMEN",	165,	4,	4,	4	]
#DROP TABLE tutorial.dc_bikeshare_q1_2012;
#DROP SCHEMA tutorial;

# 15:12:25 >  
# 15:12:25 >  "Done."
# 15:12:25 >  

