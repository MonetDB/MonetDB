stdout of test 'trigger_action` in directory 'sql/test/Triggers` itself:


# 20:28:19 >  
# 20:28:19 >   mserver5 "--config=/ufs/niels/scratch/monetdb/Linux-x86_64/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=4 --set "monet_mod_path=/ufs/niels/scratch/monetdb/Linux-x86_64/lib/MonetDB5:/ufs/niels/scratch/monetdb/Linux-x86_64/lib/MonetDB5/lib:/ufs/niels/scratch/monetdb/Linux-x86_64/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/niels/scratch/monetdb/Linux-x86_64/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/niels/scratch/monetdb/Linux-x86_64/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=35138 --set xrpc_port=49382 --set monet_prompt= --trace  "--dbname=mTests_src_test_Triggers" --set mal_listing=0 "--dbinit= include sql;" ; echo ; echo Over..
# 20:28:19 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_src_test_Triggers', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://alf.ins.cwi.nl:35138/
# MonetDB/SQL module v2.27.0 loaded

#function user.main():void;
#    clients.quit();
#end main;


# 16:07:37 >  
# 16:07:37 >  mclient -lsql -ftest -i -e --host=volund --port=35971 
# 16:07:37 >  

#create table t_4_1 (id int, name varchar(1024));
#insert into t_4_1 values(10, 'monetdb');
[ 1	]
#insert into t_4_1 values(20, 'monet');
[ 1	]
#create trigger test_4_1
#	after update on t_4_1 referencing old row as old_row
#	for each statement insert into t_4_1 values(0, 'update_old_row_statement');
#create trigger test_4_2
#	after update on t_4_1 referencing new row new_row
#	for each statement insert into t_4_1 values(1, 'update_new_row_statement');
#create trigger test_4_3
#	after update on t_4_1
#	for each statement insert into t_4_1 values(2, 'update_statement');
#create trigger test_4_4
#	after update on t_4_1 referencing new row as new_row
#	for each row insert into t_4_1 values(3, 'update_row');
#create trigger test_4_5
#	after update on t_4_1
#	for each statement 
#	when id >0 insert into t_4_1 values(4, 'update_when_statement_true');
#create trigger test_4_6
#	after update on t_4_1 referencing new row as new_row
#	for each row 
#	when new_row.id >0 insert into t_4_1 values(5, 'update_when_row_true');
#create trigger test_4_7
#	after update on t_4_1
#	for each statement 
#	when id >1000 insert into t_4_1 values(6, 'update_when_statement_false');
#create trigger test_4_8
#	after update on t_4_1 referencing new row as new_row
#	for each row 
#	when (new_row."id">1000) insert into t_4_1 values(7, 'update_when_row_false');
#select * from t_4_1;
% sys.t_4_1,	sys.t_4_1 # table_name
% id,	name # name
% int,	varchar # type
% 2,	7 # length
[ 10,	"monetdb"	]
[ 20,	"monet"	]
#delete from t_4_1 where "id" >-1;
[ 2	]
#drop trigger test_4_1;
#drop trigger test_4_2;
#drop trigger test_4_3;
#drop trigger test_4_4;
#drop trigger test_4_5;
#drop trigger test_4_6;
#drop trigger test_4_7;
#drop trigger test_4_8;
#insert into t_4_1 values(10, 'monetdb');
[ 1	]
#insert into t_4_1 values(20, 'monet');
[ 1	]
#create trigger test_4_1
#	after update on t_4_1
#	BEGIN ATOMIC
#		insert into t_4_1 values(1,'first_insertion');
#		insert into t_4_1 values(2,'second_insertion');
#	END;
#create trigger test_4_2
#	after update on t_4_1
#	BEGIN ATOMIC
#		insert into t_4_1 values(3,'third_insertion');
#	END;
#create trigger test_4_3
#	after update on t_4_1
#	BEGIN ATOMIC
#		insert into t_4_1 values(4,'fourth_insertion');
#		insert into t_4_1 values(5,'fifth_insertion');
#	END;
#update t_4_1 set name = 'mo' where id = 10;
[ 1	]
#select * from t_4_1;
% sys.t_4_1,	sys.t_4_1 # table_name
% id,	name # name
% int,	varchar # type
% 2,	16 # length
[ 10,	"mo"	]
[ 20,	"monet"	]
[ 1,	"first_insertion"	]
[ 2,	"second_insertion"	]
[ 3,	"third_insertion"	]
[ 4,	"fourth_insertion"	]
[ 5,	"fifth_insertion"	]

# 21:20:08 >  
# 21:20:08 >  Done.
# 21:20:08 >  

