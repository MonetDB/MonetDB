stdout of test 'bart-crash.Bug-3057` in directory 'sql/test/BugTracker-2012` itself:


# 14:28:13 >  
# 14:28:13 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/ufs/sjoerd/Monet-candidate/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=30841" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_test_BugTracker-2012" "--set" "mal_listing=0"
# 14:28:13 >  

# MonetDB 5 server v11.9.0
# This is an unreleased version
# Serving database 'mTests_test_BugTracker-2012', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.629 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.ins.cwi.nl:30841/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_history.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 39_analytics.sql
# loading sql script: 40_geom.sql
# loading sql script: 80_udf.sql
# loading sql script: 99_system.sql

# 14:28:13 >  
# 14:28:13 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=madrid" "--port=30841"
# 14:28:13 >  

#start transaction;
#create table im
#  (imageid int
#  ,ds_id int
#  ,bmaj double
#  ,primary key (imageid)
#  )
#;
#create table xtr
#  (xtrsrcid int
#  ,image_id int
#  ,zone int
#  ,ra double
#  ,decl double
#  ,ra_err double
#  ,decl_err double
#  ,x double
#  ,y double
#  ,z double
#  ,primary key (xtrsrcid)
#  ,foreign key (image_id) references im (imageid)
#  )
#;
#CREATE FUNCTION alpha(theta DOUBLE, decl DOUBLE) RETURNS DOUBLE
#BEGIN
#  IF ABS(decl) + theta > 89.9 THEN
#    RETURN 180;
#  ELSE
#    RETURN DEGREES(ABS(ATAN(SIN(RADIANS(theta)) / SQRT(ABS(COS(RADIANS(decl -
#theta)) * COS(RADIANS(decl + theta))))))) ;
#  END IF ;
#END
#;
#create table rc
#  (xtrsrc_id int
#  ,ds_id int
#  ,wm_ra double
#  ,wm_decl double
#  ,wm_ra_err double
#  ,wm_decl_err double
#  ,x double
#  ,y double
#  ,z double
#  )
#;
#insert into rc values (1, 1, 331.79744325500002, 43.448623302500003,
#0.11882242138100001, 0.116043821024, 0.63980334843300002, -0.34309630504999999,
#0.68770386126299998);
[ 1	]
#insert into im values (2,1,0.0063888886943499999);
[ 1	]
#insert into xtr values (1, 2, 43, 331.79750356540063, 43.448645530624432,
#0.45809725743310992, 0.48429103640614812, 0.6398034744584673,
#-0.34309550549403994, 0.68770414291369697);
[ 1	]
#select t.xtrsrc_id
#  from (SELECT r.xtrsrc_id
#              ,r.x * x.x + r.y * x.y + r.z * x.z AS dist
#              ,COS(RADIANS(im0.bmaj)) AS dist_lim
#          FROM rc r
#              ,xtr x
#              ,im im0
#         WHERE x.image_id = 2
#           AND x.image_id = im0.imageid
#           AND im0.ds_id = r.ds_id
#           AND x.zone BETWEEN CAST(FLOOR(r.wm_decl - im0.bmaj) as integer)
#                          AND CAST(FLOOR(r.wm_decl - im0.bmaj) as integer)
#           AND x.decl BETWEEN r.wm_decl - im0.bmaj
% sys.t # table_name
% xtrsrc_id # name
% int # type
% 1 # length
[ 1	]
#SELECT r.xtrsrc_id
#  FROM rc r
#      ,xtr x
#      ,im im0
# WHERE x.image_id = 2
#   AND x.image_id = im0.imageid
#   AND im0.ds_id = r.ds_id
#   AND x.zone BETWEEN CAST(FLOOR(r.wm_decl - im0.bmaj) as integer)
#                  AND CAST(FLOOR(r.wm_decl - im0.bmaj) as integer)
#   AND x.decl BETWEEN r.wm_decl - im0.bmaj
#                  AND r.wm_decl + im0.bmaj
#   AND x.ra BETWEEN r.wm_ra - alpha(im0.bmaj, r.wm_decl)
#                AND r.wm_ra + alpha(im0.bmaj, r.wm_decl)
#   AND r.x * x.x + r.y * x.y + r.z * x.z > COS(RADIANS(im0.bmaj))
% sys.r # table_name
% xtrsrc_id # name
% int # type
% 1 # length
[ 1	]
#rollback;

# 14:28:13 >  
# 14:28:13 >  "Done."
# 14:28:13 >  

