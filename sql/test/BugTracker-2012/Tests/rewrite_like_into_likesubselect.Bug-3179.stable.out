stdout of test 'rewrite_like_into_likesubselect.Bug-3179` in directory 'sql/test/BugTracker-2012` itself:


# 13:28:50 >  
# 13:28:50 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=4" "--set" "mapi_open=true" "--set" "mapi_port=31819" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_test_BugTracker-2012" "--set" "mal_listing=0"
# 13:28:50 >  

# MonetDB 5 server v11.14.0
# This is an unreleased version
# Serving database 'mTests_test_BugTracker-2012', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 3.778 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://niels.nesco.mine.nu:31819/
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded


# 13:28:50 >  
# 13:28:50 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=niels" "--port=31819"
# 13:28:50 >  

#start transaction;
#explain select name,func from functions where name like '%optimizers%';
% .explain # table_name
% mal # name
% clob # type
% 146 # length
function user.main():void;
    X_1:void := querylog.define("explain select name,func from functions where name like \\'%optimizers%\\';":str, "sequential_pipe":str, 27:int);
    X_37:bat[:str] := bat.pack("sys.functions":str, "sys.functions":str);
    X_38:bat[:str] := bat.pack("name":str, "func":str);
    X_39:bat[:str] := bat.pack("varchar":str, "varchar":str);
    X_40:bat[:int] := bat.pack(256:int, 8196:int);
    X_41:bat[:int] := bat.pack(0:int, 0:int);
    X_4:int := sql.mvc();
    X_17:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 0:int);
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "functions":str);
    C_85:bat[:oid] := algebra.likeselect(X_17:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, false:bit);
    (X_19:bat[:oid], X_20:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 2:int);
    C_86:bat[:oid] := algebra.likeselect(X_20:bat[:str], nil:bat[:oid], "%optimizers%":str, "":str, false:bit);
    X_18:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 1:int);
    C_88:bat[:oid] := algebra.likeselect(X_18:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, false:bit);
    C_32:bat[:oid] := sql.subdelta(C_85:bat[:oid], C_5:bat[:oid], X_19:bat[:oid], C_86:bat[:oid], C_88:bat[:oid]);
    X_34:bat[:str] := sql.projectdelta(C_32:bat[:oid], X_17:bat[:str], X_19:bat[:oid], X_20:bat[:str], X_18:bat[:str]);
    X_22:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 0:int);
    (X_25:bat[:oid], X_26:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 2:int);
    X_24:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 1:int);
    X_35:bat[:str] := sql.projectdelta(C_32:bat[:oid], X_22:bat[:str], X_25:bat[:oid], X_26:bat[:str], X_24:bat[:str]);
    sql.resultSet(X_37:bat[:str], X_38:bat[:str], X_39:bat[:str], X_40:bat[:int], X_41:bat[:int], X_34:bat[:str], X_35:bat[:str]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 1 time=2 usec 
#evaluate             actions= 1 time=12 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 5 time=20 usec 
#aliases              actions= 3 time=4 usec 
#mergetable           actions= 0 time=17 usec 
#deadcode             actions= 2 time=4 usec 
#aliases              actions= 0 time=3 usec 
#constants            actions= 6 time=5 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=2 usec 
#reorder              actions= 1 time=16 usec 
#deadcode             actions= 0 time=4 usec 
#reduce               actions=32 time=7 usec 
#matpack              actions= 0 time=1 usec 
#multiplex            actions= 0 time=2 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=15 usec 
#garbageCollector     actions= 1 time=20 usec 
#total                actions= 1 time=549 usec 
#explain select name,func from functions where not_contains(name, 'optimizers');
% .explain # table_name
% mal # name
% clob # type
% 150 # length
function user.main():void;
    X_1:void := querylog.define("explain select name,func from functions where name not like \\'%optimizers%\\';":str, "sequential_pipe":str, 27:int);
    X_37:bat[:str] := bat.pack("sys.functions":str, "sys.functions":str);
    X_38:bat[:str] := bat.pack("name":str, "func":str);
    X_39:bat[:str] := bat.pack("varchar":str, "varchar":str);
    X_40:bat[:int] := bat.pack(256:int, 8196:int);
    X_41:bat[:int] := bat.pack(0:int, 0:int);
    X_4:int := sql.mvc();
    X_17:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 0:int);
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "functions":str);
    C_85:bat[:oid] := algebra.likeselect(X_17:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, true:bit);
    (X_19:bat[:oid], X_20:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 2:int);
    C_86:bat[:oid] := algebra.likeselect(X_20:bat[:str], nil:bat[:oid], "%optimizers%":str, "":str, true:bit);
    X_18:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 1:int);
    C_88:bat[:oid] := algebra.likeselect(X_18:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, true:bit);
    C_32:bat[:oid] := sql.subdelta(C_85:bat[:oid], C_5:bat[:oid], X_19:bat[:oid], C_86:bat[:oid], C_88:bat[:oid]);
    X_34:bat[:str] := sql.projectdelta(C_32:bat[:oid], X_17:bat[:str], X_19:bat[:oid], X_20:bat[:str], X_18:bat[:str]);
    X_22:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 0:int);
    (X_25:bat[:oid], X_26:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 2:int);
    X_24:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 1:int);
    X_35:bat[:str] := sql.projectdelta(C_32:bat[:oid], X_22:bat[:str], X_25:bat[:oid], X_26:bat[:str], X_24:bat[:str]);
    sql.resultSet(X_37:bat[:str], X_38:bat[:str], X_39:bat[:str], X_40:bat[:int], X_41:bat[:int], X_34:bat[:str], X_35:bat[:str]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 1 time=3 usec 
#evaluate             actions= 1 time=16 usec 
#emptybind            actions= 0 time=5 usec 
#pushselect           actions= 2 time=31 usec 
#aliases              actions= 6 time=22 usec 
#mergetable           actions= 0 time=27 usec 
#deadcode             actions= 3 time=19 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 5 time=25 usec 
#commonTerms          actions= 0 time=6 usec 
#projectionpath       actions= 0 time=4 usec 
#reorder              actions= 1 time=33 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=71 time=40 usec 
#matpack              actions= 0 time=3 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=17 usec 
#garbageCollector     actions= 1 time=21 usec 
#total                actions= 1 time=499 usec 
#explain select name,func from functions where icontains(name, 'optimizers');
% .explain # table_name
% mal # name
% clob # type
% 147 # length
function user.main():void;
    X_1:void := querylog.define("explain select name,func from functions where name ilike \\'%optimizers%\\';":str, "sequential_pipe":str, 27:int);
    X_37:bat[:str] := bat.pack("sys.functions":str, "sys.functions":str);
    X_38:bat[:str] := bat.pack("name":str, "func":str);
    X_39:bat[:str] := bat.pack("varchar":str, "varchar":str);
    X_40:bat[:int] := bat.pack(256:int, 8196:int);
    X_41:bat[:int] := bat.pack(0:int, 0:int);
    X_4:int := sql.mvc();
    X_17:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 0:int);
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "functions":str);
    C_85:bat[:oid] := algebra.ilikeselect(X_17:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, false:bit);
    (X_19:bat[:oid], X_20:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 2:int);
    C_86:bat[:oid] := algebra.ilikeselect(X_20:bat[:str], nil:bat[:oid], "%optimizers%":str, "":str, false:bit);
    X_18:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 1:int);
    C_88:bat[:oid] := algebra.ilikeselect(X_18:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, false:bit);
    C_32:bat[:oid] := sql.subdelta(C_85:bat[:oid], C_5:bat[:oid], X_19:bat[:oid], C_86:bat[:oid], C_88:bat[:oid]);
    X_34:bat[:str] := sql.projectdelta(C_32:bat[:oid], X_17:bat[:str], X_19:bat[:oid], X_20:bat[:str], X_18:bat[:str]);
    X_22:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 0:int);
    (X_25:bat[:oid], X_26:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 2:int);
    X_24:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 1:int);
    X_35:bat[:str] := sql.projectdelta(C_32:bat[:oid], X_22:bat[:str], X_25:bat[:oid], X_26:bat[:str], X_24:bat[:str]);
    sql.resultSet(X_37:bat[:str], X_38:bat[:str], X_39:bat[:str], X_40:bat[:int], X_41:bat[:int], X_34:bat[:str], X_35:bat[:str]);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=0 usec 
#coercion             actions= 2 time=4 usec 
#aliases              actions= 2 time=5 usec 
#evaluate             actions= 0 time=5 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 2 time=16 usec 
#aliases              actions= 0 time=0 usec 
#mergetable           actions= 0 time=26 usec 
#deadcode             actions= 6 time=8 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 2 time=5 usec 
#commonTerms          actions= 0 time=7 usec 
#projectionpath       actions= 0 time=1 usec 
#deadcode             actions= 0 time=6 usec 
#reorder              actions= 1 time=17 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=8 usec 
#explain select name,func from functions where name not ilike '%optimizers%';
% .explain # table_name
% mal # name
% clob # type
% 151 # length
function user.main():void;
    X_1:void := querylog.define("explain select name,func from functions where name not ilike \\'%optimizers%\\';":str, "sequential_pipe":str, 27:int);
    X_37:bat[:str] := bat.pack("sys.functions":str, "sys.functions":str);
    X_38:bat[:str] := bat.pack("name":str, "func":str);
    X_39:bat[:str] := bat.pack("varchar":str, "varchar":str);
    X_40:bat[:int] := bat.pack(256:int, 8196:int);
    X_41:bat[:int] := bat.pack(0:int, 0:int);
    X_4:int := sql.mvc();
    X_17:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 0:int);
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "functions":str);
    C_85:bat[:oid] := algebra.ilikeselect(X_17:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, true:bit);
    (X_19:bat[:oid], X_20:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 2:int);
    C_86:bat[:oid] := algebra.ilikeselect(X_20:bat[:str], nil:bat[:oid], "%optimizers%":str, "":str, true:bit);
    X_18:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 1:int);
    C_88:bat[:oid] := algebra.ilikeselect(X_18:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, true:bit);
    C_32:bat[:oid] := sql.subdelta(C_85:bat[:oid], C_5:bat[:oid], X_19:bat[:oid], C_86:bat[:oid], C_88:bat[:oid]);
    X_34:bat[:str] := sql.projectdelta(C_32:bat[:oid], X_17:bat[:str], X_19:bat[:oid], X_20:bat[:str], X_18:bat[:str]);
    X_22:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 0:int);
    (X_25:bat[:oid], X_26:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 2:int);
    X_24:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 1:int);
    X_35:bat[:str] := sql.projectdelta(C_32:bat[:oid], X_22:bat[:str], X_25:bat[:oid], X_26:bat[:str], X_24:bat[:str]);
    sql.resultSet(X_37:bat[:str], X_38:bat[:str], X_39:bat[:str], X_40:bat[:int], X_41:bat[:int], X_34:bat[:str], X_35:bat[:str]);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 1 time=3 usec 
#evaluate             actions= 1 time=16 usec 
#emptybind            actions= 0 time=5 usec 
#pushselect           actions= 2 time=29 usec 
#aliases              actions= 6 time=21 usec 
#mergetable           actions= 0 time=25 usec 
#deadcode             actions= 3 time=19 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 5 time=24 usec 
#commonTerms          actions= 0 time=5 usec 
#projectionpath       actions= 0 time=4 usec 
#reorder              actions= 1 time=37 usec 
#deadcode             actions= 0 time=5 usec 
#reduce               actions=71 time=39 usec 
#matpack              actions= 0 time=3 usec 
#querylog             actions= 0 time=0 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=26 usec 
#total                actions= 1 time=457 usec 
#create function contains(str string, substr string)
#returns boolean
#begin
#	  return str like '%'||substr||'%';
#end; 
#create function not_contains(str string, substr string)
#returns boolean
#begin
#	  return str not like '%'||substr||'%';
#end; 
#create function icontains(str string, substr string)
#returns boolean
#begin
#	  return str ilike '%'||substr||'%';
#end; 
#create function not_icontains(str string, substr string)
#returns boolean
#begin
#	  return str not ilike '%'||substr||'%';
#end; 
#explain select name,func from functions where contains(name, 'optimizers');
% .explain # table_name
% mal # name
% clob # type
% 150 # length
function user.main():void;
    X_1:void := querylog.define("explain select name,func from functions where contains(name, \\'optimizers\\');":str, "sequential_pipe":str, 28:int);
    X_40:bat[:str] := bat.pack("sys.functions":str, "sys.functions":str);
    X_41:bat[:str] := bat.pack("name":str, "func":str);
    X_42:bat[:str] := bat.pack("varchar":str, "varchar":str);
    X_43:bat[:int] := bat.pack(256:int, 8196:int);
    X_44:bat[:int] := bat.pack(0:int, 0:int);
    X_4:int := sql.mvc();
    X_17:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 0:int);
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "functions":str);
    C_135:bat[:oid] := algebra.likeselect(X_17:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, false:bit, false:bit);
    (X_19:bat[:oid], X_20:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 2:int);
    C_136:bat[:oid] := algebra.likeselect(X_20:bat[:str], nil:bat[:oid], "%optimizers%":str, "":str, false:bit, false:bit);
    X_18:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 1:int);
    C_138:bat[:oid] := algebra.likeselect(X_18:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, false:bit, false:bit);
    C_35:bat[:oid] := sql.subdelta(C_135:bat[:oid], C_5:bat[:oid], X_19:bat[:oid], C_136:bat[:oid], C_138:bat[:oid]);
    X_37:bat[:str] := sql.projectdelta(C_35:bat[:oid], X_17:bat[:str], X_19:bat[:oid], X_20:bat[:str], X_18:bat[:str]);
    X_22:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 0:int);
    (X_25:bat[:oid], X_26:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 2:int);
    X_24:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 1:int);
    X_38:bat[:str] := sql.projectdelta(C_35:bat[:oid], X_22:bat[:str], X_25:bat[:oid], X_26:bat[:str], X_24:bat[:str]);
    sql.resultSet(X_40:bat[:str], X_41:bat[:str], X_42:bat[:str], X_43:bat[:int], X_44:bat[:int], X_37:bat[:str], X_38:bat[:str]);
end user.main;
#inline               actions= 0 time=5 usec 
#remap                actions= 1 time=39 usec 
#costmodel            actions= 1 time=0 usec 
#coercion             actions= 4 time=6 usec 
#aliases              actions= 7 time=7 usec 
#evaluate             actions= 2 time=16 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 5 time=18 usec 
#aliases              actions= 4 time=6 usec 
#mergetable           actions= 0 time=25 usec 
#deadcode             actions= 2 time=7 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 3 time=8 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=2 usec 
#deadcode             actions= 0 time=6 usec 
#reorder              actions= 1 time=19 usec 
#matpack              actions= 0 time=1 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=5 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=18 usec 
#total                actions=27 time=256 usec 
#explain select name,func from functions where not_contains(name, 'optimizers');
% .explain # table_name
% mal # name
% clob # type
% 154 # length
function user.main():void;
    X_1:void := querylog.define("explain select name,func from functions where not_contains(name, \\'optimizers\\');":str, "sequential_pipe":str, 28:int);
    X_40:bat[:str] := bat.pack("sys.functions":str, "sys.functions":str);
    X_41:bat[:str] := bat.pack("name":str, "func":str);
    X_42:bat[:str] := bat.pack("varchar":str, "varchar":str);
    X_43:bat[:int] := bat.pack(256:int, 8196:int);
    X_44:bat[:int] := bat.pack(0:int, 0:int);
    X_4:int := sql.mvc();
    X_17:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 0:int);
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "functions":str);
    C_135:bat[:oid] := algebra.likeselect(X_17:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, false:bit, true:bit);
    (X_19:bat[:oid], X_20:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 2:int);
    C_136:bat[:oid] := algebra.likeselect(X_20:bat[:str], nil:bat[:oid], "%optimizers%":str, "":str, false:bit, true:bit);
    X_18:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 1:int);
    C_138:bat[:oid] := algebra.likeselect(X_18:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, false:bit, true:bit);
    C_35:bat[:oid] := sql.subdelta(C_135:bat[:oid], C_5:bat[:oid], X_19:bat[:oid], C_136:bat[:oid], C_138:bat[:oid]);
    X_37:bat[:str] := sql.projectdelta(C_35:bat[:oid], X_17:bat[:str], X_19:bat[:oid], X_20:bat[:str], X_18:bat[:str]);
    X_22:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 0:int);
    (X_25:bat[:oid], X_26:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 2:int);
    X_24:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 1:int);
    X_38:bat[:str] := sql.projectdelta(C_35:bat[:oid], X_22:bat[:str], X_25:bat[:oid], X_26:bat[:str], X_24:bat[:str]);
    sql.resultSet(X_40:bat[:str], X_41:bat[:str], X_42:bat[:str], X_43:bat[:int], X_44:bat[:int], X_37:bat[:str], X_38:bat[:str]);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 1 time=35 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 3 time=4 usec 
#aliases              actions= 7 time=7 usec 
#evaluate             actions= 2 time=14 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 5 time=17 usec 
#aliases              actions= 4 time=5 usec 
#mergetable           actions= 0 time=24 usec 
#deadcode             actions= 2 time=7 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 3 time=8 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=2 usec 
#deadcode             actions= 0 time=5 usec 
#reorder              actions= 1 time=18 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=0 usec 
#deadcode             actions= 0 time=6 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=17 usec 
#total                actions=27 time=245 usec 
#explain select name,func from functions where icontains(name, 'optimizers');
% .explain # table_name
% mal # name
% clob # type
% 151 # length
function user.main():void;
    X_1:void := querylog.define("explain select name,func from functions where icontains(name, \\'optimizers\\');":str, "sequential_pipe":str, 28:int);
    X_40:bat[:str] := bat.pack("sys.functions":str, "sys.functions":str);
    X_41:bat[:str] := bat.pack("name":str, "func":str);
    X_42:bat[:str] := bat.pack("varchar":str, "varchar":str);
    X_43:bat[:int] := bat.pack(256:int, 8196:int);
    X_44:bat[:int] := bat.pack(0:int, 0:int);
    X_4:int := sql.mvc();
    X_17:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 0:int);
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "functions":str);
    C_135:bat[:oid] := algebra.likeselect(X_17:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, true:bit, false:bit);
    (X_19:bat[:oid], X_20:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 2:int);
    C_136:bat[:oid] := algebra.likeselect(X_20:bat[:str], nil:bat[:oid], "%optimizers%":str, "":str, true:bit, false:bit);
    X_18:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 1:int);
    C_138:bat[:oid] := algebra.likeselect(X_18:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, true:bit, false:bit);
    C_35:bat[:oid] := sql.subdelta(C_135:bat[:oid], C_5:bat[:oid], X_19:bat[:oid], C_136:bat[:oid], C_138:bat[:oid]);
    X_37:bat[:str] := sql.projectdelta(C_35:bat[:oid], X_17:bat[:str], X_19:bat[:oid], X_20:bat[:str], X_18:bat[:str]);
    X_22:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 0:int);
    (X_25:bat[:oid], X_26:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 2:int);
    X_24:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 1:int);
    X_38:bat[:str] := sql.projectdelta(C_35:bat[:oid], X_22:bat[:str], X_25:bat[:oid], X_26:bat[:str], X_24:bat[:str]);
    sql.resultSet(X_40:bat[:str], X_41:bat[:str], X_42:bat[:str], X_43:bat[:int], X_44:bat[:int], X_37:bat[:str], X_38:bat[:str]);
end user.main;
#inline               actions= 0 time=4 usec 
#remap                actions= 1 time=35 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 3 time=5 usec 
#aliases              actions= 7 time=7 usec 
#evaluate             actions= 2 time=14 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 5 time=16 usec 
#aliases              actions= 4 time=6 usec 
#mergetable           actions= 0 time=24 usec 
#deadcode             actions= 2 time=8 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 3 time=8 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=2 usec 
#deadcode             actions= 0 time=6 usec 
#reorder              actions= 1 time=18 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#deadcode             actions= 0 time=5 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=18 usec 
#total                actions=27 time=244 usec 
#explain select name,func from functions where not_icontains(name, 'optimizers');
% .explain # table_name
% mal # name
% clob # type
% 155 # length
function user.main():void;
    X_1:void := querylog.define("explain select name,func from functions where not_icontains(name, \\'optimizers\\');":str, "sequential_pipe":str, 28:int);
    X_40:bat[:str] := bat.pack("sys.functions":str, "sys.functions":str);
    X_41:bat[:str] := bat.pack("name":str, "func":str);
    X_42:bat[:str] := bat.pack("varchar":str, "varchar":str);
    X_43:bat[:int] := bat.pack(256:int, 8196:int);
    X_44:bat[:int] := bat.pack(0:int, 0:int);
    X_4:int := sql.mvc();
    X_17:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 0:int);
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "functions":str);
    C_135:bat[:oid] := algebra.likeselect(X_17:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, true:bit, true:bit);
    (X_19:bat[:oid], X_20:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 2:int);
    C_136:bat[:oid] := algebra.likeselect(X_20:bat[:str], nil:bat[:oid], "%optimizers%":str, "":str, true:bit, true:bit);
    X_18:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "name":str, 1:int);
    C_138:bat[:oid] := algebra.likeselect(X_18:bat[:str], C_5:bat[:oid], "%optimizers%":str, "":str, true:bit, true:bit);
    C_35:bat[:oid] := sql.subdelta(C_135:bat[:oid], C_5:bat[:oid], X_19:bat[:oid], C_136:bat[:oid], C_138:bat[:oid]);
    X_37:bat[:str] := sql.projectdelta(C_35:bat[:oid], X_17:bat[:str], X_19:bat[:oid], X_20:bat[:str], X_18:bat[:str]);
    X_22:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 0:int);
    (X_25:bat[:oid], X_26:bat[:str]) := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 2:int);
    X_24:bat[:str] := sql.bind(X_4:int, "sys":str, "functions":str, "func":str, 1:int);
    X_38:bat[:str] := sql.projectdelta(C_35:bat[:oid], X_22:bat[:str], X_25:bat[:oid], X_26:bat[:str], X_24:bat[:str]);
    sql.resultSet(X_40:bat[:str], X_41:bat[:str], X_42:bat[:str], X_43:bat[:int], X_44:bat[:int], X_37:bat[:str], X_38:bat[:str]);
end user.main;
#inline               actions= 0 time=4 usec 
#remap                actions= 1 time=35 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 3 time=4 usec 
#aliases              actions= 7 time=6 usec 
#evaluate             actions= 2 time=14 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 5 time=16 usec 
#aliases              actions= 4 time=5 usec 
#mergetable           actions= 0 time=25 usec 
#deadcode             actions= 2 time=6 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 3 time=7 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=2 usec 
#deadcode             actions= 0 time=6 usec 
#reorder              actions= 1 time=18 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=0 usec 
#deadcode             actions= 0 time=5 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=17 usec 
#total                actions=27 time=256 usec 

# 13:28:51 >  
# 13:28:51 >  "Done."
# 13:28:51 >  

