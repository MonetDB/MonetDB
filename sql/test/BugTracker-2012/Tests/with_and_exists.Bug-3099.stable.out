stdout of test 'with_and_exists.Bug-3099` in directory 'sql/test/BugTracker-2012` itself:


# 14:21:26 >  
# 14:21:26 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/home/niels/scratch/rc-clean/Linux-x86_64/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=34975" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_test_BugTracker-2012" "--set" "mal_listing=0"
# 14:21:26 >  

# MonetDB 5 server v11.11.0
# This is an unreleased version
# Serving database 'mTests_test_BugTracker-2012', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 3.778 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://niels.nesco.mine.nu:34975/
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded


# 14:21:26 >  
# 14:21:26 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=niels" "--port=34975"
# 14:21:26 >  

#CREATE TABLE rank (pre INTEGER, post INTEGER);
#INSERT INTO rank VALUES (1, 6);
[ 1	]
#INSERT INTO rank VALUES (2, 3);
[ 1	]
#INSERT INTO rank VALUES (4, 5);
[ 1	]
#WITH
#  span1 AS ( SELECT pre FROM rank ),
#  span2 AS ( SELECT pre FROM rank )
#SELECT span1.pre AS pre1, span2.pre AS pre2
#FROM   span1, span2
#WHERE  EXISTS (
#         SELECT 1
#         FROM   rank as ancestor
#         WHERE  ancestor.pre < span1.pre
#         AND    span1.pre < ancestor.post
#         AND    ancestor.pre < span2.pre
#         AND    span2.pre < ancestor.post)
#AND    span1.pre <> span2.pre
#ORDER BY pre1, pre2;
% sys.,	sys. # table_name
% pre1,	pre2 # name
% int,	int # type
% 1,	1 # length
[ 2,	4	]
[ 4,	2	]
#WITH
#  span1 AS ( SELECT pre AS pre1 FROM rank ),
#  span2 AS ( SELECT pre AS pre2 FROM rank )
#SELECT DISTINCT span1.pre1, span2.pre2
#FROM   span1, span2
#WHERE  EXISTS (
#         SELECT 1
#         FROM   rank as ancestor
#         WHERE  ancestor.pre < span1.pre1
#         AND    span1.pre1 < ancestor.post
#         AND    ancestor.pre < span2.pre2
#         AND    span2.pre2 < ancestor.post)
#AND    span1.pre1 <> span2.pre2
#ORDER BY pre1, pre2;
% sys.,	sys. # table_name
% pre1,	pre2 # name
% int,	int # type
% 1,	1 # length
[ 2,	4	]
[ 4,	2	]
#SELECT DISTINCT span1.pre, span2.pre
#FROM   rank AS span1, rank AS span2
#WHERE  EXISTS (
#         SELECT ancestor.pre
#         FROM   rank as ancestor
#         WHERE  ancestor.pre < span1.pre
#         AND    span1.pre < ancestor.post
#         AND    ancestor.pre < span2.pre
#         AND    span2.pre < ancestor.post)
#AND    span1.pre <> span2.pre
#ORDER BY pre1, pre2;
% sys.,	sys. # table_name
% pre1,	pre2 # name
% int,	int # type
% 1,	1 # length
[ 2,	4	]
[ 4,	2	]
#WITH
#  span1 AS ( SELECT pre FROM rank ),
#  span2 AS ( SELECT pre FROM rank )
#SELECT DISTINCT span1.pre, span2.pre
#FROM   span1, span2, rank AS ancestor
#WHERE  ancestor.pre < span1.pre
#AND    span1.pre < ancestor.post
#AND    ancestor.pre < span2.pre
#AND    span2.pre < ancestor.post
#AND    span1.pre <> span2.pre
#ORDER BY pre1, pre2;
% sys.,	sys. # table_name
% pre1,	pre2 # name
% int,	int # type
% 1,	1 # length
[ 2,	4	]
[ 4,	2	]
#drop table rank;

# 14:21:27 >  
# 14:21:27 >  "Done."
# 14:21:27 >  

