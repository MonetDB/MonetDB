stdout of test 'smalltable` in directory 'sql/test/orderidx` itself:


# 11:38:22 >  
# 11:38:22 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33382" "--set" "mapi_usock=/var/tmp/mtest-25471/.s.monetdb.33382" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/sjoerd/Monet-mosaic/var/MonetDB/mTests_sql_test_orderidx" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 11:38:22 >  

# MonetDB 5 server v11.22.0 (hg id: 9e2e28139f1b+)
# This is an unreleased version
# Serving database 'mTests_sql_test_orderidx', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.ins.cwi.nl:33382/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-25471/.s.monetdb.33382
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.3'
# Finished reading the write-ahead log 'sql_logs/sql/log.3'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded


# 11:38:23 >  
# 11:38:23 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-25471" "--port=33382"
# 11:38:23 >  

#CREATE TABLE xtmp2(i integer);
#SELECT schema, table, column, type, mode, count, hashes, phash, imprints, sorted, orderidx FROM storage(current_schema, 'xtmp2');
% .%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3 # table_name
% schema,	table,	column,	type,	mode,	count,	hashes,	phash,	imprints,	sorted,	orderidx # name
% varchar,	varchar,	varchar,	varchar,	varchar,	bigint,	bigint,	boolean,	bigint,	boolean,	bigint # type
% 3,	5,	1,	3,	8,	1,	1,	5,	1,	5,	1 # length
[ "sys",	"xtmp2",	"i",	"int",	"writable",	0,	0,	false,	0,	true,	0	]
#ALTER TABLE xtmp2 SET read only;
#CREATE ORDERED INDEX sys_xtmp2_i_oidx ON xtmp2(i);
#SELECT schema, table, column, type, mode, count, hashes, phash, imprints, sorted, orderidx FROM storage(current_schema, 'xtmp2');
% .%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3 # table_name
% schema,	table,	column,	type,	mode,	count,	hashes,	phash,	imprints,	sorted,	orderidx # name
% varchar,	varchar,	varchar,	varchar,	varchar,	bigint,	bigint,	boolean,	bigint,	boolean,	bigint # type
% 3,	5,	1,	3,	8,	1,	1,	5,	1,	5,	1 # length
[ "sys",	"xtmp2",	"i",	"int",	"readonly",	0,	0,	false,	0,	true,	0	]
#select * from xtmp2 where i>=0 and i <8;
% sys.xtmp2 # table_name
% i # name
% int # type
% 1 # length
#create table xtmp3( i integer);
#insert into xtmp3 values(3);
[ 1	]
#SELECT schema, table, column, type, mode, count, hashes, phash, imprints, sorted, orderidx FROM storage(current_schema, 'xtmp3');
% .%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3 # table_name
% schema,	table,	column,	type,	mode,	count,	hashes,	phash,	imprints,	sorted,	orderidx # name
% varchar,	varchar,	varchar,	varchar,	varchar,	bigint,	bigint,	boolean,	bigint,	boolean,	bigint # type
% 3,	5,	1,	3,	8,	1,	1,	5,	1,	5,	1 # length
[ "sys",	"xtmp3",	"i",	"int",	"writable",	1,	0,	false,	0,	true,	0	]
#ALTER TABLE xtmp3 SET read only;
#CREATE ORDERED INDEX sys_xtmp3_i_oidx ON xtmp3(i);
#SELECT schema, table, column, type, mode, count, hashes, phash, imprints, sorted, orderidx from storage(current_schema, 'xtmp3');
% .%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3 # table_name
% schema,	table,	column,	type,	mode,	count,	hashes,	phash,	imprints,	sorted,	orderidx # name
% varchar,	varchar,	varchar,	varchar,	varchar,	bigint,	bigint,	boolean,	bigint,	boolean,	bigint # type
% 3,	5,	1,	3,	8,	1,	1,	5,	1,	5,	1 # length
[ "sys",	"xtmp3",	"i",	"int",	"readonly",	1,	0,	false,	0,	true,	0	]
#select * from xtmp3 where i>=0 and i <8;
% sys.xtmp3 # table_name
% i # name
% int # type
% 1 # length
[ 3	]
#CREATE TABLE xtmp4(i integer);
#INSERT INTO xtmp4 VALUES (3),(0),(2);
[ 3	]
#SELECT schema, table, column, type, mode, count, hashes, phash, imprints, sorted, orderidx FROM storage(current_schema, 'xtmp4');
% .%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3 # table_name
% schema,	table,	column,	type,	mode,	count,	hashes,	phash,	imprints,	sorted,	orderidx # name
% varchar,	varchar,	varchar,	varchar,	varchar,	bigint,	bigint,	boolean,	bigint,	boolean,	bigint # type
% 3,	5,	1,	3,	8,	1,	1,	5,	1,	5,	1 # length
[ "sys",	"xtmp4",	"i",	"int",	"writable",	3,	0,	false,	0,	false,	0	]
#ALTER TABLE xtmp4 SET read only;
#CREATE ORDERED INDEX sys_xtmp4_i_oidx ON xtmp4(i);
#SELECT schema, table, column, type, mode, count, hashes, phash, imprints, sorted, orderidx from storage(current_schema, 'xtmp4');
% .%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3,	.%3 # table_name
% schema,	table,	column,	type,	mode,	count,	hashes,	phash,	imprints,	sorted,	orderidx # name
% varchar,	varchar,	varchar,	varchar,	varchar,	bigint,	bigint,	boolean,	bigint,	boolean,	bigint # type
% 3,	5,	1,	3,	8,	1,	1,	5,	1,	5,	2 # length
[ "sys",	"xtmp4",	"i",	"int",	"readonly",	3,	0,	false,	0,	false,	24	]
#SELECT * FROM xtmp4 WHERE i>=0 AND i<8;
% sys.xtmp4 # table_name
% i # name
% int # type
% 1 # length
[ 3	]
[ 0	]
[ 2	]
#DROP INDEX sys_xtmp2_i_oidx;
#DROP INDEX sys_xtmp3_i_oidx;
#DROP INDEX sys_xtmp4_i_oidx;
#DROP TABLE xtmp2;
#DROP TABLE xtmp3;
#DROP TABLE xtmp4;

# 11:38:23 >  
# 11:38:23 >  "Done."
# 11:38:23 >  

