stdout of test 'scoping01` in directory 'sql/test/scoping` itself:


# 10:35:56 >  
# 10:35:56 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=31204" "--set" "mapi_usock=/var/tmp/mtest-183822/.s.monetdb.31204" "--forcemito" "--dbpath=/home/ferreira/repositories/MonetDB-scoping/BUILD/var/MonetDB/mTests_sql_test_scoping" "--set" "embedded_c=true"
# 10:35:56 >  

# MonetDB 5 server v11.38.0 (hg id: 59e3c603bbb3+)
# This is an unreleased version
# Serving database 'mTests_sql_test_scoping', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 128bit integers
# Found 15.498 GiB available main-memory of which we use 12.631 GiB
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2020 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.localdomain:31204/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-183822/.s.monetdb.31204
# MonetDB/GIS module loaded
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 18_index.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_views.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 27_rejects.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_profiler.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 58_hot_snapshot.sql
# loading sql script: 60_wlcr.sql
# loading sql script: 61_wlcr.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_lidar.sql
# loading sql script: 75_shp.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 81_tracer.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql
# MonetDB/SQL module loaded

# 10:35:57 >  
# 10:35:57 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-183822" "--port=31204"
# 10:35:57 >  

#declare i integer;
#set i = 1234;
#create table tmp1(i integer, s string);
#insert into tmp1 values(1,'hello'),(2,'world');
[ 2	]
#select i from tmp1;
% sys.tmp1 # table_name
% optimizer # name
% int # type
% 1 # length
[ 1	]
[ 2	]
#select sys."optimizer", "optimizer" from tmp1; --we declare variables in a schema, so to reference them we add the schema
% .%1,	sys.tmp1 # table_name
% %1,	optimizer # name
% varchar,	int # type
% 12,	1 # length
[ "default_pipe",	1	]
[ "default_pipe",	2	]
#CREATE table tmp2("optimizer" integer, s string);
#insert into tmp2 values(3,'another'),(4,'test');
[ 2	]
#select tmp1.i, tmp2.i from sys.tmp1, sys.tmp2;
% sys.tmp1,	sys.tmp2 # table_name
% optimizer,	optimizer # name
% int,	int # type
% 1,	1 # length
[ 1,	3	]
[ 1,	4	]
[ 2,	3	]
[ 2,	4	]
#SELECT MAX(i) FROM tmp1; --Table columns have precedence over global variables
% sys.%1 # table_name
% %1 # name
% int # type
% 1 # length
[ 2	]
#CREATE OR REPLACE FUNCTION tests_scopes2(i INT) RETURNS INT 
#BEGIN
#	DECLARE j int;
#	SET j = i;
#	RETURN j;
#END;
#SELECT tests_scopes2(vals) FROM (VALUES (1),(2),(3)) AS vals(vals);
% .%5 # table_name
% %5 # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#DROP TABLE tmp1;
#DROP TABLE tmp2;
#DROP FUNCTION tests_scopes2(INT);
#with a(a) as (with a(a) as (select 1) select 2) select a from a; --allowed
% .a # table_name
% a # name
% tinyint # type
% 1 # length
[ 2	]
#DECLARE "aux" string;
#SET "aux" = (SELECT "optimizer");
#SET "optimizer" = 'default_pipe';
#CREATE OR REPLACE FUNCTION tests_scopes3(input INT) RETURNS STRING 
#BEGIN
#	IF input = 1 THEN
#		DECLARE "optimizer" string; --allowed
#		SET "optimizer" = 'anything';
#	END IF;
#	RETURN SELECT "optimizer";
#END;
#SELECT tests_scopes3(0), tests_scopes3(1);
% .%5,	.%6 # table_name
% %5,	%6 # name
% clob,	clob # type
% 12,	12 # length
[ "default_pipe",	"default_pipe"	]
#SET "optimizer" = (SELECT "aux");
#DROP FUNCTION tests_scopes3(INT);
#declare table tmp2(i integer, s string); --the same for declared tables
#insert into tmp2 values(3,'another'),(4,'test');
[ 2	]
#create function tests_scopes4() returns table (i integer, s string) begin return tmp2; end; --possible, return the contents of tmp2
#select * from tests_scopes4();
% .%1,	.%1 # table_name
% i,	s # name
% int,	clob # type
% 1,	7 # length
[ 3,	"another"	]
[ 4,	"test"	]
#DROP FUNCTION tests_scopes4;
#DROP TABLE tmp2;
#CREATE OR REPLACE FUNCTION scoping(input INT) RETURNS INT 
#BEGIN
#	DECLARE x int;
#	SET x = 1;
#	IF input = 2 THEN
#		DECLARE x int;
#		SET x = 2;
#	ELSE
#		IF input = 3 THEN
#			SET x = 3;
#		END IF;
#	END IF;
#	RETURN x;
#END;
#SELECT scoping(vals) FROM (VALUES (1),(2),(3)) AS vals(vals);
% .%5 # table_name
% %5 # name
% int # type
% 1 # length
[ 1	]
[ 1	]
[ 3	]
#DROP FUNCTION scoping(INT);
#CREATE OR REPLACE FUNCTION scoping2(input INT) RETURNS INT 
#BEGIN
#	DECLARE TABLE z (a int);
#	INSERT INTO z VALUES (1);
#	IF input = 2 THEN
#		DECLARE TABLE z (a int);
#		INSERT INTO z VALUES (2);
#	ELSE
#		IF input = 3 THEN
#			TRUNCATE z;
#			INSERT INTO z VALUES (3);
#		END IF;
#	END IF;
#	RETURN SELECT a FROM z;
#END; 
#SELECT scoping2(vals) FROM (VALUES (1),(2),(3),(4)) AS vals(vals);
% .%13 # table_name
% %13 # name
% int # type
% 1 # length
[ 1	]
[ 1	]
[ 3	]
[ 1	]
#DROP FUNCTION scoping2(INT);
#DECLARE TABLE atest (a int);
#INSERT INTO atest VALUES (1);
[ 1	]
#CREATE OR REPLACE FUNCTION scoping3() RETURNS TABLE(a int) 
#BEGIN
#	DECLARE TABLE atest (a int); -- allowed, the table atest from scoping3 is unrelated to "atest" from the global scope
#	INSERT INTO atest VALUES (2);
#	RETURN atest;
#END;
#SELECT a FROM atest;
% sys.atest # table_name
% a # name
% int # type
% 1 # length
[ 1	]
#SELECT a FROM scoping3();
% .%1 # table_name
% a # name
% int # type
% 1 # length
[ 2	]
#DROP TABLE atest;
#DROP FUNCTION scoping3;

# 10:35:57 >  
# 10:35:57 >  "Done."
# 10:35:57 >  

