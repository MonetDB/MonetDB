statement ok
CREATE TABLE "LOADONLY_comments" (
    id BIGINT NOT NULL PRIMARY KEY,
    creationDate TIMESTAMP(3) WITH TIME ZONE NOT NULL,
    locationIP VARCHAR(40) NOT NULL,
    browserUsed VARCHAR(40) NOT NULL,
    content VARCHAR(2000) NOT NULL,
    length INT NOT NULL,
    creator BIGINT NOT NULL,
    place_id BIGINT NOT NULL,
    replyOfPost BIGINT,
    replyOfComment BIGINT
)

statement ok
CREATE TABLE "LOADONLY_comment_tags" (
    comment_id BIGINT NOT NULL,
    tag_id BIGINT NOT NULL,
    PRIMARY KEY(comment_id, tag_id)
)

statement ok
CREATE TABLE "LOADONLY_posts" (
    id BIGINT NOT NULL PRIMARY KEY,
    imageFile VARCHAR(40),
    creationDate TIMESTAMP(3) WITH TIME ZONE NOT NULL,
    locationIP VARCHAR(40) NOT NULL,
    browserUsed VARCHAR(40) NOT NULL,
    "language" VARCHAR(40),
    content VARCHAR(2000),
    length INT NOT NULL,
    creator BIGINT NOT NULL,
    forum_id BIGINT NOT NULL,
    place_id BIGINT NOT NULL
)

statement ok
CREATE TABLE "LOADONLY_post_tags" (
    post_id BIGINT NOT NULL,
    tag_id BIGINT NOT NULL,
    PRIMARY KEY(post_id, tag_id)
)

statement ok
CREATE TABLE forums(
    id BIGINT NOT NULL PRIMARY KEY,
    title VARCHAR(80) NOT NULL,
    creationDate TIMESTAMP(3) WITH TIME ZONE NOT NULL,
    moderator BIGINT
)

statement ok
CREATE TABLE forum_persons(
    forum_id BIGINT NOT NULL,
    person_id BIGINT NOT NULL,
    joinDate TIMESTAMP(3) WITH TIME ZONE NOT NULL,
    PRIMARY KEY(forum_id, person_id)
)

statement ok
CREATE TABLE forum_tags(
    forum_id BIGINT NOT NULL,
    tag_id BIGINT NOT NULL,
    PRIMARY KEY(forum_id, tag_id)
)

statement ok
CREATE TABLE friends(
    src BIGINT NOT NULL,
    dst BIGINT NOT NULL,
    creationDate TIMESTAMP(3) WITH TIME ZONE NOT NULL,
    PRIMARY KEY(src, dst)
)

statement ok
CREATE TABLE organisations(
    id BIGINT NOT NULL PRIMARY KEY,
    "type" VARCHAR(40) NOT NULL,
    name VARCHAR(160) NOT NULL,
    url VARCHAR(2000) NOT NULL,
    place_id BIGINT NOT NULL
)

statement ok
CREATE TABLE messages(
    id BIGINT NOT NULL PRIMARY KEY,
    content VARCHAR(2000) NOT NULL,
    isImage BOOLEAN NOT NULL DEFAULT FALSE,
    creationDate TIMESTAMP(3) WITH TIME ZONE NOT NULL,
    locationIP VARCHAR(40) NOT NULL,
    browserUsed VARCHAR(40) NOT NULL,
    "language" VARCHAR(40),
    length INT NOT NULL,
    creator BIGINT NOT NULL,
    forum_id BIGINT,
    place_id BIGINT NOT NULL,
    reply BIGINT, -- Null if this is a post, otherwise the message to which this comment is immediately appended.
    post_id BIGINT NOT NULL -- If this is a comment, the post to which this comment is ultimately appended. If it is a post, it is the same value as id
)

statement ok
CREATE TABLE message_tags(
    message_id BIGINT NOT NULL,
    tag_id BIGINT NOT NULL,
    PRIMARY KEY(message_id, tag_id)
)

statement ok
CREATE TABLE persons(
    id BIGINT NOT NULL PRIMARY KEY,
    firstName VARCHAR(40) NOT NULL ,
    lastName VARCHAR(40) NOT NULL,
    gender VARCHAR(40) NOT NULL,
    birthDay DATE NOT NULL,
    creationDate TIMESTAMP(3) WITH TIME ZONE NOT NULL,
    locationIP VARCHAR(40) NOT NULL,
    browserUsed VARCHAR(40) NOT NULL,
    place_id BIGINT NOT NULL
)

statement ok
CREATE TABLE person_comments(
    person_id BIGINT NOT NULL,
    comment_id BIGINT NOT NULL,
    creationDate TIMESTAMP(3) WITH TIME ZONE NOT NULL,
    PRIMARY KEY(person_id, comment_id)
)

statement ok
CREATE TABLE person_emails(
    id BIGINT NOT NULL,
    email VARCHAR(120) NOT NULL,
    PRIMARY KEY(id, email)
)

statement ok
CREATE TABLE person_languages(
    id BIGINT NOT NULL,
    "language" VARCHAR(40) NOT NULL,
    PRIMARY KEY(id, "language")
)

statement ok
CREATE TABLE person_tags(
    person_id BIGINT NOT NULL,
    tag_id BIGINT NOT NULL,
    PRIMARY KEY(person_id, tag_id)
)

statement ok
CREATE TABLE person_posts(
    person_id BIGINT NOT NULL,
    post_id BIGINT NOT NULL,
    creationDate TIMESTAMP(3) WITH TIME ZONE NOT NULL,
    PRIMARY KEY(person_id, post_id)
)

statement ok
CREATE TABLE person_studyAt_organisations(
    person_id BIGINT NOT NULL,
    organisation_id BIGINT NOT NULL,
    classYear INT NOT NULL,
    PRIMARY KEY(person_id, organisation_id)
)

statement ok
CREATE TABLE person_workAt_organisations(
    person_id BIGINT NOT NULL,
    organisation_id BIGINT NOT NULL,
    workFrom INT NOT NULL,
    PRIMARY KEY(person_id, organisation_id)
)

statement ok
CREATE TABLE places(
    id BIGINT NOT NULL PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    url VARCHAR(2000) NOT NULL,
    "type" VARCHAR(40) NOT NULL,
    isPartOf BIGINT
)

statement ok
CREATE TABLE tags(
    id BIGINT NOT NULL PRIMARY KEY,
    name VARCHAR(160) NOT NULL,
    url VARCHAR(2000) NOT NULL
)

statement ok
CREATE TABLE tag_tagclasses(
    tag_id BIGINT NOT NULL,
    tagclass_id BIGINT NOT NULL,
    PRIMARY KEY(tag_id, tagclass_id)
)

statement ok
CREATE TABLE tagclasses(
    id BIGINT NOT NULL PRIMARY KEY,
    name VARCHAR(40) NOT NULL,
    url VARCHAR(2000) NOT NULL
)

statement ok
CREATE TABLE tagclass_inheritance(
    subclass_id BIGINT NOT NULL,
    superclass_id BIGINT NOT NULL,
    PRIMARY KEY(subclass_id, superclass_id)
)

statement ok
ALTER TABLE forums ADD FOREIGN KEY(moderator) REFERENCES persons(id)

statement ok
ALTER TABLE forum_persons ADD FOREIGN KEY(forum_id) REFERENCES forums(id)

statement ok
ALTER TABLE forum_persons ADD FOREIGN KEY(person_id) REFERENCES persons(id)

statement ok
ALTER TABLE forum_tags ADD FOREIGN KEY(forum_id) REFERENCES forums(id)

statement ok
ALTER TABLE forum_tags ADD FOREIGN KEY(tag_id) REFERENCES tags(id)

statement ok
ALTER TABLE friends ADD FOREIGN KEY(src) REFERENCES persons(id)

statement ok
ALTER TABLE friends ADD FOREIGN KEY(dst) REFERENCES persons(id)

statement ok
ALTER TABLE messages ADD FOREIGN KEY(creator) REFERENCES persons(id)

statement ok
ALTER TABLE messages ADD FOREIGN KEY(forum_id) REFERENCES forums(id)

statement ok
ALTER TABLE messages ADD FOREIGN KEY(place_id) REFERENCES places(id)

statement ok
ALTER TABLE messages ADD FOREIGN KEY(reply) REFERENCES messages(id)

statement ok
ALTER TABLE messages ADD FOREIGN KEY(post_id) REFERENCES messages(id)

statement ok
ALTER TABLE message_tags ADD FOREIGN KEY(message_id) REFERENCES messages(id)

statement ok
ALTER TABLE message_tags ADD FOREIGN KEY(tag_id) REFERENCES tags(id)

statement ok
ALTER TABLE organisations ADD FOREIGN KEY(place_id) REFERENCES places(id)

statement ok
ALTER TABLE persons ADD FOREIGN KEY(place_id) REFERENCES places(id)

statement ok
ALTER TABLE person_comments ADD FOREIGN KEY(person_id) REFERENCES persons(id)

statement ok
ALTER TABLE person_comments ADD FOREIGN KEY(comment_id) REFERENCES messages(id)

statement ok
ALTER TABLE person_emails ADD FOREIGN KEY(id) REFERENCES persons(id)

statement ok
ALTER TABLE person_languages ADD FOREIGN KEY(id) REFERENCES persons(id)

statement ok
ALTER TABLE person_posts ADD FOREIGN KEY(person_id) REFERENCES persons(id)

statement ok
ALTER TABLE person_posts ADD FOREIGN KEY(post_id) REFERENCES messages(id)

statement ok
ALTER TABLE person_studyAt_organisations ADD FOREIGN KEY(person_id) REFERENCES persons(id)

statement ok
ALTER TABLE person_studyAt_organisations ADD FOREIGN KEY(organisation_id) REFERENCES organisations(id)

statement ok
ALTER TABLE person_tags ADD FOREIGN KEY(person_id) REFERENCES persons(id)

statement ok
ALTER TABLE person_tags ADD FOREIGN KEY(tag_id) REFERENCES tags(id)

statement ok
ALTER TABLE person_workAt_organisations ADD FOREIGN KEY(person_id) REFERENCES persons(id)

statement ok
ALTER TABLE person_workAt_organisations ADD FOREIGN KEY(organisation_id) REFERENCES organisations(id)

statement ok
ALTER TABLE places ADD FOREIGN KEY(isPartOf) REFERENCES places(id)

statement ok
ALTER TABLE tag_tagclasses ADD FOREIGN KEY(tag_id) REFERENCES tags(id)

statement ok
ALTER TABLE tag_tagclasses ADD FOREIGN KEY(tagclass_id) REFERENCES tagclasses(id)

statement ok
ALTER TABLE tagclass_inheritance ADD FOREIGN KEY(subclass_id) REFERENCES tagclasses(id)

statement ok
ALTER TABLE tagclass_inheritance ADD FOREIGN KEY(superclass_id) REFERENCES tagclasses(id)

query TI rowsort
WITH
params AS (
  SELECT id, startDate, startDate + duration - interval '1' day AS endDate FROM (
    SELECT
      4398046512167 AS id,
      CAST('2011-11-05' AS TIMESTAMP(3)) AS startDate,
      INTERVAL '365' DAY AS duration
  ) AS tmp ),
friends1 AS (
  SELECT dst AS id FROM friends WHERE src = (SELECT id FROM params)
),
friends_tags AS (
  SELECT t.id, t.name, p.creationDate
  FROM messages p, message_tags pt, tags t
  WHERE p.creator IN (SELECT * FROM friends1)
    AND pt.message_id = p.id
    AND pt.tag_id = t.id
),
resultset AS (
  SELECT name, COUNT(name) as count
  FROM friends_tags ft
  WHERE ft.creationDate BETWEEN (SELECT startDate FROM params) AND (SELECT endDate FROM params)
  AND NOT EXISTS ( SELECT 1 FROM friends_tags ftcor WHERE ftcor.id = ft.id AND ftcor.creationDate < (SELECT startDate FROM params))
  GROUP BY name
)
SELECT * FROM resultset
ORDER BY count DESC, name
LIMIT 10
----

statement ok
DROP TABLE "LOADONLY_comments"

statement ok
DROP TABLE "LOADONLY_comment_tags"

statement ok
DROP TABLE "LOADONLY_posts"

statement ok
DROP TABLE "LOADONLY_post_tags"

statement ok
DROP TABLE forum_persons

statement ok
DROP TABLE forum_tags

statement ok
DROP TABLE friends

statement ok
DROP TABLE message_tags

statement ok
DROP TABLE person_comments

statement ok
DROP TABLE person_emails

statement ok
DROP TABLE person_tags

statement ok
DROP TABLE person_languages

statement ok
DROP TABLE person_posts

statement ok
DROP TABLE person_studyAt_organisations

statement ok
DROP TABLE person_workAt_organisations

statement ok
DROP TABLE tag_tagclasses

statement ok
DROP TABLE tagclass_inheritance

statement ok
DROP TABLE organisations

statement ok
DROP TABlE messages

statement ok
DROP TABLE forums

statement ok
DROP TABLE persons

statement ok
DROP TABLE places

statement ok
DROP TABLE tags

statement ok
DROP TABLE tagclasses

