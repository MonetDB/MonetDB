statement ok
CREATE TABLE tbl_ProductSales (ColID int, Product_Category  varchar(64), Product_Name  varchar(64), TotalSales int)

statement ok
INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200),(2,'Game','PKO Game',400),(3,'Fashion','Shirt',500),(4,'Fashion','Shorts',100)

statement ok
CREATE TABLE another_T (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT)

statement ok
INSERT INTO another_T VALUES (1,2,3,4,5,6,7,8), (11,22,33,44,55,66,77,88), (111,222,333,444,555,666,777,888), (1111,2222,3333,4444,5555,6666,7777,8888)

statement ok
CREATE TABLE integers(i INTEGER)

statement ok
INSERT INTO integers VALUES (1), (2), (3), (NULL)

statement ok
CREATE FUNCTION evilfunction(input INT) RETURNS TABLE (outt INT) BEGIN RETURN TABLE(SELECT input); END

statement ok
CREATE FUNCTION evilfunction(input1 INT, input2 INT) RETURNS TABLE (outt INT) BEGIN RETURN TABLE(SELECT input1 + input2); END

query I rowsort
SELECT
	(SELECT i2.i FROM evilfunction(MIN(i1.i)) as i2(i))
FROM integers i1
----
1

query I rowsort
SELECT
	(SELECT i2.i FROM evilfunction((SELECT MIN(1))) as i2(i))
FROM integers i1
----
1
1
1
1

statement error
SELECT
	(SELECT 1,1 UNION ALL SELECT 2,2)
FROM integers i1

statement error
SELECT i FROM integers i1 ORDER BY (SELECT 1 UNION ALL SELECT 2)

statement error
SELECT
	(SELECT 1 UNION ALL SELECT 2)
FROM integers i1

statement error
SELECT
	(SELECT i2.i FROM evilfunction(MIN(1)) as i2(i))
FROM integers i1

statement error
SELECT
	(SELECT i2.i FROM evilfunction(MAX(i1.i) OVER ()) as i2(i))
FROM integers i1

query I rowsort
SELECT
	(SELECT i2.i FROM evilfunction((SELECT MIN(i1.i + i3.i) FROM integers i3)) as i2(i))
FROM integers i1
----
2
3
4
NULL

query I rowsort
SELECT 1 FROM evilfunction((SELECT MAX(1) OVER ()))
----
1

query I rowsort
SELECT 1 FROM evilfunction((SELECT MAX(1) OVER () UNION ALL SELECT 1))
----
1
1

statement error
SELECT
	(SELECT 1 FROM evilfunction((SELECT MAX(1) OVER () UNION ALL SELECT 1)))
FROM integers i1

query I rowsort
SELECT i2.i FROM evilfunction((SELECT MAX(1) OVER ())) as i2(i)
----
1

query I rowsort
SELECT
	(SELECT i2.i FROM evilfunction((SELECT MAX(i1.i) OVER ())) as i2(i))
FROM integers i1
----
1
2
3
NULL

statement error
SELECT i FROM integers WHERE (SELECT 1 UNION ALL SELECT 2)

statement error
SELECT i FROM integers WHERE (SELECT true UNION ALL SELECT false)

statement error
SELECT i FROM integers WHERE (SELECT true, false)

statement error
SELECT i FROM integers WHERE (SELECT true, false UNION ALL SELECT false, true)

query I rowsort
SELECT i FROM integers WHERE (SELECT COUNT(1) OVER ()) = 1
----
1
2
3
NULL

query I rowsort
SELECT i FROM integers WHERE (SELECT COUNT(i) OVER ()) = 1
----
1
2
3

query I rowsort
SELECT
	(SELECT MAX(i2.i) FROM (SELECT MIN(i1.i)) AS i2(i))
FROM integers i1
----
1

query I rowsort
SELECT (SELECT NTILE(i1.i) OVER ()) mycalc FROM integers i1 ORDER BY mycalc NULLS LAST
----
1
1
1
NULL

query I rowsort
SELECT (SELECT NTILE(i1.i) OVER (PARTITION BY i1.i)) mycalc FROM integers i1 ORDER BY mycalc NULLS LAST
----
1
1
1
NULL

query I rowsort
SELECT (SELECT NTILE(i1.i) OVER (PARTITION BY i1.i ORDER BY i1.i)) FROM integers i1 ORDER BY 1 NULLS LAST
----
1
1
1
NULL

query I rowsort
SELECT DISTINCT (SELECT NTILE(i1.i) OVER ()) mycalc FROM integers i1 ORDER BY mycalc NULLS LAST
----
1
NULL

query I rowsort
SELECT DISTINCT CAST((SELECT SUM(i1.i) OVER ()) AS BIGINT) mycalc FROM integers i1 ORDER BY mycalc NULLS LAST
----
1
2
3
NULL

query I rowsort
SELECT i FROM integers WHERE i IN ((SELECT 1), (SELECT i FROM another_t))
----
1
2
3

statement error
SELECT i FROM integers WHERE (i,i) IN ((SELECT 1,2), (SELECT i UNION ALL SELECT 2))

query I rowsort
 
SELECT CAST((SELECT SUM(i2.i + i1.i)) AS BIGINT) FROM integers i1, integers i2
----
36

query I rowsort
SELECT CAST((SELECT SUM(i2.i + i1.i)) AS BIGINT) FROM integers i1 INNER JOIN integers i2 ON i1.i = i2.i
----
12

statement error
SELECT i1.i, i2.i FROM integers i1, integers i2 WHERE (SELECT SUM(i2.i + i1.i)) > 0

statement error
SELECT i1.i, i2.i FROM integers i1, integers i2 HAVING (SELECT SUM(i2.i + i1.i)) > 0

query I rowsort
SELECT DISTINCT CAST((SELECT SUM(i2.i + i1.i)) AS BIGINT) FROM integers i1, integers i2
----
36

query I rowsort
SELECT NOT EXISTS(SELECT i1.i) from integers i1
----
0
0
0
0

query II rowsort
SELECT i1.i, i2.i FROM integers i1 INNER JOIN integers i2 ON EXISTS (SELECT i1.i) = NOT EXISTS (SELECT i2.i)
----

query II rowsort
SELECT i1.i, i2.i FROM integers i1 INNER JOIN integers i2 ON EXISTS (SELECT i1.i) = EXISTS (SELECT i2.i) ORDER BY i1.i NULLS LAST, i2.i NULLS LAST
----
1
1
1
2
1
3
1
NULL
2
1
2
2
2
3
2
NULL
3
1
3
2
3
3
3
NULL
NULL
1
NULL
2
NULL
3
NULL
NULL

query II rowsort
SELECT i1.i, i2.i FROM integers i1, integers i2 WHERE (i1.i <= ANY (SELECT i1.i)) = (i1.i) IN (SELECT i1.i) ORDER BY i1.i NULLS LAST, i2.i NULLS LAST
----
1
1
1
2
1
3
1
NULL
2
1
2
2
2
3
2
NULL
3
1
3
2
3
3
3
NULL

query I rowsort
SELECT 1 IN ((SELECT MIN(col2)), (SELECT SUM(col4))) FROM another_t
----
0

query I rowsort
SELECT 1 FROM another_t WHERE (1,col1) IN ((SELECT MIN(i1.i), SUM(i1.i) FROM integers i1))
----

statement error
SELECT (SELECT 1 UNION ALL SELECT 2)

statement error
SELECT (SELECT 1 UNION ALL SELECT 2), (SELECT 1 UNION ALL SELECT 2)

statement error
SELECT 1 HAVING (SELECT 1 UNION SELECT 2)

statement ok
create or replace function iamok() returns int
begin
	DECLARE myvar INT;
	SELECT (SELECT i) INTO myvar FROM integers;
	return myvar;
end

statement error
select iamok()

statement ok
create or replace function iamok() returns int
begin
	DECLARE ovar INT;
	SET ovar = (SELECT (SELECT i) FROM integers);
	return ovar;
end

statement error
select iamok()

statement ok
create or replace function iamok() returns int
begin
	DECLARE abc,def INT;
	SET (abc, def) = (SELECT 1, 2);
	SET (abc, def) = (SELECT i, i from integers);
	return abc;
end

statement error
select iamok()

statement ok
create or replace function iamok() returns int
begin
	DECLARE aa,bb INT;
	SELECT i, i INTO aa, bb FROM integers;
	return aa;
end

statement error
select iamok()

statement ok
drop function iamok

statement error
UPDATE another_T SET col1 = MIN(col1)

statement error
UPDATE another_T SET col2 = 1 WHERE col1 = SUM(col2)

statement error
UPDATE another_T SET col3 = (SELECT MAX(col5))

statement ok
UPDATE another_T SET col4 = (SELECT SUM(col4 + ColID) FROM tbl_ProductSales)

query I rowsort
SELECT col4 FROM another_T
----
17786
1786
186
26

statement error
UPDATE another_T SET col5 = 1 WHERE col5 = (SELECT AVG(col2))

statement ok
UPDATE another_T SET col6 = 1 WHERE col6 = (SELECT COUNT(col3 + ColID) FROM tbl_ProductSales)

statement error
UPDATE another_T SET col8 = (SELECT 1 FROM integers i2 WHERE AVG(i2.i))

statement error
UPDATE another_T SET col7 = 1 WHERE col5 = (SELECT 1 FROM integers i2 WHERE AVG(i2.i))

statement error
DELETE FROM another_T WHERE col1 = COUNT(col2)

statement error
DELETE FROM another_T WHERE col7 = (SELECT MIN(col3))

statement ok
DELETE FROM another_T WHERE col8 = (SELECT AVG(col6 + ColID) FROM tbl_ProductSales)

statement error
DELETE FROM another_T WHERE col2 = (SELECT 1 FROM integers i2 WHERE AVG(i2.i))

statement error
UPDATE another_T SET col1 = AVG(col1) OVER ()

statement error
UPDATE another_T SET col2 = 1 WHERE col1 = COUNT(col2) OVER ()

statement ok
UPDATE another_T SET col3 = (SELECT SUM(col5) OVER ())

query I rowsort
SELECT col3 FROM another_T
----
5
55
555
5555

statement error
UPDATE another_T SET col4 = (SELECT MIN(col4 + ColID) OVER () FROM tbl_ProductSales)

statement ok
UPDATE another_T SET col5 = 1 WHERE col5 = (SELECT MAX(col2) OVER ())

statement error
UPDATE another_T SET col6 = 1 WHERE col6 = (SELECT MIN(col3 + ColID) OVER () FROM tbl_ProductSales)

statement error
DELETE FROM another_T WHERE col1 = AVG(col2) OVER ()

statement ok
DELETE FROM another_T WHERE col7 = (SELECT SUM(col3) OVER ())

statement error
DELETE FROM another_T WHERE col8 = (SELECT MAX(col6 + ColID) OVER () FROM tbl_ProductSales)

statement error
UPDATE another_T SET col5 = (SELECT 1 UNION ALL SELECT 2)

statement error
UPDATE another_T SET col5 = 1 WHERE col5 = (SELECT 1 UNION ALL SELECT 2)

statement error
DELETE FROM another_T WHERE col1 = (SELECT 1 UNION ALL SELECT 2)

statement error
INSERT INTO another_T VALUES ((SELECT 1 UNION ALL SELECT 2),2,3,4,5,6,7,8)

statement ok
UPDATE another_T SET (col5, col6) = (SELECT MIN(10), MAX(col5) OVER (PARTITION BY col1))

query II rowsort
SELECT col5, col6 FROM another_T
----
10
5
10
55
10
555
10
5555

statement error
UPDATE another_T SET (col7, col8) = (SELECT 1,2 UNION ALL SELECT 1,2)

statement error
UPDATE another_T SET (col7, col8) = (SELECT 1 UNION ALL SELECT 2)

statement error
UPDATE another_T SET (col7, col8) = (SELECT 1,2,3)

statement error
UPDATE another_T SET col5 = 1, col5 = 6

statement error
UPDATE another_T SET (col5, col6) = ((select 1,2)), col5 = 6

statement error
UPDATE another_T SET (col5, col6) = (SELECT MIN(col1), MAX(col2))

statement ok
UPDATE another_T SET col7 = (SELECT NTILE(col1) OVER ())

query I rowsort
SELECT col7 FROM another_T
----
1
1
1
1

statement ok
UPDATE another_T SET (col5, col6) = (SELECT NTILE(col1) OVER (), MAX(col3) OVER (PARTITION BY col4))

statement ok
UPDATE another_T t1 SET (col1, col2) = (SELECT MIN(t1.col3 + tb.ColID), MAX(tb.ColID) FROM tbl_ProductSales tb)

statement ok
UPDATE another_T t1 SET (col3, col4) = (SELECT COUNT(tb.ColID), SUM(tb.ColID) FROM tbl_ProductSales tb)

query IIIIII rowsort
SELECT col1, col2, col3, col4, col5, col6 FROM another_T
----
5556
4
4
10
1
5555
556
4
4
10
1
555
56
4
4
10
1
55
6
4
4
10
1
5

statement error
CREATE PROCEDURE iambroken()
BEGIN
	DECLARE x INT;
	SET x = MAX(1) over ();
END

statement error
CREATE PROCEDURE iambroken()
BEGIN
	DECLARE y int;
	SET y = MIN(1);
END

statement error
INSERT INTO another_T (col1,col1) VALUES (1,1)

statement error
INSERT INTO another_T VALUES (SUM(1),2,3,4,5,6,7,8)

statement error
INSERT INTO another_T VALUES (AVG(1) OVER (),2,3,4,5,6,7,8)

statement ok
INSERT INTO another_T VALUES ((SELECT SUM(1)),(SELECT SUM(2) OVER ()),3,4,5,6,7,8)

query IIIIIIII rowsort
SELECT * FROM another_T
----
1
2
3
4
5
6
7
8
5556
4
4
10
1
5555
1
8888
556
4
4
10
1
555
1
888
56
4
4
10
1
55
1
88
6
4
4
10
1
5
1
8

statement ok
CREATE PROCEDURE crashme(a int) BEGIN DECLARE x INT; SET x = a; END

statement error
CALL crashme(COUNT(1))

statement error
CALL crashme(COUNT(1) OVER ())

statement error
CALL crashme((SELECT COUNT(1)))

statement error
CALL crashme((SELECT COUNT(1) OVER ()))

statement error
CALL crashme((SELECT 1 UNION ALL SELECT 2))

statement error
SELECT row_number(1) OVER () FROM integers i1

statement error
SELECT ntile(1,1) OVER () FROM integers i1

statement ok
create sequence "debugme" as integer start with 1

statement ok
alter sequence "debugme" restart with (select MAX(1))

statement ok
alter sequence "debugme" restart with (select MIN(1) OVER ())

statement ok
drop sequence "debugme"

statement ok
CREATE FUNCTION upsme(input INT) RETURNS INT BEGIN RETURN SELECT MIN(input) OVER (); END

query I rowsort
SELECT upsme(1)
----
1

query I rowsort
SELECT upsme(1)
----
1

statement ok
CREATE OR REPLACE FUNCTION upsme(input INT) RETURNS INT BEGIN RETURN (SELECT input); END

query I rowsort
SELECT upsme(1)
----
1

query I rowsort
SELECT upsme(1)
----
1

statement ok
CREATE FUNCTION debugme(input int) RETURNS BOOLEAN
BEGIN
	DECLARE n BOOLEAN;
	SET n = exists (select i from integers where i < input);
	RETURN n;
END

query II rowsort
SELECT debugme(1), debugme(2)
----
0
1

statement ok
DROP FUNCTION debugme

statement ok
CREATE FUNCTION debugme2(n int) returns int
BEGIN
	WHILE (exists (select i from integers where i < n)) do
		SET n = n - 1;
	END WHILE;
	RETURN n;
END

query II rowsort
SELECT debugme2(1), debugme2(2)
----
1
1

statement ok
DROP FUNCTION debugme2

statement ok
DROP FUNCTION upsme(INT)

statement ok
DROP FUNCTION evilfunction(INT)

statement ok
DROP FUNCTION evilfunction(INT, INT)

statement ok
DROP PROCEDURE crashme(INT)

statement ok
DROP TABLE tbl_ProductSales

statement ok
DROP TABLE another_T

statement ok
DROP TABLE integers

