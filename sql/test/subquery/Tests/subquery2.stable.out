stdout of test 'subquery2` in directory 'sql/test/subquery` itself:


# 18:55:45 >  
# 18:55:45 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=39342" "--set" "mapi_usock=/var/tmp/mtest-31262/.s.monetdb.39342" "--set" "monet_prompt=" "--forcemito" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_subquery" "--set" "embedded_c=true"
# 18:55:45 >  

# MonetDB 5 server v11.34.0 (hg id: 179f82506958+)
# This is an unreleased version
# Serving database 'mTests_sql_test_subquery', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 128bit integers
# Found 15.385 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2020 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://da200:39342/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-31262/.s.monetdb.39342
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

# 18:55:46 >  
# 18:55:46 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-31262" "--port=39342"
# 18:55:46 >  

#CREATE TABLE students(id INTEGER, name VARCHAR(128), major VARCHAR(128), "year" INTEGER);
#CREATE TABLE exams(sid INTEGER, course VARCHAR(128), curriculum VARCHAR(128), grade INTEGER, "year" INTEGER);
#INSERT INTO students VALUES (1, 'Mark', 'CS', 2017);
[ 1	]
#INSERT INTO students VALUES (2, 'Dirk', 'CS', 2017);
[ 1	]
#INSERT INTO exams VALUES (1, 'Database Systems', 'CS', 10, 2015);
[ 1	]
#INSERT INTO exams VALUES (1, 'Graphics', 'CS', 9, 2016);
[ 1	]
#INSERT INTO exams VALUES (2, 'Database Systems', 'CS', 7, 2015);
[ 1	]
#INSERT INTO exams VALUES (2, 'Graphics', 'CS', 7, 2016);
[ 1	]
#SELECT s.name, e.course, e.grade FROM students s, exams e WHERE s.id=e.sid AND e.grade=(SELECT MAX(e2.grade) FROM exams e2 WHERE s.id=e2.sid) ORDER BY name, course;
% sys.s,	sys.e,	sys.e # table_name
% name,	course,	grade # name
% varchar,	varchar,	int # type
% 4,	16,	2 # length
[ "Dirk",	"Database Systems",	7	]
[ "Dirk",	"Graphics",	7	]
[ "Mark",	"Database Systems",	10	]
#SELECT s.name, e.course, e.grade FROM students s, exams e WHERE s.id=e.sid AND (s.major = 'CS' OR s.major = 'Games Eng') AND e.grade <= (SELECT AVG(e2.grade) - 1 FROM exams e2 WHERE s.id=e2.sid OR (e2.curriculum=s.major AND s."year">=e2."year")) ORDER BY name, course;
% sys.s,	sys.e,	sys.e # table_name
% name,	course,	grade # name
% varchar,	varchar,	int # type
% 4,	16,	1 # length
[ "Dirk",	"Database Systems",	7	]
[ "Dirk",	"Graphics",	7	]
#SELECT name, major FROM students s WHERE EXISTS(SELECT * FROM exams e WHERE e.sid=s.id AND grade=10) OR s.name='Dirk' ORDER BY name;
% .s,	.s # table_name
% name,	major # name
% varchar,	varchar # type
% 4,	2 # length
[ "Dirk",	"CS"	]
[ "Mark",	"CS"	]
#drop table students;
#drop table exams;
#SELECT 1 IN (1, (SELECT 2)), 1 NOT IN (1, (SELECT 2));
% .%22,	.%33 # table_name
% %22,	%33 # name
% boolean,	boolean # type
% 5,	5 # length
[ true,	false	]
#CREATE TABLE tbl_ProductSales (ColID int, Product_Category  varchar(64), Product_Name  varchar(64), TotalSales int); 
#INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200),(2,'Game','PKO Game',400),(3,'Fashion','Shirt',500),(4,'Fashion','Shorts',100);
[ 4	]
#CREATE TABLE another_T (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT);
#INSERT INTO another_T VALUES (1,2,3,4,5,6,7,8), (11,22,33,44,55,66,77,88), (111,222,333,444,555,666,777,888), (1111,2222,3333,4444,5555,6666,7777,8888);
[ 4	]
#SELECT col1 IN (SELECT ColID + col1 FROM tbl_ProductSales) FROM another_T GROUP BY col1; 
% .%15 # table_name
% %15 # name
% boolean # type
% 5 # length
[ false	]
[ false	]
[ false	]
[ false	]
#SELECT col1 IN (SELECT SUM(ColID + col1) FROM tbl_ProductSales) FROM another_T GROUP BY col1;
% .%16 # table_name
% %16 # name
% boolean # type
% 5 # length
[ false	]
[ false	]
[ false	]
[ false	]
#SELECT (SELECT col2 FROM tbl_ProductSales WHERE tbl_ProductSales.ColID = another_T.col1) FROM another_T GROUP BY col1, col2;
% .%1 # table_name
% %1 # name
% int # type
% 1 # length
[ 2	]
[ NULL	]
[ NULL	]
[ NULL	]
#SELECT
#	EXISTS (SELECT col2 FROM tbl_ProductSales WHERE tbl_ProductSales.ColID = another_T.col1)
#FROM another_T GROUP BY col1, col2, col5, col8;
% .%17 # table_name
% %17 # name
% boolean # type
% 5 # length
[ true	]
[ false	]
[ false	]
[ false	]
#SELECT
#	-col1 IN (SELECT ColID FROM tbl_ProductSales),
#	col5 = ALL (SELECT 1 FROM tbl_ProductSales HAVING MIN(col8) IS NULL)
#FROM another_T GROUP BY col1, col2, col5, col8;
% .%15,	.%40 # table_name
% %15,	%40 # name
% boolean,	boolean # type
% 5,	5 # length
[ false,	true	]
[ false,	true	]
[ false,	true	]
[ false,	true	]
#SELECT
#	col1 + col5 = (SELECT MIN(ColID) FROM tbl_ProductSales),
#	CAST(SUM(DISTINCT CASE WHEN col5 - col8 = (SELECT MIN(ColID / col2) FROM tbl_ProductSales) THEN col2 - 5 ELSE ABS(col1) END) AS BIGINT),
#	(SELECT MAX(ColID + col2) FROM tbl_ProductSales) * DENSE_RANK() OVER (PARTITION BY AVG(DISTINCT col5))
#FROM another_T
#GROUP BY col1, col2, col5, col8;
% .%60,	.%3,	.%61 # table_name
% %60,	%3,	%61 # name
% boolean,	bigint,	bigint # type
% 5,	4,	4 # length
[ false,	1,	6	]
[ false,	11,	26	]
[ false,	111,	226	]
[ false,	1111,	2226	]
#SELECT
#	col1 + col5 = (SELECT MIN(ColID) FROM tbl_ProductSales),
#	MIN(col8) OVER (PARTITION BY col5 ORDER BY col1 ROWS UNBOUNDED PRECEDING)
#FROM another_T
#GROUP BY col1, col2, col5, col8;
% .%15,	.%10 # table_name
% %15,	%10 # name
% boolean,	int # type
% 5,	4 # length
[ false,	8	]
[ false,	88	]
[ false,	888	]
[ false,	8888	]
#SELECT
#	EXISTS (SELECT 1 FROM tbl_ProductSales),
#	NOT EXISTS (SELECT 1 FROM tbl_ProductSales)
#FROM another_T
#GROUP BY col1;
% .%3,	.%4 # table_name
% %3,	%4 # name
% boolean,	boolean # type
% 5,	5 # length
[ true,	false	]
[ true,	false	]
[ true,	false	]
[ true,	false	]
#SELECT NOT col2 <> ANY (SELECT 20 FROM tbl_ProductSales GROUP BY ColID HAVING NOT MAX(col1) <> col1 * AVG(col1 + ColID) * ColID) FROM another_T GROUP BY col1, col2, col5, col8;
% .%33 # table_name
% %33 # name
% boolean # type
% 5 # length
[ true	]
[ true	]
[ true	]
[ true	]
#SELECT
#	NOT -SUM(col2) NOT IN (SELECT ColID FROM tbl_ProductSales GROUP BY ColID HAVING SUM(ColID - col8) <> col5),
#	NOT col5 = ALL (SELECT 1 FROM tbl_ProductSales HAVING MAX(col8) > 2 AND MIN(col8) IS NOT NULL),
#	NOT col2 <> ANY (SELECT 20 FROM tbl_ProductSales GROUP BY ColID HAVING NOT MAX(col1) <> col1 * AVG(col1 + ColID) * ColID),
#	NOT EXISTS (SELECT ColID - 12 FROM tbl_ProductSales GROUP BY ColID HAVING MAX(col2) IS NULL OR NOT col8 <> 2 / col1)
#FROM another_T
#GROUP BY col1, col2, col5, col8;
% .%31,	.%163,	.%164,	.%165 # table_name
% %31,	%163,	%164,	%165 # name
% boolean,	boolean,	boolean,	boolean # type
% 5,	5,	5,	5 # length
[ false,	true,	true,	true	]
[ false,	true,	true,	true	]
[ false,	true,	true,	true	]
[ false,	true,	true,	true	]
#SELECT
#	DISTINCT
#	NOT col1 * col5 = ALL (SELECT 1 FROM tbl_ProductSales HAVING MAX(col2) > 2),
#	NOT AVG(col2) * col1 <> ANY (SELECT 20 FROM tbl_ProductSales HAVING MAX(col1) IS NOT NULL OR MIN(col1) < MIN(col2)),
#	CAST (NOT col1 IN (SELECT col2 FROM another_T GROUP BY col2) AS INTEGER) | CAST (col2 IN (SELECT col2 FROM another_T GROUP BY col2) AS INTEGER),
#	CAST (EXISTS (SELECT MAX(col5) * MAX(col4) FROM another_T GROUP BY col5, col4) AS INTEGER) & CAST (AVG(col1) IN (SELECT DISTINCT col2 FROM another_T GROUP BY col2) AS INTEGER)
% .%131,	.%132,	.%133,	.%134 # table_name
% %131,	%132,	%133,	%134 # name
% boolean,	boolean,	int,	int # type
% 5,	5,	1,	1 # length
[ true,	false,	1,	0	]
[ false,	false,	1,	0	]
#SELECT
#	SUM(col1) IN (SELECT DISTINCT col2 FROM another_T GROUP BY col2)
#FROM another_T
#GROUP BY col4;
% .%16 # table_name
% %16 # name
% boolean # type
% 5 # length
[ false	]
[ false	]
[ false	]
[ false	]
#SELECT
#	(SELECT MIN(ColID) FROM tbl_ProductSales INNER JOIN another_T t2 ON t1.col5 = t2.col1)
#FROM another_T t1;
% .%3 # table_name
% %3 # name
% int # type
% 1 # length
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
#SELECT
#	t1.col1 = ALL (SELECT col4 + SUM(t1.col5) FROM another_T INNER JOIN tbl_ProductSales ON another_T.col1 = tbl_ProductSales.ColID)
#FROM another_T t1
#GROUP BY t1.col1;
% .%27 # table_name
% %27 # name
% boolean # type
% 5 # length
[ false	]
[ false	]
[ false	]
[ false	]
#SELECT
#	SUM(t1.col6) NOT IN (SELECT t1.col7),
#	t1.col6 NOT IN (SELECT t1.col7),
#	t1.col6 IN (SELECT SUM(t1.col7)),
#	t1.col6 IN (SELECT SUM(t1.col7) FROM tbl_ProductSales)
#FROM another_T t1
#GROUP BY t1.col6, t1.col7;
% .%30,	.%43,	.%56,	.%70 # table_name
% %30,	%43,	%56,	%70 # name
% boolean,	boolean,	boolean,	boolean # type
% 5,	5,	5,	5 # length
[ true,	true,	false,	false	]
[ true,	true,	false,	false	]
[ true,	true,	false,	false	]
[ true,	true,	false,	false	]
#SELECT
#	SUM(col3 + col2)
#FROM another_T
#GROUP BY col1
#HAVING NOT col1 = ANY (SELECT 0 FROM tbl_ProductSales GROUP BY ColID HAVING NOT MAX(col1) <> AVG(col1));
% sys.%1 # table_name
% %1 # name
% bigint # type
% 4 # length
[ 5	]
[ 55	]
[ 555	]
[ 5555	]
#SELECT
#	SUM(col3) * col1
#FROM another_T
#GROUP BY col1
#HAVING NOT col1 <> ANY (SELECT 0 FROM tbl_ProductSales GROUP BY ColID HAVING NOT MAX(col1) <> col1 * AVG(col1 + ColID) * ColID);
% .%35 # table_name
% %35 # name
% bigint # type
% 7 # length
[ 3	]
[ 363	]
[ 36963	]
[ 3702963	]
#SELECT
#	SUM(CAST(t1.col1 IN (SELECT t1.col1 FROM another_T) AS INTEGER))
#FROM another_T t1
#GROUP BY t1.col2;
% .%4 # table_name
% %4 # name
% bigint # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#SELECT
#    (SELECT MIN(ColID) FROM tbl_ProductSales INNER JOIN another_T t2 ON t1.col7 <> SOME(SELECT MAX(t1.col1 + t3.col4) FROM another_T t3))
#FROM another_T t1;
% .%4 # table_name
% %4 # name
% int # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#SELECT
#	CASE WHEN 1 IN (SELECT (SELECT MAX(col7)) UNION ALL (SELECT MIN(ColID) FROM tbl_ProductSales INNER JOIN another_T t2 ON t2.col5 = t2.col1)) THEN 2 ELSE NULL END
#FROM another_T t1;	
% .%65 # table_name
% %65 # name
% tinyint # type
% 1 # length
[ NULL	]
#SELECT
#	CASE WHEN 1 IN (SELECT MAX(col7) UNION ALL (SELECT MIN(ColID) FROM tbl_ProductSales INNER JOIN another_T t2 ON t2.col5 = t2.col1)) THEN 2 ELSE NULL END
#FROM another_T t1;
% .%50 # table_name
% %50 # name
% tinyint # type
% 1 # length
[ NULL	]
#SELECT
#	CASE WHEN 1 IN (SELECT (SELECT MAX(col7))) THEN 2 ELSE NULL END
#FROM another_T t1;
% .%45 # table_name
% %45 # name
% tinyint # type
% 1 # length
[ NULL	]
#SELECT
#	CASE WHEN 1 IN (SELECT (SELECT MIN(ColID) FROM tbl_ProductSales INNER JOIN another_T t2 ON t2.col5 = t2.col1) UNION ALL (SELECT MAX(col7))) THEN 2 ELSE NULL END
#FROM another_T t1;
% .%52 # table_name
% %52 # name
% tinyint # type
% 1 # length
[ NULL	]
#SELECT
#	CASE WHEN NOT col1 NOT IN (SELECT (SELECT MAX(col7)) UNION (SELECT MIN(ColID) FROM tbl_ProductSales LEFT JOIN another_T t2 ON t2.col5 = t1.col1)) THEN 1 ELSE 2 END
#FROM another_T t1
#GROUP BY col1;
% .%107 # table_name
% %107 # name
% tinyint # type
% 1 # length
[ 1	]
[ 2	]
[ 2	]
[ 2	]
#SELECT
#	t1.col1 IN (SELECT ColID FROM tbl_ProductSales GROUP BY t1.col1, tbl_ProductSales.ColID)
#FROM another_T t1
#GROUP BY col1;
% .%15 # table_name
% %15 # name
% boolean # type
% 5 # length
[ true	]
[ false	]
[ false	]
[ false	]
#SELECT t1.col1 FROM another_T t1 WHERE t1.col1 >= ANY(SELECT t1.col1 + t2.col1 FROM another_T t2); --empty result
% sys.t1 # table_name
% col1 # name
% int # type
% 1 # length
#INSERT INTO tbl_ProductSales VALUES (0, 'a', 'b', 0);
[ 1	]
#SELECT col1 IN (SELECT ColID + col1 FROM tbl_ProductSales) FROM another_T GROUP BY col1; 
% .%15 # table_name
% %15 # name
% boolean # type
% 5 # length
[ true	]
[ true	]
[ true	]
[ true	]
#SELECT col1 IN (SELECT col1 * SUM(ColID + col1) FROM tbl_ProductSales) FROM another_T GROUP BY col1;
% .%17 # table_name
% %17 # name
% boolean # type
% 5 # length
[ false	]
[ false	]
[ false	]
[ false	]
#DROP TABLE tbl_ProductSales;
#DROP TABLE another_T;

# 18:55:46 >  
# 18:55:46 >  "Done."
# 18:55:46 >  

