stdout of test 'subquery6` in directory 'sql/test/subquery` itself:


# 11:45:43 >  
# 11:45:43 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-297142" "--port=31114"
# 11:45:43 >  

#CREATE TABLE tbl_ProductSales (ColID int, Product_Category  varchar(64), Product_Name  varchar(64), TotalSales int); 
#INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200),(2,'Game','PKO Game',400),(3,'Fashion','Shirt',500),(4,'Fashion','Shorts',100);
[ 4	]
#CREATE TABLE another_T (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT);
#INSERT INTO another_T VALUES (1,2,3,4,5,6,7,8), (11,22,33,44,55,66,77,88), (111,222,333,444,555,666,777,888), (1111,2222,3333,4444,5555,6666,7777,8888);
[ 4	]
#CREATE TABLE integers(i INTEGER);
#INSERT INTO integers VALUES (1), (2), (3), (NULL);
[ 4	]
#WITH customer_total_return AS
#  (SELECT 1 AS ctr_customer_sk,
#          1 AS ctr_state,
#          1 AS ctr_total_return)
#SELECT 1
#FROM customer_total_return ctr1,
#     another_T,
#     tbl_ProductSales
#WHERE ctr1.ctr_total_return >
#    (SELECT avg(ctr_total_return)*1.2
#     FROM customer_total_return ctr2
#     WHERE ctr1.ctr_state = ctr2.ctr_state)
#  AND col1 = ColID
#  AND ctr1.ctr_customer_sk = TotalSales;
% .%45 # table_name
% %45 # name
% tinyint # type
% 1 # length
#SELECT (SELECT (SELECT SUM(col1)) IN (MAX(col2))) FROM another_t;
% sys.%5 # table_name
% %5 # name
% boolean # type
% 5 # length
[ false	]
#SELECT (SELECT (SELECT SUM(col1)) IN (MAX(col2), '12')) FROM another_t;
% sys.%6 # table_name
% %6 # name
% boolean # type
% 5 # length
[ false	]
#SELECT CASE WHEN ColID IS NULL THEN CAST(Product_Category AS INT) ELSE TotalSales END FROM tbl_ProductSales;
% .%2 # table_name
% %2 # name
% int # type
% 3 # length
[ 200	]
[ 400	]
[ 500	]
[ 100	]
#SELECT ColID FROM tbl_ProductSales WHERE CASE WHEN ColID IS NULL THEN CAST(Product_Category AS INT) ELSE TotalSales END;
% sys.tbl_productsales # table_name
% colid # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ 4	]
#SELECT COALESCE(ColID, CAST(Product_Category AS INT)) FROM tbl_ProductSales;
% .%2 # table_name
% %2 # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ 4	]
#SELECT CAST(SUM((SELECT col1)) AS BIGINT) FROM another_t;
% sys.%3 # table_name
% %3 # name
% bigint # type
% 4 # length
[ 1234	]
#SELECT CAST(SUM((SELECT col1 + col2)) AS BIGINT) FROM another_t;
% sys.%2 # table_name
% %2 # name
% bigint # type
% 4 # length
[ 3702	]
#SELECT CAST(SUM((SELECT CAST(EXISTS(SELECT col1) AS INT))) AS BIGINT) FROM another_t;
% .%4 # table_name
% %4 # name
% bigint # type
% 1 # length
[ 4	]
#SELECT CAST(SUM((SELECT (SELECT col1 + col2))) AS BIGINT) FROM another_t;
% sys.%2 # table_name
% %2 # name
% bigint # type
% 4 # length
[ 3702	]
#SELECT CAST((SELECT SUM((SELECT col1))) AS BIGINT) FROM another_t;
% sys.%3 # table_name
% %3 # name
% bigint # type
% 4 # length
[ 1234	]
#SELECT CAST((SELECT SUM((SELECT col1 + col2))) AS BIGINT) FROM another_t;
% sys.%2 # table_name
% %2 # name
% bigint # type
% 4 # length
[ 3702	]
#SELECT (SELECT 1 FROM another_t t1 WHERE 'aa' LIKE t2.product_category) FROM tbl_ProductSales t2;
% .%1 # table_name
% %1 # name
% tinyint # type
% 1 # length
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
#SELECT t1.colid FROM tbl_productsales t1 INNER JOIN tbl_productsales t2 ON t1.product_category NOT LIKE t2.product_category ORDER BY t1.colid;
% sys.t1 # table_name
% colid # name
% int # type
% 1 # length
[ 1	]
[ 1	]
[ 2	]
[ 2	]
[ 3	]
[ 3	]
[ 4	]
[ 4	]
#SELECT t1.colid FROM tbl_productsales t1 INNER JOIN tbl_productsales t2 ON t1.product_category NOT LIKE t2.product_name ORDER BY t1.colid;
% sys.t1 # table_name
% colid # name
% int # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 2	]
[ 2	]
[ 2	]
[ 2	]
[ 3	]
[ 3	]
[ 3	]
[ 3	]
[ 4	]
[ 4	]
[ 4	]
[ 4	]
#SELECT (SELECT 1 FROM another_t t1 WHERE t2.product_category LIKE CAST(t1.col1 AS VARCHAR(32))) FROM tbl_ProductSales t2;
% .%2 # table_name
% %2 # name
% tinyint # type
% 1 # length
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
#SELECT (SELECT t2.col2 FROM another_t t2 WHERE t1.col1 BETWEEN t2.col1 AND t2.col2) FROM another_t t1;
% .%1 # table_name
% %1 # name
% int # type
% 4 # length
[ 2	]
[ 22	]
[ 222	]
[ 2222	]
#SELECT (SELECT 1) > ANY(SELECT 1);
% .%10 # table_name
% %10 # name
% boolean # type
% 5 # length
[ false	]
#CREATE FUNCTION debugme() RETURNS INT
#BEGIN
#	DECLARE res INT;
#	SET res = 1 > (select 9 from integers);
#	RETURN res;
#END;
#DROP FUNCTION debugme;
#SELECT i = ALL(i), i < ANY(i), i = ANY(NULL) FROM integers;
% sys.%3,	sys.%4,	.%5 # table_name
% %3,	%4,	%5 # name
% boolean,	boolean,	boolean # type
% 5,	5,	5 # length
[ true,	false,	NULL	]
[ true,	false,	NULL	]
[ true,	false,	NULL	]
[ NULL,	NULL,	NULL	]
#SELECT i FROM integers WHERE i = ANY(NULL);
% sys.integers # table_name
% i # name
% int # type
% 1 # length
#CREATE FUNCTION debugme() RETURNS INT
#BEGIN
#	DECLARE n INT;
#	WHILE (1 > (select 9 from integers)) do
#		SET n = n -1;
#	END WHILE;
#	RETURN n;
#END;
#DROP FUNCTION debugme;
#CREATE FUNCTION debugme() RETURNS INT
#BEGIN
#	DECLARE n INT;
#	WHILE (1 > ALL(select 1)) do
#		SET n = n -1;
#	END WHILE;
#	RETURN n;
#END;
#SELECT debugme(); --error, more than one row returned by a subquery used as an expression
% .%4 # table_name
% %4 # name
% int # type
% 1 # length
[ NULL	]
#DROP FUNCTION debugme3;
#CREATE FUNCTION debugme4() RETURNS BOOLEAN
#BEGIN
#	DECLARE n BOOLEAN;
#	SET n = (select true union all select false);
#	RETURN n;
#END;
#DROP FUNCTION debugme4;
#CREATE FUNCTION debugme5() RETURNS BOOLEAN
#BEGIN
#	DECLARE n BOOLEAN;
#	SET n = (select 1 where null);
#	RETURN n;
#END;
#DROP FUNCTION debugme5;
#CREATE FUNCTION debugme6() RETURNS INT
#BEGIN
#	DECLARE n INT;
#	WHILE ((SELECT 0) = ANY(SELECT 1)) do
#		SET n = 10;
#	END WHILE;
#	RETURN n;
#END;
#SELECT debugme6();
% .%6 # table_name
% %6 # name
% int # type
% 1 # length
[ NULL	]
#DROP FUNCTION debugme6;
#select rank() over (), min(TotalSales) from tbl_ProductSales;
% sys.%3,	sys.%4 # table_name
% %3,	%4 # name
% int,	int # type
% 1,	3 # length
[ 1,	100	]
#select count(*) over (), max(Product_Name) from tbl_ProductSales;
% sys.%7,	sys.%10 # table_name
% %7,	%10 # name
% bigint,	varchar # type
% 1,	6 # length
[ 1,	"Shorts"	]
#select corr(1,1), corr(1,1) over () from tbl_ProductSales;
% .%1,	.%12 # table_name
% %1,	%12 # name
% double,	double # type
% 24,	24 # length
[ NULL,	NULL	]
#select min(colid), group_concat(null) over () from tbl_ProductSales where null;
% sys.%1,	.%12 # table_name
% %1,	%12 # name
% int,	clob # type
% 1,	0 # length
[ NULL,	NULL	]
#select min(colid), group_concat(null, null) over () from tbl_ProductSales where null;
% sys.%1,	.%14 # table_name
% %1,	%14 # name
% int,	clob # type
% 1,	0 # length
[ NULL,	NULL	]
#select max(colid), group_concat('a', null) over () from tbl_ProductSales where null;
% sys.%1,	.%13 # table_name
% %1,	%13 # name
% int,	clob # type
% 1,	1 # length
[ NULL,	"a"	]
#select ntile(1) over ();
% .%4 # table_name
% %4 # name
% tinyint # type
% 1 # length
[ 1	]
#select ntile(11) over (), min(TotalSales) from tbl_ProductSales;
% sys.%4,	sys.%5 # table_name
% %4,	%5 # name
% tinyint,	int # type
% 1,	3 # length
[ 1,	100	]
#select nth_value('bug', '1') over ();
% .%11 # table_name
% %11 # name
% char # type
% 3 # length
[ "bug"	]
#select nth_value('bug', 1) over ();
% .%11 # table_name
% %11 # name
% char # type
% 3 # length
[ "bug"	]
#select nth_value('bug', 1) over (), max(TotalSales) from tbl_ProductSales;
% .%11,	sys.%12 # table_name
% %11,	%12 # name
% char,	int # type
% 3,	3 # length
[ "bug",	500	]
#select lag('bug') over (), lag('bug', 1) over (), lag('bug', 0) over (), lag('bug', 1, 'oth') over (), lag('bug', 0, 'oth') over ();
% .%4,	.%11,	.%16,	.%24,	.%32 # table_name
% %4,	%11,	%16,	%24,	%32 # name
% char,	char,	char,	char,	char # type
% 0,	0,	3,	3,	3 # length
[ NULL,	NULL,	"bug",	"oth",	"bug"	]
#select lead('bug') over (), lead('bug', 1) over (), lead('bug', 0) over (), lead('bug', 1, 'oth') over (), lead('bug', 0, 'oth') over (), max(TotalSales) from tbl_ProductSales;
% .%4,	.%11,	.%16,	.%24,	.%32,	sys.%33 # table_name
% %4,	%11,	%16,	%24,	%32,	%33 # name
% char,	char,	char,	char,	char,	int # type
% 0,	0,	3,	3,	3,	3 # length
[ NULL,	NULL,	"bug",	"oth",	"bug",	500	]
#DROP TABLE tbl_ProductSales;
#DROP TABLE another_T;
#DROP TABLE integers;

# 11:45:43 >  
# 11:45:43 >  "Done."
# 11:45:43 >  

