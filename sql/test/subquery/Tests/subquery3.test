statement ok
CREATE TABLE tbl_ProductSales (ColID int, Product_Category  varchar(64), Product_Name  varchar(64), TotalSales int)

statement ok
INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200),(2,'Game','PKO Game',400),(3,'Fashion','Shirt',500),(4,'Fashion','Shorts',100)

statement ok
CREATE TABLE another_T (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT)

statement ok
INSERT INTO another_T VALUES (1,2,3,4,5,6,7,8), (11,22,33,44,55,66,77,88), (111,222,333,444,555,666,777,888), (1111,2222,3333,4444,5555,6666,7777,8888)

statement ok
CREATE TABLE integers(i INTEGER)

statement ok
INSERT INTO integers VALUES (1), (2), (3), (NULL)

query I rowsort
SELECT
    NOT MAX(t1.col6) IN (SELECT SUM(t1.col6) FROM tbl_ProductSales tp HAVING MAX(t1.col1) > MIN(tp.colID))
FROM another_T t1
GROUP BY t1.col6, t1.col7
----
0
0
0
1

query IRI rowsort
SELECT
    CAST((SELECT MAX(ColID + col2) FROM tbl_ProductSales) * DENSE_RANK() OVER (PARTITION BY AVG(DISTINCT col5)) AS BIGINT),
    AVG(col1) * MIN(col8) OVER (PARTITION BY col5 ORDER BY col1 ROWS UNBOUNDED PRECEDING) evil,
    CAST(MAX(col3) / 10 + SUM(col1) * 10 AS BIGINT)
FROM another_T
GROUP BY col1, col2, col5, col8
----
2226
9874568.000
11443
226
98568.000
1143
26
968.000
113
6
8.000
10

query II rowsort
SELECT
    CAST (NOT col1 IN (SELECT col2 FROM another_T GROUP BY col2) AS INTEGER) | CAST (col2 IN (SELECT col2 FROM another_T GROUP BY col2) AS INTEGER),
    CAST (EXISTS (SELECT MAX(col5) * MAX(col4) FROM another_T GROUP BY col5, col4) AS INTEGER) & CAST (SUM(col4) IN (SELECT DISTINCT col2 FROM another_T GROUP BY col2) AS INTEGER)
FROM another_T
GROUP BY col1, col2, col5
----
1
0
1
0
1
0
1
0

query IIIIII rowsort
SELECT
	EXISTS (SELECT col1 WHERE TRUE),
	EXISTS (SELECT col1 WHERE FALSE),
	EXISTS (SELECT col1 WHERE NULL),
	NOT EXISTS (SELECT col1 WHERE TRUE),
	NOT EXISTS (SELECT col1 WHERE FALSE),
	NOT EXISTS (SELECT col1 WHERE NULL)
FROM another_T t1
----
1
0
0
0
1
1
1
0
0
0
1
1
1
0
0
0
1
1
1
0
0
0
1
1

query IIIIII rowsort
SELECT
	EXISTS (SELECT AVG(col1) WHERE TRUE),
	EXISTS (SELECT AVG(col1) WHERE FALSE),
	EXISTS (SELECT AVG(col1) WHERE NULL),
	NOT EXISTS (SELECT AVG(col1) WHERE TRUE),
	NOT EXISTS (SELECT AVG(col1) WHERE FALSE),
	NOT EXISTS (SELECT AVG(col1) WHERE NULL)
FROM another_T t1
----
1
0
0
0
1
1

query I rowsort
SELECT
	EXISTS (SELECT RANK() OVER (PARTITION BY SUM(DISTINCT col5)))
FROM another_T t1
----
1

statement error
SELECT
    (SELECT AVG(col1) OVER (PARTITION BY col5 ORDER BY col1 ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
FROM another_T t1

statement error
SELECT
    (SELECT SUM(col2) OVER (PARTITION BY SUM(col2) ORDER BY MAX(col1 + ColID) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
FROM another_T t1
GROUP BY col1

statement error
SELECT
    (SELECT SUM(SUM(col2)) OVER (PARTITION BY SUM(col2) ORDER BY MAX(col2) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
FROM another_T t1
GROUP BY col1

statement error
SELECT
    (SELECT DENSE_RANK() OVER (PARTITION BY col5 ORDER BY col1) FROM tbl_ProductSales)
FROM another_T t1

statement error
SELECT
    (SELECT DENSE_RANK() OVER (PARTITION BY MIN(col5) ORDER BY MAX(col8)) FROM tbl_ProductSales)
FROM another_T t1
GROUP BY col6

statement error
SELECT
    (SELECT DENSE_RANK() OVER (PARTITION BY MIN(col5) ORDER BY col8 * ColID) FROM tbl_ProductSales)
FROM another_T t1
GROUP BY col6

statement error
SELECT
    (SELECT t2.col1 * SUM(SUM(t1.col2)) OVER (PARTITION BY SUM(t1.col2) ORDER BY MAX(t1.col1) ROWS UNBOUNDED PRECEDING) FROM another_T t2)
FROM another_T t1
GROUP BY col1

statement error
SELECT
    (SELECT t2.col1 * SUM(SUM(col2)) OVER (PARTITION BY SUM(col2) ORDER BY MAX(col1) ROWS UNBOUNDED PRECEDING) FROM another_T t2)
FROM another_T t1
GROUP BY col1

query R rowsort
SELECT
    (SELECT SUM(AVG(ColID)) OVER (PARTITION BY SUM(ColID) ORDER BY MAX(ColID) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales GROUP BY t1.col1)
FROM another_T t1
----
2.500
2.500
2.500
2.500

query R rowsort
SELECT
    (SELECT SUM(AVG(ColID + col1)) OVER (PARTITION BY SUM(ColID + col3) ORDER BY MAX(ColID) * col4 ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales GROUP BY t1.col1)
FROM another_T t1
----
1113.500
113.500
13.500
3.500

query R rowsort
SELECT
    (SELECT MAX(t1.col2) * SUM(AVG(ColID)) OVER (PARTITION BY SUM(ColID) ORDER BY MAX(ColID) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
FROM another_T t1
----
5555.000

query R rowsort
SELECT
    (SELECT SUM(AVG(ColID)) OVER (PARTITION BY MAX(t1.col2) * SUM(ColID) ORDER BY MAX(ColID) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
FROM another_T t1
----
2.500

query R rowsort
SELECT
    (SELECT SUM(AVG(ColID)) OVER (PARTITION BY SUM(ColID) ORDER BY MAX(t1.col2) * MAX(ColID) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
FROM another_T t1
----
2.500

query R rowsort
SELECT
    (SELECT MAX(ColID) * SUM(AVG(ColID)) OVER (PARTITION BY SUM(ColID) ORDER BY MAX(ColID) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
FROM another_T t1
----
10.000
10.000
10.000
10.000

query I rowsort
SELECT
    CAST((SELECT SUM(SUM(col2)) OVER (PARTITION BY SUM(col2) ORDER BY MAX(col1) ROWS UNBOUNDED PRECEDING) FROM another_T) AS BIGINT)
FROM another_T t1
GROUP BY col1
----
2468
2468
2468
2468

query I rowsort
SELECT
    NOT AVG(col2) * col1 <> ANY (SELECT 20 FROM tbl_ProductSales HAVING MAX(col1) IS NULL) AS a1
FROM another_T
GROUP BY col1, col2, col5
ORDER BY a1 NULLS FIRST
----
1
1
1
1

query I rowsort
SELECT
    NOT SUM(t1.col2) * MIN(t1.col6 + t1.col6 - t1.col6 * t1.col6) NOT IN (SELECT MAX(t2.col6) FROM another_T t2 GROUP BY t1.col6 HAVING t1.col7 + MIN(t2.col8) < MAX(t2.col7 - t1.col6))
FROM another_T t1
GROUP BY t1.col7, t1.col6
----
0
0
0
0

query II rowsort
SELECT
    CASE WHEN NOT t1.col2 NOT IN (SELECT (SELECT MAX(t1.col7)) UNION (SELECT MIN(ColID) FROM tbl_ProductSales LEFT JOIN another_T t2 ON MIN(t1.col5) = t1.col1)) THEN 1 ELSE 2 END,
    CASE WHEN NOT t1.col2 NOT IN (SELECT (SELECT MAX(t1.col7)) UNION (SELECT MIN(ColID) FROM tbl_ProductSales tp LEFT JOIN another_T t2 ON tp.ColID = t1.col1 AND tp.ColID = t2.col2)) THEN 1 ELSE 2 END
FROM another_T t1
GROUP BY t1.col1, t1.col2
----
2
2
2
2
2
2
2
2

query I rowsort
SELECT
    SUM(t1.col6) <> ANY (SELECT t1.col7 INTERSECT SELECT t1.col6)
FROM another_T t1
GROUP BY t1.col7, t1.col6
----
0
0
0
0

query I rowsort
SELECT
    CASE WHEN t1.col1 IN (SELECT 1 FROM tbl_ProductSales tp LEFT JOIN another_T t2 ON tp.ColID = t1.col1) THEN 1 ELSE 2 END
FROM another_T t1
GROUP BY t1.col1
----
1
2
2
2

query I rowsort
SELECT
    1
FROM another_T t1
GROUP BY t1.col1, t1.col2, t1.col4
HAVING (t1.col1 = ANY (SELECT MAX(ColID + col2) FROM tbl_ProductSales)) NOT IN
    ((SELECT NOT EXISTS (SELECT t1.col2 FROM tbl_ProductSales WHERE tbl_ProductSales.ColID = t1.col1)) UNION ALL
     (SELECT NOT t1.col1 BETWEEN (SELECT MAX(t1.col7) EXCEPT SELECT tp.ColID FROM tbl_ProductSales tp) AND (SELECT MIN(t1.col5) EXCEPT SELECT t1.col2)))
----
1
1
1

query I rowsort
SELECT
    1
FROM another_T t1
GROUP BY t1.col1, t1.col2, t1.col4
HAVING (t1.col1 = ANY (SELECT MAX(ColID + col2) FROM tbl_ProductSales)) <
    ((SELECT NOT EXISTS (SELECT t1.col2 FROM tbl_ProductSales WHERE tbl_ProductSales.ColID = t1.col1)) INTERSECT
     (SELECT NOT t1.col1 IN (SELECT MAX(t1.col7) EXCEPT SELECT tp.ColID FROM tbl_ProductSales tp)))
----
1
1
1

query III rowsort
SELECT
    col6,
    col7,
    NOT SUM(t1.col6) NOT IN (SELECT MAX(t2.col6) FROM another_T t2 GROUP BY t1.col6 HAVING t1.col7 < MAX(t1.col6))
FROM another_T t1
GROUP BY t1.col7, t1.col6
----
6
7
0
66
77
0
666
777
0
6666
7777
0

query III rowsort
SELECT
    col6,
    col7,
    NOT SUM(t1.col6) NOT IN (SELECT MAX(t2.col6) FROM another_T t2 GROUP BY t1.col6 HAVING t1.col7 < MAX(t2.col7 - t1.col6))
FROM another_T t1
GROUP BY t1.col7, t1.col6
----
6
7
0
66
77
0
666
777
0
6666
7777
0

query I rowsort
SELECT
    CASE WHEN NULL IN (SELECT MIN(ColID) FROM tbl_ProductSales tp LEFT JOIN another_T t2 ON tp.ColID = t1.col1) THEN 1 ELSE 2 END
FROM another_T t1
GROUP BY t1.col1, t1.col2
----
2
2
2
2

query I rowsort
SELECT
    CASE WHEN NULL NOT IN (SELECT 1 FROM tbl_ProductSales tp FULL OUTER JOIN another_T t2 ON tp.ColID = t1.col1) THEN 1 ELSE 2 END
FROM another_T t1
----
2
2
2
2

query I rowsort
SELECT
	MIN(i1.i)
FROM integers i1
GROUP BY (SELECT MAX(i2.i) FROM integers i2 LEFT JOIN integers i3 on i1.i = i2.i)
----
1

query I rowsort
SELECT
	MAX(t1.col1)
FROM another_T t1
GROUP BY (NOT t1.col6 NOT IN (SELECT MAX(t2.col6) FROM another_T t2 GROUP BY t1.col6 HAVING t1.col7 < MAX(t2.col7 - t1.col6)))
HAVING (MIN(t1.col7) <> ANY(SELECT MAX(t2.col5) FROM another_T t2 GROUP BY t2.col6 HAVING t2.col6 + MIN(t2.col2) = MAX(t1.col7)))
----

query I rowsort
SELECT
	1
FROM integers i1
GROUP BY (VALUES(1))
----
1

query I rowsort
SELECT
	MIN(i1.i)
FROM integers i1
GROUP BY (SELECT SUM(i1.i + i2.i) FROM integers i2)
----
1
2
3
NULL

statement error
SELECT
	MIN(i1.i)
FROM integers i1
GROUP BY (SELECT i2.i FROM integers i2)

statement error
SELECT
    (SELECT SUM(t1.col1) OVER (PARTITION BY (VALUES(1)) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
FROM another_T t1

statement error
SELECT
    (SELECT SUM(t1.col1) OVER (ORDER BY (VALUES(1)) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
FROM another_T t1

statement error
SELECT
    (SELECT SUM(t1.col1) OVER (ORDER BY (SELECT SUM(t1.col1 + t2.col1) FROM another_T t2) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
FROM another_T t1

query I rowsort
SELECT
    CAST(SUM(CAST(SUM(CAST (NOT t1.col1 IN (SELECT 1) AS INTEGER)) < ANY (SELECT 1) AS INT)) OVER () AS BIGINT)
FROM another_T t1
GROUP BY t1.col6
----
1
1
1
1

statement error
SELECT
    SUM(SUM(t1.col7) * CAST (NOT t1.col1 IN (SELECT 1) AS INTEGER)) OVER ()
FROM another_T t1
GROUP BY t1.col7

statement error
SELECT
    SUM(CAST(SUM(t1.col6 * CAST (NOT t1.col1 IN (SELECT t2.col2 FROM another_T t2 GROUP BY t2.col2) AS INTEGER)) < ANY (SELECT MAX(ColID + t1.col7 - t1.col2) FROM tbl_ProductSales) AS INT)) OVER (PARTITION BY SUM(t1.col5) ORDER BY (SELECT MIN(t1.col6 + t1.col5 - t2.col2) FROM another_T t2))
FROM another_T t1
GROUP BY t1.col7, t1.col6

query I rowsort
SELECT
    (SELECT 1 FROM integers i2 GROUP BY SUM(i1.i))
FROM integers i1
----
1

statement error
SELECT
    (SELECT 1 FROM integers i2 GROUP BY SUM(i2.i))
FROM integers i1

statement error
SELECT
    1
FROM another_T
WHERE col5 = (SELECT AVG(col2))

statement error
SELECT
    1
FROM another_T
INNER JOIN tbl_ProductSales ON (SELECT MIN(col1)) = (SELECT MAX(col3))

statement error
SELECT
    1
FROM another_T
GROUP BY (SELECT AVG(col2))

statement error
SELECT
	(SELECT 1 FROM integers i2 WHERE AVG(i2.i))
FROM integers i1

statement error
SELECT
	(SELECT 1 FROM (VALUES (MAX(2))) as i2)
FROM integers i1

statement error
SELECT
	(SELECT 1 FROM integers i2 INNER JOIN integers i3 on MAX(i3.i) = MIN(i2.i))
FROM integers i1

statement error
SELECT
    (SELECT SUM(SUM(i1.i) + i2.i) FROM integers i2 GROUP BY i2.i)
FROM integers i1

statement error
SELECT
    (SELECT SUM(SUM(i1.i)) FROM integers i2 GROUP BY i2.i)
FROM integers i1

statement error
SELECT
    (SELECT SUM(SUM(i2.i)) FROM integers i2 GROUP BY i2.i)
FROM integers i1

query I rowsort
SELECT (1) IN (1)
----
1

query I rowsort
SELECT (1) IN (SELECT 1)
----
1

query I rowsort
SELECT col1 FROM another_T WHERE 1 IN (SELECT 1)
----
1
11
111
1111

statement error
SELECT (col1, col2) IN (VALUES (1,2)) FROM another_T

statement error
SELECT (col1, col2) IN (SELECT 1,2) FROM another_T

statement error
SELECT (col1, col2) IN (SELECT 1,3) FROM another_T

query I rowsort
SELECT col1 FROM another_T WHERE (col2, col3) IN (SELECT col4, col5)
----

query I rowsort
SELECT col1 FROM another_T WHERE (1, 2) IN (SELECT col4, col5)
----

query I rowsort
SELECT col1 FROM another_T WHERE (col2) IN (VALUES(1))
----

query I rowsort
SELECT col1 FROM another_T WHERE col2 IN (VALUES(1))
----

statement error
SELECT (1,2) IN (SELECT 1,2)

query I rowsort
SELECT col1 FROM another_T WHERE (col2, col3) IN (VALUES(1,2))
----

query I rowsort
SELECT col1 FROM another_T WHERE (col2, col3) IN (SELECT 1,2)
----

statement error
SELECT (1,2) IN (1,2)

statement error
SELECT (1,2) IN (1)

statement error
SELECT (col1, col2) IN (VALUES (1)) FROM another_T

statement error
SELECT (col1, col2) IN (1) FROM another_T

statement error
SELECT col1 FROM another_T WHERE (col2, col3) IN (1,2,3)

statement error
SELECT col1 FROM another_T WHERE (col2, col3) IN (SELECT 1)

statement error
SELECT col1 FROM another_T WHERE (col2, 1) IN (SELECT 1)

statement error
SELECT col1 FROM another_T WHERE (1, col2) IN (SELECT 1)

statement error
SELECT col1 FROM another_T WHERE (1, 1) IN (SELECT 1)

statement error
SELECT col1 FROM another_T WHERE (col2) IN (SELECT 1,2)

statement error
SELECT col1 FROM another_T WHERE (col2, col3) IN (SELECT 1,2,3)

statement error
SELECT col1 FROM another_T WHERE (col2, col3) IN (VALUES(1,2,3))

statement error
SELECT * FROM integers i1 ORDER BY SUM(i)

statement error
SELECT i FROM integers i1 ORDER BY SUM(i)

statement error
SELECT * FROM integers i1 ORDER BY (SELECT SUM(i1.i) FROM integers i2)

statement error
SELECT i FROM integers i1 ORDER BY (SELECT SUM(i1.i) FROM integers i2)

statement ok
CREATE FUNCTION evilfunction(input INT) RETURNS TABLE (outt INT) BEGIN RETURN TABLE(SELECT input); END

statement error
SELECT
	(SELECT outt FROM evilfunction((SELECT col0)))
FROM another_T

query I rowsort
SELECT
	(SELECT outt FROM evilfunction((SELECT col1)))
FROM another_T
----
1
11
111
1111

statement error
SELECT
	(SELECT outt FROM evilfunction((SELECT col1 FROM tbl_ProductSales)))
FROM another_T

statement error
SELECT
	(SELECT outt FROM evilfunction((SELECT t2.col1 FROM another_T t2)))
FROM another_T

query I rowsort
SELECT
	(SELECT outt FROM evilfunction((SELECT MIN(col1))))
FROM another_T
----
1

query I rowsort
SELECT
	(SELECT outt FROM evilfunction((SELECT MAX(ColID) FROM tbl_ProductSales)))
FROM another_T
----
4
4
4
4

statement error
SELECT
	(SELECT outt FROM evilfunction((SELECT MAX(t1.col1) FROM tbl_ProductSales)))
FROM another_T t1

query I rowsort
SELECT
	(SELECT outt FROM evilfunction((SELECT MIN(t2.col1) FROM another_T t2)))
FROM another_T
----
1
1
1
1

statement ok
CREATE OR REPLACE FUNCTION evilfunction(input INT) RETURNS TABLE (outt INT) BEGIN RETURN TABLE(VALUES (input), (input)); END

query I rowsort
SELECT * FROM evilfunction(1)
----
1
1

statement error
SELECT
	(SELECT outt FROM evilfunction((SELECT MIN(col1))))
FROM another_T

statement error
SELECT
	(SELECT outt FROM evilfunction((SELECT MAX(ColID) FROM tbl_ProductSales)))
FROM another_T

statement error
SELECT
	(SELECT outt FROM evilfunction((SELECT MAX(t1.col1) FROM tbl_ProductSales)))
FROM another_T t1

statement error
SELECT
	(SELECT outt FROM evilfunction((SELECT MIN(t2.col1) FROM another_T t2)))
FROM another_T

statement error
SELECT
	(SELECT i1.i FROM (VALUES (MIN(i1.i), MAX(i1.i))) as i2(i,j))
FROM integers i1

query I rowsort
SELECT
	(SELECT i2.i FROM (VALUES (MIN(i1.i))) as i2(i))
FROM integers i1
----
1

query II rowsort
SELECT
	(SELECT i2.i FROM (VALUES (MIN(i1.i), MAX(i1.i))) as i2(i,j)),
	(SELECT i2.j FROM (VALUES (MIN(i1.i), MAX(i1.i))) as i2(i,j))
FROM integers i1
----
1
3

query I rowsort
SELECT
	(SELECT i2.i FROM (VALUES (i1.i)) as i2(i))
FROM integers i1
----
1
2
3
NULL

query I rowsort
SELECT
	(SELECT 1 FROM (VALUES (i1.i)) as i2(i))
FROM integers i1
----
1
1
1
1

statement error
SELECT
	(SELECT i2.i FROM (VALUES (i1.i), (i1.i)) as i2(i))
FROM integers i1

statement error
SELECT
	(SELECT i2.i FROM (VALUES (i1.i, i1.i), (i1.i, i1.i)) as i2(i,j))
FROM integers i1

query I rowsort
SELECT i FROM integers ORDER BY (SELECT true)
----
1
2
3
NULL

query I rowsort
 
SELECT i FROM integers GROUP BY i HAVING (SELECT i)
----
1
2
3

statement ok
DROP FUNCTION evilfunction(INT)

statement ok
DROP TABLE tbl_ProductSales

statement ok
DROP TABLE another_T

statement ok
DROP TABLE integers

