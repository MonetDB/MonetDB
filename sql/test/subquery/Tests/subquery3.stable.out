stdout of test 'subquery3` in directory 'sql/test/subquery` itself:


# 17:40:41 >  
# 17:40:41 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33945" "--set" "mapi_usock=/var/tmp/mtest-14741/.s.monetdb.33945" "--forcemito" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_subquery" "--set" "embedded_c=true"
# 17:40:41 >  

# MonetDB 5 server v11.36.0 (hg id: 1d18bd8860b4+)
# This is an unreleased version
# Serving database 'mTests_sql_test_subquery', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 128bit integers
# Found 15.384 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2020 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.localdomain:33945/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-14741/.s.monetdb.33945
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

# 17:40:41 >  
# 17:40:41 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-14741" "--port=33945"
# 17:40:41 >  

#CREATE TABLE tbl_ProductSales (ColID int, Product_Category  varchar(64), Product_Name  varchar(64), TotalSales int); 
#INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200),(2,'Game','PKO Game',400),(3,'Fashion','Shirt',500),(4,'Fashion','Shorts',100);
[ 4	]
#CREATE TABLE another_T (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT);
#INSERT INTO another_T VALUES (1,2,3,4,5,6,7,8), (11,22,33,44,55,66,77,88), (111,222,333,444,555,666,777,888), (1111,2222,3333,4444,5555,6666,7777,8888);
[ 4	]
#CREATE TABLE integers(i INTEGER);
#INSERT INTO integers VALUES (1), (2), (3), (NULL);
[ 4	]
#SELECT
#    NOT MAX(t1.col6) IN (SELECT SUM(t1.col6) FROM tbl_ProductSales tp HAVING MAX(t1.col1) > MIN(tp.colID))
#FROM another_T t1
#GROUP BY t1.col6, t1.col7;
% . # table_name
% %32 # name
% boolean # type
% 5 # length
[ false	]
[ false	]
[ false	]
[ true	]
#SELECT
#    (SELECT MAX(ColID + col2) FROM tbl_ProductSales) * DENSE_RANK() OVER (PARTITION BY AVG(DISTINCT col5)),
#    AVG(col1) * MIN(col8) OVER (PARTITION BY col5 ORDER BY col1 ROWS UNBOUNDED PRECEDING) evil,
#    MAX(col3) / 10 + SUM(col1) * 10
#FROM another_T
#GROUP BY col1, col2, col5, col8;
% .,	.,	. # table_name
% %34,	evil,	%36 # name
% bigint,	double,	bigint # type
% 4,	24,	5 # length
[ 6,	8,	10	]
[ 26,	968,	113	]
[ 226,	98568,	1143	]
[ 2226,	9874568,	11443	]
#SELECT
#    CAST (NOT col1 IN (SELECT col2 FROM another_T GROUP BY col2) AS INTEGER) | CAST (col2 IN (SELECT col2 FROM another_T GROUP BY col2) AS INTEGER),
#    CAST (EXISTS (SELECT MAX(col5) * MAX(col4) FROM another_T GROUP BY col5, col4) AS INTEGER) & CAST (SUM(col4) IN (SELECT DISTINCT col2 FROM another_T GROUP BY col2) AS INTEGER)
#FROM another_T
#GROUP BY col1, col2, col5;
% .,	. # table_name
% %50,	%51 # name
% int,	int # type
% 1,	1 # length
[ 1,	0	]
[ 1,	0	]
[ 1,	0	]
[ 1,	0	]
#SELECT
#	EXISTS (SELECT col1 WHERE TRUE),
#	EXISTS (SELECT col1 WHERE FALSE),
#	EXISTS (SELECT col1 WHERE NULL),
#	NOT EXISTS (SELECT col1 WHERE TRUE),
#	NOT EXISTS (SELECT col1 WHERE FALSE),
#	NOT EXISTS (SELECT col1 WHERE NULL)
#FROM another_T t1;
% .,	.,	.,	.,	.,	. # table_name
% %240,	%241,	%242,	%243,	%244,	%245 # name
% boolean,	boolean,	boolean,	boolean,	boolean,	boolean # type
% 5,	5,	5,	5,	5,	5 # length
[ true,	false,	false,	false,	true,	true	]
[ true,	false,	false,	false,	true,	true	]
[ true,	false,	false,	false,	true,	true	]
[ true,	false,	false,	false,	true,	true	]
#SELECT
#	EXISTS (SELECT AVG(col1) WHERE TRUE),
#	EXISTS (SELECT AVG(col1) WHERE FALSE),
#	EXISTS (SELECT AVG(col1) WHERE NULL),
#	NOT EXISTS (SELECT AVG(col1) WHERE TRUE),
#	NOT EXISTS (SELECT AVG(col1) WHERE FALSE),
#	NOT EXISTS (SELECT AVG(col1) WHERE NULL)
#FROM another_T t1;
% .,	.,	.,	.,	.,	. # table_name
% %240,	%241,	%242,	%243,	%244,	%245 # name
% boolean,	boolean,	boolean,	boolean,	boolean,	boolean # type
% 5,	5,	5,	5,	5,	5 # length
[ true,	false,	false,	false,	true,	true	]
#SELECT
#	EXISTS (SELECT RANK() OVER (PARTITION BY SUM(DISTINCT col5)))
#FROM another_T t1;
% . # table_name
% %25 # name
% boolean # type
% 5 # length
[ true	]
#SELECT
#    (SELECT SUM(AVG(ColID)) OVER (PARTITION BY SUM(ColID) ORDER BY MAX(ColID) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales GROUP BY t1.col1)
#FROM another_T t1;
% .%5 # table_name
% %5 # name
% double # type
% 24 # length
[ 2.5	]
[ 2.5	]
[ 2.5	]
[ 2.5	]
#SELECT
#    (SELECT SUM(AVG(ColID + col1)) OVER (PARTITION BY SUM(ColID + col3) ORDER BY MAX(ColID) * col4 ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales GROUP BY t1.col1)
#FROM another_T t1;
% .%6 # table_name
% %6 # name
% double # type
% 24 # length
[ 3.5	]
[ 13.5	]
[ 113.5	]
[ 1113.5	]
#SELECT
#    (SELECT MAX(t1.col2) * SUM(AVG(ColID)) OVER (PARTITION BY SUM(ColID) ORDER BY MAX(ColID) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
#FROM another_T t1;
% .%5 # table_name
% %5 # name
% double # type
% 24 # length
[ 5555	]
#SELECT
#    (SELECT SUM(AVG(ColID)) OVER (PARTITION BY MAX(t1.col2) * SUM(ColID) ORDER BY MAX(ColID) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
#FROM another_T t1;
% .%5 # table_name
% %5 # name
% double # type
% 24 # length
[ 2.5	]
#SELECT
#    (SELECT SUM(AVG(ColID)) OVER (PARTITION BY SUM(ColID) ORDER BY MAX(t1.col2) * MAX(ColID) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
#FROM another_T t1;
% .%6 # table_name
% %6 # name
% double # type
% 24 # length
[ 2.5	]
#SELECT
#    (SELECT MAX(ColID) * SUM(AVG(ColID)) OVER (PARTITION BY SUM(ColID) ORDER BY MAX(ColID) ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales)
#FROM another_T t1; --MonetDB outputs this one right, but we should leave it here, as it doesn't trigger an error
% .%5 # table_name
% %5 # name
% double # type
% 24 # length
[ 10	]
[ 10	]
[ 10	]
[ 10	]
#SELECT
#    (SELECT SUM(SUM(col2)) OVER (PARTITION BY SUM(col2) ORDER BY MAX(col1) ROWS UNBOUNDED PRECEDING) FROM another_T)
#FROM another_T t1
#GROUP BY col1; --MonetDB outputs this one right, but we should leave it here, as it doesn't trigger an error
% .%4 # table_name
% %4 # name
% bigint # type
% 4 # length
[ 2468	]
[ 2468	]
[ 2468	]
[ 2468	]
#SELECT
#    NOT AVG(col2) * col1 <> ANY (SELECT 20 FROM tbl_ProductSales HAVING MAX(col1) IS NULL) AS a1
#FROM another_T
#GROUP BY col1, col2, col5
#ORDER BY a1 NULLS FIRST;
% . # table_name
% a1 # name
% boolean # type
% 5 # length
[ true	]
[ true	]
[ true	]
[ true	]
#SELECT
#    NOT SUM(t1.col2) * MIN(t1.col6 + t1.col6 - t1.col6 * t1.col6) NOT IN (SELECT MAX(t2.col6) FROM another_T t2 GROUP BY t1.col6 HAVING t1.col7 + MIN(t2.col8) < MAX(t2.col7 - t1.col6))
#FROM another_T t1
#GROUP BY t1.col7, t1.col6;
% .%22 # table_name
% %22 # name
% boolean # type
% 5 # length
[ false	]
[ false	]
[ false	]
[ false	]
#SELECT
#    CASE WHEN NOT t1.col2 NOT IN (SELECT (SELECT MAX(t1.col7)) UNION (SELECT MIN(ColID) FROM tbl_ProductSales LEFT JOIN another_T t2 ON MIN(t1.col5) = t1.col1)) THEN 1 ELSE 2 END,
#    CASE WHEN NOT t1.col2 NOT IN (SELECT (SELECT MAX(t1.col7)) UNION (SELECT MIN(ColID) FROM tbl_ProductSales tp LEFT JOIN another_T t2 ON tp.ColID = t1.col1 AND tp.ColID = t2.col2)) THEN 1 ELSE 2 END
#FROM another_T t1
#GROUP BY t1.col1, t1.col2;
% .,	. # table_name
% %205,	%206 # name
% tinyint,	tinyint # type
% 1,	1 # length
[ 2,	2	]
[ 2,	2	]
[ 2,	2	]
[ 2,	2	]
#SELECT
#    SUM(t1.col6) <> ANY (SELECT t1.col7 INTERSECT SELECT t1.col6)
#FROM another_T t1
#GROUP BY t1.col7, t1.col6;
% . # table_name
% %37 # name
% boolean # type
% 5 # length
[ false	]
[ false	]
[ false	]
[ false	]
#SELECT
#    CASE WHEN t1.col1 IN (SELECT 1 FROM tbl_ProductSales tp LEFT JOIN another_T t2 ON tp.ColID = t1.col1) THEN 1 ELSE 2 END
#FROM another_T t1
#GROUP BY t1.col1;
% . # table_name
% %26 # name
% tinyint # type
% 1 # length
[ 1	]
[ 2	]
[ 2	]
[ 2	]
#SELECT
#    1
#FROM another_T t1
#GROUP BY t1.col1, t1.col2, t1.col4
#HAVING (t1.col1 = ANY (SELECT MAX(ColID + col2) FROM tbl_ProductSales)) NOT IN 
#    ((SELECT NOT EXISTS (SELECT t1.col2 FROM tbl_ProductSales WHERE tbl_ProductSales.ColID = t1.col1)) UNION ALL
#     (SELECT NOT t1.col1 BETWEEN (SELECT MAX(t1.col7) EXCEPT SELECT tp.ColID FROM tbl_ProductSales tp) AND (SELECT MIN(t1.col5) EXCEPT SELECT t1.col2)));
% . # table_name
% single_value # name
% tinyint # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
#SELECT
#    1
#FROM another_T t1
#GROUP BY t1.col1, t1.col2, t1.col4
#HAVING (t1.col1 = ANY (SELECT MAX(ColID + col2) FROM tbl_ProductSales)) <
#    ((SELECT NOT EXISTS (SELECT t1.col2 FROM tbl_ProductSales WHERE tbl_ProductSales.ColID = t1.col1)) INTERSECT
#     (SELECT NOT t1.col1 IN (SELECT MAX(t1.col7) EXCEPT SELECT tp.ColID FROM tbl_ProductSales tp)));
% . # table_name
% single_value # name
% tinyint # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
#SELECT
#    col6,
#    col7,
#    NOT SUM(t1.col6) NOT IN (SELECT MAX(t2.col6) FROM another_T t2 GROUP BY t1.col6 HAVING t1.col7 < MAX(t1.col6))
#FROM another_T t1
#GROUP BY t1.col7, t1.col6;
% .t1,	.t1,	.%16 # table_name
% col6,	col7,	%16 # name
% int,	int,	boolean # type
% 4,	4,	5 # length
[ 6,	7,	false	]
[ 66,	77,	false	]
[ 666,	777,	false	]
[ 6666,	7777,	false	]
#SELECT
#    col6,
#    col7,
#    NOT SUM(t1.col6) NOT IN (SELECT MAX(t2.col6) FROM another_T t2 GROUP BY t1.col6 HAVING t1.col7 < MAX(t2.col7 - t1.col6))
#FROM another_T t1
#GROUP BY t1.col7, t1.col6;
% .t1,	.t1,	.%16 # table_name
% col6,	col7,	%16 # name
% int,	int,	boolean # type
% 4,	4,	5 # length
[ 6,	7,	false	]
[ 66,	77,	false	]
[ 666,	777,	false	]
[ 6666,	7777,	false	]
#SELECT
#    CASE WHEN NULL IN (SELECT MIN(ColID) FROM tbl_ProductSales tp LEFT JOIN another_T t2 ON tp.ColID = t1.col1) THEN 1 ELSE 2 END
#FROM another_T t1
#GROUP BY t1.col1, t1.col2;
% . # table_name
% %33 # name
% tinyint # type
% 1 # length
[ 2	]
[ 2	]
[ 2	]
[ 2	]
#SELECT
#    CASE WHEN NULL NOT IN (SELECT 1 FROM tbl_ProductSales tp FULL OUTER JOIN another_T t2 ON tp.ColID = t1.col1) THEN 1 ELSE 2 END
#FROM another_T t1;
% . # table_name
% %35 # name
% tinyint # type
% 1 # length
[ 2	]
[ 2	]
[ 2	]
[ 2	]
#SELECT 
#	MIN(i1.i)
#FROM integers i1
#GROUP BY (SELECT MAX(i2.i) FROM integers i2 LEFT JOIN integers i3 on i1.i = i2.i);
% .%4 # table_name
% %4 # name
% int # type
% 1 # length
[ 1	]
#SELECT
#	MAX(t1.col1)
#FROM another_T t1
#GROUP BY (NOT t1.col6 NOT IN (SELECT MAX(t2.col6) FROM another_T t2 GROUP BY t1.col6 HAVING t1.col7 < MAX(t2.col7 - t1.col6)))
#HAVING (MIN(t1.col7) <> ANY(SELECT MAX(t2.col5) FROM another_T t2 GROUP BY t2.col6 HAVING t2.col6 + MIN(t2.col2) = MAX(t1.col7)));
% .%5 # table_name
% %5 # name
% int # type
% 1 # length
#SELECT
#	1
#FROM integers i1
#GROUP BY (VALUES(1));
% . # table_name
% single_value # name
% tinyint # type
% 1 # length
[ 1	]
#SELECT
#	MIN(i1.i)
#FROM integers i1
#GROUP BY (SELECT SUM(i1.i + i2.i) FROM integers i2);
% .%2 # table_name
% %2 # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ NULL	]
#SELECT
#    SUM(CAST(SUM(CAST (NOT t1.col1 IN (SELECT 1) AS INTEGER)) < ANY (SELECT 1) AS INT)) OVER ()
#FROM another_T t1
#GROUP BY t1.col6;
% . # table_name
% %27 # name
% bigint # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#SELECT
#    (SELECT 1 FROM integers i2 GROUP BY SUM(i1.i))
#FROM integers i1; --The sum at group by is a correlation from the outer query, so it's allowed inside the GROUP BY at this case
% .%3 # table_name
% %3 # name
% tinyint # type
% 1 # length
[ 1	]
#SELECT (1) IN (1);
% . # table_name
% %2 # name
% boolean # type
% 5 # length
[ true	]
#SELECT (1) IN (SELECT 1);
% .%13 # table_name
% %13 # name
% boolean # type
% 5 # length
[ true	]
#SELECT col1 FROM another_T WHERE 1 IN (SELECT 1);
% sys.another_t # table_name
% col1 # name
% int # type
% 4 # length
[ 1	]
[ 11	]
[ 111	]
[ 1111	]
#SELECT col1 FROM another_T WHERE (col2, col3) IN (SELECT col4, col5); --empty
% sys.another_t # table_name
% col1 # name
% int # type
% 1 # length
#SELECT col1 FROM another_T WHERE (1, 2) IN (SELECT col4, col5); --empty
% sys.another_t # table_name
% col1 # name
% int # type
% 1 # length
#SELECT col1 FROM another_T WHERE (col2) IN (VALUES(1)); --empty
% sys.another_t # table_name
% col1 # name
% int # type
% 1 # length
#SELECT col1 FROM another_T WHERE col2 IN (VALUES(1)); --empty
% sys.another_t # table_name
% col1 # name
% int # type
% 1 # length
#SELECT col1 FROM another_T WHERE (col2, col3) IN (VALUES(1,2)); --empty
% sys.another_t # table_name
% col1 # name
% int # type
% 1 # length
#SELECT col1 FROM another_T WHERE (col2, col3) IN (SELECT 1,2); --empty
% sys.another_t # table_name
% col1 # name
% int # type
% 1 # length
#CREATE FUNCTION evilfunction(input INT) RETURNS TABLE (outt INT) BEGIN RETURN TABLE(SELECT input); END;
#SELECT
#	(SELECT outt FROM evilfunction((SELECT MIN(col1)))) 
#FROM another_T;
% .%4 # table_name
% %4 # name
% int # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#SELECT
#	(SELECT outt FROM evilfunction((SELECT MAX(col1) FROM tbl_ProductSales))) 
#FROM another_T; 
% .%4 # table_name
% %4 # name
% int # type
% 4 # length
[ 1111	]
[ 1111	]
[ 1111	]
[ 1111	]
#SELECT
#	(SELECT outt FROM evilfunction((SELECT MIN(t2.col1) FROM another_T t2))) 
#FROM another_T;
% .%4 # table_name
% %4 # name
% int # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#DROP FUNCTION evilfunction(INT);
#DROP TABLE tbl_ProductSales;
#DROP TABLE another_T;

# 17:40:41 >  
# 17:40:41 >  "Done."
# 17:40:41 >  

