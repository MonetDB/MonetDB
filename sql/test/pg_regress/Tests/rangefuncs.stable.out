stdout of test 'rangefuncs` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#SELECT string, setting FROM pg_settings WHERE name LIKE 'enable%';
% sys.L0,	sys.L0 # table_name
% name,	setting # name
% ?,	? # type
% ?,	? # length
[ "enable_hashagg",	"on" ]
[ "enable_hashjoin",	"on" ]
[ "enable_indexscan",	"on" ]
[ "enable_mergejoin",	"on" ]
[ "enable_nestloop",	"on" ]
[ "enable_seqscan",	"on" ]
[ "enable_sort",	"on" ]
[ "enable_tidscan",	"on" ]

#CREATE TABLE foo2(fooid int, f2 int);
#INSERT INTO foo2 VALUES(1, 11);
[ 1 ]
#INSERT INTO foo2 VALUES(2, 22);
[ 1 ]
#INSERT INTO foo2 VALUES(1, 111);
[ 1 ]
#CREATE FUNCTION foot(int) returns setof foo2 as 'SELECT * FROM foo2 WHERE fooid = $1;' LANGUAGE SQL;
#-- supposed to fail with ERROR
#
#-- function in subselect
#select * from foo2 where f2 in (select f2 from foot(foo2.fooid) z where z.fooid = foo2.fooid) ORDER BY 1,2;
% sys.L0,	sys.L0 # table_name
% fooid,	f2 # name
% ?,	? # type
% ?,	? # length
[ 1,	11 ]
[ 1,	111 ]
[ 2,	22 ]

#-- function in subselect
#select * from foo2 where f2 in (select f2 from foot(1) z where z.fooid = foo2.fooid) ORDER BY 1,2;
% sys.L0,	sys.L0 # table_name
% fooid,	f2 # name
% ?,	? # type
% ?,	? # length
[ 1,	11 ]
[ 1,	111 ]

#-- function in subselect
#select * from foo2 where f2 in (select f2 from foot(foo2.fooid) z where z.fooid = 1) ORDER BY 1,2;
% sys.L0,	sys.L0 # table_name
% fooid,	f2 # name
% ?,	? # type
% ?,	? # length
[ 1,	11 ]
[ 1,	111 ]

#-- nested functions
#select foot.fooid, foot.f2 from foot(sin(pi()/2)::int) ORDER BY 1,2;
% sys.L0,	sys.L0 # table_name
% fooid,	f2 # name
% ?,	? # type
% ?,	? # length
[ 1,	11 ]
[ 1,	111 ]

#CREATE TABLE foo (fooid int, foosubid int, fooname text, primary key(fooid,foosubid));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "foo_pkey" for table "foo"
#INSERT INTO foo VALUES(1,1,'Joe');
[ 1 ]
#INSERT INTO foo VALUES(1,2,'Ed');
[ 1 ]
#INSERT INTO foo VALUES(2,1,'Mary');
[ 1 ]
#-- sql, proretset = f, prorettype = b
#CREATE FUNCTION getfoo(int) RETURNS int AS 'SELECT $1;' LANGUAGE SQL;
#SELECT * FROM getfoo(1) AS t1;
% sys.L0 # table_name
% t1 # name
% ? # type
% ? # length
[ 1 ]

#CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1);
#SELECT * FROM vw_getfoo;
% sys.L0 # table_name
% getfoo # name
% ? # type
% ? # length
[ 1 ]

#-- sql, proretset = t, prorettype = b
#DROP VIEW vw_getfoo;
#DROP FUNCTION getfoo(int);
#CREATE FUNCTION getfoo(int) RETURNS setof int AS 'SELECT fooid FROM foo WHERE fooid = $1;' LANGUAGE SQL;
#SELECT * FROM getfoo(1) AS t1;
% sys.L0 # table_name
% t1 # name
% ? # type
% ? # length
[ 1 ]
[ 1 ]

#CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1);
#SELECT * FROM vw_getfoo;
% sys.L0 # table_name
% getfoo # name
% ? # type
% ? # length
[ 1 ]
[ 1 ]

#-- sql, proretset = t, prorettype = b
#DROP VIEW vw_getfoo;
#DROP FUNCTION getfoo(int);
#CREATE FUNCTION getfoo(int) RETURNS setof text AS 'SELECT fooname FROM foo WHERE fooid = $1;' LANGUAGE SQL;
#SELECT * FROM getfoo(1) AS t1;
% sys.L0 # table_name
% t1 # name
% ? # type
% ? # length
[ "Joe" ]
[ "Ed" ]

#CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1);
#SELECT * FROM vw_getfoo;
% sys.L0 # table_name
% getfoo # name
% ? # type
% ? # length
[ "Joe" ]
[ "Ed" ]

#-- sql, proretset = f, prorettype = c
#DROP VIEW vw_getfoo;
#DROP FUNCTION getfoo(int);
#CREATE FUNCTION getfoo(int) RETURNS foo AS 'SELECT * FROM foo WHERE fooid = $1;' LANGUAGE SQL;
#SELECT * FROM getfoo(1) AS t1;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	1,	"Joe" ]

#CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1);
#SELECT * FROM vw_getfoo;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	1,	"Joe" ]

#-- sql, proretset = t, prorettype = c
#DROP VIEW vw_getfoo;
#DROP FUNCTION getfoo(int);
#CREATE FUNCTION getfoo(int) RETURNS setof foo AS 'SELECT * FROM foo WHERE fooid = $1;' LANGUAGE SQL;
#SELECT * FROM getfoo(1) AS t1;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	1,	"Joe" ]
[ 1,	2,	"Ed" ]

#CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1);
#SELECT * FROM vw_getfoo;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	1,	"Joe" ]
[ 1,	2,	"Ed" ]

#-- sql, proretset = f, prorettype = record
#DROP VIEW vw_getfoo;
#DROP FUNCTION getfoo(int);
#CREATE FUNCTION getfoo(int) RETURNS RECORD AS 'SELECT * FROM foo WHERE fooid = $1;' LANGUAGE SQL;
#SELECT * FROM getfoo(1) AS t1(fooid int, foosubid int, fooname text);
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	1,	"Joe" ]

#CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1) AS 
#(fooid int, foosubid int, fooname text);
#SELECT * FROM vw_getfoo;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	1,	"Joe" ]

#-- sql, proretset = t, prorettype = record
#DROP VIEW vw_getfoo;
#DROP FUNCTION getfoo(int);
#CREATE FUNCTION getfoo(int) RETURNS setof record AS 'SELECT * FROM foo WHERE fooid = $1;' LANGUAGE SQL;
#SELECT * FROM getfoo(1) AS t1(fooid int, foosubid int, fooname text);
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	1,	"Joe" ]
[ 1,	2,	"Ed" ]

#CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1) AS
#(fooid int, foosubid int, fooname text);
#SELECT * FROM vw_getfoo;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	1,	"Joe" ]
[ 1,	2,	"Ed" ]

#-- plpgsql, proretset = f, prorettype = b
#DROP VIEW vw_getfoo;
#DROP FUNCTION getfoo(int);
#CREATE FUNCTION getfoo(int) RETURNS int AS 'DECLARE fooint int; BEGIN SELECT fooid into fooint FROM foo WHERE fooid = $1; RETURN fooint; COMMIT;' LANGUAGE 'plpgsql';
#SELECT * FROM getfoo(1) AS t1;
% sys.L0 # table_name
% t1 # name
% ? # type
% ? # length
[ 1 ]

#CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1);
#SELECT * FROM vw_getfoo;
% sys.L0 # table_name
% getfoo # name
% ? # type
% ? # length
[ 1 ]

#-- plpgsql, proretset = f, prorettype = c
#DROP VIEW vw_getfoo;
#DROP FUNCTION getfoo(int);
#CREATE FUNCTION getfoo(int) RETURNS foo AS 'DECLARE footup foo%ROWTYPE; BEGIN SELECT * into footup FROM foo WHERE fooid = $1; RETURN footup; COMMIT;' LANGUAGE 'plpgsql';
#SELECT * FROM getfoo(1) AS t1;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	1,	"Joe" ]

#CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1);
#SELECT * FROM vw_getfoo;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	1,	"Joe" ]

#DROP VIEW vw_getfoo;
#DROP FUNCTION getfoo(int);
#DROP FUNCTION foot(int);
#DROP TABLE foo2;
#DROP TABLE foo;
#-- Rescan tests --
#CREATE TABLE foorescan (fooid int, foosubid int, fooname text, primary key(fooid,foosubid));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "foorescan_pkey" for table "foorescan"
#INSERT INTO foorescan values(5000,1,'abc.5000.1');
[ 1 ]
#INSERT INTO foorescan values(5001,1,'abc.5001.1');
[ 1 ]
#INSERT INTO foorescan values(5002,1,'abc.5002.1');
[ 1 ]
#INSERT INTO foorescan values(5003,1,'abc.5003.1');
[ 1 ]
#INSERT INTO foorescan values(5004,1,'abc.5004.1');
[ 1 ]
#INSERT INTO foorescan values(5005,1,'abc.5005.1');
[ 1 ]
#INSERT INTO foorescan values(5006,1,'abc.5006.1');
[ 1 ]
#INSERT INTO foorescan values(5007,1,'abc.5007.1');
[ 1 ]
#INSERT INTO foorescan values(5008,1,'abc.5008.1');
[ 1 ]
#INSERT INTO foorescan values(5009,1,'abc.5009.1');
[ 1 ]
#INSERT INTO foorescan values(5000,2,'abc.5000.2');
[ 1 ]
#INSERT INTO foorescan values(5001,2,'abc.5001.2');
[ 1 ]
#INSERT INTO foorescan values(5002,2,'abc.5002.2');
[ 1 ]
#INSERT INTO foorescan values(5003,2,'abc.5003.2');
[ 1 ]
#INSERT INTO foorescan values(5004,2,'abc.5004.2');
[ 1 ]
#INSERT INTO foorescan values(5005,2,'abc.5005.2');
[ 1 ]
#INSERT INTO foorescan values(5006,2,'abc.5006.2');
[ 1 ]
#INSERT INTO foorescan values(5007,2,'abc.5007.2');
[ 1 ]
#INSERT INTO foorescan values(5008,2,'abc.5008.2');
[ 1 ]
#INSERT INTO foorescan values(5009,2,'abc.5009.2');
[ 1 ]
#INSERT INTO foorescan values(5000,3,'abc.5000.3');
[ 1 ]
#INSERT INTO foorescan values(5001,3,'abc.5001.3');
[ 1 ]
#INSERT INTO foorescan values(5002,3,'abc.5002.3');
[ 1 ]
#INSERT INTO foorescan values(5003,3,'abc.5003.3');
[ 1 ]
#INSERT INTO foorescan values(5004,3,'abc.5004.3');
[ 1 ]
#INSERT INTO foorescan values(5005,3,'abc.5005.3');
[ 1 ]
#INSERT INTO foorescan values(5006,3,'abc.5006.3');
[ 1 ]
#INSERT INTO foorescan values(5007,3,'abc.5007.3');
[ 1 ]
#INSERT INTO foorescan values(5008,3,'abc.5008.3');
[ 1 ]
#INSERT INTO foorescan values(5009,3,'abc.5009.3');
[ 1 ]
#INSERT INTO foorescan values(5000,4,'abc.5000.4');
[ 1 ]
#INSERT INTO foorescan values(5001,4,'abc.5001.4');
[ 1 ]
#INSERT INTO foorescan values(5002,4,'abc.5002.4');
[ 1 ]
#INSERT INTO foorescan values(5003,4,'abc.5003.4');
[ 1 ]
#INSERT INTO foorescan values(5004,4,'abc.5004.4');
[ 1 ]
#INSERT INTO foorescan values(5005,4,'abc.5005.4');
[ 1 ]
#INSERT INTO foorescan values(5006,4,'abc.5006.4');
[ 1 ]
#INSERT INTO foorescan values(5007,4,'abc.5007.4');
[ 1 ]
#INSERT INTO foorescan values(5008,4,'abc.5008.4');
[ 1 ]
#INSERT INTO foorescan values(5009,4,'abc.5009.4');
[ 1 ]
#INSERT INTO foorescan values(5000,5,'abc.5000.5');
[ 1 ]
#INSERT INTO foorescan values(5001,5,'abc.5001.5');
[ 1 ]
#INSERT INTO foorescan values(5002,5,'abc.5002.5');
[ 1 ]
#INSERT INTO foorescan values(5003,5,'abc.5003.5');
[ 1 ]
#INSERT INTO foorescan values(5004,5,'abc.5004.5');
[ 1 ]
#INSERT INTO foorescan values(5005,5,'abc.5005.5');
[ 1 ]
#INSERT INTO foorescan values(5006,5,'abc.5006.5');
[ 1 ]
#INSERT INTO foorescan values(5007,5,'abc.5007.5');
[ 1 ]
#INSERT INTO foorescan values(5008,5,'abc.5008.5');
[ 1 ]
#INSERT INTO foorescan values(5009,5,'abc.5009.5');
[ 1 ]
#CREATE FUNCTION foorescan(int,int) RETURNS setof foorescan AS 'SELECT * FROM foorescan WHERE fooid >= $1 and fooid < $2 ;' LANGUAGE SQL;
#--invokes ExecFunctionReScan
#SELECT * FROM foorescan f WHERE f.fooid IN (SELECT fooid FROM foorescan(5002,5004)) ORDER BY 1,2;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 5002,	1,	"abc.5002.1" ]
[ 5002,	2,	"abc.5002.2" ]
[ 5002,	3,	"abc.5002.3" ]
[ 5002,	4,	"abc.5002.4" ]
[ 5002,	5,	"abc.5002.5" ]
[ 5003,	1,	"abc.5003.1" ]
[ 5003,	2,	"abc.5003.2" ]
[ 5003,	3,	"abc.5003.3" ]
[ 5003,	4,	"abc.5003.4" ]
[ 5003,	5,	"abc.5003.5" ]

#CREATE VIEW vw_foorescan AS SELECT * FROM foorescan(5002,5004);
#--invokes ExecFunctionReScan
#SELECT * FROM foorescan f WHERE f.fooid IN (SELECT fooid FROM vw_foorescan) ORDER BY 1,2;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 5002,	1,	"abc.5002.1" ]
[ 5002,	2,	"abc.5002.2" ]
[ 5002,	3,	"abc.5002.3" ]
[ 5002,	4,	"abc.5002.4" ]
[ 5002,	5,	"abc.5002.5" ]
[ 5003,	1,	"abc.5003.1" ]
[ 5003,	2,	"abc.5003.2" ]
[ 5003,	3,	"abc.5003.3" ]
[ 5003,	4,	"abc.5003.4" ]
[ 5003,	5,	"abc.5003.5" ]

#CREATE TABLE barrescan (fooid int primary key);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "barrescan_pkey" for table "barrescan"
#INSERT INTO barrescan values(5003);
[ 1 ]
#INSERT INTO barrescan values(5004);
[ 1 ]
#INSERT INTO barrescan values(5005);
[ 1 ]
#INSERT INTO barrescan values(5006);
[ 1 ]
#INSERT INTO barrescan values(5007);
[ 1 ]
#INSERT INTO barrescan values(5008);
[ 1 ]
#CREATE FUNCTION foorescan(int) RETURNS setof foorescan AS 'SELECT * FROM foorescan WHERE fooid = $1;' LANGUAGE SQL;
#--invokes ExecFunctionReScan with chgParam != NULL
#SELECT f.* FROM barrescan b, foorescan f WHERE f.fooid = b.fooid AND b.fooid IN (SELECT fooid FROM foorescan(b.fooid)) ORDER BY 1,2;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 5003,	1,	"abc.5003.1" ]
[ 5003,	2,	"abc.5003.2" ]
[ 5003,	3,	"abc.5003.3" ]
[ 5003,	4,	"abc.5003.4" ]
[ 5003,	5,	"abc.5003.5" ]
[ 5004,	1,	"abc.5004.1" ]
[ 5004,	2,	"abc.5004.2" ]
[ 5004,	3,	"abc.5004.3" ]
[ 5004,	4,	"abc.5004.4" ]
[ 5004,	5,	"abc.5004.5" ]
[ 5005,	1,	"abc.5005.1" ]
[ 5005,	2,	"abc.5005.2" ]
[ 5005,	3,	"abc.5005.3" ]
[ 5005,	4,	"abc.5005.4" ]
[ 5005,	5,	"abc.5005.5" ]
[ 5006,	1,	"abc.5006.1" ]
[ 5006,	2,	"abc.5006.2" ]
[ 5006,	3,	"abc.5006.3" ]
[ 5006,	4,	"abc.5006.4" ]
[ 5006,	5,	"abc.5006.5" ]
[ 5007,	1,	"abc.5007.1" ]
[ 5007,	2,	"abc.5007.2" ]
[ 5007,	3,	"abc.5007.3" ]
[ 5007,	4,	"abc.5007.4" ]
[ 5007,	5,	"abc.5007.5" ]
[ 5008,	1,	"abc.5008.1" ]
[ 5008,	2,	"abc.5008.2" ]
[ 5008,	3,	"abc.5008.3" ]
[ 5008,	4,	"abc.5008.4" ]
[ 5008,	5,	"abc.5008.5" ]

#SELECT b.fooid, max(f.foosubid) FROM barrescan b, foorescan f WHERE f.fooid = b.fooid AND b.fooid IN (SELECT fooid FROM foorescan(b.fooid)) GROUP BY b.fooid ORDER BY 1,2;
% sys.L0,	sys.L0 # table_name
% fooid,	max # name
% ?,	? # type
% ?,	? # length
[ 5003,	5 ]
[ 5004,	5 ]
[ 5005,	5 ]
[ 5006,	5 ]
[ 5007,	5 ]
[ 5008,	5 ]

#CREATE VIEW fooview1 AS SELECT f.* FROM barrescan b, foorescan f WHERE f.fooid = b.fooid AND b.fooid IN (SELECT fooid FROM foorescan(b.fooid)) ORDER BY 1,2;
#SELECT * FROM fooview1 AS fv WHERE fv.fooid = 5004;
% sys.L0,	sys.L0,	sys.L0 # table_name
% fooid,	foosubid,	fooname # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 5004,	1,	"abc.5004.1" ]
[ 5004,	2,	"abc.5004.2" ]
[ 5004,	3,	"abc.5004.3" ]
[ 5004,	4,	"abc.5004.4" ]
[ 5004,	5,	"abc.5004.5" ]

#CREATE VIEW fooview2 AS SELECT b.fooid, max(f.foosubid) AS maxsubid FROM barrescan b, foorescan f WHERE f.fooid = b.fooid AND b.fooid IN (SELECT fooid FROM foorescan(b.fooid)) GROUP BY b.fooid ORDER BY 1,2;
#SELECT * FROM fooview2 AS fv WHERE fv.maxsubid = 5;
% sys.L0,	sys.L0 # table_name
% fooid,	maxsubid # name
% ?,	? # type
% ?,	? # length
[ 5003,	5 ]
[ 5004,	5 ]
[ 5005,	5 ]
[ 5006,	5 ]
[ 5007,	5 ]
[ 5008,	5 ]

#DROP VIEW vw_foorescan;
#DROP VIEW fooview1;
#DROP VIEW fooview2;
#DROP FUNCTION foorescan(int,int);
#DROP FUNCTION foorescan(int);
#DROP TABLE foorescan;
#DROP TABLE barrescan;

= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

