stdout of test 'triggers` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- TRIGGERS
#--
#create table pkeys (pkey1 integer not null, pkey2 text not null);
#create table fkeys (fkey1 integer, fkey2 text, fkey3 int);
#create table fkeys2 (fkey21 integer, fkey22 text, pkey23 int not null);
#create index fkeys_i on fkeys (fkey1, fkey2);
#create index fkeys2_i on fkeys2 (fkey21, fkey22);
#create index fkeys2p_i on fkeys2 (pkey23);
#insert into pkeys values (10, '1');
[ 1 ]
#insert into pkeys values (20, '2');
[ 1 ]
#insert into pkeys values (30, '3');
[ 1 ]
#insert into pkeys values (40, '4');
[ 1 ]
#insert into pkeys values (50, '5');
[ 1 ]
#insert into pkeys values (60, '6');
[ 1 ]
#create unique index pkeys_i on pkeys (pkey1, pkey2);
#--
#-- For fkeys:
#-- 	(fkey1, fkey2)	--> pkeys (pkey1, pkey2)
#-- 	(fkey3)		--> fkeys2 (pkey23)
#--
#create trigger check_fkeys_pkey_exist 
#	before insert or update on fkeys 
#	for each row 
#	execute procedure 
#	check_primary_key ('fkey1', 'fkey2', 'pkeys', 'pkey1', 'pkey2');
#create trigger check_fkeys_pkey2_exist 
#	before insert or update on fkeys 
#	for each row 
#	execute procedure check_primary_key ('fkey3', 'fkeys2', 'pkey23');
#--
#-- For fkeys2:
#-- 	(fkey21, fkey22)	--> pkeys (pkey1, pkey2)
#--
#create trigger check_fkeys2_pkey_exist 
#	before insert or update on fkeys2 
#	for each row 
#	execute procedure 
#	check_primary_key ('fkey21', 'fkey22', 'pkeys', 'pkey1', 'pkey2');
#-- Test comments
#--
#-- For pkeys:
#-- 	ON DELETE/UPDATE (pkey1, pkey2) CASCADE:
#-- 		fkeys (fkey1, fkey2) and fkeys2 (fkey21, fkey22)
#--
#create trigger check_pkeys_fkey_cascade
#	before delete or update on pkeys 
#	for each row 
#	execute procedure 
#	check_foreign_key (2, 'cascade', 'pkey1', 'pkey2', 
#	'fkeys', 'fkey1', 'fkey2', 'fkeys2', 'fkey21', 'fkey22');
#--
#-- For fkeys2:
#-- 	ON DELETE/UPDATE (pkey23) RESTRICT:
#-- 		fkeys (fkey3)
#--
#create trigger check_fkeys2_fkey_restrict 
#	before delete or update on fkeys2
#	for each row 
#	execute procedure check_foreign_key (1, 'restrict', 'pkey23', 'fkeys', 'fkey3');
#insert into fkeys2 values (10, '1', 1);
[ 1 ]
#insert into fkeys2 values (30, '3', 2);
[ 1 ]
#insert into fkeys2 values (40, '4', 5);
[ 1 ]
#insert into fkeys2 values (50, '5', 3);
[ 1 ]
#-- no key in pkeys
#insert into fkeys values (10, '1', 2);
[ 1 ]
#insert into fkeys values (30, '3', 3);
[ 1 ]
#insert into fkeys values (40, '4', 2);
[ 1 ]
#insert into fkeys values (50, '5', 2);
[ 1 ]
#-- no key in pkeys
#-- no key in fkeys2
delete from pkeys where pkey1 = 30 and pkey2 = '3';
NOTICE:  check_pkeys_fkey_cascade: 1 tuple(s) of fkeys are deleted
ERROR:  "check_fkeys2_fkey_restrict": tuple is referenced in "fkeys"
CONTEXT:  SQL statement "delete from fkeys2 where fkey21 = $1 and fkey22 = $2 "
delete from pkeys where pkey1 = 40 and pkey2 = '4';
NOTICE:  check_pkeys_fkey_cascade: 1 tuple(s) of fkeys are deleted
NOTICE:  check_pkeys_fkey_cascade: 1 tuple(s) of fkeys2 are deleted
#update pkeys set pkey1 = 7, pkey2 = '70' where pkey1 = 10 and pkey2 = '1';
NOTICE:  check_pkeys_fkey_cascade: 1 tuple(s) of fkeys are deleted
NOTICE:  check_pkeys_fkey_cascade: 1 tuple(s) of fkeys2 are deleted
#DROP TABLE pkeys;
#DROP TABLE fkeys;
#DROP TABLE fkeys2;
#-- -- I've disabled the funny_dup17 test because the new semantics
#-- -- of AFTER ROW triggers, which get now fired at the end of a
#-- -- query always, cause funny_dup17 to enter an endless loop.
#-- --
#-- --      Jan
#--
#-- create table dup17 (x integer);
#-- 
#-- create trigger dup17_before 
#-- 	before insert on dup17
#-- 	for each row 
#-- 	execute procedure 
#-- 	funny_dup17 ()
#-- ;
#-- 
#-- insert into dup17 values (17);
#-- select count(*) from dup17;
#-- insert into dup17 values (17);
#-- select count(*) from dup17;
#-- 
#-- drop trigger dup17_before on dup17;
#-- 
#-- create trigger dup17_after
#-- 	after insert on dup17
#-- 	for each row 
#-- 	execute procedure 
#-- 	funny_dup17 ()
#-- ;
#-- insert into dup17 values (13);
#-- select count(*) from dup17 where x = 13;
#-- insert into dup17 values (13);
#-- select count(*) from dup17 where x = 13;
#-- 
#-- DROP TABLE dup17;
#create sequence ttdummy_seq increment 10 start 0 minvalue 0;
#create table tttest (
#	price_id	integer, 
#	price_val	integer, 
#	price_on	integer,
#	price_off	integer default 999999
#);
#create trigger ttdummy 
#	before delete or update on tttest
#	for each row 
#	execute procedure 
#	ttdummy (price_on, price_off);
#create trigger ttserial 
#	before insert or update on tttest
#	for each row 
#	execute procedure 
#	autoinc (price_on, ttdummy_seq);
#insert into tttest values (1, 1, null);
[ 1 ]
#insert into tttest values (2, 2, null);
[ 1 ]
#insert into tttest values (3, 3, 0);
[ 1 ]
#select * from tttest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% price_id,	price_val,	price_on,	price_off # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	1,	10,	999999 ]
[ 2,	2,	20,	999999 ]
[ 3,	3,	30,	999999 ]

delete from tttest where price_id = 2;
#select * from tttest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% price_id,	price_val,	price_on,	price_off # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	1,	10,	999999 ]
[ 3,	3,	30,	999999 ]
[ 2,	2,	20,	40 ]

#-- what do we see ?
#-- get current prices
#select * from tttest where price_off = 999999;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% price_id,	price_val,	price_on,	price_off # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	1,	10,	999999 ]
[ 3,	3,	30,	999999 ]

#-- change price for price_id == 3
#update tttest set price_val = 30 where price_id = 3;
#select * from tttest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% price_id,	price_val,	price_on,	price_off # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	1,	10,	999999 ]
[ 2,	2,	20,	40 ]
[ 3,	30,	50,	999999 ]
[ 3,	3,	30,	50 ]

#-- now we want to change pric_id in ALL tuples
#-- this gets us not what we need
#update tttest set price_id = 5 where price_id = 3;
#select * from tttest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% price_id,	price_val,	price_on,	price_off # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	1,	10,	999999 ]
[ 2,	2,	20,	40 ]
[ 3,	3,	30,	50 ]
[ 5,	30,	60,	999999 ]
[ 3,	30,	50,	60 ]

#-- restore data as before last update:
#select set_ttdummy(0);
% sys.L0 # table_name
% set_ttdummy # name
% ? # type
% ? # length
[ 1 ]

delete from tttest where price_id = 5;
#update tttest set price_off = 999999 where price_val = 30;
#select * from tttest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% price_id,	price_val,	price_on,	price_off # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	1,	10,	999999 ]
[ 2,	2,	20,	40 ]
[ 3,	3,	30,	50 ]
[ 3,	30,	50,	999999 ]

#-- and try change price_id now!
#update tttest set price_id = 5 where price_id = 3;
#select * from tttest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% price_id,	price_val,	price_on,	price_off # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	1,	10,	999999 ]
[ 2,	2,	20,	40 ]
[ 5,	3,	30,	50 ]
[ 5,	30,	50,	999999 ]

#-- isn't it what we need ?
#select set_ttdummy(1);
% sys.L0 # table_name
% set_ttdummy # name
% ? # type
% ? # length
[ 0 ]

#-- we want to correct some "date"
#
#-- but this doesn't work
#-- try in this way
#select set_ttdummy(0);
% sys.L0 # table_name
% set_ttdummy # name
% ? # type
% ? # length
[ 1 ]

#update tttest set price_on = -1 where price_id = 1;
#select * from tttest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% price_id,	price_val,	price_on,	price_off # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 2,	2,	20,	40 ]
[ 5,	3,	30,	50 ]
[ 5,	30,	50,	999999 ]
[ 1,	1,	-1,	999999 ]

#-- isn't it what we need ?
#-- get price for price_id == 5 as it was @ "date" 35
#select * from tttest where price_on <= 35 and price_off > 35 and price_id = 5;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% price_id,	price_val,	price_on,	price_off # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 5,	3,	30,	50 ]

#drop table tttest;
#drop sequence ttdummy_seq;
#--
#-- tests for per-statement triggers
#--
#CREATE TABLE log_table (tstamp timestamp default timeofday()::timestamp);
#CREATE TABLE main_table (a int, b int);
COPY main_table (a,b) FROM stdin;
#CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE 'plpgsql' AS '
#BEGIN
#	RAISE NOTICE ''trigger_func() called: action = %, when = %, level = %'', TG_OP, TG_WHEN, TG_LEVEL;
	RETURN NULL;
COMMIT;';
#CREATE TRIGGER before_ins_stmt_trig BEFORE INSERT ON main_table
#FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
#CREATE TRIGGER after_ins_stmt_trig AFTER INSERT ON main_table
#FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
#--
#-- if neither 'FOR EACH ROW' nor 'FOR EACH STATEMENT' was specified,
#-- CREATE TRIGGER should default to 'FOR EACH STATEMENT'
#--
#CREATE TRIGGER before_upd_stmt_trig AFTER UPDATE ON main_table
#EXECUTE PROCEDURE trigger_func();
#CREATE TRIGGER before_upd_row_trig AFTER UPDATE ON main_table
#FOR EACH ROW EXECUTE PROCEDURE trigger_func();
#INSERT INTO main_table DEFAULT VALUES;
NOTICE:  trigger_func() called: action = INSERT, when = BEFORE, level = STATEMENT
NOTICE:  trigger_func() called: action = INSERT, when = AFTER, level = STATEMENT
[ 1 ]
#UPDATE main_table SET a = a + 1 WHERE b < 30;
NOTICE:  trigger_func() called: action = UPDATE, when = AFTER, level = ROW
NOTICE:  trigger_func() called: action = UPDATE, when = AFTER, level = ROW
NOTICE:  trigger_func() called: action = UPDATE, when = AFTER, level = ROW
NOTICE:  trigger_func() called: action = UPDATE, when = AFTER, level = ROW
NOTICE:  trigger_func() called: action = UPDATE, when = AFTER, level = STATEMENT
#-- UPDATE that effects zero rows should still call per-statement trigger
#UPDATE main_table SET a = a + 2 WHERE b > 100;
NOTICE:  trigger_func() called: action = UPDATE, when = AFTER, level = STATEMENT
#-- COPY should fire per-row and per-statement INSERT triggers
COPY main_table (a, b) FROM stdin;
NOTICE:  trigger_func() called: action = INSERT, when = BEFORE, level = STATEMENT
NOTICE:  trigger_func() called: action = INSERT, when = AFTER, level = STATEMENT
#SELECT * FROM main_table ORDER BY a, b;
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 6,	10 ]
[ 21,	20 ]
[ 30,	40 ]
[ 31,	10 ]
[ 50,	35 ]
[ 50,	60 ]
[ 81,	15 ]
[ "",	"" ]


= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

