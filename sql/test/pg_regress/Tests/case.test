statement ok
CREATE TABLE CASE_TBL (
  i integer,
  f double precision
)

statement ok
CREATE TABLE CASE2_TBL (
  i integer,
  j integer
)

statement ok
INSERT INTO CASE_TBL VALUES (1, 10.1)

statement ok
INSERT INTO CASE_TBL VALUES (2, 20.2)

statement ok
INSERT INTO CASE_TBL VALUES (3, -30.3)

statement ok
INSERT INTO CASE_TBL VALUES (4, NULL)

statement ok
INSERT INTO CASE2_TBL VALUES (1, -1)

statement ok
INSERT INTO CASE2_TBL VALUES (2, -2)

statement ok
INSERT INTO CASE2_TBL VALUES (3, -3)

statement ok
INSERT INTO CASE2_TBL VALUES (2, -4)

statement ok
INSERT INTO CASE2_TBL VALUES (1, NULL)

statement ok
INSERT INTO CASE2_TBL VALUES (NULL, -6)

query TI rowsort
SELECT '3' AS "One",
  CASE
    WHEN 1 < 2 THEN 3
  END AS "Simple WHEN"
----
3
3

query TI rowsort
SELECT '<NULL>' AS "One",
  CASE
    WHEN 1 > 2 THEN 3
  END AS "Simple default"
----
<NULL>
NULL

query TI rowsort
SELECT '3' AS "One",
  CASE
    WHEN 1 < 2 THEN 3
    ELSE 4
  END AS "Simple ELSE"
----
3
3

query TI rowsort
SELECT '4' AS "One",
  CASE
    WHEN 1 > 2 THEN 3
    ELSE 4
  END AS "ELSE default"
----
4
4

query TI rowsort
SELECT '6' AS "One",
  CASE
    WHEN 1 > 2 THEN 3
    WHEN 4 < 5 THEN 6
    ELSE 7
  END AS "Two WHEN with default"
----
6
6

query I rowsort
SELECT CASE 'a' WHEN 'a' THEN 1 ELSE 2 END
----
1

query TI rowsort
SELECT '' AS "Five",
  CASE
    WHEN i >= 3 THEN i
  END AS ">= 3 or Null"
  FROM CASE_TBL
----
(empty)
3
(empty)
4
(empty)
NULL
(empty)
NULL

query TI rowsort
SELECT '' AS "Five",
  CASE WHEN i >= 3 THEN (i + i)
       ELSE i
  END AS "Simplest Math"
  FROM CASE_TBL
----
(empty)
1
(empty)
2
(empty)
6
(empty)
8

query TIT rowsort
SELECT '' AS "Five", i AS "Value",
  CASE WHEN (i < 0) THEN 'small'
       WHEN (i = 0) THEN 'zero'
       WHEN (i = 1) THEN 'one'
       WHEN (i = 2) THEN 'two'
       ELSE 'big'
  END AS "Category"
  FROM CASE_TBL
----
(empty)
1
one
(empty)
2
two
(empty)
3
big
(empty)
4
big

query TT rowsort
SELECT '' AS "Five",
  CASE WHEN ((i < 0) or (i < 0)) THEN 'small'
       WHEN ((i = 0) or (i = 0)) THEN 'zero'
       WHEN ((i = 1) or (i = 1)) THEN 'one'
       WHEN ((i = 2) or (i = 2)) THEN 'two'
       ELSE 'big'
  END AS "Category"
  FROM CASE_TBL
----
(empty)
big
(empty)
big
(empty)
one
(empty)
two

query IR rowsort
SELECT * FROM CASE_TBL WHERE COALESCE(f,i) = 4
----
4
NULL

query IR rowsort
SELECT * FROM CASE_TBL WHERE NULLIF(f,i) = 2
----

query R rowsort
SELECT distinct COALESCE(a.f, b.i, b.j)
  FROM CASE_TBL a, CASE2_TBL b  Order By COALESCE(a.f, b.i, b.j)
----
-30.300
-6.000
1.000
10.100
2.000
20.200
3.000

query IRII rowsort
SELECT *
  FROM CASE_TBL a, CASE2_TBL b
  WHERE COALESCE(a.f, b.i, b.j) = 2
----
4
NULL
2
-2
4
NULL
2
-4

query TII rowsort
SELECT distinct '' AS Siksteen, NULLIF(a.i,b.i) AS "NULLIF(a.i,b.i)",
  NULLIF(b.i, 4) AS "NULLIF(b.i,4)"
  FROM CASE_TBL a, CASE2_TBL b  Order By 2,3
----
(empty)
1
2
(empty)
1
3
(empty)
1
NULL
(empty)
2
1
(empty)
2
3
(empty)
2
NULL
(empty)
3
1
(empty)
3
2
(empty)
3
NULL
(empty)
4
1
(empty)
4
2
(empty)
4
3
(empty)
4
NULL
(empty)
NULL
1
(empty)
NULL
2
(empty)
NULL
3

query TIRII rowsort
SELECT '' AS "Two", *
  FROM CASE_TBL a, CASE2_TBL b
  WHERE COALESCE(f,b.i) = 2
----
(empty)
4
NULL
2
-2
(empty)
4
NULL
2
-4

statement ok
UPDATE CASE_TBL
  SET i = CASE WHEN i >= 3 THEN (- i)
                ELSE (2 * i) END

query IR rowsort
SELECT * FROM CASE_TBL
----
-3
-30.300
-4
NULL
2
10.100
4
20.200

statement ok
UPDATE CASE_TBL
  SET i = CASE WHEN i >= 2 THEN (2 * i)
                ELSE (3 * i) END

query IR rowsort
SELECT * FROM CASE_TBL
----
-12
NULL
-9
-30.300
4
10.100
8
20.200

statement ok
UPDATE CASE_TBL
  SET i = CASE WHEN i >= 2 THEN (2 * i)
                ELSE (3 * i) END
  WHERE i = -CASE_TBL.i

query IR rowsort
SELECT * FROM CASE_TBL
----
-12
NULL
-9
-30.300
4
10.100
8
20.200

statement ok
DROP TABLE CASE_TBL

statement ok
DROP TABLE CASE2_TBL

