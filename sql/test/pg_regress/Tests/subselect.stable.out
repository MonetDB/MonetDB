stdout of test 'subselect` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- SUBSELECT
#--
#SELECT 1 AS one WHERE 1 IN (SELECT 1);
% sys.L0 # table_name
% one # name
% ? # type
% ? # length
[ 1 ]

#SELECT 1 AS zero WHERE 1 NOT IN (SELECT 1);
% sys.L0 # table_name
% zero # name
% ? # type
% ? # length

#SELECT 1 AS zero WHERE 1 IN (SELECT 2);
% sys.L0 # table_name
% zero # name
% ? # type
% ? # length

#-- Set up some simple test tables
#CREATE TABLE SUBSELECT_TBL (
#  f1 integer,
#  f2 integer,
#  f3 float
#);
#INSERT INTO SUBSELECT_TBL VALUES (1, 2, 3);
[ 1 ]
#INSERT INTO SUBSELECT_TBL VALUES (2, 3, 4);
[ 1 ]
#INSERT INTO SUBSELECT_TBL VALUES (3, 4, 5);
[ 1 ]
#INSERT INTO SUBSELECT_TBL VALUES (1, 1, 1);
[ 1 ]
#INSERT INTO SUBSELECT_TBL VALUES (2, 2, 2);
[ 1 ]
#INSERT INTO SUBSELECT_TBL VALUES (3, 3, 3);
[ 1 ]
#INSERT INTO SUBSELECT_TBL VALUES (6, 7, 8);
[ 1 ]
#INSERT INTO SUBSELECT_TBL VALUES (8, 9, NULL);
[ 1 ]
#SELECT '' AS eight, * FROM SUBSELECT_TBL;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% eight,	f1,	f2,	f3 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ "",	1,	2,	3 ]
[ "",	2,	3,	4 ]
[ "",	3,	4,	5 ]
[ "",	1,	1,	1 ]
[ "",	2,	2,	2 ]
[ "",	3,	3,	3 ]
[ "",	6,	7,	8 ]
[ "",	8,	9,	"" ]

#-- Uncorrelated subselects
#SELECT '' AS two, f1 AS "Constant Select" FROM SUBSELECT_TBL
#  WHERE f1 IN (SELECT 1);
% sys.L0,	sys.L0 # table_name
% two,	Constant Select # name
% ?,	? # type
% ?,	? # length
[ "",	1 ]
[ "",	1 ]

#SELECT '' AS six, f1 AS "Uncorrelated Field" FROM SUBSELECT_TBL
#  WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL);
% sys.L0,	sys.L0 # table_name
% six,	Uncorrelated Field # name
% ?,	? # type
% ?,	? # length
[ "",	1 ]
[ "",	2 ]
[ "",	3 ]
[ "",	1 ]
[ "",	2 ]
[ "",	3 ]

#SELECT '' AS six, f1 AS "Uncorrelated Field" FROM SUBSELECT_TBL
#  WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL WHERE
#    f2 IN (SELECT f1 FROM SUBSELECT_TBL));
% sys.L0,	sys.L0 # table_name
% six,	Uncorrelated Field # name
% ?,	? # type
% ?,	? # length
[ "",	1 ]
[ "",	2 ]
[ "",	3 ]
[ "",	1 ]
[ "",	2 ]
[ "",	3 ]

#SELECT '' AS three, f1, f2
#  FROM SUBSELECT_TBL
#  WHERE (f1, f2) NOT IN (SELECT f2, CAST(f3 AS integer) FROM SUBSELECT_TBL
#                         WHERE f3 IS NOT NULL);
% sys.L0,	sys.L0,	sys.L0 # table_name
% three,	f1,	f2 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	1,	2 ]
[ "",	6,	7 ]
[ "",	8,	9 ]

#-- Correlated subselects
#SELECT '' AS six, f1 AS "Correlated Field", f2 AS "Second Field"
#  FROM SUBSELECT_TBL upper
#  WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL WHERE f1 = upper.f1);
% sys.L0,	sys.L0,	sys.L0 # table_name
% six,	Correlated Field,	Second Field # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	1,	2 ]
[ "",	2,	3 ]
[ "",	3,	4 ]
[ "",	1,	1 ]
[ "",	2,	2 ]
[ "",	3,	3 ]

#SELECT '' AS six, f1 AS "Correlated Field", f3 AS "Second Field"
#  FROM SUBSELECT_TBL upper
#  WHERE f1 IN
#    (SELECT f2 FROM SUBSELECT_TBL WHERE CAST(upper.f2 AS float) = f3);
% sys.L0,	sys.L0,	sys.L0 # table_name
% six,	Correlated Field,	Second Field # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	2,	4 ]
[ "",	3,	5 ]
[ "",	1,	1 ]
[ "",	2,	2 ]
[ "",	3,	3 ]

#SELECT '' AS six, f1 AS "Correlated Field", f3 AS "Second Field"
#  FROM SUBSELECT_TBL upper
#  WHERE f3 IN (SELECT upper.f1 + f2 FROM SUBSELECT_TBL
#               WHERE f2 = CAST(f3 AS integer));
% sys.L0,	sys.L0,	sys.L0 # table_name
% six,	Correlated Field,	Second Field # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	1,	3 ]
[ "",	2,	4 ]
[ "",	3,	5 ]
[ "",	6,	8 ]

#SELECT '' AS five, f1 AS "Correlated Field"
#  FROM SUBSELECT_TBL
#  WHERE (f1, f2) IN (SELECT f2, CAST(f3 AS integer) FROM SUBSELECT_TBL
#                     WHERE f3 IS NOT NULL);
% sys.L0,	sys.L0 # table_name
% five,	Correlated Field # name
% ?,	? # type
% ?,	? # length
[ "",	2 ]
[ "",	3 ]
[ "",	1 ]
[ "",	2 ]
[ "",	3 ]

#--
#-- Use some existing tables in the regression test
#--
#SELECT '' AS eight, ss.f1 AS "Correlated Field", ss.f3 AS "Second Field"
#  FROM SUBSELECT_TBL ss
#  WHERE f1 NOT IN (SELECT f1+1 FROM INT4_TBL
#                   WHERE f1 != ss.f1 AND f1 < 2147483647);
% sys.L0,	sys.L0,	sys.L0 # table_name
% eight,	Correlated Field,	Second Field # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	2,	4 ]
[ "",	3,	5 ]
[ "",	2,	2 ]
[ "",	3,	3 ]
[ "",	6,	8 ]
[ "",	8,	"" ]

#select q1, double(count(*)) / (select count(*) from int8_tbl)
#from int8_tbl group by q1 order by q1;
% sys.L0,	sys.L0 # table_name
% q1,	?column? # name
% ?,	? # type
% ?,	? # length
[ 123,	0.4 ]
[ 4567890123456789,	0.6 ]

#--
#-- Test cases to catch unpleasant interactions between IN-join processing
#-- and subquery pullup.
#--
#select count(*) from
#  (select 1 from tenk1 a
#   where unique1 IN (select hundred from tenk1 b)) ss;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 100 ]

#select count(distinct ss.ten) from
#  (select ten from tenk1 a
#   where unique1 IN (select hundred from tenk1 b)) ss;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 10 ]

#select count(*) from
#  (select 1 from tenk1 a
#   where unique1 IN (select distinct hundred from tenk1 b)) ss;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 100 ]

#select count(distinct ss.ten) from
#  (select ten from tenk1 a
#   where unique1 IN (select distinct hundred from tenk1 b)) ss;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 10 ]

#--
#-- Test case to catch problems with multiply nested sub-SELECTs not getting
#-- recalculated properly.  Per bug report from Didier Moens.
#--
#CREATE TABLE orderstest (
#    approver_ref integer,
#    po_ref integer,
#    ordercancelled boolean
#);
#INSERT INTO orderstest VALUES (1, 1, false);
[ 1 ]
#INSERT INTO orderstest VALUES (66, 5, false);
[ 1 ]
#INSERT INTO orderstest VALUES (66, 6, false);
[ 1 ]
#INSERT INTO orderstest VALUES (66, 7, false);
[ 1 ]
#INSERT INTO orderstest VALUES (66, 1, true);
[ 1 ]
#INSERT INTO orderstest VALUES (66, 8, false);
[ 1 ]
#INSERT INTO orderstest VALUES (66, 1, false);
[ 1 ]
#INSERT INTO orderstest VALUES (77, 1, false);
[ 1 ]
#INSERT INTO orderstest VALUES (1, 1, false);
[ 1 ]
#INSERT INTO orderstest VALUES (66, 1, false);
[ 1 ]
#INSERT INTO orderstest VALUES (1, 1, false);
[ 1 ]
#CREATE VIEW orders_view AS
#SELECT *,
#(SELECT CASE
#   WHEN ord.approver_ref=1 THEN '---' ELSE 'Approved'
# END) AS "Approved",
#(SELECT CASE
# WHEN ord.ordercancelled
# THEN 'Cancelled'
# ELSE
#  (SELECT CASE
#		WHEN ord.po_ref=1
#		THEN
#		 (SELECT CASE
#				WHEN ord.approver_ref=1
#				THEN '---'
#				ELSE 'Approved'
#			END)
#		ELSE 'PO'
#	END) 
#END) AS "Status",
#(CASE
# WHEN ord.ordercancelled
# THEN 'Cancelled'
# ELSE
#  (CASE
#		WHEN ord.po_ref=1
#		THEN
#		 (CASE
#				WHEN ord.approver_ref=1
#				THEN '---'
#				ELSE 'Approved'
#			END)
#		ELSE 'PO'
#	END) 
#END) AS "Status_OK"
#FROM orderstest ord;
#SELECT * FROM orders_view;
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% approver_ref,	po_ref,	ordercancelled,	Approved,	Status,	Status_OK # name
% ?,	?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	?,	? # length
[ 1,	1,	"f",	"---",	"---",	"---" ]
[ 66,	5,	"f",	"Approved",	"PO",	"PO" ]
[ 66,	6,	"f",	"Approved",	"PO",	"PO" ]
[ 66,	7,	"f",	"Approved",	"PO",	"PO" ]
[ 66,	1,	"t",	"Approved",	"Cancelled",	"Cancelled" ]
[ 66,	8,	"f",	"Approved",	"PO",	"PO" ]
[ 66,	1,	"f",	"Approved",	"Approved",	"Approved" ]
[ 77,	1,	"f",	"Approved",	"Approved",	"Approved" ]
[ 1,	1,	"f",	"---",	"---",	"---" ]
[ 66,	1,	"f",	"Approved",	"Approved",	"Approved" ]
[ 1,	1,	"f",	"---",	"---",	"---" ]

#DROP TABLE orderstest cascade;
NOTICE:  drop cascades to rule _RETURN on view orders_view
NOTICE:  drop cascades to view orders_view

= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

