stdout of test 'rowtypes` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- ROWTYPES
#--
#-- Make both a standalone composite type and a table rowtype
#create type complex as (r double, i double);
#create temp table fullname (first text, last text);
#-- Nested composite
#create type quad as (c1 complex, c2 complex);
#-- Some simple tests of I/O conversions and row construction
#select (1.1,2.2)::complex, row((3.3,4.4),(5.5,null))::quad;
% sys.L0,	sys.L0 # table_name
% row,	row # name
% ?,	? # type
% ?,	? # length
[ "(1.1,2.2)",	"("(3.3,4.4)","(5.5,)")" ]

#select row('Joe', 'Blow')::fullname, '(Joe,Blow)'::fullname;
% sys.L0,	sys.L0 # table_name
% row,	fullname # name
% ?,	? # type
% ?,	? # length
[ "(Joe,Blow)",	"(Joe,Blow)" ]

#select '(Joe,von Blow)'::fullname, '(Joe,d''Blow)'::fullname;
% sys.L0,	sys.L0 # table_name
% fullname,	fullname # name
% ?,	? # type
% ?,	? # length
[ "(Joe,"von Blow")",	"(Joe,d'Blow)" ]

#select '(Joe,"von""Blow")'::fullname, '(Joe,d\\\\Blow)'::fullname;
% sys.L0,	sys.L0 # table_name
% fullname,	fullname # name
% ?,	? # type
% ?,	? # length
[ "(Joe,"von""Blow")",	"(Joe,"d\\Blow")" ]

#select '(Joe,"Blow,Jr")'::fullname;
% sys.L0 # table_name
% fullname # name
% ? # type
% ? # length
[ "(Joe,"Blow,Jr")" ]

#select '(Joe,)'::fullname;	-- ok, null 2nd column
% sys.L0 # table_name
% fullname # name
% ? # type
% ? # length
[ "(Joe,)" ]

#create temp table quadtable(f1 int, q quad);
#insert into quadtable values (1, ((3.3,4.4),(5.5,6.6)));
[ 1 ]
#insert into quadtable values (2, ((null,4.4),(5.5,6.6)));
[ 1 ]
#select * from quadtable;
% sys.L0,	sys.L0 # table_name
% f1,	q # name
% ?,	? # type
% ?,	? # length
[ 1,	"("(3.3,4.4)","(5.5,6.6)")" ]
[ 2,	"("(,4.4)","(5.5,6.6)")" ]

#
#select f1, (q).c1, (qq.q).c1.i from quadtable qq;
% sys.L0,	sys.L0,	sys.L0 # table_name
% f1,	c1,	i # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	"(3.3,4.4)",	4.4 ]
[ 2,	"(,4.4)",	4.4 ]

#create temp table people (fn fullname, bd date);
#insert into people values ('(Joe,Blow)', '1984-01-10');
[ 1 ]
#select * from people;
% sys.L0,	sys.L0 # table_name
% fn,	bd # name
% ?,	? # type
% ?,	? # length
[ "(Joe,Blow)",	"01-10-1984" ]

#-- at the moment this will not work due to ALTER TABLE inadequacy:
#
#-- but this should work:
#alter table fullname add column suffix text default null;
#select * from people;
% sys.L0,	sys.L0 # table_name
% fn,	bd # name
% ?,	? # type
% ?,	? # length
[ "(Joe,Blow,)",	"01-10-1984" ]

#-- test insertion/updating of subfields
#update people set fn.suffix = 'Jr';
#select * from people;
% sys.L0,	sys.L0 # table_name
% fn,	bd # name
% ?,	? # type
% ?,	? # length
[ "(Joe,Blow,Jr)",	"01-10-1984" ]

#insert into quadtable (f1, q.c1.r, q.c2.i) values(44,55,66);
[ 1 ]
#select * from quadtable;
% sys.L0,	sys.L0 # table_name
% f1,	q # name
% ?,	? # type
% ?,	? # length
[ 1,	"("(3.3,4.4)","(5.5,6.6)")" ]
[ 2,	"("(,4.4)","(5.5,6.6)")" ]
[ 44,	"("(55,)","(,66)")" ]

#-- The object here is to ensure that toasted references inside
#-- composite values don't cause problems.  The large f1 value will
#-- be toasted inside pp, it must still work after being copied to people.
#create temp table pp (f1 text);
#insert into pp values (repeat('abcdefghijkl', 100000));
[ 1 ]
#insert into people select ('Jim', f1, null)::fullname, current_date from pp;
[ 1 ]
#select (fn).first, substr((fn).last, 1, 20), length((fn).last) from people;
% sys.L0,	sys.L0,	sys.L0 # table_name
% first,	substr,	length # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "Joe",	"Blow",	4 ]
[ "Jim",	"abcdefghijklabcdefgh",	1200000 ]


= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

