stdout of test 'transactions` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- TRANSACTIONS
#--
START TRANSACTION;
#SELECT * 
#   INTO TABLE xacttest
#   FROM aggtest;
#INSERT INTO xacttest (a, b) VALUES (777, 777.777);
[ 1 ]
COMMIT;
#-- should retrieve one value--
#SELECT a FROM xacttest WHERE a > 100;
% sys.L0 # table_name
% a # name
% ? # type
% ? # length
[ 777 ]

START TRANSACTION;
#CREATE TABLE disappear (a integer);
DELETE FROM aggtest;
#-- should be empty
#SELECT * FROM aggtest;
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length

ABORT;
#-- should not exist 
#SELECT oid FROM pg_class WHERE relname = 'disappear';
% sys.L0 # table_name
% oid # name
% ? # type
% ? # length

#-- should have members again 
#SELECT * FROM aggtest;
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 56,	7.8 ]
[ 100,	99.097 ]
[ 0,	0.09561 ]
[ 42,	324.78 ]

#-- Read-only tests
#CREATE TABLE writetest (a int);
#CREATE TEMPORARY TABLE temptest (a int);
SET SESSION CHARACTERISTICS AS TRANSACTION READ ONLY;
#
#
#SELECT * FROM writetest; -- ok
% sys.L0 # table_name
% a # name
% ? # type
% ? # length

DELETE FROM temptest; -- ok
#UPDATE temptest SET a = 0 WHERE a = 1 AND writetest.a = temptest.a; -- ok
PREPARE test AS UPDATE writetest SET a = 0; -- ok
EXECUTE test; -- fail
ERROR:  transaction is read-only
#SELECT * FROM writetest, temptest; -- ok
% sys.L0,	sys.L0 # table_name
% a,	a # name
% ?,	? # type
% ?,	? # length

#
START TRANSACTION READ WRITE;
#DROP TABLE writetest; -- ok
COMMIT;
#-- Subtransactions, basic tests
#-- create & drop tables
SET SESSION CHARACTERISTICS AS TRANSACTION READ WRITE;
#CREATE TABLE foobar (a int);
START TRANSACTION;
#	CREATE TABLE foo (a int);
	SAVEPOINT one;
#		DROP TABLE foo;
#		CREATE TABLE bar (a int);
	ROLLBACK TO SAVEPOINT one;
	RELEASE SAVEPOINT one;
	SAVEPOINT two;
#		CREATE TABLE baz (a int);
	RELEASE SAVEPOINT two;
#	drop TABLE foobar;
#	CREATE TABLE barbaz (a int);
COMMIT;
#-- should exist: barbaz, baz, foo
#SELECT * FROM foo;		-- should be empty
% sys.L0 # table_name
% a # name
% ? # type
% ? # length

#
#SELECT * FROM barbaz;	-- should be empty
% sys.L0 # table_name
% a # name
% ? # type
% ? # length

#SELECT * FROM baz;		-- should be empty
% sys.L0 # table_name
% a # name
% ? # type
% ? # length

#-- inserts
START TRANSACTION;
#	INSERT INTO foo VALUES (1);
[ 1 ]
	SAVEPOINT one;
#
	ROLLBACK TO one;
	RELEASE SAVEPOINT one;
	SAVEPOINT two;
#		INSERT into barbaz VALUES (1);
[ 1 ]
	RELEASE two;
	SAVEPOINT three;
		SAVEPOINT four;
#			INSERT INTO foo VALUES (2);
[ 1 ]
		RELEASE SAVEPOINT four;
	ROLLBACK TO SAVEPOINT three;
	RELEASE SAVEPOINT three;
#	INSERT INTO foo VALUES (3);
[ 1 ]
COMMIT;
#SELECT * FROM foo;		-- should have 1 and 3
% sys.L0 # table_name
% a # name
% ? # type
% ? # length
[ 1 ]
[ 3 ]

#SELECT * FROM barbaz;	-- should have 1
% sys.L0 # table_name
% a # name
% ? # type
% ? # length
[ 1 ]

#-- test whole-tree commit
START TRANSACTION;
	SAVEPOINT one;
#
	ROLLBACK TO SAVEPOINT one;
	RELEASE SAVEPOINT one;
	SAVEPOINT two;
#		CREATE TABLE savepoints (a int);
		SAVEPOINT three;
#			INSERT INTO savepoints VALUES (1);
[ 1 ]
			SAVEPOINT four;
#				INSERT INTO savepoints VALUES (2);
[ 1 ]
				SAVEPOINT five;
#					INSERT INTO savepoints VALUES (3);
[ 1 ]
				ROLLBACK TO SAVEPOINT five;
COMMIT;
COMMIT;		-- should not be in a transaction block
WARNING:  there is no transaction in progress
#SELECT * FROM savepoints;
% sys.L0 # table_name
% a # name
% ? # type
% ? # length
[ 1 ]
[ 2 ]

#-- test whole-tree rollback
START TRANSACTION;
	SAVEPOINT one;
		DELETE FROM savepoints WHERE a=1;
	RELEASE SAVEPOINT one;
	SAVEPOINT two;
		DELETE FROM savepoints WHERE a=1;
		SAVEPOINT three;
			DELETE FROM savepoints WHERE a=2;
ROLLBACK;
COMMIT;		-- should not be in a transaction block
WARNING:  there is no transaction in progress
		
#SELECT * FROM savepoints;
% sys.L0 # table_name
% a # name
% ? # type
% ? # length
[ 1 ]
[ 2 ]

#-- test whole-tree commit on an aborted subtransaction
START TRANSACTION;
#	INSERT INTO savepoints VALUES (4);
[ 1 ]
	SAVEPOINT one;
#		INSERT INTO savepoints VALUES (5);
[ 1 ]
#
COMMIT;
#SELECT * FROM savepoints;
% sys.L0 # table_name
% a # name
% ? # type
% ? # length
[ 1 ]
[ 2 ]

START TRANSACTION;
#	INSERT INTO savepoints VALUES (6);
[ 1 ]
	SAVEPOINT one;
#		INSERT INTO savepoints VALUES (7);
[ 1 ]
	RELEASE SAVEPOINT one;
#	INSERT INTO savepoints VALUES (8);
[ 1 ]
COMMIT;
#-- rows 6 and 8 should have been created by the same xact
#SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=6 AND b.a=8;
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "t" ]

#-- rows 6 and 7 should have been created by different xacts
#SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=6 AND b.a=7;
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "f" ]

START TRANSACTION;
#	INSERT INTO savepoints VALUES (9);
[ 1 ]
	SAVEPOINT one;
#		INSERT INTO savepoints VALUES (10);
[ 1 ]
	ROLLBACK TO SAVEPOINT one;
#		INSERT INTO savepoints VALUES (11);
[ 1 ]
COMMIT;
#SELECT a FROM savepoints WHERE a in (9, 10, 11);
% sys.L0 # table_name
% a # name
% ? # type
% ? # length
[ 9 ]
[ 11 ]

#-- rows 9 and 11 should have been created by different xacts
#SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=9 AND b.a=11;
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "f" ]

START TRANSACTION;
#	INSERT INTO savepoints VALUES (12);
[ 1 ]
	SAVEPOINT one;
#		INSERT INTO savepoints VALUES (13);
[ 1 ]
		SAVEPOINT two;
#			INSERT INTO savepoints VALUES (14);
[ 1 ]
	ROLLBACK TO SAVEPOINT one;
#		INSERT INTO savepoints VALUES (15);
[ 1 ]
		SAVEPOINT two;
#			INSERT INTO savepoints VALUES (16);
[ 1 ]
			SAVEPOINT three;
#				INSERT INTO savepoints VALUES (17);
[ 1 ]
COMMIT;
#SELECT a FROM savepoints WHERE a BETWEEN 12 AND 17;
% sys.L0 # table_name
% a # name
% ? # type
% ? # length
[ 12 ]
[ 15 ]
[ 16 ]
[ 17 ]

START TRANSACTION;
#	INSERT INTO savepoints VALUES (18);
[ 1 ]
	SAVEPOINT one;
#		INSERT INTO savepoints VALUES (19);
[ 1 ]
		SAVEPOINT two;
#			INSERT INTO savepoints VALUES (20);
[ 1 ]
	ROLLBACK TO SAVEPOINT one;
#		INSERT INTO savepoints VALUES (21);
[ 1 ]
	ROLLBACK TO SAVEPOINT one;
#		INSERT INTO savepoints VALUES (22);
[ 1 ]
COMMIT;
#SELECT a FROM savepoints WHERE a BETWEEN 18 AND 22;
% sys.L0 # table_name
% a # name
% ? # type
% ? # length
[ 18 ]
[ 22 ]

#DROP TABLE savepoints;
#-- only in a transaction block:
SAVEPOINT one;
ERROR:  SAVEPOINT may only be used in transaction blocks
ROLLBACK TO SAVEPOINT one;
ERROR:  ROLLBACK TO SAVEPOINT may only be used in transaction blocks
RELEASE SAVEPOINT one;
ERROR:  RELEASE SAVEPOINT may only be used in transaction blocks
#-- Only "rollback to" allowed in aborted state
START TRANSACTION;
  SAVEPOINT one;
#
  SAVEPOINT two;    -- ignored till the end of ...
ERROR:  current transaction is aborted, commands ignored until end of transaction block
  RELEASE SAVEPOINT one;      -- ignored till the end of ...
ERROR:  current transaction is aborted, commands ignored until end of transaction block
  ROLLBACK TO SAVEPOINT one;
#  SELECT 1;
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ 1 ]

COMMIT;
#SELECT 1;			-- this should work
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ 1 ]

#-- check non-transactional behavior of cursors
START TRANSACTION;
	DECLARE c CURSOR FOR SELECT unique2 FROM tenk1;
	SAVEPOINT one;
		FETCH 10 FROM c;
% sys.L0 # table_name
% unique2 # name
% ? # type
% ? # length
[ 0 ]
[ 1 ]
[ 2 ]
[ 3 ]
[ 4 ]
[ 5 ]
[ 6 ]
[ 7 ]
[ 8 ]
[ 9 ]

	ROLLBACK TO SAVEPOINT one;
		FETCH 10 FROM c;
% sys.L0 # table_name
% unique2 # name
% ? # type
% ? # length
[ 10 ]
[ 11 ]
[ 12 ]
[ 13 ]
[ 14 ]
[ 15 ]
[ 16 ]
[ 17 ]
[ 18 ]
[ 19 ]

	RELEASE SAVEPOINT one;
	FETCH 10 FROM c;
% sys.L0 # table_name
% unique2 # name
% ? # type
% ? # length
[ 20 ]
[ 21 ]
[ 22 ]
[ 23 ]
[ 24 ]
[ 25 ]
[ 26 ]
[ 27 ]
[ 28 ]
[ 29 ]

	CLOSE c;
	DECLARE c CURSOR FOR SELECT unique2/0 FROM tenk1;
	SAVEPOINT two;
		FETCH 10 FROM c;
ERROR:  division by zero
	ROLLBACK TO SAVEPOINT two;
	-- c is now dead to the world ...
		FETCH 10 FROM c;
ERROR:  portal "c" cannot be run
	ROLLBACK TO SAVEPOINT two;
	RELEASE SAVEPOINT two;
	FETCH 10 FROM c;
ERROR:  portal "c" cannot be run
COMMIT;
#--
#-- Check that "stable" functions are really stable.  They should not be
#-- able to see the partial results of the calling query.  (Ideally we would
#-- also check that they don't see commits of concurrent transactions, but
#-- that's a mite hard to do within the limitations of pg_regress.)
#--
#select * from xacttest;
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 56,	7.8 ]
[ 100,	99.097 ]
[ 0,	0.09561 ]
[ 42,	324.78 ]
[ 777,	777.777 ]

#create or replace function max_xacttest() returns smallint language sql as
#'select max(a) from xacttest' stable;
START TRANSACTION;
#update xacttest set a = max_xacttest() + 10 where a > 0;
#select * from xacttest;
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 0,	0.09561 ]
[ 787,	7.8 ]
[ 787,	99.097 ]
[ 787,	324.78 ]
[ 787,	777.777 ]

rollback;
#-- But a volatile function can see the partial results of the calling query
#create or replace function max_xacttest() returns smallint language sql as
#'select max(a) from xacttest' volatile;
START TRANSACTION;
#update xacttest set a = max_xacttest() + 10 where a > 0;
#select * from xacttest;
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 0,	0.09561 ]
[ 787,	7.8 ]
[ 797,	99.097 ]
[ 807,	324.78 ]
[ 817,	777.777 ]

rollback;
#-- Now the same test with plpgsql (since it depends on SPI which is different)
#create or replace function max_xacttest() returns smallint language plpgsql as
#'begin return max(a) from xacttest; end' stable;
START TRANSACTION;
#update xacttest set a = max_xacttest() + 10 where a > 0;
#select * from xacttest;
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 0,	0.09561 ]
[ 787,	7.8 ]
[ 787,	99.097 ]
[ 787,	324.78 ]
[ 787,	777.777 ]

rollback;
#create or replace function max_xacttest() returns smallint language plpgsql as
#'begin return max(a) from xacttest; end' volatile;
START TRANSACTION;
#update xacttest set a = max_xacttest() + 10 where a > 0;
#select * from xacttest;
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 0,	0.09561 ]
[ 787,	7.8 ]
[ 797,	99.097 ]
[ 807,	324.78 ]
[ 817,	777.777 ]

rollback;
#-- test case for problems with dropping an open relation during abort
START TRANSACTION;
	savepoint x;
#		CREATE TABLE koju (a INT UNIQUE);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "koju_a_key" for table "koju"
#		INSERT INTO koju VALUES (1);
[ 1 ]
#
	rollback to x;
#	CREATE TABLE koju (a INT UNIQUE);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "koju_a_key" for table "koju"
#	INSERT INTO koju VALUES (1);
[ 1 ]
#
ROLLBACK;
#DROP TABLE foo;
#DROP TABLE baz;
#DROP TABLE barbaz;

= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

