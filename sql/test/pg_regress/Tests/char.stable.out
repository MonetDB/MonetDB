stdout of test 'char` in directory 'sql/test/pg_regress` itself:


# 22:08:26 >  
# 22:08:26 >   mserver5 "--config=/export/scratch/stripe/fabian/monetdb/current/program-i86pc/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/export/scratch/stripe/fabian/monetdb/current/program-i86pc/lib/MonetDB5:/export/scratch/stripe/fabian/monetdb/current/program-i86pc/lib/MonetDB5/lib:/export/scratch/stripe/fabian/monetdb/current/program-i86pc/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch/stripe/fabian/monetdb/current/mtest-pegasus.ins.cwi.nl/sql/dbfarm"    --set mapi_open=true --set xrpc_open=true --set mapi_port=38104 --set xrpc_port=41400 --set monet_prompt= --trace  "--dbname=mTests_src_test_pg_regress" --set mal_listing=0 "--dbinit= include sql;" ; echo ; echo Over..
# 22:08:26 >  

# MonetDB server v5.13.0, based on kernel v1.31.0
# Serving database 'mTests_src_test_pg_regress', using 1 thread
# Compiled for x86_64-pc-solaris2.11/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2009 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://pegasus.ins.cwi.nl:38104/
# MonetDB/SQL module v2.31.0 loaded

#function user.main():void;
#    clients.quit();
#end main;


# 22:08:26 >  
# 22:08:26 >  ./char.SQL.sh char 
# 22:08:26 >  


# 22:08:26 >  
# 22:08:26 >  Mtimeout -timeout 60 mclient -lsql -umonetdb -Pmonetdb --host=pegasus --port=38104  -e < ../../../../../../../../../../mirror/fabian/monetdb/current/sql/src/test/pg_regress/Tests/../monetdb/char.sql
# 22:08:26 >  

#--
#-- CHAR
#--
#-- fixed-length by value
#-- internally passed by value if <= 4 bytes in storage
#SELECT cast('c' as char) = cast('c' as char) AS "true";
% . # table_name
% true # name
% boolean # type
% 5 # length
[ true ]
#--
#-- Build a table for testing
#--
#CREATE TABLE CHAR_TBL(f1 char);
[ 1	]
[ 1	]
#-- any of the following three input formats are acceptable 
[ 1	]
[ 1	]
[ 1	]
#-- zero-length char 
[ 1	]
#-- try char's of greater than 1 length 
#INSERT INTO CHAR_TBL (f1) VALUES ('cd');
#INSERT INTO CHAR_TBL (f1) VALUES ('c     ');
#SELECT '' AS seven, CHAR_TBL.* FROM CHAR_TBL;
% .,	sys.char_tbl # table_name
% seven,	f1 # name
% char,	char # type
% 0,	1 # length
[ "",	"a"	]
[ "",	"A"	]
[ "",	"1"	]
[ "",	"2"	]
[ "",	"3"	]
[ "",	""	]
#SELECT '' AS six, c.*
#   FROM CHAR_TBL c
#   WHERE c.f1 <> 'a';
% .,	sys.c # table_name
% six,	f1 # name
% char,	char # type
% 0,	1 # length
[ "",	"A"	]
[ "",	"1"	]
[ "",	"2"	]
[ "",	"3"	]
[ "",	""	]
#SELECT '' AS one, c.*
#   FROM CHAR_TBL c
#   WHERE c.f1 = 'a';
% .,	sys.c # table_name
% one,	f1 # name
% char,	char # type
% 0,	1 # length
[ "",	"a"	]
#SELECT '' AS five, c.*
#   FROM CHAR_TBL c
#   WHERE c.f1 < 'a';
% .,	sys.c # table_name
% five,	f1 # name
% char,	char # type
% 0,	1 # length
[ "",	"A"	]
[ "",	"1"	]
[ "",	"2"	]
[ "",	"3"	]
[ "",	""	]
#SELECT '' AS six, c.*
#   FROM CHAR_TBL c
#   WHERE c.f1 <= 'a';
% .,	sys.c # table_name
% six,	f1 # name
% char,	char # type
% 0,	1 # length
[ "",	"a"	]
[ "",	"A"	]
[ "",	"1"	]
[ "",	"2"	]
[ "",	"3"	]
[ "",	""	]
#SELECT '' AS one, c.*
#   FROM CHAR_TBL c
#   WHERE c.f1 > 'a';
% .,	sys.c # table_name
% one,	f1 # name
% char,	char # type
% 0,	1 # length
#SELECT '' AS two, c.*
#   FROM CHAR_TBL c
#   WHERE c.f1 >= 'a';
% .,	sys.c # table_name
% two,	f1 # name
% char,	char # type
% 0,	1 # length
[ "",	"a"	]
#DROP TABLE CHAR_TBL;
#--
#-- Now test longer arrays of char
#--
#CREATE TABLE CHAR_TBL(f1 char(4));
[ 1	]
[ 1	]
[ 1	]
#INSERT INTO CHAR_TBL (f1) VALUES ('abcde');
#INSERT INTO CHAR_TBL (f1) VALUES ('abcd    ');
#SELECT '' AS four, CHAR_TBL.* FROM CHAR_TBL;
% .,	sys.char_tbl # table_name
% four,	f1 # name
% char,	char # type
% 0,	4 # length
[ "",	"a"	]
[ "",	"ab"	]
[ "",	"abcd"	]

# 22:08:26 >  
# 22:08:26 >  Done.
# 22:08:26 >  

