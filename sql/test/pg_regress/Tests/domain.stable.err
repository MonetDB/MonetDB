stderr of test 'domain` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# builtin opt 	gdk_dbpath = /ufs/dinther/INSTALL/var/monetdb5/dbfarm/demo
# builtin opt 	gdk_debug = 0
# builtin opt 	gdk_vmtrim = no
# builtin opt 	monet_prompt = >
# builtin opt 	monet_daemon = no
# builtin opt 	mapi_port = 50000
# builtin opt 	mapi_open = false
# builtin opt 	mapi_autosense = false
# builtin opt 	sql_optimizer = default_pipe
# builtin opt 	sql_debug = 0
# cmdline opt 	gdk_nr_threads = 0
# cmdline opt 	mapi_open = true
# cmdline opt 	mapi_port = 38959
# cmdline opt 	mapi_usock = /var/tmp/mtest-1142/.s.monetdb.38959
# cmdline opt 	monet_prompt = 
# cmdline opt 	mal_listing = 2
# cmdline opt 	gdk_dbpath = /ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress
# cmdline opt 	mal_listing = 0
# cmdline opt 	gdk_debug = 536870922

# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

#-- Test Comment / Drop
#-- currently this will be disallowed
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = create domain basetypetest domaindroptest;
ERROR = "domaindroptest" is not a valid base type for a domain
#-- this should fail because already gone
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = drop domain domaindroptest cascade;
ERROR = type "domaindroptest" does not exist
#-- TEST Domains.
#-- Test explicit coercions --- these should succeed (and truncate)
#-- Test tables using domains
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = INSERT INTO basictest values ('88', 'haha', 'short text', '123.12'); -- Bad varchar
ERROR = value too long for type character varying(5)
#-- Test copy
#-- check that domains inherit operations from base types
#-- Array Test
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = INSERT INTO nulltest DEFAULT VALUES;
ERROR = domain dnotnull does not allow null values
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = insert into nulltest values ('a', 'b', 'c', 'd', NULL);
ERROR = domain dcheck does not allow null values
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = insert into nulltest values ('a', 'b', 'c', 'd', 'a');
ERROR = new row for relation "nulltest" violates check constraint "nulltest_col5_check"
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = INSERT INTO nulltest values (NULL, 'b', 'c', 'd', 'd');
ERROR = domain dnotnull does not allow null values
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = INSERT INTO nulltest values ('a', NULL, 'c', 'd', 'c');
ERROR = domain dnotnull does not allow null values
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = INSERT INTO nulltest values ('a', 'b', NULL, 'd', 'c');
ERROR = null value in column "col3" violates not-null constraint
#-- Test copy
#-- Last row is bad
#-- Test out coerced (casted) constraints
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = SELECT cast(NULL as dnotnull); -- fail
ERROR = domain dnotnull does not allow null values
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = SELECT cast(cast(NULL as dnull) as dnotnull); -- fail
ERROR = domain dnotnull does not allow null values
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = SELECT cast(col4 as dnotnull) from nulltest; -- fail
ERROR = domain dnotnull does not allow null values
#-- cleanup
#-- Type mixing, function returns bigint
#-- Test defaults with copy
#-- Test ALTER DOMAIN .. NOT NULL
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = alter domain dnotnulltest set not null; -- fails
ERROR = column "col1" of table "domnotnull" contains null values
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = alter domain dnotnulltest set not null; -- fails
ERROR = column "col2" of table "domnotnull" contains null values
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = update domnotnull set col1 = null; -- fails
ERROR = domain dnotnulltest does not allow null values
#-- Test ALTER DOMAIN .. DEFAULT ..
#-- Test ALTER DOMAIN .. CONSTRAINT ..
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = alter domain con add constraint t check (VALUE < 1); -- fails
ERROR = column "col1" of table "domcontest" contains values that violate the new constraint
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = insert into domcontest values (-5); -- fails
ERROR = value for domain con violates check constraint "con_check"
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = insert into domcontest values (42); -- fails
ERROR = value for domain con violates check constraint "t"
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = insert into domcontest values (-5); --fails
ERROR = value for domain con violates check constraint "con_check"
#-- Confirm ALTER DOMAIN with RULES.
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = select * from domview; -- fail
ERROR = domain dom does not allow null values
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = select * from domview; --fail
ERROR = value for domain dom violates check constraint "domchkgt6"
#-- cleanup

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

