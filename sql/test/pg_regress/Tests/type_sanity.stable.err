stderr of test 'type_sanity` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# builtin opt 	gdk_dbpath = /ufs/dinther/INSTALL/var/monetdb5/dbfarm/demo
# builtin opt 	gdk_debug = 0
# builtin opt 	gdk_vmtrim = no
# builtin opt 	monet_prompt = >
# builtin opt 	monet_daemon = no
# builtin opt 	mapi_port = 50000
# builtin opt 	mapi_open = false
# builtin opt 	mapi_autosense = false
# builtin opt 	sql_optimizer = default_pipe
# builtin opt 	sql_debug = 0
# cmdline opt 	gdk_nr_threads = 0
# cmdline opt 	mapi_open = true
# cmdline opt 	mapi_port = 38959
# cmdline opt 	mapi_usock = /var/tmp/mtest-1142/.s.monetdb.38959
# cmdline opt 	monet_prompt = 
# cmdline opt 	mal_listing = 2
# cmdline opt 	gdk_dbpath = /ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress
# cmdline opt 	mal_listing = 0
# cmdline opt 	gdk_debug = 536870922

# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

#--
#-- TYPE_SANITY
#-- Sanity checks for common errors in making type-related system tables:
#-- pg_type, pg_class, pg_attribute.
#--
#-- None of the SELECTs here should ever find any matching entries,
#-- so the expected output is easy to maintain ;-).
#-- A test failure indicates someone messed up an entry in the system tables.
#--
#-- NB: we assume the oidjoins test will have caught any dangling links,
#-- that is OID or REGPROC fields that are not zero and do not match some
#-- row in the linked-to table.  However, if we want to enforce that a link
#-- field can't be 0, we have to check it here.
#-- **************** pg_type ****************
#-- Look for illegal values in pg_type fields.
#-- Look for "pass by value" types that can't be passed by value.
#-- Look for "toastable" types that aren't varlena.
#-- Look for complex types that do not have a typrelid entry,
#-- or basic types that do.
#-- Look for basic types that don't have an array type.
#-- NOTE: as of 8.0, this check finds smgr and unknown.
#-- Conversion routines must be provided except in 'c' entries.
#-- Check for bogus typinput routines
#-- As of 8.0, this check finds refcursor, which is borrowing
#-- other types' I/O routines
#-- Varlena array types will string to array_in
#-- Check for bogus typoutput routines
#-- As of 8.0, this check finds refcursor, which is borrowing
#-- other types' I/O routines
#-- Check for bogus typreceive routines
#-- As of 7.4, this check finds refcursor, which is borrowing
#-- other types' I/O routines
#-- Varlena array types will string to array_recv
#-- Check for bogus typsend routines
#-- As of 7.4, this check finds refcursor, which is borrowing
#-- other types' I/O routines
#-- **************** pg_class ****************
#-- Look for illegal values in pg_class fields
#-- Indexes should have an access method, others not.
#-- **************** pg_attribute ****************
#-- Look for illegal values in pg_attribute fields
#-- Cross-check attnum against parent relation
#-- Detect missing pg_attribute entries: should have as many non-system
#-- attributes as parent relation expects
#-- Cross-check against pg_type entry
#-- NOTE: we allow attstorage to be 'plain' even when typstorage is not;
#-- this is mainly for toast tables.

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

