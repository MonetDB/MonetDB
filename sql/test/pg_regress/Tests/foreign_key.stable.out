stdout of test 'foreign_key` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- FOREIGN KEY
#--
#-- MATCH FULL
#--
#-- First test, check and cascade
#--
#CREATE TABLE PKTABLE ( ptest1 int PRIMARY KEY, ptest2 text );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE FKTABLE ( ftest1 int REFERENCES PKTABLE MATCH FULL ON DELETE CASCADE ON UPDATE CASCADE, ftest2 int );
#-- Insert test data into PKTABLE
#INSERT INTO PKTABLE VALUES (1, 'Test1');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 'Test2');
[ 1 ]
#INSERT INTO PKTABLE VALUES (3, 'Test3');
[ 1 ]
#INSERT INTO PKTABLE VALUES (4, 'Test4');
[ 1 ]
#INSERT INTO PKTABLE VALUES (5, 'Test5');
[ 1 ]
#-- Insert successful rows into FK TABLE
#INSERT INTO FKTABLE VALUES (1, 2);
[ 1 ]
#INSERT INTO FKTABLE VALUES (2, 3);
[ 1 ]
#INSERT INTO FKTABLE VALUES (3, 4);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 1);
[ 1 ]
#-- Insert a failed row into FK TABLE
#-- Check FKTABLE
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0 # table_name
% ftest1,	ftest2 # name
% ?,	? # type
% ?,	? # length
[ 1,	2 ]
[ 2,	3 ]
[ 3,	4 ]
[ "",	1 ]

#-- Delete a row from PK TABLE
DELETE FROM PKTABLE WHERE ptest1=1;
#-- Check FKTABLE for removal of matched row
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0 # table_name
% ftest1,	ftest2 # name
% ?,	? # type
% ?,	? # length
[ 2,	3 ]
[ 3,	4 ]
[ "",	1 ]

#-- Update a row from PK TABLE
#UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2;
#-- Check FKTABLE for update of matched row
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0 # table_name
% ftest1,	ftest2 # name
% ?,	? # type
% ?,	? # length
[ 3,	4 ]
[ "",	1 ]
[ 1,	3 ]

#DROP TABLE FKTABLE;
#DROP TABLE PKTABLE;
#--
#-- check set NULL and table constraint on multiple columns
#--
#CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 text, PRIMARY KEY(ptest1, ptest2) );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE FKTABLE ( ftest1 int, ftest2 int, ftest3 int, CONSTRAINT constrname FOREIGN KEY(ftest1, ftest2) 
#                       REFERENCES PKTABLE MATCH FULL ON DELETE SET NULL ON UPDATE SET NULL);
#-- Test comments
#-- Insert test data into PKTABLE
#INSERT INTO PKTABLE VALUES (1, 2, 'Test1');
[ 1 ]
#INSERT INTO PKTABLE VALUES (1, 3, 'Test1-2');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 4, 'Test2');
[ 1 ]
#INSERT INTO PKTABLE VALUES (3, 6, 'Test3');
[ 1 ]
#INSERT INTO PKTABLE VALUES (4, 8, 'Test4');
[ 1 ]
#INSERT INTO PKTABLE VALUES (5, 10, 'Test5');
[ 1 ]
#-- Insert successful rows into FK TABLE
#INSERT INTO FKTABLE VALUES (1, 2, 4);
[ 1 ]
#INSERT INTO FKTABLE VALUES (1, 3, 5);
[ 1 ]
#INSERT INTO FKTABLE VALUES (2, 4, 8);
[ 1 ]
#INSERT INTO FKTABLE VALUES (3, 6, 12);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, NULL, 0);
[ 1 ]
#-- Insert failed rows into FK TABLE
#-- Check FKTABLE
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	2,	4 ]
[ 1,	3,	5 ]
[ 2,	4,	8 ]
[ 3,	6,	12 ]
[ "",	"",	0 ]

#-- Delete a row from PK TABLE
DELETE FROM PKTABLE WHERE ptest1=1 and ptest2=2;
#-- Check FKTABLE for removal of matched row
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	3,	5 ]
[ 2,	4,	8 ]
[ 3,	6,	12 ]
[ "",	"",	0 ]
[ "",	"",	4 ]

#-- Delete another row from PK TABLE
DELETE FROM PKTABLE WHERE ptest1=5 and ptest2=10;
#-- Check FKTABLE (should be no change)
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	3,	5 ]
[ 2,	4,	8 ]
[ 3,	6,	12 ]
[ "",	"",	0 ]
[ "",	"",	4 ]

#-- Update a row from PK TABLE
#UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2;
#-- Check FKTABLE for update of matched row
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	3,	5 ]
[ 3,	6,	12 ]
[ "",	"",	0 ]
[ "",	"",	4 ]
[ "",	"",	8 ]

#-- Try altering the column type where foreign keys are involved
#ALTER TABLE PKTABLE ALTER COLUMN ptest1 TYPE bigint;
#ALTER TABLE FKTABLE ALTER COLUMN ftest1 TYPE bigint;
#SELECT * FROM PKTABLE;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ptest1,	ptest2,	ptest3 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	3,	"Test1-2" ]
[ 3,	6,	"Test3" ]
[ 4,	8,	"Test4" ]
[ 1,	4,	"Test2" ]

#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	3,	5 ]
[ 3,	6,	12 ]
[ "",	"",	0 ]
[ "",	"",	4 ]
[ "",	"",	8 ]

#DROP TABLE PKTABLE CASCADE;
NOTICE:  drop cascades to constraint constrname on table fktable
#DROP TABLE FKTABLE;
#--
#-- check set default and table constraint on multiple columns
#--
#CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 text, PRIMARY KEY(ptest1, ptest2) );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE FKTABLE ( ftest1 int DEFAULT -1, ftest2 int DEFAULT -2, ftest3 int, CONSTRAINT constrname2 FOREIGN KEY(ftest1, ftest2) 
#                       REFERENCES PKTABLE MATCH FULL ON DELETE SET DEFAULT ON UPDATE SET DEFAULT);
#-- Insert a value in PKTABLE for default
#INSERT INTO PKTABLE VALUES (-1, -2, 'The Default!');
[ 1 ]
#-- Insert test data into PKTABLE
#INSERT INTO PKTABLE VALUES (1, 2, 'Test1');
[ 1 ]
#INSERT INTO PKTABLE VALUES (1, 3, 'Test1-2');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 4, 'Test2');
[ 1 ]
#INSERT INTO PKTABLE VALUES (3, 6, 'Test3');
[ 1 ]
#INSERT INTO PKTABLE VALUES (4, 8, 'Test4');
[ 1 ]
#INSERT INTO PKTABLE VALUES (5, 10, 'Test5');
[ 1 ]
#-- Insert successful rows into FK TABLE
#INSERT INTO FKTABLE VALUES (1, 2, 4);
[ 1 ]
#INSERT INTO FKTABLE VALUES (1, 3, 5);
[ 1 ]
#INSERT INTO FKTABLE VALUES (2, 4, 8);
[ 1 ]
#INSERT INTO FKTABLE VALUES (3, 6, 12);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, NULL, 0);
[ 1 ]
#-- Insert failed rows into FK TABLE
#-- Check FKTABLE
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	2,	4 ]
[ 1,	3,	5 ]
[ 2,	4,	8 ]
[ 3,	6,	12 ]
[ "",	"",	0 ]

#-- Delete a row from PK TABLE
DELETE FROM PKTABLE WHERE ptest1=1 and ptest2=2;
#-- Check FKTABLE to check for removal
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	3,	5 ]
[ 2,	4,	8 ]
[ 3,	6,	12 ]
[ "",	"",	0 ]
[ -1,	-2,	4 ]

#-- Delete another row from PK TABLE
DELETE FROM PKTABLE WHERE ptest1=5 and ptest2=10;
#-- Check FKTABLE (should be no change)
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	3,	5 ]
[ 2,	4,	8 ]
[ 3,	6,	12 ]
[ "",	"",	0 ]
[ -1,	-2,	4 ]

#-- Update a row from PK TABLE
#UPDATE PKTABLE SET ptest1=1 WHERE ptest1=2;
#-- Check FKTABLE for update of matched row
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 1,	3,	5 ]
[ 3,	6,	12 ]
[ "",	"",	0 ]
[ -1,	-2,	4 ]
[ -1,	-2,	8 ]

#-- this should fail for lack of CASCADE
#
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
#DROP TABLE PKTABLE CASCADE;
NOTICE:  drop cascades to constraint constrname2 on table fktable
#DROP TABLE FKTABLE;
#--
#-- First test, check with no on delete or on update
#--
#CREATE TABLE PKTABLE ( ptest1 int PRIMARY KEY, ptest2 text );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE FKTABLE ( ftest1 int REFERENCES PKTABLE MATCH FULL, ftest2 int );
#-- Insert test data into PKTABLE
#INSERT INTO PKTABLE VALUES (1, 'Test1');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 'Test2');
[ 1 ]
#INSERT INTO PKTABLE VALUES (3, 'Test3');
[ 1 ]
#INSERT INTO PKTABLE VALUES (4, 'Test4');
[ 1 ]
#INSERT INTO PKTABLE VALUES (5, 'Test5');
[ 1 ]
#-- Insert successful rows into FK TABLE
#INSERT INTO FKTABLE VALUES (1, 2);
[ 1 ]
#INSERT INTO FKTABLE VALUES (2, 3);
[ 1 ]
#INSERT INTO FKTABLE VALUES (3, 4);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 1);
[ 1 ]
#-- Insert a failed row into FK TABLE
#-- Check FKTABLE
#SELECT * FROM FKTABLE;
% sys.L0,	sys.L0 # table_name
% ftest1,	ftest2 # name
% ?,	? # type
% ?,	? # length
[ 1,	2 ]
[ 2,	3 ]
[ 3,	4 ]
[ "",	1 ]

#-- Check PKTABLE
#SELECT * FROM PKTABLE;
% sys.L0,	sys.L0 # table_name
% ptest1,	ptest2 # name
% ?,	? # type
% ?,	? # length
[ 1,	"Test1" ]
[ 2,	"Test2" ]
[ 3,	"Test3" ]
[ 4,	"Test4" ]
[ 5,	"Test5" ]

#-- Delete a row from PK TABLE (should fail)
DELETE FROM PKTABLE WHERE ptest1=1;
ERROR:  update or delete on "pktable" violates foreign key constraint "fktable_ftest1_fkey" on "fktable"
DETAIL:  Key (ptest1)=(1) is still referenced from table "fktable".
#-- Delete a row from PK TABLE (should succeed)
DELETE FROM PKTABLE WHERE ptest1=5;
#-- Check PKTABLE for deletes
#SELECT * FROM PKTABLE;
% sys.L0,	sys.L0 # table_name
% ptest1,	ptest2 # name
% ?,	? # type
% ?,	? # length
[ 1,	"Test1" ]
[ 2,	"Test2" ]
[ 3,	"Test3" ]
[ 4,	"Test4" ]

#-- Update a row from PK TABLE (should fail)
#-- Update a row from PK TABLE (should succeed)
#UPDATE PKTABLE SET ptest1=0 WHERE ptest1=4;
#-- Check PKTABLE for updates
#SELECT * FROM PKTABLE;
% sys.L0,	sys.L0 # table_name
% ptest1,	ptest2 # name
% ?,	? # type
% ?,	? # length
[ 1,	"Test1" ]
[ 2,	"Test2" ]
[ 3,	"Test3" ]
[ 0,	"Test4" ]

#DROP TABLE FKTABLE;
#DROP TABLE PKTABLE;
#-- MATCH unspecified
#-- Base test restricting update/delete
#CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE FKTABLE ( ftest1 int, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
#			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE);
#-- Insert Primary Key values
#INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
[ 1 ]
#INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
[ 1 ]
#-- Insert Foreign Key values
#INSERT INTO FKTABLE VALUES (1, 2, 3, 1); 
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
[ 1 ]
#INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
[ 1 ]
#-- Insert a failed values
#-- Show FKTABLE
#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	2,	3,	1 ]
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]

#-- Try to update something that should fail
#-- Try to update something that should succeed
#UPDATE PKTABLE set ptest1=1 WHERE ptest2=3;
#-- Try to delete something that should fail
DELETE FROM PKTABLE where ptest1=1 and ptest2=2 and ptest3=3;
ERROR:  update or delete on "pktable" violates foreign key constraint "constrname3" on "fktable"
DETAIL:  Key (ptest1,ptest2,ptest3)=(1,2,3) is still referenced from table "fktable".
#-- Try to delete something that should work
DELETE FROM PKTABLE where ptest1=2;
#-- Show PKTABLE and FKTABLE
#SELECT * from PKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ptest1,	ptest2,	ptest3,	ptest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	2,	3,	"test1" ]
[ 1,	3,	3,	"test2" ]
[ 1,	3,	4,	"test3" ]

#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	2,	3,	1 ]
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]

#DROP TABLE FKTABLE;
#DROP TABLE PKTABLE;
#-- cascade update/delete
#CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE FKTABLE ( ftest1 int, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
#			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE
#			ON DELETE CASCADE ON UPDATE CASCADE);
#-- Insert Primary Key values
#INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
[ 1 ]
#INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
[ 1 ]
#-- Insert Foreign Key values
#INSERT INTO FKTABLE VALUES (1, 2, 3, 1); 
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
[ 1 ]
#INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
[ 1 ]
#-- Insert a failed values
#-- Show FKTABLE
#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	2,	3,	1 ]
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]

#-- Try to update something that will cascade
#UPDATE PKTABLE set ptest2=5 where ptest2=2;
#-- Try to update something that should not cascade
#UPDATE PKTABLE set ptest1=1 WHERE ptest2=3;
#-- Show PKTABLE and FKTABLE
#SELECT * from PKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ptest1,	ptest2,	ptest3,	ptest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 2,	4,	5,	"test4" ]
[ 1,	5,	3,	"test1" ]
[ 1,	3,	3,	"test2" ]
[ 1,	3,	4,	"test3" ]

#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]
[ 1,	5,	3,	1 ]

#-- Try to delete something that should cascade
DELETE FROM PKTABLE where ptest1=1 and ptest2=5 and ptest3=3;
#-- Show PKTABLE and FKTABLE
#SELECT * from PKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ptest1,	ptest2,	ptest3,	ptest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 2,	4,	5,	"test4" ]
[ 1,	3,	3,	"test2" ]
[ 1,	3,	4,	"test3" ]

#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]

#-- Try to delete something that should not have a cascade
DELETE FROM PKTABLE where ptest1=2;
#-- Show PKTABLE and FKTABLE
#SELECT * from PKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ptest1,	ptest2,	ptest3,	ptest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	3,	3,	"test2" ]
[ 1,	3,	4,	"test3" ]

#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]

#DROP TABLE FKTABLE;
#DROP TABLE PKTABLE;
#-- set null update / set default delete
#CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE FKTABLE ( ftest1 int DEFAULT 0, ftest2 int, ftest3 int, ftest4 int,  CONSTRAINT constrname3
#			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE
#			ON DELETE SET DEFAULT ON UPDATE SET NULL);
#-- Insert Primary Key values
#INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
[ 1 ]
#INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
[ 1 ]
#-- Insert Foreign Key values
#INSERT INTO FKTABLE VALUES (1, 2, 3, 1); 
[ 1 ]
#INSERT INTO FKTABLE VALUES (2, 3, 4, 1); 
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
[ 1 ]
#INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
[ 1 ]
#-- Insert a failed values
#-- Show FKTABLE
#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	2,	3,	1 ]
[ 2,	3,	4,	1 ]
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]

#-- Try to update something that will set null
#UPDATE PKTABLE set ptest2=5 where ptest2=2;
#-- Try to update something that should not set null
#UPDATE PKTABLE set ptest2=2 WHERE ptest2=3 and ptest1=1;
#-- Show PKTABLE and FKTABLE
#SELECT * from PKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ptest1,	ptest2,	ptest3,	ptest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 2,	3,	4,	"test3" ]
[ 2,	4,	5,	"test4" ]
[ 1,	5,	3,	"test1" ]
[ 1,	2,	3,	"test2" ]

#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 2,	3,	4,	1 ]
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]
[ 1,	"",	3,	1 ]

#-- Try to delete something that should set default
DELETE FROM PKTABLE where ptest1=2 and ptest2=3 and ptest3=4;
#-- Show PKTABLE and FKTABLE
#SELECT * from PKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ptest1,	ptest2,	ptest3,	ptest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 2,	4,	5,	"test4" ]
[ 1,	5,	3,	"test1" ]
[ 1,	2,	3,	"test2" ]

#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]
[ 1,	"",	3,	1 ]
[ 0,	"",	"",	1 ]

#-- Try to delete something that should not set default
DELETE FROM PKTABLE where ptest2=5;
#-- Show PKTABLE and FKTABLE
#SELECT * from PKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ptest1,	ptest2,	ptest3,	ptest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 2,	4,	5,	"test4" ]
[ 1,	2,	3,	"test2" ]

#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]
[ 1,	"",	3,	1 ]
[ 0,	"",	"",	1 ]

#DROP TABLE FKTABLE;
#DROP TABLE PKTABLE;
#-- set default update / set null delete
#CREATE TABLE PKTABLE ( ptest1 int, ptest2 int, ptest3 int, ptest4 text, PRIMARY KEY(ptest1, ptest2, ptest3) );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE FKTABLE ( ftest1 int DEFAULT 0, ftest2 int DEFAULT -1, ftest3 int, ftest4 int,  CONSTRAINT constrname3
#			FOREIGN KEY(ftest1, ftest2, ftest3) REFERENCES PKTABLE
#			ON DELETE SET NULL ON UPDATE SET DEFAULT);
#-- Insert Primary Key values
#INSERT INTO PKTABLE VALUES (1, 2, 3, 'test1');
[ 1 ]
#INSERT INTO PKTABLE VALUES (1, 3, 3, 'test2');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 3, 4, 'test3');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, 4, 5, 'test4');
[ 1 ]
#INSERT INTO PKTABLE VALUES (2, -1, 5, 'test5');
[ 1 ]
#-- Insert Foreign Key values
#INSERT INTO FKTABLE VALUES (1, 2, 3, 1); 
[ 1 ]
#INSERT INTO FKTABLE VALUES (2, 3, 4, 1); 
[ 1 ]
#INSERT INTO FKTABLE VALUES (2, 4, 5, 1);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 2, 3, 2);
[ 1 ]
#INSERT INTO FKTABLE VALUES (2, NULL, 3, 3);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 2, 7, 4);
[ 1 ]
#INSERT INTO FKTABLE VALUES (NULL, 3, 4, 5);
[ 1 ]
#-- Insert a failed values
#-- Show FKTABLE
#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1,	2,	3,	1 ]
[ 2,	3,	4,	1 ]
[ 2,	4,	5,	1 ]
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]

#-- Try to update something that will fail
CONTEXT:  SQL statement "UPDATE ONLY "public"."fktable" SET "ftest2" = DEFAULT WHERE "ftest1" = $1 AND "ftest2" = $2 AND "ftest3" = $3"
#-- Try to update something that will set default
#UPDATE PKTABLE set ptest1=0, ptest2=5, ptest3=10 where ptest2=2;
#UPDATE PKTABLE set ptest2=10 where ptest2=4;
#-- Try to update something that should not set default
#UPDATE PKTABLE set ptest2=2 WHERE ptest2=3 and ptest1=1;
#-- Show PKTABLE and FKTABLE
#SELECT * from PKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ptest1,	ptest2,	ptest3,	ptest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 2,	3,	4,	"test3" ]
[ 2,	-1,	5,	"test5" ]
[ 0,	5,	10,	"test1" ]
[ 2,	10,	5,	"test4" ]
[ 1,	2,	3,	"test2" ]

#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 2,	3,	4,	1 ]
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]
[ 0,	-1,	"",	1 ]
[ 2,	-1,	5,	1 ]

#-- Try to delete something that should set null
DELETE FROM PKTABLE where ptest1=2 and ptest2=3 and ptest3=4;
#-- Show PKTABLE and FKTABLE
#SELECT * from PKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ptest1,	ptest2,	ptest3,	ptest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 2,	-1,	5,	"test5" ]
[ 0,	5,	10,	"test1" ]
[ 2,	10,	5,	"test4" ]
[ 1,	2,	3,	"test2" ]

#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]
[ 0,	-1,	"",	1 ]
[ 2,	-1,	5,	1 ]
[ "",	"",	"",	1 ]

#-- Try to delete something that should not set null
DELETE FROM PKTABLE where ptest2=5;
#-- Show PKTABLE and FKTABLE
#SELECT * from PKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ptest1,	ptest2,	ptest3,	ptest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 2,	-1,	5,	"test5" ]
[ 2,	10,	5,	"test4" ]
[ 1,	2,	3,	"test2" ]

#SELECT * from FKTABLE;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% ftest1,	ftest2,	ftest3,	ftest4 # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ "",	2,	3,	2 ]
[ 2,	"",	3,	3 ]
[ "",	2,	7,	4 ]
[ "",	3,	4,	5 ]
[ 0,	-1,	"",	1 ]
[ 2,	-1,	5,	1 ]
[ "",	"",	"",	1 ]

#DROP TABLE FKTABLE;
#DROP TABLE PKTABLE;
#CREATE TABLE PKTABLE (ptest1 int PRIMARY KEY);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#
#
#
#
#DROP TABLE PKTABLE;
#-- Test for referencing column number smaller than referenced constraint
#CREATE TABLE PKTABLE (ptest1 int, ptest2 int, UNIQUE(ptest1, ptest2));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "pktable_ptest1_key" for table "pktable"
#
#
#DROP TABLE PKTABLE;
#--
#-- Tests for mismatched types
#--
#-- Basic one column, two table setup 
#CREATE TABLE PKTABLE (ptest1 int PRIMARY KEY);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#-- This next should fail, because inet=int does not exist
#-- This should also fail for the same reason, but here we
#-- give the column string
#-- This should succeed (with a warning), even though they are different types
#-- because int=varchar does exist
#CREATE TABLE FKTABLE (ftest1 varchar REFERENCES pktable);
WARNING:  foreign key constraint "fktable_ftest1_fkey" will require costly sequential scans
DETAIL:  Key columns "ftest1" and "ptest1" are of different types: character varying and integer.
#DROP TABLE FKTABLE;
#-- As should this
#CREATE TABLE FKTABLE (ftest1 varchar REFERENCES pktable(ptest1));
WARNING:  foreign key constraint "fktable_ftest1_fkey" will require costly sequential scans
DETAIL:  Key columns "ftest1" and "ptest1" are of different types: character varying and integer.
#DROP TABLE FKTABLE;
#DROP TABLE PKTABLE;
#-- Two columns, two tables
#CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, PRIMARY KEY(ptest1, ptest2));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#-- This should fail, because we just chose really odd types
#-- Again, so should this...
#-- This fails because we mixed up the column ordering
#-- As does this...
#-- And again..
#-- This works...
#CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest2, ftest1) REFERENCES pktable(ptest2, ptest1));
#DROP TABLE FKTABLE;
#-- As does this
#CREATE TABLE FKTABLE (ftest1 int, ftest2 inet, FOREIGN KEY(ftest1, ftest2) REFERENCES pktable(ptest1, ptest2));
#DROP TABLE FKTABLE;
#DROP TABLE PKTABLE;
#-- Two columns, same table
#-- Make sure this still works...
#CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
#ptest4) REFERENCES pktable(ptest1, ptest2));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#DROP TABLE PKTABLE;
#-- And this, 
#CREATE TABLE PKTABLE (ptest1 int, ptest2 inet, ptest3 int, ptest4 inet, PRIMARY KEY(ptest1, ptest2), FOREIGN KEY(ptest3,
#ptest4) REFERENCES pktable);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#DROP TABLE PKTABLE;
#-- This shouldn't (mixed up columns)
#-- Nor should this... (same reason, we have 4,3 referencing 1,2 which mismatches types
#-- Not this one either... Same as the last one except we didn't defined the columns being referenced.
#--
#-- Now some cases with inheritance
#-- Basic 2 table case: 1 column of matching types.
#create table pktable_base (base1 int not null);
#create table pktable (ptest1 int, primary key(base1), unique(base1, ptest1)); -- inherits (pktable_base)
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "pktable_base1_key" for table "pktable"
#create table fktable (ftest1 int references pktable(base1));
#-- now some ins, upd, del
#insert into pktable(base1) values (1);
[ 1 ]
#insert into pktable(base1) values (2);
[ 1 ]
#--  let's insert a non-existant fktable value
#--  let's make a valid row for that
#insert into pktable(base1) values (3);
[ 1 ]
#insert into fktable(ftest1) values (3);
[ 1 ]
#-- let's try removing a row that should fail from pktable
delete from pktable where base1>2;
ERROR:  update or delete on "pktable" violates foreign key constraint "fktable_ftest1_fkey" on "fktable"
DETAIL:  Key (base1)=(3) is still referenced from table "fktable".
#-- okay, let's try updating all of the base1 values to *4
#-- which should fail.
#-- okay, let's try an update that should work.
#update pktable set base1=base1*4 where base1<3;
#-- and a delete that should work
delete from pktable where base1>3;
#-- cleanup
#drop table fktable;
delete from pktable;
#-- Now 2 columns 2 tables, matching types
#create table fktable (ftest1 int, ftest2 int, foreign key(ftest1, ftest2) references pktable(base1, ptest1));
#-- now some ins, upd, del
#insert into pktable(base1, ptest1) values (1, 1);
[ 1 ]
#insert into pktable(base1, ptest1) values (2, 2);
[ 1 ]
#--  let's insert a non-existant fktable value
#--  let's make a valid row for that
#insert into pktable(base1,ptest1) values (3, 1);
[ 1 ]
#insert into fktable(ftest1, ftest2) values (3, 1);
[ 1 ]
#-- let's try removing a row that should fail from pktable
delete from pktable where base1>2;
ERROR:  update or delete on "pktable" violates foreign key constraint "fktable_ftest1_fkey" on "fktable"
DETAIL:  Key (base1,ptest1)=(3,1) is still referenced from table "fktable".
#-- okay, let's try updating all of the base1 values to *4
#-- which should fail.
#-- okay, let's try an update that should work.
#update pktable set base1=base1*4 where base1<3;
#-- and a delete that should work
delete from pktable where base1>3;
#-- cleanup
#drop table fktable;
#drop table pktable;
#drop table pktable_base;
#-- Now we'll do one all in 1 table with 2 columns of matching types
#create table pktable_base(base1 int not null, base2 int);
#create table pktable(ptest1 int, ptest2 int, primary key(base1, ptest1), foreign key(base2, ptest2) references
#                                             pktable(base1, ptest1)); -- inherits (pktable_base)
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#insert into pktable (base1, ptest1, base2, ptest2) values (1, 1, 1, 1);
[ 1 ]
#insert into pktable (base1, ptest1, base2, ptest2) values (2, 1, 1, 1);
[ 1 ]
#insert into pktable (base1, ptest1, base2, ptest2) values (2, 2, 2, 1);
[ 1 ]
#insert into pktable (base1, ptest1, base2, ptest2) values (1, 3, 2, 2);
[ 1 ]
#-- fails (3,2) isn't in base1, ptest1
#-- fails (2,2) is being referenced
delete from pktable where base1=2;
ERROR:  update or delete on "pktable" violates foreign key constraint "pktable_base2_fkey" on "pktable"
DETAIL:  Key (base1,ptest1)=(2,2) is still referenced from table "pktable".
#-- fails (1,1) is being referenced (twice)
#-- this sequence of two deletes will work, since after the first there will be no (2,*) references
delete from pktable where base2=2;
delete from pktable where base1=2;
#drop table pktable;
#drop table pktable_base;
#-- 2 columns (2 tables), mismatched types
#create table pktable_base(base1 int not null);
#create table pktable(ptest1 inet, primary key(base1, ptest1)); -- inherits (pktable_base)
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#-- just generally bad types (with and without column references on the referenced table)
#-- let's mix up which columns reference which
#drop table pktable;
#drop table pktable_base;
#-- 2 columns (1 table), mismatched types
#create table pktable_base(base1 int not null, base2 int);
#
#drop table pktable_base;
#--
#-- Deferrable constraints
#--		(right now, only FOREIGN KEY constraints can be deferred)
#--
#-- deferrable, explicitely deferred
#CREATE TABLE pktable (
#	id		integer PRIMARY KEY,
#	other	integer
#);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE fktable (
#	id		integer PRIMARY KEY,
#	fk		integer REFERENCES pktable DEFERRABLE
#);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fktable_pkey" for table "fktable"
#-- default to immediate: should fail
#-- explicitely defer the constraint
START TRANSACTION;
SET CONSTRAINTS ALL DEFERRED;
#INSERT INTO fktable VALUES (10, 15);
[ 1 ]
#INSERT INTO pktable VALUES (15, 0); -- make the FK insert valid
[ 1 ]
COMMIT;
#DROP TABLE fktable, pktable;
#-- deferrable, initially deferred
#CREATE TABLE pktable (
#	id		integer PRIMARY KEY,
#	other	integer
#);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE fktable (
#	id		integer PRIMARY KEY,
#	fk		integer REFERENCES pktable DEFERRABLE INITIALLY DEFERRED
#);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fktable_pkey" for table "fktable"
#-- default to deferred, should succeed
START TRANSACTION;
#INSERT INTO fktable VALUES (100, 200);
[ 1 ]
#INSERT INTO pktable VALUES (200, 500); -- make the FK insert valid
[ 1 ]
COMMIT;
#-- default to deferred, explicitely make immediate
START TRANSACTION;
SET CONSTRAINTS ALL IMMEDIATE;
#-- should fail
COMMIT;
#DROP TABLE fktable, pktable;
#-- tricky behavior: according to SQL99, if a deferred constraint is set
#-- to 'immediate' mode, it should be checked for validity *immediately*,
#-- not when the current transaction commits (i.e. the mode change applies
#-- retroactively)
#CREATE TABLE pktable (
#	id		integer PRIMARY KEY,
#	other	integer
#);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE fktable (
#	id		integer PRIMARY KEY,
#	fk		integer REFERENCES pktable DEFERRABLE
#);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fktable_pkey" for table "fktable"
START TRANSACTION;
SET CONSTRAINTS ALL DEFERRED;
#-- should succeed, for now
#INSERT INTO fktable VALUES (1000, 2000);
[ 1 ]
#-- should cause transaction abort, due to preceding error
SET CONSTRAINTS ALL IMMEDIATE;
ERROR:  insert or update on table "fktable" violates foreign key constraint "fktable_fk_fkey"
DETAIL:  Key (fk)=(2000) is not present in table "pktable".
#
COMMIT;
#DROP TABLE fktable, pktable;
#-- deferrable, initially deferred
#CREATE TABLE pktable (
#	id		integer PRIMARY KEY,
#	other	integer
#);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
#CREATE TABLE fktable (
#	id		integer PRIMARY KEY,
#	fk		integer REFERENCES pktable DEFERRABLE INITIALLY DEFERRED
#);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "fktable_pkey" for table "fktable"
START TRANSACTION;
#-- no error here
#INSERT INTO fktable VALUES (100, 200);
[ 1 ]
#-- error here on commit
COMMIT;
ERROR:  insert or update on table "fktable" violates foreign key constraint "fktable_fk_fkey"
DETAIL:  Key (fk)=(200) is not present in table "pktable".
#-- test notice about expensive referential integrity checks,
#-- where the index cannot be used because of type incompatibilities.
#CREATE TEMP TABLE pktable (
#        id1     integer PRIMARY KEY,
#        id2     VARCHAR(4) UNIQUE,
#        id3     REAL UNIQUE,
#        UNIQUE(id1, id2, id3)
#);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pktable_pkey" for table "pktable"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "pktable_id2_key" for table "pktable"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "pktable_id3_key" for table "pktable"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "pktable_id1_key" for table "pktable"
#CREATE TEMP TABLE fktable (
#        x1      integer REFERENCES pktable(id1),
#        x2      VARCHAR(4) REFERENCES pktable(id2),
#        x3      REAL REFERENCES pktable(id3),
#        x4      TEXT,
#        x5      smallint
#);
#-- check individual constraints with alter table.
#-- should generate warnings
#ALTER TABLE fktable ADD CONSTRAINT fk_2_3
#FOREIGN KEY (x2) REFERENCES pktable(id3);
WARNING:  foreign key constraint "fk_2_3" will require costly sequential scans
DETAIL:  Key columns "x2" and "id3" are of different types: character varying and real.
#ALTER TABLE fktable ADD CONSTRAINT fk_2_1
#FOREIGN KEY (x2) REFERENCES pktable(id1);
WARNING:  foreign key constraint "fk_2_1" will require costly sequential scans
DETAIL:  Key columns "x2" and "id1" are of different types: character varying and integer.
#ALTER TABLE fktable ADD CONSTRAINT fk_3_1
#FOREIGN KEY (x3) REFERENCES pktable(id1);
WARNING:  foreign key constraint "fk_3_1" will require costly sequential scans
DETAIL:  Key columns "x3" and "id1" are of different types: real and integer.
#-- should NOT generate warnings
#-- integer promotes to text, so this is ok
#ALTER TABLE fktable ADD CONSTRAINT fk_1_2
#FOREIGN KEY (x1) REFERENCES pktable(id2);
#-- integer promotes to real
#ALTER TABLE fktable ADD CONSTRAINT fk_1_3
#FOREIGN KEY (x1) REFERENCES pktable(id3);
#-- text is compatible with varchar
#ALTER TABLE fktable ADD CONSTRAINT fk_4_2
#FOREIGN KEY (x4) REFERENCES pktable(id2);
#-- smallint is part of integer opclass as of 8.0
#ALTER TABLE fktable ADD CONSTRAINT fk_5_1
#FOREIGN KEY (x5) REFERENCES pktable(id1);
#-- check multikey cases, especially out-of-order column lists
#-- no warnings here
#ALTER TABLE fktable ADD CONSTRAINT fk_123_123
#FOREIGN KEY (x1,x2,x3) REFERENCES pktable(id1,id2,id3);
#ALTER TABLE fktable ADD CONSTRAINT fk_213_213
#FOREIGN KEY (x2,x1,x3) REFERENCES pktable(id2,id1,id3);
#ALTER TABLE fktable ADD CONSTRAINT fk_253_213
#FOREIGN KEY (x2,x5,x3) REFERENCES pktable(id2,id1,id3);
#-- warnings here
#ALTER TABLE fktable ADD CONSTRAINT fk_123_231
#FOREIGN KEY (x1,x2,x3) REFERENCES pktable(id2,id3,id1);
WARNING:  foreign key constraint "fk_123_231" will require costly sequential scans
DETAIL:  Key columns "x2" and "id3" are of different types: character varying and real.
WARNING:  foreign key constraint "fk_123_231" will require costly sequential scans
DETAIL:  Key columns "x3" and "id1" are of different types: real and integer.
#ALTER TABLE fktable ADD CONSTRAINT fk_241_132
#FOREIGN KEY (x2,x4,x1) REFERENCES pktable(id1,id3,id2);
WARNING:  foreign key constraint "fk_241_132" will require costly sequential scans
DETAIL:  Key columns "x2" and "id1" are of different types: character varying and integer.
WARNING:  foreign key constraint "fk_241_132" will require costly sequential scans
DETAIL:  Key columns "x4" and "id3" are of different types: text and real.

= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

