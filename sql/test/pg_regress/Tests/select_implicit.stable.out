stdout of test 'select_implicit` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- SELECT_IMPLICIT
#-- Test cases for queries with ordering terms missing from the target list.
#-- This used to be called "junkfilter.sql".
#-- The parser uses the term "resjunk" to handle these cases.
#-- - thomas 1998-07-09
#--
#-- load test data
#CREATE TABLE test_missing_target (a int, b int, c char(8), d char);
#INSERT INTO test_missing_target VALUES (0, 1, 'XXXX', 'A');
[ 1 ]
#INSERT INTO test_missing_target VALUES (1, 2, 'AAAA', 'b');
[ 1 ]
#INSERT INTO test_missing_target VALUES (2, 2, 'AAAA', 'c');
[ 1 ]
#INSERT INTO test_missing_target VALUES (3, 3, 'BBBB', 'D');
[ 1 ]
#INSERT INTO test_missing_target VALUES (4, 3, 'BBBB', 'e');
[ 1 ]
#INSERT INTO test_missing_target VALUES (5, 3, 'bbbb', 'F');
[ 1 ]
#INSERT INTO test_missing_target VALUES (6, 4, 'cccc', 'g');
[ 1 ]
#INSERT INTO test_missing_target VALUES (7, 4, 'cccc', 'h');
[ 1 ]
#INSERT INTO test_missing_target VALUES (8, 4, 'CCCC', 'I');
[ 1 ]
#INSERT INTO test_missing_target VALUES (9, 4, 'CCCC', 'j');
[ 1 ]
#--   w/ existing GROUP BY target
#SELECT c, count(*) FROM test_missing_target GROUP BY test_missing_target.c ORDER BY c;
% sys.L0,	sys.L0 # table_name
% c,	count # name
% ?,	? # type
% ?,	? # length
[ "AAAA",	2 ]
[ "BBBB",	2 ]
[ "CCCC",	2 ]
[ "XXXX",	1 ]
[ "bbbb",	1 ]
[ "cccc",	2 ]

#--   w/o existing GROUP BY target using a relation name in GROUP BY clause
#SELECT count(*) FROM test_missing_target GROUP BY test_missing_target.c ORDER BY c;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 2 ]
[ 2 ]
[ 2 ]
[ 1 ]
[ 1 ]
[ 2 ]

#--   w/o existing GROUP BY target and w/o existing a different ORDER BY target
#--   failure expected
#
#--   w/o existing GROUP BY target and w/o existing same ORDER BY target
#SELECT count(*) FROM test_missing_target GROUP BY b ORDER BY b;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 1 ]
[ 2 ]
[ 3 ]
[ 4 ]

#--   w/ existing GROUP BY target using a relation name in target
#SELECT test_missing_target.b, count(*)
#  FROM test_missing_target GROUP BY b ORDER BY b;
% sys.L0,	sys.L0 # table_name
% b,	count # name
% ?,	? # type
% ?,	? # length
[ 1,	1 ]
[ 2,	2 ]
[ 3,	3 ]
[ 4,	4 ]

#--   w/o existing GROUP BY target
#SELECT c FROM test_missing_target ORDER BY a;
% sys.L0 # table_name
% c # name
% ? # type
% ? # length
[ "XXXX" ]
[ "AAAA" ]
[ "AAAA" ]
[ "BBBB" ]
[ "BBBB" ]
[ "bbbb" ]
[ "cccc" ]
[ "cccc" ]
[ "CCCC" ]
[ "CCCC" ]

#--   w/o existing ORDER BY target
#SELECT count(*) FROM test_missing_target GROUP BY b ORDER BY b desc;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 4 ]
[ 3 ]
[ 2 ]
[ 1 ]

#--   group using reference number
#SELECT count(*) FROM test_missing_target ORDER BY 1 desc;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 10 ]

#--   order using reference number
#SELECT c, count(*) FROM test_missing_target GROUP BY 1 ORDER BY 1;
% sys.L0,	sys.L0 # table_name
% c,	count # name
% ?,	? # type
% ?,	? # length
[ "AAAA",	2 ]
[ "BBBB",	2 ]
[ "CCCC",	2 ]
[ "XXXX",	1 ]
[ "bbbb",	1 ]
[ "cccc",	2 ]

#--   group using reference number out of range
#--   failure expected
#
#--   group w/o existing GROUP BY and ORDER BY target under ambiguous condition
#--   failure expected
#
#--   order w/ target under ambiguous condition
#--   failure NOT expected
#SELECT a, a FROM test_missing_target
#	ORDER BY a;
% sys.L0,	sys.L0 # table_name
% a,	a # name
% ?,	? # type
% ?,	? # length
[ 0,	0 ]
[ 1,	1 ]
[ 2,	2 ]
[ 3,	3 ]
[ 4,	4 ]
[ 5,	5 ]
[ 6,	6 ]
[ 7,	7 ]
[ 8,	8 ]
[ 9,	9 ]

#--   order expression w/ target under ambiguous condition
#--   failure NOT expected
#SELECT a/2, a/2 FROM test_missing_target
#	ORDER BY a/2;
% sys.L0,	sys.L0 # table_name
% ?column?,	?column? # name
% ?,	? # type
% ?,	? # length
[ 0,	0 ]
[ 0,	0 ]
[ 1,	1 ]
[ 1,	1 ]
[ 2,	2 ]
[ 2,	2 ]
[ 3,	3 ]
[ 3,	3 ]
[ 4,	4 ]
[ 4,	4 ]

#--   group expression w/ target under ambiguous condition
#--   failure NOT expected
#SELECT a/2, a/2 FROM test_missing_target
#	GROUP BY a/2 ORDER BY a/2;
% sys.L0,	sys.L0 # table_name
% ?column?,	?column? # name
% ?,	? # type
% ?,	? # length
[ 0,	0 ]
[ 1,	1 ]
[ 2,	2 ]
[ 3,	3 ]
[ 4,	4 ]

#--   group w/ existing GROUP BY target under ambiguous condition
#SELECT x.b, count(*) FROM test_missing_target x, test_missing_target y 
#	WHERE x.a = y.a
#	GROUP BY x.b ORDER BY x.b;
% sys.L0,	sys.L0 # table_name
% b,	count # name
% ?,	? # type
% ?,	? # length
[ 1,	1 ]
[ 2,	2 ]
[ 3,	3 ]
[ 4,	4 ]

#--   group w/o existing GROUP BY target under ambiguous condition
#SELECT count(*) FROM test_missing_target x, test_missing_target y 
#	WHERE x.a = y.a
#	GROUP BY x.b ORDER BY x.b;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 1 ]
[ 2 ]
[ 3 ]
[ 4 ]

#--   group w/o existing GROUP BY target under ambiguous condition
#--   into a table
#SELECT count(*) INTO TABLE test_missing_target2 
#FROM test_missing_target x, test_missing_target y 
#	WHERE x.a = y.a
#	GROUP BY x.b ORDER BY x.b;
#SELECT * FROM test_missing_target2;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 1 ]
[ 2 ]
[ 3 ]
[ 4 ]

#--  Functions and expressions
#--   w/ existing GROUP BY target
#SELECT a%2, count(b) FROM test_missing_target
#GROUP BY test_missing_target.a%2
#ORDER BY test_missing_target.a%2;
% sys.L0,	sys.L0 # table_name
% ?column?,	count # name
% ?,	? # type
% ?,	? # length
[ 0,	5 ]
[ 1,	5 ]

#--   w/o existing GROUP BY target using a relation name in GROUP BY clause
#SELECT count(c) FROM test_missing_target
#GROUP BY lower(test_missing_target.c)
#ORDER BY lower(test_missing_target.c);
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 2 ]
[ 3 ]
[ 4 ]
[ 1 ]

#--   w/o existing GROUP BY target and w/o existing a different ORDER BY target
#--   failure expected
#
#--   w/o existing GROUP BY target and w/o existing same ORDER BY target
#SELECT count(b) FROM test_missing_target GROUP BY b/2 ORDER BY b/2;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 1 ]
[ 5 ]
[ 4 ]

#--   w/ existing GROUP BY target using a relation name in target
#SELECT lower(test_missing_target.c), count(c)
#  FROM test_missing_target GROUP BY lower(c) ORDER BY lower(c);
% sys.L0,	sys.L0 # table_name
% lower,	count # name
% ?,	? # type
% ?,	? # length
[ "aaaa",	2 ]
[ "bbbb",	3 ]
[ "cccc",	4 ]
[ "xxxx",	1 ]

#--   w/o existing GROUP BY target
#SELECT a FROM test_missing_target ORDER BY upper(d);
% sys.L0 # table_name
% a # name
% ? # type
% ? # length
[ 0 ]
[ 1 ]
[ 2 ]
[ 3 ]
[ 4 ]
[ 5 ]
[ 6 ]
[ 7 ]
[ 8 ]
[ 9 ]

#--   w/o existing ORDER BY target
#SELECT count(b) FROM test_missing_target
#	GROUP BY (b + 1) / 2 ORDER BY (b + 1) / 2 desc;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 7 ]
[ 3 ]

#--   group w/o existing GROUP BY and ORDER BY target under ambiguous condition
#--   failure expected
#
#--   group w/ existing GROUP BY target under ambiguous condition
#SELECT x.b/2, count(x.b) FROM test_missing_target x, test_missing_target y 
#	WHERE x.a = y.a
#	GROUP BY x.b/2 ORDER BY x.b/2;
% sys.L0,	sys.L0 # table_name
% ?column?,	count # name
% ?,	? # type
% ?,	? # length
[ 0,	1 ]
[ 1,	5 ]
[ 2,	4 ]

#--   group w/o existing GROUP BY target under ambiguous condition
#--   failure expected due to ambiguous b in count(b)
#
#--   group w/o existing GROUP BY target under ambiguous condition
#--   into a table
#SELECT count(x.b) INTO TABLE test_missing_target3 
#FROM test_missing_target x, test_missing_target y 
#	WHERE x.a = y.a
#	GROUP BY x.b/2 ORDER BY x.b/2;
#SELECT * FROM test_missing_target3;
% sys.L0 # table_name
% count # name
% ? # type
% ? # length
[ 1 ]
[ 5 ]
[ 4 ]

#--   Cleanup
#DROP TABLE test_missing_target;
#DROP TABLE test_missing_target2;
#DROP TABLE test_missing_target3;

= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

