stdout of test 'case` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

#--
#-- CASE
#-- Test the case statement
#--
#CREATE TABLE CASE_TBL (
#  i integer,
#  f double precision
#);
#CREATE TABLE CASE2_TBL (
#  i integer,
#  j integer
#);
#INSERT INTO CASE_TBL VALUES (1, 10.1);
[ 1 ]
#INSERT INTO CASE_TBL VALUES (2, 20.2);
[ 1 ]
#INSERT INTO CASE_TBL VALUES (3, -30.3);
[ 1 ]
#INSERT INTO CASE_TBL VALUES (4, NULL);
[ 1 ]
#INSERT INTO CASE2_TBL VALUES (1, -1);
[ 1 ]
#INSERT INTO CASE2_TBL VALUES (2, -2);
[ 1 ]
#INSERT INTO CASE2_TBL VALUES (3, -3);
[ 1 ]
#INSERT INTO CASE2_TBL VALUES (2, -4);
[ 1 ]
#INSERT INTO CASE2_TBL VALUES (1, NULL);
[ 1 ]
#INSERT INTO CASE2_TBL VALUES (NULL, -6);
[ 1 ]
#--
#-- Simplest examples without tables
#--
#SELECT '3' AS "One",
#  CASE
#    WHEN 1 < 2 THEN 3
#  END AS "Simple WHEN";
% .,	. # table_name
% One,	"Simple WHEN" # name
% char,	tinyint # type
% 1,	1 # length
[ "3",	3	]
#SELECT '<NULL>' AS "One",
#  CASE
#    WHEN 1 > 2 THEN 3
#  END AS "Simple default";
% .,	. # table_name
% One,	"Simple default" # name
% char,	tinyint # type
% 6,	1 # length
[ "<NULL>",	NULL	]
#SELECT '3' AS "One",
#  CASE
#    WHEN 1 < 2 THEN 3
#    ELSE 4
#  END AS "Simple ELSE";
% .,	. # table_name
% One,	"Simple ELSE" # name
% char,	tinyint # type
% 1,	1 # length
[ "3",	3	]
#SELECT '4' AS "One",
#  CASE
#    WHEN 1 > 2 THEN 3
#    ELSE 4
#  END AS "ELSE default";
% .,	. # table_name
% One,	"ELSE default" # name
% char,	tinyint # type
% 1,	1 # length
[ "4",	4	]
#SELECT '6' AS "One",
#  CASE
#    WHEN 1 > 2 THEN 3
#    WHEN 4 < 5 THEN 6
#    ELSE 7
#  END AS "Two WHEN with default";
% .,	. # table_name
% One,	"Two WHEN with default" # name
% char,	tinyint # type
% 1,	1 # length
[ "6",	6	]
#SELECT CASE 'a' WHEN 'a' THEN 1 ELSE 2 END;
% .%3 # table_name
% %3 # name
% tinyint # type
% 1 # length
[ 1	]
#SELECT '' AS "Five",
#  CASE
#    WHEN i >= 3 THEN i
#  END AS ">= 3 or Null"
#  FROM CASE_TBL;
% .,	sys. # table_name
% Five,	">= 3 or Null" # name
% char,	int # type
% 0,	1 # length
[ "",	NULL	]
[ "",	NULL	]
[ "",	3 ]
[ "",	4 ]

#SELECT '' AS "Five",
#  CASE WHEN i >= 3 THEN (i + i)
#       ELSE i
#  END AS "Simplest Math"
#  FROM CASE_TBL;
% .,	sys. # table_name
% Five,	"Simplest Math" # name
% char,	bigint # type
% 0,	1 # length
[ "",	1 ]
[ "",	2 ]
[ "",	6 ]
[ "",	8 ]

#SELECT '' AS "Five", i AS "Value",
#  CASE WHEN (i < 0) THEN 'small'
#       WHEN (i = 0) THEN 'zero'
#       WHEN (i = 1) THEN 'one'
#       WHEN (i = 2) THEN 'two'
#       ELSE 'big'
#  END AS "Category"
#  FROM CASE_TBL;
% .,	sys.,	sys. # table_name
% Five,	Value,	Category # name
% char,	int,	char # type
% 0,	1,	5 # length
[ "",	1,	"one" ]
[ "",	2,	"two" ]
[ "",	3,	"big" ]
[ "",	4,	"big" ]

#SELECT '' AS "Five",
#  CASE WHEN ((i < 0) or (i < 0)) THEN 'small'
#       WHEN ((i = 0) or (i = 0)) THEN 'zero'
#       WHEN ((i = 1) or (i = 1)) THEN 'one'
#       WHEN ((i = 2) or (i = 2)) THEN 'two'
#       ELSE 'big'
#  END AS "Category"
#  FROM CASE_TBL;
% .,	sys. # table_name
% Five,	Category # name
% char,	char # type
% 0,	5 # length
[ "",	"one" ]
[ "",	"two" ]
[ "",	"big" ]
[ "",	"big" ]

#--
#-- Examples of qualifications involving tables
#--
#--
#-- NULLIF() and COALESCE()
#-- Shorthand forms for typical CASE constructs
#--  defined in the SQL92 standard.
#--
#SELECT * FROM CASE_TBL WHERE COALESCE(f,i) = 4;
% sys.case_tbl,	sys.case_tbl # table_name
% i,	f # name
% int,	double # type
% 1,	24 # length
[ 4,	NULL	]
#SELECT * FROM CASE_TBL WHERE NULLIF(f,i) = 2;
% sys.case_tbl,	sys.case_tbl # table_name
% i,	f # name
% int,	double # type
% 1,	24 # length
#SELECT distinct COALESCE(a.f, b.i, b.j)
#  FROM CASE_TBL a, CASE2_TBL b  Order By COALESCE(a.f, b.i, b.j);
% sys.%2 # table_name
% %2 # name
% double # type
% 24 # length
[ -30.3	]
[ -6	]
[ 1	]
[ 2 ]
[ 3 ]
[ 10.1	]
[ 20.2	]
#SELECT *
#  FROM CASE_TBL a, CASE2_TBL b
#  WHERE COALESCE(a.f, b.i, b.j) = 2;
% sys.a,	sys.a,	sys.b,	sys.b # table_name
% i,	f,	i,	j # name
% int,	double,	int,	int # type
% 1,	24,	1,	2 # length
[ 4,	NULL,	2,	-2	]
[ 4,	NULL,	2,	-4	]
#SELECT '' AS Five, NULLIF(a.i,b.i) AS "NULLIF(a.i,b.i)",
#  NULLIF(b.i, 4) AS "NULLIF(b.i,4)"
#  FROM CASE_TBL a, CASE2_TBL b  Order By 2,3;
% .,	sys.,	sys. # table_name
% siksteen,	"NULLIF(a.i,b.i)",	"NULLIF(b.i,4)" # name
% char,	int,	int # type
% 0,	1,	1 # length
[ "",	NULL,	1	]
[ "",	NULL,	2	]
[ "",	NULL,	3	]
[ "",	1,	NULL	]
[ "",	1,	2	]
[ "",	1,	3	]
[ "",	2,	NULL	]
[ "",	2,	1	]
[ "",	2,	3	]
[ "",	3,	NULL	]
[ "",	3,	1	]
[ "",	3,	2	]
[ "",	4,	NULL	]
[ "",	4,	1	]
[ "",	4,	2	]
[ "",	4,	3	]
#SELECT '' AS "Two", *
#  FROM CASE_TBL a, CASE2_TBL b
#  WHERE COALESCE(f,b.i) = 2;
% .,	sys.a,	sys.a,	sys.b,	sys.b # table_name
% Two,	i,	f,	i,	j # name
% char,	int,	double,	int,	int # type
% 0,	1,	24,	1,	2 # length
[ "",	4,	NULL,	2,	-2	]
[ "",	4,	NULL,	2,	-4	]
#UPDATE CASE_TBL
#  SET i = CASE WHEN i >= 3 THEN (- i)
#                ELSE (2 * i) END;
[ 4	]
#SELECT * FROM CASE_TBL;
% sys.case_tbl,	sys.case_tbl # table_name
% i,	f # name
% int,	double # type
% 2,	24 # length
[ 2,	10.1	]
[ 4,	20.2	]
[ -3,	-30.3	]
[ -4,	NULL	]
#UPDATE CASE_TBL
#  SET i = CASE WHEN i >= 2 THEN (2 * i)
#                ELSE (3 * i) END;
[ 4	]
#SELECT * FROM CASE_TBL;
% sys.case_tbl,	sys.case_tbl # table_name
% i,	f # name
% int,	double # type
% 3,	24 # length
[ 4,	10.1	]
[ 8,	20.2	]
[ -9,	-30.3	]
[ -12,	NULL	]
#UPDATE CASE_TBL
#  SET i = CASE WHEN i >= 2 THEN (2 * i)
#                ELSE (3 * i) END
#--  FROM CASE2_TBL b
#  WHERE i = -CASE_TBL.i;
[ 0	]
#SELECT * FROM CASE_TBL;
% sys.case_tbl,	sys.case_tbl # table_name
% i,	f # name
% int,	double # type
% 3,	24 # length
[ 4,	10.1	]
[ 8,	20.2	]
[ -9,	-30.3	]
[ -12,	NULL	]
#DROP TABLE CASE_TBL;
#DROP TABLE CASE2_TBL;

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

