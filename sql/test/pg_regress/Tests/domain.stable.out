stdout of test 'domain` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#-- Test Comment / Drop
#create domain domaindroptest integer;

#-- currently this will be disallowed
#
#drop domain domaindroptest;
#-- this should fail because already gone
#
#-- TEST Domains.
#create domain domainvarchar varchar(5);
#create domain domainnumeric numeric(8,2);
#create domain domainint4 integer;
#create domain domaintext text;
#-- Test explicit coercions --- these should succeed (and truncate)
#SELECT cast('123456' as domainvarchar);
% sys.L0 # table_name
% domainvarchar # name
% ? # type
% ? # length
[ 12345 ]

#SELECT cast('12345' as domainvarchar);
% sys.L0 # table_name
% domainvarchar # name
% ? # type
% ? # length
[ 12345 ]

#-- Test tables using domains
#create table basictest
#           ( testint4 domainint4
#           , testtext domaintext
#           , testvarchar domainvarchar
#           , testnumeric domainnumeric
#           );
#INSERT INTO basictest values ('88', 'haha', 'short', '123.12');      -- Good
[ 1 ]
#
#INSERT INTO basictest values ('88', 'haha', 'short', '123.1212');    -- Truncate numeric
[ 1 ]
#-- Test copy
COPY basictest (testvarchar) FROM stdin; -- fail
ERROR:  value too long for type character varying(5)
CONTEXT:  COPY basictest, line 1: "notsoshorttext"
COPY basictest (testvarchar) FROM stdin;
#select * from basictest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% testint4,	testtext,	testvarchar,	testnumeric # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 88,	"haha",	"short",	123.12 ]
[ 88,	"haha",	"short",	123.12 ]
[ "",	"",	"short",	"" ]

#-- check that domains inherit operations from base types
#select testtext || testvarchar as concat, testnumeric + 42 as sum
#from basictest;
% sys.L0,	sys.L0 # table_name
% concat,	sum # name
% ?,	? # type
% ?,	? # length
[ "hahashort",	165.12 ]
[ "hahashort",	165.12 ]
[ "",	"" ]

#drop table basictest;
#drop domain domainvarchar restrict;
#drop domain domainnumeric restrict;
#drop domain domainint4 restrict;
#drop domain domaintext;
#-- Array Test
#create domain domainint4arr integer[1];
#create domain domaintextarr text[2][3];
#create table domarrtest
#           ( testint4arr domainint4arr
#           , testtextarr domaintextarr
#            );
#INSERT INTO domarrtest values ('{2,2}', '{{"a","b"},{"c","d"}}');
[ 1 ]
#INSERT INTO domarrtest values ('{{2,2},{2,2}}', '{{"a","b"}}');
[ 1 ]
#INSERT INTO domarrtest values ('{2,2}', '{{"a","b"},{"c","d"},{"e","f"}}');
[ 1 ]
#INSERT INTO domarrtest values ('{2,2}', '{{"a"},{"c"}}');
[ 1 ]
#INSERT INTO domarrtest values (NULL, '{{"a","b","c"},{"d","e","f"}}');
[ 1 ]
#select * from domarrtest;
% sys.L0,	sys.L0 # table_name
% testint4arr,	testtextarr # name
% ?,	? # type
% ?,	? # length
[ "{2,2}",	"{{a,b},{c,d}}" ]
[ "{{2,2},{2,2}}",	"{{a,b}}" ]
[ "{2,2}",	"{{a,b},{c,d},{e,f}}" ]
[ "{2,2}",	"{{a},{c}}" ]
[ "",	"{{a,b,c},{d,e,f}}" ]

#select testint4arr[1], testtextarr[2:2] from domarrtest;
% sys.L0,	sys.L0 # table_name
% testint4arr,	testtextarr # name
% ?,	? # type
% ?,	? # length
[ 2,	"{{c,d}}" ]
[ "",	"" ]
[ 2,	"{{c,d}}" ]
[ 2,	"{{c}}" ]
[ "",	"{{d,e,f}}" ]

#drop table domarrtest;
#drop domain domainint4arr restrict;
#drop domain domaintextarr restrict;
#create domain dnotnull varchar(15) NOT NULL;
#create domain dnull    varchar(15);
#create domain dcheck   varchar(15) NOT NULL CHECK (VALUE = 'a' OR VALUE = 'c' OR VALUE = 'd');
#create table nulltest
#           ( col1 dnotnull
#           , col2 dnotnull NULL  -- NOT NULL in the domain cannot be overridden
#           , col3 dnull    NOT NULL
#           , col4 dnull
#           , col5 dcheck CHECK (col5 IN ('c', 'd'))
#           );
#
#INSERT INTO nulltest values ('a', 'b', 'c', 'd', 'c');  -- Good
[ 1 ]
#
#
#
#
#
#INSERT INTO nulltest values ('a', 'b', 'c', NULL, 'd'); -- Good
[ 1 ]
#-- Test copy
COPY nulltest FROM stdin; --fail
ERROR:  domain dcheck does not allow null values
CONTEXT:  COPY nulltest, line 1: "a	b	\N	d	\N"
#-- Last row is bad
COPY nulltest FROM stdin;
ERROR:  new row for relation "nulltest" violates check constraint "nulltest_col5_check"
CONTEXT:  COPY nulltest, line 3: "a	b	c	\N	a"
#select * from nulltest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% col1,	col2,	col3,	col4,	col5 # name
% ?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	? # length
[ "a",	"b",	"c",	"d",	"c" ]
[ "a",	"b",	"c",	"",	"d" ]

#-- Test out coerced (casted) constraints
#SELECT cast('1' as dnotnull);
% sys.L0 # table_name
% dnotnull # name
% ? # type
% ? # length
[ 1 ]

#
#
#
#-- cleanup
#drop table nulltest;
#drop domain dnotnull restrict;
#drop domain dnull restrict;
#drop domain dcheck restrict;
#create domain ddef1 integer DEFAULT 3;
#create domain ddef2 oid DEFAULT '12';
#-- Type mixing, function returns bigint
#create domain ddef3 text DEFAULT 5;
#create sequence ddef4_seq;
#create domain ddef4 integer DEFAULT nextval(cast('ddef4_seq' as text));
#create domain ddef5 numeric(8,2) NOT NULL DEFAULT '12.12';
#create table defaulttest
#            ( col1 ddef1
#            , col2 ddef2
#            , col3 ddef3
#            , col4 ddef4 PRIMARY KEY
#            , col5 ddef1 NOT NULL DEFAULT NULL
#            , col6 ddef2 DEFAULT '88'
#            , col7 ddef4 DEFAULT 8000
#            , col8 ddef5
#            );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "defaulttest_pkey" for table "defaulttest"
#insert into defaulttest default values;
[ 1 ]
#insert into defaulttest default values;
[ 1 ]
#insert into defaulttest default values;
[ 1 ]
#-- Test defaults with copy
COPY defaulttest(col5) FROM stdin;
#select * from defaulttest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% col1,	col2,	col3,	col4,	col5,	col6,	col7,	col8 # name
% ?,	?,	?,	?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	?,	?,	?,	? # length
[ 3,	12,	5,	1,	3,	88,	8000,	12.12 ]
[ 3,	12,	5,	2,	3,	88,	8000,	12.12 ]
[ 3,	12,	5,	3,	3,	88,	8000,	12.12 ]
[ 3,	12,	5,	4,	42,	88,	8000,	12.12 ]

#drop sequence ddef4_seq;
#drop table defaulttest cascade;
#-- Test ALTER DOMAIN .. NOT NULL
#create domain dnotnulltest integer;
#create table domnotnull
#( col1 dnotnulltest
#, col2 dnotnulltest
#);
#insert into domnotnull default values;
[ 1 ]
#
#update domnotnull set col1 = 5;
#
#update domnotnull set col2 = 6;
#alter domain dnotnulltest set not null;
#
#alter domain dnotnulltest drop not null;
#update domnotnull set col1 = null;
#drop domain dnotnulltest cascade;
NOTICE:  drop cascades to table domnotnull column col2
NOTICE:  drop cascades to table domnotnull column col1
#-- Test ALTER DOMAIN .. DEFAULT ..
#create table domdeftest (col1 ddef1);
#insert into domdeftest default values;
[ 1 ]
#select * from domdeftest;
% sys.L0 # table_name
% col1 # name
% ? # type
% ? # length
[ 3 ]

#alter domain ddef1 set default '42';
#insert into domdeftest default values;
[ 1 ]
#select * from domdeftest;
% sys.L0 # table_name
% col1 # name
% ? # type
% ? # length
[ 3 ]
[ 42 ]

#alter domain ddef1 drop default;
#insert into domdeftest default values;
[ 1 ]
#select * from domdeftest;
% sys.L0 # table_name
% col1 # name
% ? # type
% ? # length
[ 3 ]
[ 42 ]
[ "" ]

#drop table domdeftest;
#-- Test ALTER DOMAIN .. CONSTRAINT ..
#create domain con as integer;
#create table domcontest (col1 con);
#insert into domcontest values (1);
[ 1 ]
#insert into domcontest values (2);
[ 1 ]
#
#alter domain con add constraint t check (VALUE < 34);
#alter domain con add check (VALUE > 0);
#
#
#insert into domcontest values (5);
[ 1 ]
#alter domain con drop constraint t;
#
#insert into domcontest values (42);
[ 1 ]
#-- Confirm ALTER DOMAIN with RULES.
#create table domtab (col1 integer);
#create domain dom as integer;
#create view domview as select cast(col1 as dom) from domtab;
#insert into domtab (col1) values (null);
[ 1 ]
#insert into domtab (col1) values (5);
[ 1 ]
#select * from domview;
% sys.L0 # table_name
% col1 # name
% ? # type
% ? # length
[ "" ]
[ 5 ]

#alter domain dom set not null;
#
#alter domain dom drop not null;
#select * from domview;
% sys.L0 # table_name
% col1 # name
% ? # type
% ? # length
[ "" ]
[ 5 ]

#alter domain dom add constraint domchkgt6 check(value > 6);
#
#alter domain dom drop constraint domchkgt6 restrict;
#select * from domview;
% sys.L0 # table_name
% col1 # name
% ? # type
% ? # length
[ "" ]
[ 5 ]

#-- cleanup
#drop domain ddef1 restrict;
#drop domain ddef2 restrict;
#drop domain ddef3 restrict;
#drop domain ddef4 restrict;
#drop domain ddef5 restrict;

= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

