stdout of test 'privileges` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- Test access privileges
#--
#CREATE USER regressuser1;
#CREATE USER regressuser2;
#CREATE USER regressuser3;
#CREATE USER regressuser4;
#
#CREATE GROUP regressgroup1;
#CREATE GROUP regressgroup2 WITH USER regressuser1, regressuser2;
#ALTER GROUP regressgroup1 ADD USER regressuser4;
#ALTER GROUP regressgroup2 ADD USER regressuser2;	-- duplicate
#ALTER GROUP regressgroup2 DROP USER regressuser2;
#ALTER GROUP regressgroup2 ADD USER regressuser4;
#-- test owner privileges
SET SESSION AUTHORIZATION regressuser1;
#SELECT session_user, current_user;
% sys.L0,	sys.L0 # table_name
% session_user,	current_user # name
% ?,	? # type
% ?,	? # length
[ "regressuser1",	"regressuser1" ]

#CREATE TABLE atest1 ( a int, b text );
#SELECT * FROM atest1;
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length

#INSERT INTO atest1 VALUES (1, 'one');
[ 1 ]
DELETE FROM atest1;
#UPDATE atest1 SET a = 1 WHERE b = 'blech';
LOCK atest1 IN ACCESS EXCLUSIVE MODE;
REVOKE ALL ON atest1 FROM PUBLIC;
#SELECT * FROM atest1;
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length

GRANT ALL ON atest1 TO regressuser2;
GRANT SELECT ON atest1 TO regressuser3, regressuser4;
#SELECT * FROM atest1;
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length

#CREATE TABLE atest2 (col1 varchar(10), col2 boolean);
GRANT SELECT ON atest2 TO regressuser2;
GRANT UPDATE ON atest2 TO regressuser3;
GRANT INSERT ON atest2 TO regressuser4;
SET SESSION AUTHORIZATION regressuser2;
#SELECT session_user, current_user;
% sys.L0,	sys.L0 # table_name
% session_user,	current_user # name
% ?,	? # type
% ?,	? # length
[ "regressuser2",	"regressuser2" ]

#-- try various combinations of queries on atest1 and atest2
#SELECT * FROM atest1; -- ok
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length

#SELECT * FROM atest2; -- ok
% sys.L0,	sys.L0 # table_name
% col1,	col2 # name
% ?,	? # type
% ?,	? # length

#INSERT INTO atest1 VALUES (2, 'two'); -- ok
[ 1 ]
#
#INSERT INTO atest1 SELECT 1, b FROM atest1; -- ok
[ 1 ]
#UPDATE atest1 SET a = 1 WHERE a = 2; -- ok
#
#SELECT * FROM atest1 FOR UPDATE; -- ok
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 1,	"two" ]
[ 1,	"two" ]

#
DELETE FROM atest2; -- fail
ERROR:  permission denied for relation atest2
LOCK atest2 IN ACCESS EXCLUSIVE MODE; -- fail
ERROR:  permission denied for relation atest2
COPY atest2 FROM stdin; -- fail
ERROR:  permission denied for relation atest2
GRANT ALL ON atest1 TO PUBLIC; -- fail
WARNING:  no privileges were granted
#-- checks in subquery, both ok
#SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length

#SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
% sys.L0,	sys.L0 # table_name
% col1,	col2 # name
% ?,	? # type
% ?,	? # length

SET SESSION AUTHORIZATION regressuser3;
#SELECT session_user, current_user;
% sys.L0,	sys.L0 # table_name
% session_user,	current_user # name
% ?,	? # type
% ?,	? # length
[ "regressuser3",	"regressuser3" ]

#SELECT * FROM atest1; -- ok
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 1,	"two" ]
[ 1,	"two" ]

#
#
#
#
#
#UPDATE atest2 SET col2 = NULL; -- ok
#
#UPDATE atest2 SET col2 = true WHERE atest1.a = 5; -- ok
#
#
DELETE FROM atest2; -- fail
ERROR:  permission denied for relation atest2
LOCK atest2 IN ACCESS EXCLUSIVE MODE; -- ok
COPY atest2 FROM stdin; -- fail
ERROR:  permission denied for relation atest2
#-- checks in subquery, both fail
#
#
SET SESSION AUTHORIZATION regressuser4;
COPY atest2 FROM stdin; -- ok
#SELECT * FROM atest1; -- ok
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 1,	"two" ]
[ 1,	"two" ]

#-- groups
SET SESSION AUTHORIZATION regressuser3;
#CREATE TABLE atest3 (one int, two int, three int);
GRANT DELETE ON atest3 TO GROUP regressgroup2;
SET SESSION AUTHORIZATION regressuser1;
#
DELETE FROM atest3; -- ok
#-- views
SET SESSION AUTHORIZATION regressuser3;
#CREATE VIEW atestv1 AS SELECT * FROM atest1; -- ok
/* The next *should* fail, but it's not implemented that way yet. */
#CREATE VIEW atestv2 AS SELECT * FROM atest2;
#CREATE VIEW atestv3 AS SELECT * FROM atest3; -- ok
#SELECT * FROM atestv1; -- ok
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 1,	"two" ]
[ 1,	"two" ]

#
GRANT SELECT ON atestv1, atestv3 TO regressuser4;
GRANT SELECT ON atestv2 TO regressuser2;
SET SESSION AUTHORIZATION regressuser4;
#SELECT * FROM atestv1; -- ok
% sys.L0,	sys.L0 # table_name
% a,	b # name
% ?,	? # type
% ?,	? # length
[ 1,	"two" ]
[ 1,	"two" ]

#
#SELECT * FROM atestv3; -- ok
% sys.L0,	sys.L0,	sys.L0 # table_name
% one,	two,	three # name
% ?,	?,	? # type
% ?,	?,	? # length

#CREATE VIEW atestv4 AS SELECT * FROM atestv3; -- nested view
#SELECT * FROM atestv4; -- ok
% sys.L0,	sys.L0,	sys.L0 # table_name
% one,	two,	three # name
% ?,	?,	? # type
% ?,	?,	? # length

GRANT SELECT ON atestv4 TO regressuser2;
SET SESSION AUTHORIZATION regressuser2;
#-- Two complex cases:
#
#SELECT * FROM atestv4; -- ok (even though regressuser2 cannot access underlying atestv3)
% sys.L0,	sys.L0,	sys.L0 # table_name
% one,	two,	three # name
% ?,	?,	? # type
% ?,	?,	? # length

#SELECT * FROM atest2; -- ok
% sys.L0,	sys.L0 # table_name
% col1,	col2 # name
% ?,	? # type
% ?,	? # length
[ "bar",	"t" ]

#
#-- privileges on functions, languages
#-- switch to superuser
\c -
REVOKE ALL PRIVILEGES ON LANGUAGE sql FROM PUBLIC;
GRANT USAGE ON LANGUAGE sql TO regressuser1; -- ok
GRANT USAGE ON LANGUAGE c TO PUBLIC; -- fail
ERROR:  language "c" is not trusted
HINT:  Only superusers may use untrusted languages.
SET SESSION AUTHORIZATION regressuser1;
GRANT USAGE ON LANGUAGE sql TO regressuser2; -- fail
WARNING:  no privileges were granted
#CREATE FUNCTION testfunc1(int) RETURNS int AS 'select 2 * $1;' LANGUAGE sql;
#CREATE FUNCTION testfunc2(int) RETURNS int AS 'select 3 * $1;' LANGUAGE sql;
REVOKE ALL ON FUNCTION testfunc1(int), testfunc2(int) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION testfunc1(int), testfunc2(int) TO regressuser2;
GRANT USAGE ON FUNCTION testfunc1(int) TO regressuser3; -- semantic error
ERROR:  invalid privilege type USAGE for function
GRANT ALL PRIVILEGES ON FUNCTION testfunc1(int) TO regressuser4;
GRANT ALL PRIVILEGES ON FUNCTION testfunc_nosuch(int) TO regressuser4;
ERROR:  function testfunc_nosuch(integer) does not exist
#CREATE FUNCTION testfunc4(boolean) RETURNS text
#  AS 'select col1 from atest2 where col2 = $1;'
#  LANGUAGE sql SECURITY DEFINER;
GRANT EXECUTE ON FUNCTION testfunc4(boolean) TO regressuser3;
SET SESSION AUTHORIZATION regressuser2;
#SELECT testfunc1(5), testfunc2(5); -- ok
% sys.L0,	sys.L0 # table_name
% testfunc1,	testfunc2 # name
% ?,	? # type
% ?,	? # length
[ 10,	15 ]

#
SET SESSION AUTHORIZATION regressuser3;
#
#
#SELECT testfunc4(true); -- ok
% sys.L0 # table_name
% testfunc4 # name
% ? # type
% ? # length
[ "bar" ]

SET SESSION AUTHORIZATION regressuser4;
#SELECT testfunc1(5); -- ok
% sys.L0 # table_name
% testfunc1 # name
% ? # type
% ? # length
[ 10 ]

#
\c -
#DROP FUNCTION testfunc1(int); -- ok
#-- restore to sanity
GRANT ALL PRIVILEGES ON LANGUAGE sql TO PUBLIC;
#-- has_table_privilege function
#-- bad-input checks
#select has_table_privilege(NULL,'pg_shadow','select');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "" ]

#
#
#
#
#
#-- superuser
\c -
#select has_table_privilege(current_user,'pg_shadow','select');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(current_user,'pg_shadow','insert');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(t2.usesysid,'pg_shadow','update')
#from (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(t2.usesysid,'pg_shadow','delete')
#from (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(current_user,t1.oid,'rule')
#from (select oid from pg_class where relname = 'pg_shadow') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(current_user,t1.oid,'references')
#from (select oid from pg_class where relname = 'pg_shadow') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(t2.usesysid,t1.oid,'select')
#from (select oid from pg_class where relname = 'pg_shadow') as t1,
#  (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(t2.usesysid,t1.oid,'insert')
#from (select oid from pg_class where relname = 'pg_shadow') as t1,
#  (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege('pg_shadow','update');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege('pg_shadow','delete');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(t1.oid,'select')
#from (select oid from pg_class where relname = 'pg_shadow') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(t1.oid,'trigger')
#from (select oid from pg_class where relname = 'pg_shadow') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#-- non-superuser
SET SESSION AUTHORIZATION regressuser3;
#select has_table_privilege(current_user,'pg_class','select');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(current_user,'pg_class','insert');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(t2.usesysid,'pg_class','update')
#from (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(t2.usesysid,'pg_class','delete')
#from (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(current_user,t1.oid,'rule')
#from (select oid from pg_class where relname = 'pg_class') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(current_user,t1.oid,'references')
#from (select oid from pg_class where relname = 'pg_class') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(t2.usesysid,t1.oid,'select')
#from (select oid from pg_class where relname = 'pg_class') as t1,
#  (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(t2.usesysid,t1.oid,'insert')
#from (select oid from pg_class where relname = 'pg_class') as t1,
#  (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege('pg_class','update');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege('pg_class','delete');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(t1.oid,'select')
#from (select oid from pg_class where relname = 'pg_class') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(t1.oid,'trigger')
#from (select oid from pg_class where relname = 'pg_class') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(current_user,'atest1','select');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(current_user,'atest1','insert');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(t2.usesysid,'atest1','update')
#from (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(t2.usesysid,'atest1','delete')
#from (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(current_user,t1.oid,'rule')
#from (select oid from pg_class where relname = 'atest1') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(current_user,t1.oid,'references')
#from (select oid from pg_class where relname = 'atest1') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(t2.usesysid,t1.oid,'select')
#from (select oid from pg_class where relname = 'atest1') as t1,
#  (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(t2.usesysid,t1.oid,'insert')
#from (select oid from pg_class where relname = 'atest1') as t1,
#  (select usesysid from pg_user where usename = current_user) as t2;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege('atest1','update');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege('atest1','delete');
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#select has_table_privilege(t1.oid,'select')
#from (select oid from pg_class where relname = 'atest1') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#select has_table_privilege(t1.oid,'trigger')
#from (select oid from pg_class where relname = 'atest1') as t1;
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#-- Grant options
SET SESSION AUTHORIZATION regressuser1;
#CREATE TABLE atest4 (a int);
GRANT SELECT ON atest4 TO regressuser2 WITH GRANT OPTION;
GRANT UPDATE ON atest4 TO regressuser2;
GRANT SELECT ON atest4 TO GROUP regressgroup1 WITH GRANT OPTION; -- fail
ERROR:  grant options can only be granted to individual users
SET SESSION AUTHORIZATION regressuser2;
GRANT SELECT ON atest4 TO regressuser3;
GRANT UPDATE ON atest4 TO regressuser3; -- fail
WARNING:  no privileges were granted
SET SESSION AUTHORIZATION regressuser1;
REVOKE SELECT ON atest4 FROM regressuser3; -- does nothing
#SELECT has_table_privilege('regressuser3', 'atest4', 'SELECT'); -- true
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

REVOKE SELECT ON atest4 FROM regressuser2; -- fail
ERROR:  dependent privileges exist
HINT:  Use CASCADE to revoke them too.
REVOKE GRANT OPTION FOR SELECT ON atest4 FROM regressuser2 CASCADE; -- ok
#SELECT has_table_privilege('regressuser2', 'atest4', 'SELECT'); -- true
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#SELECT has_table_privilege('regressuser3', 'atest4', 'SELECT'); -- false
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "f" ]

#SELECT has_table_privilege('regressuser1', 'atest4', 'SELECT WITH GRANT OPTION'); -- true
% sys.L0 # table_name
% has_table_privilege # name
% ? # type
% ? # length
[ "t" ]

#-- clean up
\c regression
#DROP FUNCTION testfunc2(int);
#DROP FUNCTION testfunc4(boolean);
#DROP VIEW atestv1;
#DROP VIEW atestv2;
#-- this should cascade to drop atestv4
#DROP VIEW atestv3 CASCADE;
NOTICE:  drop cascades to rule _RETURN on view atestv4
NOTICE:  drop cascades to view atestv4
#-- this should complain "does not exist"
#
#DROP TABLE atest1;
#DROP TABLE atest2;
#DROP TABLE atest3;
#DROP TABLE atest4;
#DROP GROUP regressgroup1;
#DROP GROUP regressgroup2;
#DROP USER regressuser1;
#DROP USER regressuser2;
#DROP USER regressuser3;
#DROP USER regressuser4;

= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

