stdout of test 'type_sanity` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- TYPE_SANITY
#-- Sanity checks for common errors in making type-related system tables:
#-- pg_type, pg_class, pg_attribute.
#--
#-- None of the SELECTs here should ever find any matching entries,
#-- so the expected output is easy to maintain ;-).
#-- A test failure indicates someone messed up an entry in the system tables.
#--
#-- NB: we assume the oidjoins test will have caught any dangling links,
#-- that is OID or REGPROC fields that are not zero and do not match some
#-- row in the linked-to table.  However, if we want to enforce that a link
#-- field can't be 0, we have to check it here.
#-- **************** pg_type ****************
#-- Look for illegal values in pg_type fields.
#SELECT p1.oid, p1.typname
#FROM pg_type as p1
#WHERE p1.typnamespace = 0 OR
#    (p1.typlen <= 0 AND p1.typlen != -1 AND p1.typlen != -2) OR
#    (p1.typtype not in ('b', 'c', 'd', 'p')) OR
#    NOT p1.typisdefined OR
#    (p1.typalign not in ('c', 's', 'i', 'd')) OR
#    (p1.typstorage not in ('p', 'x', 'e', 'm'));
% sys.L0,	sys.L0 # table_name
% oid,	typname # name
% ?,	? # type
% ?,	? # length

#-- Look for "pass by value" types that can't be passed by value.
#SELECT p1.oid, p1.typname
#FROM pg_type as p1
#WHERE p1.typbyval AND
#    (p1.typlen != 1 OR p1.typalign != 'c') AND
#    (p1.typlen != 2 OR p1.typalign != 's') AND
#    (p1.typlen != 4 OR p1.typalign != 'i');
% sys.L0,	sys.L0 # table_name
% oid,	typname # name
% ?,	? # type
% ?,	? # length

#-- Look for "toastable" types that aren't varlena.
#SELECT p1.oid, p1.typname
#FROM pg_type as p1
#WHERE p1.typstorage != 'p' AND
#    (p1.typbyval OR p1.typlen != -1);
% sys.L0,	sys.L0 # table_name
% oid,	typname # name
% ?,	? # type
% ?,	? # length

#-- Look for complex types that do not have a typrelid entry,
#-- or basic types that do.
#SELECT p1.oid, p1.typname
#FROM pg_type as p1
#WHERE (p1.typtype = 'c' AND p1.typrelid = 0) OR
#    (p1.typtype != 'c' AND p1.typrelid != 0);
% sys.L0,	sys.L0 # table_name
% oid,	typname # name
% ?,	? # type
% ?,	? # length

#-- Look for basic types that don't have an array type.
#-- NOTE: as of 8.0, this check finds smgr and unknown.
#SELECT p1.oid, p1.typname
#FROM pg_type as p1
#WHERE p1.typtype in ('b') AND p1.typname NOT LIKE '\\_%' AND NOT EXISTS
#    (SELECT 1 FROM pg_type as p2
#     WHERE p2.typname = ('_' || p1.typname)::name AND
#           p2.typelem = p1.oid);
% sys.L0,	sys.L0 # table_name
% oid,	typname # name
% ?,	? # type
% ?,	? # length
[ 210,	"smgr" ]
[ 705,	"unknown" ]

#-- Conversion routines must be provided except in 'c' entries.
#SELECT p1.oid, p1.typname
#FROM pg_type as p1
#WHERE p1.typtype != 'c' AND
#    (p1.typinput = 0 OR p1.typoutput = 0);
% sys.L0,	sys.L0 # table_name
% oid,	typname # name
% ?,	? # type
% ?,	? # length

#-- Check for bogus typinput routines
#SELECT p1.oid, p1.typname, p2.oid, p2.proname
#FROM pg_type AS p1, pg_proc AS p2
#WHERE p1.typinput = p2.oid AND p1.typtype in ('b', 'p') AND NOT
#    ((p2.pronargs = 1 AND p2.proargtypes[0] = 'cstring'::regtype) OR
#     (p2.pronargs = 2 AND p2.proargtypes[0] = 'cstring'::regtype AND
#      p2.proargtypes[1] = 'oid'::regtype) OR
#     (p2.pronargs = 3 AND p2.proargtypes[0] = 'cstring'::regtype AND
#      p2.proargtypes[1] = 'oid'::regtype AND
#      p2.proargtypes[2] = 'integer'::regtype));
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% oid,	typname,	oid,	proname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length

#-- As of 8.0, this check finds refcursor, which is borrowing
#-- other types' I/O routines
#SELECT p1.oid, p1.typname, p2.oid, p2.proname
#FROM pg_type AS p1, pg_proc AS p2
#WHERE p1.typinput = p2.oid AND p1.typtype in ('b', 'p') AND NOT
#    (p1.typelem != 0 AND p1.typlen < 0) AND NOT
#    (p2.prorettype = p1.oid AND NOT p2.proretset)
#ORDER BY 1;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% oid,	typname,	oid,	proname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1790,	"refcursor",	46,	"textin" ]

#-- Varlena array types will string to array_in
#SELECT p1.oid, p1.typname, p2.oid, p2.proname
#FROM pg_type AS p1, pg_proc AS p2
#WHERE p1.typinput = p2.oid AND p1.typtype in ('b', 'p') AND
#    (p1.typelem != 0 AND p1.typlen < 0) AND NOT
#    (p2.oid = 'array_in'::regproc);
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% oid,	typname,	oid,	proname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length

#-- Check for bogus typoutput routines
#-- As of 8.0, this check finds refcursor, which is borrowing
#-- other types' I/O routines
#SELECT p1.oid, p1.typname, p2.oid, p2.proname
#FROM pg_type AS p1, pg_proc AS p2
#WHERE p1.typoutput = p2.oid AND p1.typtype in ('b', 'p') AND NOT
#    ((p2.pronargs = 1 AND p2.proargtypes[0] = p1.oid) OR
#     (p2.pronargs = 2 AND p2.proargtypes[0] = p1.oid AND
#      p2.proargtypes[1] = 'oid'::regtype) OR
#     (p2.oid = 'array_out'::regproc AND
#      p1.typelem != 0 AND p1.typlen = -1))
#ORDER BY 1;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% oid,	typname,	oid,	proname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1790,	"refcursor",	47,	"textout" ]

#SELECT p1.oid, p1.typname, p2.oid, p2.proname
#FROM pg_type AS p1, pg_proc AS p2
#WHERE p1.typoutput = p2.oid AND p1.typtype in ('b', 'p') AND NOT
#    (p2.prorettype = 'cstring'::regtype AND NOT p2.proretset);
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% oid,	typname,	oid,	proname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length

#-- Check for bogus typreceive routines
#SELECT p1.oid, p1.typname, p2.oid, p2.proname
#FROM pg_type AS p1, pg_proc AS p2
#WHERE p1.typreceive = p2.oid AND p1.typtype in ('b', 'p') AND NOT
#    ((p2.pronargs = 1 AND p2.proargtypes[0] = 'internal'::regtype) OR
#     (p2.pronargs = 2 AND p2.proargtypes[0] = 'internal'::regtype AND
#      p2.proargtypes[1] = 'oid'::regtype));
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% oid,	typname,	oid,	proname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length

#-- As of 7.4, this check finds refcursor, which is borrowing
#-- other types' I/O routines
#SELECT p1.oid, p1.typname, p2.oid, p2.proname
#FROM pg_type AS p1, pg_proc AS p2
#WHERE p1.typreceive = p2.oid AND p1.typtype in ('b', 'p') AND NOT
#    (p1.typelem != 0 AND p1.typlen < 0) AND NOT
#    (p2.prorettype = p1.oid AND NOT p2.proretset)
#ORDER BY 1;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% oid,	typname,	oid,	proname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1790,	"refcursor",	2414,	"textrecv" ]

#-- Varlena array types will string to array_recv
#SELECT p1.oid, p1.typname, p2.oid, p2.proname
#FROM pg_type AS p1, pg_proc AS p2
#WHERE p1.typreceive = p2.oid AND p1.typtype in ('b', 'p') AND
#    (p1.typelem != 0 AND p1.typlen < 0) AND NOT
#    (p2.oid = 'array_recv'::regproc);
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% oid,	typname,	oid,	proname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length

#-- Check for bogus typsend routines
#-- As of 7.4, this check finds refcursor, which is borrowing
#-- other types' I/O routines
#SELECT p1.oid, p1.typname, p2.oid, p2.proname
#FROM pg_type AS p1, pg_proc AS p2
#WHERE p1.typsend = p2.oid AND p1.typtype in ('b', 'p') AND NOT
#    ((p2.pronargs = 1 AND p2.proargtypes[0] = p1.oid) OR
#     (p2.pronargs = 2 AND p2.proargtypes[0] = p1.oid AND
#      p2.proargtypes[1] = 'oid'::regtype) OR
#     (p2.oid = 'array_send'::regproc AND
#      p1.typelem != 0 AND p1.typlen = -1))
#ORDER BY 1;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% oid,	typname,	oid,	proname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ 1790,	"refcursor",	2415,	"textsend" ]

#SELECT p1.oid, p1.typname, p2.oid, p2.proname
#FROM pg_type AS p1, pg_proc AS p2
#WHERE p1.typsend = p2.oid AND p1.typtype in ('b', 'p') AND NOT
#    (p2.prorettype = 'bytea'::regtype AND NOT p2.proretset);
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% oid,	typname,	oid,	proname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length

#-- **************** pg_class ****************
#-- Look for illegal values in pg_class fields
#SELECT p1.oid, p1.relname
#FROM pg_class as p1
#WHERE p1.relkind NOT IN ('r', 'i', 's', 'S', 't', 'v');
% sys.L0,	sys.L0 # table_name
% oid,	relname # name
% ?,	? # type
% ?,	? # length

#-- Indexes should have an access method, others not.
#SELECT p1.oid, p1.relname
#FROM pg_class as p1
#WHERE (p1.relkind = 'i' AND p1.relam = 0) OR
#    (p1.relkind != 'i' AND p1.relam != 0);
% sys.L0,	sys.L0 # table_name
% oid,	relname # name
% ?,	? # type
% ?,	? # length

#-- **************** pg_attribute ****************
#-- Look for illegal values in pg_attribute fields
#SELECT p1.attrelid, p1.attname
#FROM pg_attribute as p1
#WHERE p1.attrelid = 0 OR p1.atttypid = 0 OR p1.attnum = 0 OR
#    p1.attcacheoff != -1 OR p1.attinhcount < 0 OR
#    (p1.attinhcount = 0 AND NOT p1.attislocal);
% sys.L0,	sys.L0 # table_name
% attrelid,	attname # name
% ?,	? # type
% ?,	? # length

#-- Cross-check attnum against parent relation
#SELECT p1.attrelid, p1.attname, p2.oid, p2.relname
#FROM pg_attribute AS p1, pg_class AS p2
#WHERE p1.attrelid = p2.oid AND p1.attnum > p2.relnatts;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% attrelid,	attname,	oid,	relname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length

#-- Detect missing pg_attribute entries: should have as many non-system
#-- attributes as parent relation expects
#SELECT p1.oid, p1.relname
#FROM pg_class AS p1
#WHERE p1.relnatts != (SELECT count(*) FROM pg_attribute AS p2
#                      WHERE p2.attrelid = p1.oid AND p2.attnum > 0);
% sys.L0,	sys.L0 # table_name
% oid,	relname # name
% ?,	? # type
% ?,	? # length

#-- Cross-check against pg_type entry
#-- NOTE: we allow attstorage to be 'plain' even when typstorage is not;
#-- this is mainly for toast tables.
#SELECT p1.attrelid, p1.attname, p2.oid, p2.typname
#FROM pg_attribute AS p1, pg_type AS p2
#WHERE p1.atttypid = p2.oid AND
#    (p1.attlen != p2.typlen OR
#     p1.attalign != p2.typalign OR
#     p1.attbyval != p2.typbyval OR
#     (p1.attstorage != p2.typstorage AND p1.attstorage != 'p'));
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% attrelid,	attname,	oid,	typname # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length


= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

