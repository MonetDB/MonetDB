stdout of test 'int4` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

#--
#-- integer
#-- WARNING: integer operators never check for over/underflow!
#-- Some of these answers are consequently numerically incorrect.
#--
#CREATE TABLE INT4_TBL(f1 integer);
#INSERT INTO INT4_TBL(f1) VALUES ('   0  ');
[ 1 ]
#INSERT INTO INT4_TBL(f1) VALUES ('123456     ');
[ 1 ]
#INSERT INTO INT4_TBL(f1) VALUES ('    -123456');
[ 1 ]
#
#-- largest and smallest values
#INSERT INTO INT4_TBL(f1) VALUES ('2147483647');
[ 1 ]
#INSERT INTO INT4_TBL(f1) VALUES ('-2147483647');
[ 1 ]
#SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> cast('0' as smallint);
% .,	sys.i # table_name
% four,	f1 # name
% char,	int # type
% 0,	11 # length
[ "",	123456	]
[ "",	-123456 ]
[ "",	2147483647 ]
[ "",	-2147483647 ]
#SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> cast('0' as integer);
% .,	sys.i # table_name
% four,	f1 # name
% char,	int # type
% 0,	11 # length
[ "",	123456	]
[ "",	-123456 ]
[ "",	2147483647 ]
[ "",	-2147483647 ]
#SELECT '' AS one, i.* FROM INT4_TBL i WHERE i.f1 = cast('0' as smallint);
% .,	sys.i # table_name
% one,	f1 # name
% char,	int # type
% 0,	1 # length
[ "",	0	]
#SELECT '' AS one, i.* FROM INT4_TBL i WHERE i.f1 = cast('0' as integer);
% .,	sys.i # table_name
% one,	f1 # name
% char,	int # type
% 0,	1 # length
[ "",	0	]
#SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 < cast('0' as smallint);
% .,	sys.i # table_name
% two,	f1 # name
% char,	int # type
% 0,	11 # length
[ "",	-123456 ]
[ "",	-2147483647 ]
#SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 < cast('0' as integer);
% .,	sys.i # table_name
% two,	f1 # name
% char,	int # type
% 0,	11 # length
[ "",	-123456 ]
[ "",	-2147483647 ]
#SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= cast('0' as smallint);
% .,	sys.i # table_name
% three,	f1 # name
% char,	int # type
% 0,	11 # length
[ "",	0	]
[ "",	-123456 ]
[ "",	-2147483647 ]
#SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= cast('0' as integer);
% .,	sys.i # table_name
% three,	f1 # name
% char,	int # type
% 0,	11 # length
[ "",	0	]
[ "",	-123456 ]
[ "",	-2147483647 ]
#SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 > cast('0' as smallint);
% .,	sys.i # table_name
% two,	f1 # name
% char,	int # type
% 0,	10 # length
[ "",	123456	]
[ "",	2147483647 ]
#SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 > cast('0' as integer);
% .,	sys.i # table_name
% two,	f1 # name
% char,	int # type
% 0,	10 # length
[ "",	123456	]
[ "",	2147483647 ]
#SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= cast('0' as smallint);
% .,	sys.i # table_name
% three,	f1 # name
% char,	int # type
% 0,	10 # length
[ "",	0	]
[ "",	123456	]
[ "",	2147483647 ]
#SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= cast('0' as integer);
% .,	sys.i # table_name
% three,	f1 # name
% char,	int # type
% 0,	10 # length
[ "",	0	]
[ "",	123456	]
[ "",	2147483647 ]
#SELECT '' AS one, i.* FROM INT4_TBL i WHERE (i.f1 % cast('2' as smallint)) = cast('1' as smallint);
% .,	sys.i # table_name
% one,	f1 # name
% char,	int # type
% 0,	10 # length
[ "",	2147483647 ]
#SELECT '' AS three, i.* FROM INT4_TBL i WHERE (i.f1 % cast('2' as integer)) = cast('0' as smallint);
% .,	sys.i # table_name
% three,	f1 # name
% char,	int # type
% 0,	7 # length
[ "",	0	]
[ "",	123456	]
[ "",	-123456 ]
#SELECT '' AS five, i.f1, i.f1 * cast('2' as smallint) AS x FROM INT4_TBL i;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	11,	11 # length
[ "",	0,	0	]
[ "",	123456,	246912	]
[ "",	-123456,	-246912	]
[ "",	2147483647,	4294967294	]
[ "",	-2147483647,	-4294967294	]
#SELECT '' AS five, i.f1, i.f1 * cast('2' as smallint) AS x FROM INT4_TBL i
#WHERE abs(f1) < 1073741824;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	7,	7 # length
[ "",	0,	0	]
[ "",	123456,	246912	]
[ "",	-123456,	-246912 ]
#SELECT '' AS five, i.f1, i.f1 * cast('2' as integer) AS x FROM INT4_TBL i;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	11,	11 # length
[ "",	0,	0	]
[ "",	123456,	246912	]
[ "",	-123456,	-246912	]
[ "",	2147483647,	4294967294	]
[ "",	-2147483647,	-4294967294	]
#SELECT '' AS five, i.f1, i.f1 * cast('2' as integer) AS x FROM INT4_TBL i
#WHERE abs(f1) < 1073741824;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	7,	7 # length
[ "",	0,	0	]
[ "",	123456,	246912	]
[ "",	-123456,	-246912 ]
#SELECT '' AS five, i.f1, i.f1 + cast('2' as smallint) AS x FROM INT4_TBL i;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	11,	11 # length
[ "",	0,	2	]
[ "",	123456,	123458	]
[ "",	-123456,	-123454	]
[ "",	2147483647,	2147483649	]
[ "",	-2147483647,	-2147483645	]
#SELECT '' AS five, i.f1, i.f1 + cast('2' as smallint) AS x FROM INT4_TBL i
#WHERE f1 < 2147483646;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	11,	11 # length
[ "",	0,	2	]
[ "",	123456,	123458	]
[ "",	-123456,	-123454 ]
[ "",	-2147483647,	-2147483645 ]
#SELECT '' AS five, i.f1, i.f1 + cast('2' as integer) AS x FROM INT4_TBL i;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	11,	11 # length
[ "",	0,	2	]
[ "",	123456,	123458	]
[ "",	-123456,	-123454	]
[ "",	2147483647,	2147483649	]
[ "",	-2147483647,	-2147483645	]
#SELECT '' AS five, i.f1, i.f1 + cast('2' as integer) AS x FROM INT4_TBL i
#WHERE f1 < 2147483646;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	11,	11 # length
[ "",	0,	2	]
[ "",	123456,	123458	]
[ "",	-123456,	-123454 ]
[ "",	-2147483647,	-2147483645 ]
#SELECT '' AS five, i.f1, i.f1 - cast('2' as smallint) AS x FROM INT4_TBL i;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	11,	11 # length
[ "",	0,	-2	]
[ "",	123456,	123454	]
[ "",	-123456,	-123458	]
[ "",	2147483647,	2147483645	]
[ "",	-2147483647,	-2147483649	]
#SELECT '' AS five, i.f1, i.f1 - cast('2' as smallint) AS x FROM INT4_TBL i
#WHERE f1 > -2147483647;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	10,	10 # length
[ "",	0,	-2	]
[ "",	123456,	123454	]
[ "",	-123456,	-123458 ]
[ "",	2147483647,	2147483645 ]
#SELECT '' AS five, i.f1, i.f1 - cast('2' as integer) AS x FROM INT4_TBL i;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	11,	11 # length
[ "",	0,	-2	]
[ "",	123456,	123454	]
[ "",	-123456,	-123458	]
[ "",	2147483647,	2147483645	]
[ "",	-2147483647,	-2147483649	]
#SELECT '' AS five, i.f1, i.f1 - cast('2' as integer) AS x FROM INT4_TBL i
#WHERE f1 > -2147483647;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	bigint # type
% 0,	10,	10 # length
[ "",	0,	-2	]
[ "",	123456,	123454	]
[ "",	-123456,	-123458 ]
[ "",	2147483647,	2147483645 ]
#SELECT '' AS five, i.f1, i.f1 / cast('2' as smallint) AS x FROM INT4_TBL i;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	int # type
% 0,	11,	11 # length
[ "",	0,	0	]
[ "",	123456,	61728	]
[ "",	-123456,	-61728 ]
[ "",	2147483647,	1073741823 ]
[ "",	-2147483647,	-1073741823 ]
#SELECT '' AS five, i.f1, i.f1 / cast('2' as integer) AS x FROM INT4_TBL i;
% .,	sys.i,	sys. # table_name
% five,	f1,	x # name
% char,	int,	int # type
% 0,	11,	11 # length
[ "",	0,	0	]
[ "",	123456,	61728	]
[ "",	-123456,	-61728 ]
[ "",	2147483647,	1073741823 ]
[ "",	-2147483647,	-1073741823 ]

#--
#-- more complex expressions
#--
#-- variations on unary minus parsing
#SELECT -2+3 AS one;
% . # table_name
% one # name
% tinyint # type
% 1 # length
[ 1 ]

#SELECT 4-2 AS two;
% . # table_name
% two # name
% tinyint # type
% 1 # length
[ 2 ]

#SELECT 2- -1 AS three;
% . # table_name
% three # name
% tinyint # type
% 1 # length
[ 3 ]

#SELECT 2 - -2 AS four;
% . # table_name
% four # name
% tinyint # type
% 1 # length
[ 4 ]
#SELECT cast('2' as smallint) * cast('2' as smallint) = cast('16' as smallint) / cast('4' as smallint) AS "true";
% .%5 # table_name
% true # name
% boolean # type
% 5 # length
[ true	]
#SELECT cast('2' as integer) * cast('2' as smallint) = cast('16' as smallint) / cast('4' as integer) AS "true";
% .%5 # table_name
% true # name
% boolean # type
% 5 # length
[ true	]
#SELECT cast('2' as smallint) * cast('2' as integer) = cast('16' as integer) / cast('4' as smallint) AS "true";
% .%5 # table_name
% true # name
% boolean # type
% 5 # length
[ true	]
#SELECT cast('1000' as integer)  < cast('999' as integer) AS "false";
% .%3 # table_name
% false # name
% boolean # type
% 5 # length
[ false	]
#SELECT 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 AS ten;
% .%1 # table_name
% ten # name
% bigint # type
% 2 # length
[ 10 ]

#SELECT 2 + 2 / 2 AS three;
% .%1 # table_name
% three # name
% smallint # type
% 1 # length
[ 3 ]

#SELECT (2 + 2) / 2 AS two;
% .%1 # table_name
% two # name
% tinyint # type
% 1 # length
[ 2 ]


# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

