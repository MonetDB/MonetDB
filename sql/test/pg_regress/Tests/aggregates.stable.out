stdout of test 'aggregates` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- AGGREGATES
#--
#SELECT avg(four) AS avg_1 FROM onek;
% sys.L0 # table_name
% avg_1 # name
% ? # type
% ? # length
[ 1.5 ]

#SELECT avg(a) AS avg_32 FROM aggtest WHERE a < 100;
% sys.L0 # table_name
% avg_32 # name
% ? # type
% ? # length
[ 32.66666667 ]

#-- In 7.1, avg(float) is computed using double arithmetic.
#-- Round the result to 3 digits to avoid platform-specific results.
#SELECT cast(avg(b) as numeric(10,3)) AS avg_107_943 FROM aggtest;
% sys.L0 # table_name
% avg_107_943 # name
% ? # type
% ? # length
[ 107.943 ]

#SELECT avg(gpa) AS avg_3_4  FROM student;
% sys.L0 # table_name
% avg_3_4 # name
% ? # type
% ? # length
[ 3.4 ]

#SELECT sum(four) AS sum_1500 FROM onek;
% sys.L0 # table_name
% sum_1500 # name
% ? # type
% ? # length
[ 1500 ]

#SELECT sum(a) AS sum_198 FROM aggtest;
% sys.L0 # table_name
% sum_198 # name
% ? # type
% ? # length
[ 198 ]

#SELECT sum(b) AS avg_431_773 FROM aggtest;
% sys.L0 # table_name
% avg_431_773 # name
% ? # type
% ? # length
[ 431.773 ]

#SELECT sum(gpa) AS avg_6_8  FROM student;
% sys.L0 # table_name
% avg_6_8 # name
% ? # type
% ? # length
[ 6.8 ]

#SELECT max(four) AS max_3 FROM onek;
% sys.L0 # table_name
% max_3 # name
% ? # type
% ? # length
[ 3 ]

#SELECT max(a) AS max_100 FROM aggtest;
% sys.L0 # table_name
% max_100 # name
% ? # type
% ? # length
[ 100 ]

#SELECT max(aggtest.b) AS max_324_78 FROM aggtest;
% sys.L0 # table_name
% max_324_78 # name
% ? # type
% ? # length
[ 324.78 ]

#SELECT max(student.gpa) AS max_3_7 FROM student;
% sys.L0 # table_name
% max_3_7 # name
% ? # type
% ? # length
[ 3.7 ]

#SELECT count(four) AS cnt_1000 FROM onek;
% sys.L0 # table_name
% cnt_1000 # name
% ? # type
% ? # length
[ 1000 ]

#SELECT count(DISTINCT four) AS cnt_4 FROM onek;
% sys.L0 # table_name
% cnt_4 # name
% ? # type
% ? # length
[ 4 ]

#select ten, count(*), sum(four) from onek
#group by ten order by ten;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ten,	count,	sum # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 0,	100,	100 ]
[ 1,	100,	200 ]
[ 2,	100,	100 ]
[ 3,	100,	200 ]
[ 4,	100,	100 ]
[ 5,	100,	200 ]
[ 6,	100,	100 ]
[ 7,	100,	200 ]
[ 8,	100,	100 ]
[ 9,	100,	200 ]

#select ten, count(four), sum(DISTINCT four) from onek
#group by ten order by ten;
% sys.L0,	sys.L0,	sys.L0 # table_name
% ten,	count,	sum # name
% ?,	?,	? # type
% ?,	?,	? # length
[ 0,	100,	2 ]
[ 1,	100,	4 ]
[ 2,	100,	2 ]
[ 3,	100,	4 ]
[ 4,	100,	2 ]
[ 5,	100,	4 ]
[ 6,	100,	2 ]
[ 7,	100,	4 ]
[ 8,	100,	2 ]
[ 9,	100,	4 ]

#SELECT newavg(four) AS avg_1 FROM onek;
% sys.L0 # table_name
% avg_1 # name
% ? # type
% ? # length
[ 1.5 ]

#SELECT newsum(four) AS sum_1500 FROM onek;
% sys.L0 # table_name
% sum_1500 # name
% ? # type
% ? # length
[ 1500 ]

#SELECT newcnt(four) AS cnt_1000 FROM onek;
% sys.L0 # table_name
% cnt_1000 # name
% ? # type
% ? # length
[ 1000 ]

#-- test for outer-level aggregates
#-- this should work
#select ten, sum(distinct four) from onek a
#group by ten
#having exists (select 1 from onek b where sum(distinct a.four) = b.four);
% sys.L0,	sys.L0 # table_name
% ten,	sum # name
% ?,	? # type
% ?,	? # length
[ 0,	2 ]
[ 2,	2 ]
[ 4,	2 ]
[ 6,	2 ]
[ 8,	2 ]

#-- this should fail because subquery has an agg of its own in WHERE
#
#--
#-- test for bitwise integer aggregates
#--
#CREATE TEMPORARY TABLE bitwise_test(
#  i2 smallint,
#  i4 integer,
#  i8 bigint,
#  i INTEGER,
#  x smallint,
#  y BIT(4)
#);
#-- empty case
#SELECT 
#  BIT_AND(i2) AS "?",
#  BIT_OR(i4)  AS "?"
#FROM bitwise_test;
% sys.L0,	sys.L0 # table_name
% ?,	? # name
% ?,	? # type
% ?,	? # length
[ "",	"" ]

COPY bitwise_test FROM STDIN NULL 'null';
#SELECT
#  BIT_AND(i2) AS "1",
#  BIT_AND(i4) AS "1",
#  BIT_AND(i8) AS "1",
#  BIT_AND(i)  AS "?",
#  BIT_AND(x)  AS "0",
#  BIT_AND(y)  AS "0100",
#  BIT_OR(i2)  AS "7",
#  BIT_OR(i4)  AS "7",
#  BIT_OR(i8)  AS "7",
#  BIT_OR(i)   AS "?",
#  BIT_OR(x)   AS "7",
#  BIT_OR(y)   AS "1101"
#FROM bitwise_test;
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% 1,	1,	1,	?,	0,	0100,	7,	7,	7,	?,	7,	1101 # name
% ?,	?,	?,	?,	?,	?,	?,	?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	?,	?,	?,	?,	?,	?,	?,	? # length
[ 1,	1,	1,	1,	0,	0100,	7,	7,	7,	3,	7,	1101 ]

#--
#-- test boolean aggregates
#--
#-- first test all possible transition and final states
#SELECT
#  -- boolean and transitions
#  -- null because strict
#  booland_statefunc(NULL, NULL)  IS NULL AS "t",
#  booland_statefunc(TRUE, NULL)  IS NULL AS "t",
#  booland_statefunc(FALSE, NULL) IS NULL AS "t",
#  booland_statefunc(NULL, TRUE)  IS NULL AS "t",
#  booland_statefunc(NULL, FALSE) IS NULL AS "t",
#  -- and actual computations
#  booland_statefunc(TRUE, TRUE) AS "t",
#  NOT booland_statefunc(TRUE, FALSE) AS "t",
#  NOT booland_statefunc(FALSE, TRUE) AS "t",
#  NOT booland_statefunc(FALSE, FALSE) AS "t";
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% t,	t,	t,	t,	t,	t,	t,	t,	t # name
% ?,	?,	?,	?,	?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	?,	?,	?,	?,	? # length
[ "t",	"t",	"t",	"t",	"t",	"t",	"t",	"t",	"t" ]

#SELECT
#  -- boolean or transitions
#  -- null because strict
#  boolor_statefunc(NULL, NULL)  IS NULL AS "t",
#  boolor_statefunc(TRUE, NULL)  IS NULL AS "t",
#  boolor_statefunc(FALSE, NULL) IS NULL AS "t",
#  boolor_statefunc(NULL, TRUE)  IS NULL AS "t",
#  boolor_statefunc(NULL, FALSE) IS NULL AS "t",
#  -- actual computations
#  boolor_statefunc(TRUE, TRUE) AS "t",
#  boolor_statefunc(TRUE, FALSE) AS "t",
#  boolor_statefunc(FALSE, TRUE) AS "t",
#  NOT boolor_statefunc(FALSE, FALSE) AS "t";
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% t,	t,	t,	t,	t,	t,	t,	t,	t # name
% ?,	?,	?,	?,	?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	?,	?,	?,	?,	? # length
[ "t",	"t",	"t",	"t",	"t",	"t",	"t",	"t",	"t" ]

#CREATE TEMPORARY TABLE bool_test(  
#  b1 BOOL,
#  b2 BOOL,
#  b3 BOOL,
#  b4 BOOL);
#-- empty case
#SELECT
#  BOOL_AND(b1)   AS "n",
#  BOOL_OR(b3)    AS "n"
#FROM bool_test;
% sys.L0,	sys.L0 # table_name
% n,	n # name
% ?,	? # type
% ?,	? # length
[ "",	"" ]

COPY bool_test FROM STDIN NULL 'null';
#SELECT
#  BOOL_AND(b1)     AS "f",
#  BOOL_AND(b2)     AS "t",
#  BOOL_AND(b3)     AS "f",
#  BOOL_AND(b4)     AS "n",
#  BOOL_AND(NOT b2) AS "f",
#  BOOL_AND(NOT b3) AS "t"
#FROM bool_test;
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% f,	t,	f,	n,	f,	t # name
% ?,	?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	?,	? # length
[ "f",	"t",	"f",	"",	"f",	"t" ]

#SELECT
#  EVERY(b1)     AS "f",
#  EVERY(b2)     AS "t",
#  EVERY(b3)     AS "f",
#  EVERY(b4)     AS "n",
#  EVERY(NOT b2) AS "f",
#  EVERY(NOT b3) AS "t"
#FROM bool_test;
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% f,	t,	f,	n,	f,	t # name
% ?,	?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	?,	? # length
[ "f",	"t",	"f",	"",	"f",	"t" ]

#SELECT
#  BOOL_OR(b1)      AS "t",
#  BOOL_OR(b2)      AS "t",
#  BOOL_OR(b3)      AS "f",
#  BOOL_OR(b4)      AS "n",
#  BOOL_OR(NOT b2)  AS "f",
#  BOOL_OR(NOT b3)  AS "t"
#FROM bool_test;
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% t,	t,	f,	n,	f,	t # name
% ?,	?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	?,	? # length
[ "t",	"t",	"f",	"",	"f",	"t" ]


= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

