stdout of test 'polymorphism` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded


# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#-- Currently this tests polymorphic aggregates and indirectly does some
#-- testing of polymorphic SQL functions.  It ought to be extended.
% sys.L0 # table_name
% #-- Legend: # name
% ? # type
% ? # length
[ "#-- A = type is ANY" ]
[ "#-- P = type is polymorphic" ]
[ "#-- N = type is non-polymorphic" ]
[ "#-- B = aggregate base type" ]
[ "#-- S = aggregate state type" ]
[ "#-- R = aggregate return type" ]
[ "#-- 1 = arg1 of a function" ]
[ "#-- 2 = arg2 of a function" ]
[ "#-- ag = aggregate" ]
[ "#-- tf = trans (state) function" ]
[ "#-- ff = final function" ]
[ "#-- rt = return type of a function" ]
[ "#-- -> = implies" ]
[ "#-- => = allowed" ]
[ "#-- !> = not allowed" ]
[ "#-- E  = exists" ]
[ "#-- NE = not-exists" ]
[ "#--" ]
[ "#-- Possible states:" ]
[ "#-- ----------------" ]
[ "#-- B = (A",	"",	"P",	"",	"N)" ]
[ "#--   when (B = A) -> (tf2 = NE)" ]
[ "#-- S = (P",	"",	"N)" ]
[ "#-- ff = (E",	"",	"NE)" ]
[ "#-- tf1 = (P",	"",	"N)" ]
[ "#-- tf2 = (NE",	"",	"P",	"",	"N)" ]
[ "#-- R = (P",	"",	"N)" ]
[ "#-- create functions for use as tf and ff with the needed combinations of" ]
[ "#-- argument polymorphism, but within the constraints of valid aggregate" ]
[ "#-- functions, i.e. tf arg1 and tf return type must match" ]
[ "#-- polymorphic single arg transfn" ]
[ "#CREATE FUNCTION stfp(anyarray) returns anyarray as" ]
[ "#'select $1' language 'sql';" ]
[ "#-- non-polymorphic single arg transfn" ]
[ "#CREATE FUNCTION stfnp(int[]) returns int[] as" ]
[ "#'select $1' language 'sql';" ]
[ "#-- dual polymorphic transfn" ]
[ "#CREATE FUNCTION tfp(anyarray,anyelement) returns anyarray as" ]
[ "#'select $1",	"",	"$2' language 'sql';" ]
[ "#-- dual non-polymorphic transfn" ]
[ "#CREATE FUNCTION tfnp(int[],int) returns int[] as" ]
[ "#'select $1",	"",	"$2' language 'sql';" ]
[ "#-- arg1 only polymorphic transfn" ]
[ "#CREATE FUNCTION tf1p(anyarray,int) returns anyarray as" ]
[ "#'select $1' language 'sql';" ]
[ "#-- arg2 only polymorphic transfn" ]
[ "#CREATE FUNCTION tf2p(int[],anyelement) returns int[] as" ]
[ "#'select $1' language 'sql';" ]
[ "#-- finalfn polymorphic" ]
[ "#CREATE FUNCTION ffp(anyarray) returns anyarray as" ]
[ "#'select $1' language 'sql';" ]
[ "#-- finalfn non-polymorphic" ]
[ "#CREATE FUNCTION ffnp(int[]) returns int[] as" ]
[ "#'select $1' language 'sql';" ]
[ "#-- Try to cover all the possible states:" ]
[ "#--" ]
[ "#-- Note: in Cases 1 & 2, we are trying to return P. Therefore, if the transfn" ]
[ "#-- is stfnp, tfnp, or tf2p, we must use ffp as finalfn, because stfnp, tfnp," ]
[ "#-- and tf2p do not return P. Conversely, in Cases 3 & 4, we are trying to" ]
[ "#-- return N. Therefore, if the transfn is stfp, tfp, or tf1p, we must use ffnp" ]
[ "#-- as finalfn, because stfp, tfp, and tf1p do not return N." ]
[ "#--" ]
[ "#--     Case1 (R = P) && (B = A)" ]
[ "#--     ------------------------" ]
[ "#--     S    tf1" ]
[ "#--     -------" ]
[ "#--     N    N" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggp01a(BASETYPE = "ANY", SFUNC = stfnp, STYPE = integer[]," ]
[ "#  FINALFUNC = ffp, INITCOND = '{}');" ]
[ "#--     P    N" ]
[ "#-- should ERROR: stfnp(anyarray) not matched by stfnp(int[])" ]
[ "#--     N    P" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggp03a(BASETYPE = "ANY", SFUNC = stfp, STYPE = integer[]," ]
[ "#  FINALFUNC = ffp, INITCOND = '{}');" ]
[ "#CREATE AGGREGATE myaggp03b(BASETYPE = "ANY", SFUNC = stfp, STYPE = integer[]," ]
[ "#  INITCOND = '{}');" ]
[ "#--     P    P" ]
[ "#-- should ERROR: we have no way to resolve S" ]
[ "#--    Case2 (R = P) && ((B = P)",	"",	"(B = N))" ]
[ "#--    -------------------------------------" ]
[ "#--    S    tf1      B    tf2" ]
[ "#--    -----------------------" ]
[ "#--    N    N        N    N" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggp05a(BASETYPE = int, SFUNC = tfnp, STYPE = int[]," ]
[ "#  FINALFUNC = ffp, INITCOND = '{}');" ]
[ "#--    N    N        N    P" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggp06a(BASETYPE = int, SFUNC = tf2p, STYPE = int[]," ]
[ "#  FINALFUNC = ffp, INITCOND = '{}');" ]
[ "#--    N    N        P    N" ]
[ "#-- should ERROR: tfnp(int[], anyelement) not matched by tfnp(int[], int)" ]
[ "#" ]
[ "#--    N    N        P    P" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggp08a(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[]," ]
[ "#  FINALFUNC = ffp, INITCOND = '{}');" ]
[ "#--    N    P        N    N" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggp09a(BASETYPE = int, SFUNC = tf1p, STYPE = int[]," ]
[ "#  FINALFUNC = ffp, INITCOND = '{}');" ]
[ "#CREATE AGGREGATE myaggp09b(BASETYPE = int, SFUNC = tf1p, STYPE = int[]," ]
[ "#  INITCOND = '{}');" ]
[ "#--    N    P        N    P" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggp10a(BASETYPE = int, SFUNC = tfp, STYPE = int[]," ]
[ "#  FINALFUNC = ffp, INITCOND = '{}');" ]
[ "#CREATE AGGREGATE myaggp10b(BASETYPE = int, SFUNC = tfp, STYPE = int[]," ]
[ "#  INITCOND = '{}');" ]
[ "#--    N    P        P    N" ]
[ "#-- should ERROR: tf1p(int[],anyelement) not matched by tf1p(anyarray,int)" ]
[ "#" ]
[ "#" ]
[ "#--    N    P        P    P" ]
[ "#-- should ERROR: tfp(int[],anyelement) not matched by tfp(anyarray,anyelement)" ]
[ "#" ]
[ "#" ]
[ "#--    P    N        N    N" ]
[ "#-- should ERROR: tfnp(anyarray, int) not matched by tfnp(int[],int)" ]
[ "#--    P    N        N    P" ]
[ "#-- should ERROR: tf2p(anyarray, int) not matched by tf2p(int[],anyelement)" ]
[ "#--    P    N        P    N" ]
[ "#-- should ERROR: tfnp(anyarray, anyelement) not matched by tfnp(int[],int)" ]
[ "#" ]
[ "#--    P    N        P    P" ]
[ "#-- should ERROR: tf2p(anyarray, anyelement) not matched by tf2p(int[],anyelement)" ]
[ "#" ]
[ "#--    P    P        N    N" ]
[ "#-- should ERROR: we have no way to resolve S" ]
[ "#--    P    P        N    P" ]
[ "#-- should ERROR: tfp(anyarray, int) not matched by tfp(anyarray, anyelement)" ]
[ "#--    P    P        P    N" ]
[ "#-- should ERROR: tf1p(anyarray, anyelement) not matched by tf1p(anyarray, int)" ]
[ "#" ]
[ "#" ]
[ "#--    P    P        P    P" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggp20a(BASETYPE = anyelement, SFUNC = tfp," ]
[ "#  STYPE = anyarray, FINALFUNC = ffp, INITCOND = '{}');" ]
[ "#CREATE AGGREGATE myaggp20b(BASETYPE = anyelement, SFUNC = tfp," ]
[ "#  STYPE = anyarray, INITCOND = '{}');" ]
[ "#--     Case3 (R = N) && (B = A)" ]
[ "#--     ------------------------" ]
[ "#--     S    tf1" ]
[ "#--     -------" ]
[ "#--     N    N" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggn01a(BASETYPE = "ANY", SFUNC = stfnp, STYPE = integer[]," ]
[ "#  FINALFUNC = ffnp, INITCOND = '{}');" ]
[ "#CREATE AGGREGATE myaggn01b(BASETYPE = "ANY", SFUNC = stfnp, STYPE = integer[]," ]
[ "#  INITCOND = '{}');" ]
[ "#--     P    N" ]
[ "#-- should ERROR: stfnp(anyarray) not matched by stfnp(int[])" ]
[ "#--     N    P" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggn03a(BASETYPE = "ANY", SFUNC = stfp, STYPE = integer[]," ]
[ "#  FINALFUNC = ffnp, INITCOND = '{}');" ]
[ "#--     P    P" ]
[ "#-- should ERROR: ffnp(anyarray) not matched by ffnp(int[])" ]
[ "#--    Case4 (R = N) && ((B = P)",	"",	"(B = N))" ]
[ "#--    -------------------------------------" ]
[ "#--    S    tf1      B    tf2" ]
[ "#--    -----------------------" ]
[ "#--    N    N        N    N" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggn05a(BASETYPE = int, SFUNC = tfnp, STYPE = int[]," ]
[ "#  FINALFUNC = ffnp, INITCOND = '{}');" ]
[ "#CREATE AGGREGATE myaggn05b(BASETYPE = int, SFUNC = tfnp, STYPE = int[]," ]
[ "#  INITCOND = '{}');" ]
[ "#--    N    N        N    P" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggn06a(BASETYPE = int, SFUNC = tf2p, STYPE = int[]," ]
[ "#  FINALFUNC = ffnp, INITCOND = '{}');" ]
[ "#CREATE AGGREGATE myaggn06b(BASETYPE = int, SFUNC = tf2p, STYPE = int[]," ]
[ "#  INITCOND = '{}');" ]
[ "#--    N    N        P    N" ]
[ "#-- should ERROR: tfnp(int[], anyelement) not matched by tfnp(int[], int)" ]
[ "#" ]
[ "#" ]
[ "#--    N    N        P    P" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggn08a(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[]," ]
[ "#  FINALFUNC = ffnp, INITCOND = '{}');" ]
[ "#CREATE AGGREGATE myaggn08b(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[]," ]
[ "#  INITCOND = '{}');" ]
[ "#--    N    P        N    N" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggn09a(BASETYPE = int, SFUNC = tf1p, STYPE = int[]," ]
[ "#  FINALFUNC = ffnp, INITCOND = '{}');" ]
[ "#--    N    P        N    P" ]
[ "#-- should CREATE" ]
[ "#CREATE AGGREGATE myaggn10a(BASETYPE = int, SFUNC = tfp, STYPE = int[]," ]
[ "#  FINALFUNC = ffnp, INITCOND = '{}');" ]
[ "#--    N    P        P    N" ]
[ "#-- should ERROR: tf1p(int[],anyelement) not matched by tf1p(anyarray,int)" ]
[ "#" ]
[ "#--    N    P        P    P" ]
[ "#-- should ERROR: tfp(int[],anyelement) not matched by tfp(anyarray,anyelement)" ]
[ "#" ]
[ "#--    P    N        N    N" ]
[ "#-- should ERROR: tfnp(anyarray, int) not matched by tfnp(int[],int)" ]
[ "#--    P    N        N    P" ]
[ "#-- should ERROR: tf2p(anyarray, int) not matched by tf2p(int[],anyelement)" ]
[ "#--    P    N        P    N" ]
[ "#-- should ERROR: tfnp(anyarray, anyelement) not matched by tfnp(int[],int)" ]
[ "#" ]
[ "#" ]
[ "#--    P    N        P    P" ]
[ "#-- should ERROR: tf2p(anyarray, anyelement) not matched by tf2p(int[],anyelement)" ]
[ "#" ]
[ "#" ]
[ "#--    P    P        N    N" ]
[ "#-- should ERROR: ffnp(anyarray) not matched by ffnp(int[])" ]
[ "#--    P    P        N    P" ]
[ "#-- should ERROR: tfp(anyarray, int) not matched by tfp(anyarray, anyelement)" ]
[ "#--    P    P        P    N" ]
[ "#-- should ERROR: tf1p(anyarray, anyelement) not matched by tf1p(anyarray, int)" ]
[ "#" ]
[ "#--    P    P        P    P" ]
[ "#-- should ERROR: ffnp(anyarray) not matched by ffnp(int[])" ]
[ "#" ]
[ "#-- create test data for polymorphic aggregates" ]
[ "#create temp table t(f1 int, f2 int[], f3 text);" ]
[ "#insert into t values(1,array[1],'a');" ]
[ "[ 1 ]" ]
[ "#insert into t values(1,array[11],'b');" ]
[ "[ 1 ]" ]
[ "#insert into t values(1,array[111],'c');" ]
[ "[ 1 ]" ]
[ "#insert into t values(2,array[2],'a');" ]
[ "[ 1 ]" ]
[ "#insert into t values(2,array[22],'b');" ]
[ "[ 1 ]" ]
[ "#insert into t values(2,array[222],'c');" ]
[ "[ 1 ]" ]
[ "#insert into t values(3,array[3],'a');" ]
[ "[ 1 ]" ]
[ "#insert into t values(3,array[3],'b');" ]
[ "[ 1 ]" ]
[ "#-- test the successfully created polymorphic aggregates" ]
[ "#select f3, myaggp01a(*) from t group by f3;" ]
[ "f3",	"myaggp01a" ]
% sys.L0 # table_name
% #-- Legend: # name
% ? # type
% ? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggp03a(*) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggp03a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggp03b(*) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggp03b # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggp05a(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggp05a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{1,2}" ]
[ "a",	"{1,2,3}" ]
[ "b",	"{1,2,3}" ]

#select f3, myaggp06a(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggp06a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggp08a(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggp08a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggp09a(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggp09a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggp09b(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggp09b # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggp10a(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggp10a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{1,2}" ]
[ "a",	"{1,2,3}" ]
[ "b",	"{1,2,3}" ]

#select f3, myaggp10b(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggp10b # name
% ?,	? # type
% ?,	? # length
[ "c",	"{1,2}" ]
[ "a",	"{1,2,3}" ]
[ "b",	"{1,2,3}" ]

#select f3, myaggp20a(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggp20a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{1,2}" ]
[ "a",	"{1,2,3}" ]
[ "b",	"{1,2,3}" ]

#select f3, myaggp20b(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggp20b # name
% ?,	? # type
% ?,	? # length
[ "c",	"{1,2}" ]
[ "a",	"{1,2,3}" ]
[ "b",	"{1,2,3}" ]

#select f3, myaggn01a(*) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggn01a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggn01b(*) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggn01b # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggn03a(*) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggn03a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggn05a(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggn05a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{1,2}" ]
[ "a",	"{1,2,3}" ]
[ "b",	"{1,2,3}" ]

#select f3, myaggn05b(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggn05b # name
% ?,	? # type
% ?,	? # length
[ "c",	"{1,2}" ]
[ "a",	"{1,2,3}" ]
[ "b",	"{1,2,3}" ]

#select f3, myaggn06a(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggn06a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggn06b(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggn06b # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggn08a(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggn08a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggn08b(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggn08b # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggn09a(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggn09a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{}" ]
[ "a",	"{}" ]
[ "b",	"{}" ]

#select f3, myaggn10a(f1) from t group by f3;
% sys.L0,	sys.L0 # table_name
% f3,	myaggn10a # name
% ?,	? # type
% ?,	? # length
[ "c",	"{1,2}" ]
[ "a",	"{1,2,3}" ]
[ "b",	"{1,2,3}" ]


= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

