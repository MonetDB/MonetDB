stdout of test 'manifold.Bug-3556` in directory 'sql/test/BugTracker-2014` itself:


# 14:13:38 >  
# 14:13:38 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38920" "--set" "mapi_usock=/var/tmp/mtest-29507/.s.monetdb.38920" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/Oct2014//Linux/var/MonetDB/mTests_sql_test_BugTracker-2014" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 14:13:38 >  

# MonetDB 5 server v11.19.0
# This is an unreleased version
# Serving database 'mTests_sql_test_BugTracker-2014', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:38920/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-29507/.s.monetdb.38920
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 90_generator.sql
# loading sql script: 99_system.sql

# 14:13:38 >  
# 14:13:38 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-29507" "--port=38920"
# 14:13:38 >  

#explain select replace(a1,a2,a3), id
#from (
#  select name as a1, 'a' as a2, 'A' as a3, id as id 
#  from sys.functions
#) as x;
% .explain # table_name
% mal # name
% clob # type
% 206 # length
function user.s4_0():void;
    X_3:void := querylog.define("explain select replace(a1,a2,a3), id\nfrom (\n select name as a1, \\'a\\' as a2, \\'A\\' as a3, id as id \n from sys.functions\n) as x;":str, "sequential_pipe":str, 28:int);
    X_38:bat[:str] := bat.pack("sys.":str, "sys.x":str);
    X_39:bat[:str] := bat.pack("%1":str, "id":str);
    X_40:bat[:str] := bat.pack("varchar":str, "int":str);
    X_41:bat[:int] := bat.pack(0:int, 32:int);
    X_42:bat[:int] := bat.pack(0:int, 0:int);
    X_6:int := sql.mvc();
    C_7:bat[:oid] := sql.tid(X_6:int, "sys":str, "functions":str);
    X_24:bat[:str] := sql.bind(X_6:int, "sys":str, "functions":str, "name":str, 0:int);
    (X_27:bat[:oid], X_28:bat[:str]) := sql.bind(X_6:int, "sys":str, "functions":str, "name":str, 2:int);
    X_26:bat[:str] := sql.bind(X_6:int, "sys":str, "functions":str, "name":str, 1:int);
    X_31:bat[:str] := sql.projectdelta(C_7:bat[:oid], X_24:bat[:str], X_27:bat[:oid], X_28:bat[:str], X_26:bat[:str]);
    X_34:bat[:str] := mal.manifold("str":str, "replace":str, X_31:bat[:str], "a":str, "A":str);
    X_19:bat[:int] := sql.bind(X_6:int, "sys":str, "functions":str, "id":str, 0:int);
    (X_21:bat[:oid], X_22:bat[:int]) := sql.bind(X_6:int, "sys":str, "functions":str, "id":str, 2:int);
    X_20:bat[:int] := sql.bind(X_6:int, "sys":str, "functions":str, "id":str, 1:int);
    X_30:bat[:int] := sql.projectdelta(C_7:bat[:oid], X_19:bat[:int], X_21:bat[:oid], X_22:bat[:int], X_20:bat[:int]);
    sql.resultSet(X_38:bat[:str], X_39:bat[:str], X_40:bat[:str], X_41:bat[:int], X_42:bat[:int], X_34:bat[:str], X_30:bat[:int]);
end user.s4_0;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=2 usec 
#aliases              actions= 2 time=5 usec 
#evaluate             actions= 0 time=5 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 0 time=3 usec 
#aliases              actions= 0 time=1 usec 
#mergetable           actions= 0 time=27 usec 
#deadcode             actions= 4 time=19 usec 
#aliases              actions= 0 time=5 usec 
#constants            actions= 3 time=22 usec 
#commonTerms          actions= 0 time=19 usec 
#projectionpath       actions= 0 time=5 usec 
#reorder              actions= 1 time=33 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=33 time=35 usec 
#matpack              actions= 0 time=4 usec 
#querylog             actions= 0 time=0 usec 
#multiplex            actions= 1 time=20 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=13 usec 
#garbageCollector     actions= 1 time=18 usec 
#total                actions= 1 time=415 usec 
#explain select replace(a1,a2,a3), id
#from (
#  select name as a1, 'a' as a2, 'A' as a3, id + 1 as id 
#  from sys.functions
#) as x;
% .explain # table_name
% mal # name
% clob # type
% 210 # length
function user.s6_0():void;
    X_4:void := querylog.define("explain select replace(a1,a2,a3), id\nfrom (\n select name as a1, \\'a\\' as a2, \\'A\\' as a3, id + 1 as id \n from sys.functions\n) as x;":str, "sequential_pipe":str, 34:int);
    X_47:bat[:str] := bat.pack("sys.":str, "sys.x":str);
    X_48:bat[:str] := bat.pack("%2":str, "id":str);
    X_49:bat[:str] := bat.pack("varchar":str, "bigint":str);
    X_50:bat[:int] := bat.pack(0:int, 64:int);
    X_51:bat[:int] := bat.pack(0:int, 0:int);
    X_7:int := sql.mvc();
    C_8:bat[:oid] := sql.tid(X_7:int, "sys":str, "functions":str);
    X_25:bat[:str] := sql.bind(X_7:int, "sys":str, "functions":str, "name":str, 0:int);
    (X_28:bat[:oid], X_29:bat[:str]) := sql.bind(X_7:int, "sys":str, "functions":str, "name":str, 2:int);
    X_27:bat[:str] := sql.bind(X_7:int, "sys":str, "functions":str, "name":str, 1:int);
    X_32:bat[:str] := sql.projectdelta(C_8:bat[:oid], X_25:bat[:str], X_28:bat[:oid], X_29:bat[:str], X_27:bat[:str]);
    X_20:bat[:int] := sql.bind(X_7:int, "sys":str, "functions":str, "id":str, 0:int);
    (X_22:bat[:oid], X_23:bat[:int]) := sql.bind(X_7:int, "sys":str, "functions":str, "id":str, 2:int);
    X_21:bat[:int] := sql.bind(X_7:int, "sys":str, "functions":str, "id":str, 1:int);
    X_31:bat[:int] := sql.projectdelta(C_8:bat[:oid], X_20:bat[:int], X_22:bat[:oid], X_23:bat[:int], X_21:bat[:int]);
    X_34:bat[:str] := algebra.project(X_31:bat[:int], "a":str);
    X_36:bat[:str] := algebra.project(X_31:bat[:int], "A":str);
    X_43:bat[:str] := mal.manifold("str":str, "replace":str, X_32:bat[:str], X_34:bat[:str], X_36:bat[:str]);
    X_37:bat[:lng] := batcalc.lng(X_31:bat[:int]);
    X_40:bat[:lng] := batcalc.+(X_37:bat[:lng], 1:lng, nil:BAT);
    sql.resultSet(X_47:bat[:str], X_48:bat[:str], X_49:bat[:str], X_50:bat[:int], X_51:bat[:int], X_43:bat[:str], X_40:bat[:lng]);
end user.s6_0;
#inline               actions= 0 time=1 usec 
#remap                actions= 1 time=33 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions= 3 time=6 usec 
#evaluate             actions= 1 time=13 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=4 usec 
#aliases              actions= 5 time=30 usec 
#mergetable           actions= 0 time=35 usec 
#deadcode             actions= 4 time=27 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 5 time=31 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=5 usec 
#reorder              actions= 1 time=42 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=38 time=44 usec 
#matpack              actions= 0 time=4 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 1 time=28 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=21 usec 
#garbageCollector     actions= 1 time=27 usec 
#total                actions= 1 time=572 usec 
#explain select replace(a1,a2,a3), id
#from (
#  select name as a1, 'a' as a2, 'A' as a3, abs(id) as id 
#  from sys.functions
#) as x;
% .explain # table_name
% mal # name
% clob # type
% 211 # length
function user.s8_0():void;
    X_3:void := querylog.define("explain select replace(a1,a2,a3), id\nfrom (\n select name as a1, \\'a\\' as a2, \\'A\\' as a3, abs(id) as id \n from sys.functions\n) as x;":str, "sequential_pipe":str, 31:int);
    X_43:bat[:str] := bat.pack("sys.":str, "sys.x":str);
    X_44:bat[:str] := bat.pack("%1":str, "id":str);
    X_45:bat[:str] := bat.pack("varchar":str, "int":str);
    X_46:bat[:int] := bat.pack(0:int, 32:int);
    X_47:bat[:int] := bat.pack(0:int, 0:int);
    X_6:int := sql.mvc();
    C_7:bat[:oid] := sql.tid(X_6:int, "sys":str, "functions":str);
    X_24:bat[:str] := sql.bind(X_6:int, "sys":str, "functions":str, "name":str, 0:int);
    (X_27:bat[:oid], X_28:bat[:str]) := sql.bind(X_6:int, "sys":str, "functions":str, "name":str, 2:int);
    X_26:bat[:str] := sql.bind(X_6:int, "sys":str, "functions":str, "name":str, 1:int);
    X_31:bat[:str] := sql.projectdelta(C_7:bat[:oid], X_24:bat[:str], X_27:bat[:oid], X_28:bat[:str], X_26:bat[:str]);
    X_19:bat[:int] := sql.bind(X_6:int, "sys":str, "functions":str, "id":str, 0:int);
    (X_21:bat[:oid], X_22:bat[:int]) := sql.bind(X_6:int, "sys":str, "functions":str, "id":str, 2:int);
    X_20:bat[:int] := sql.bind(X_6:int, "sys":str, "functions":str, "id":str, 1:int);
    X_30:bat[:int] := sql.projectdelta(C_7:bat[:oid], X_19:bat[:int], X_21:bat[:oid], X_22:bat[:int], X_20:bat[:int]);
    X_33:bat[:str] := algebra.project(X_30:bat[:int], "a":str);
    X_35:bat[:str] := algebra.project(X_30:bat[:int], "A":str);
    X_39:bat[:str] := mal.manifold("str":str, "replace":str, X_31:bat[:str], X_33:bat[:str], X_35:bat[:str]);
    X_36:bat[:int] := batcalc.abs(X_30:bat[:int]);
    sql.resultSet(X_43:bat[:str], X_44:bat[:str], X_45:bat[:str], X_46:bat[:int], X_47:bat[:int], X_39:bat[:str], X_36:bat[:int]);
end user.s8_0;
#inline               actions= 0 time=1 usec 
#remap                actions= 1 time=9 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions= 2 time=6 usec 
#evaluate             actions= 0 time=5 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 0 time=3 usec 
#aliases              actions= 0 time=0 usec 
#mergetable           actions= 0 time=26 usec 
#deadcode             actions= 0 time=7 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 2 time=7 usec 
#commonTerms          actions= 0 time=9 usec 
#projectionpath       actions= 0 time=3 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=36 time=35 usec 
#matpack              actions= 0 time=4 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 1 time=21 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=14 usec 
#garbageCollector     actions= 1 time=21 usec 
#total                actions= 1 time=443 usec 

# 14:13:39 >  
# 14:13:39 >  "Done."
# 14:13:39 >  

