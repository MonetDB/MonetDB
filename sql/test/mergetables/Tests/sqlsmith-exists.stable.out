stdout of test 'sqlsmith-exists` in directory 'sql/test/mergetables` itself:


# 19:56:21 >  
# 19:56:21 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33829" "--set" "mapi_usock=/var/tmp/mtest-3703/.s.monetdb.33829" "--forcemito" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_mergetables" "--set" "embedded_c=true"
# 19:56:21 >  

# MonetDB 5 server v11.36.0 (hg id: 1d18bd8860b4+)
# This is an unreleased version
# Serving database 'mTests_sql_test_mergetables', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 128bit integers
# Found 15.384 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2020 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://xps13:33829/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-3703/.s.monetdb.33829
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

# 19:56:21 >  
# 19:56:21 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-3703" "--port=33829"
# 19:56:21 >  

#START TRANSACTION;
#CREATE TABLE another_T (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT);
#INSERT INTO another_T VALUES (1,2,3,4,5,6,7,8), (11,22,33,44,55,66,77,88), (111,222,333,444,555,666,777,888), (1111,2222,3333,4444,5555,6666,7777,8888);
[ 4	]
#CREATE TABLE LongTable (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT);
#INSERT INTO LongTable VALUES (1,7,2,1,1,909,1,1), (2,7,2,2,3,4,4,6), (NULL,5,4,81,NULL,5,-10,1), (-90,NULL,0,NULL,2,0,1,NULL);
[ 4	]
#CREATE TABLE integers(i INTEGER);
#INSERT INTO integers VALUES (1), (2), (3), (NULL);
[ 4	]
#CREATE TABLE tbl_ProductSales (col1 INT, col2 varchar(64), col3 varchar(64), col4 INT, col5 REAL, col6 date); 
#INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200, 1.2, date '2015-07-15'),(2,'Game','PKO Game',400, -1.0, date '2012-02-10'),(3,'Fashion','Shirt',500, NULL, date '1990-01-01'),
#(4,'Fashion','Shorts',100, 102.45, date '2000-03-08'),(5,'Sport','Ball',0, 224.78, NULL);
[ 5	]
#CREATE TABLE analytics (aa INT, bb INT, cc BIGINT);
#INSERT INTO analytics VALUES (15, 3, 15), (3, 1, 3), (2, 1, 2), (5, 3, 5), (NULL, 2, NULL), (3, 2, 3), (4, 1, 4), (6, 3, 6), (8, 2, 8), (NULL, 4, NULL);
[ 10	]
#CREATE TABLE tab0(col0 INTEGER, col1 INTEGER, col2 INTEGER);
#CREATE TABLE tab1(col0 INTEGER, col1 INTEGER, col2 INTEGER);
#CREATE TABLE tab2(col0 INTEGER, col1 INTEGER, col2 INTEGER);
#INSERT INTO tab0 VALUES (97,1,99), (15,81,47),(87,21,10);
[ 3	]
#INSERT INTO tab1 VALUES (51,14,96), (85,5,59), (91,47,68);
[ 3	]
#INSERT INTO tab2 VALUES (64,77,40), (75,67,58),(46,51,23);
[ 3	]
#select
#cast(coalesce(ref_0.id, ref_0.owner) as int) as c0, ref_0.system as c1,
#50 as c2,
#ref_0.name as c3
#from
#sys.schemas as ref_0
#where (false)
#or (exists (
#    select
#    ref_0.system as c0,
#    ref_0.id as c1,
#    ref_1.type_name as c2,
#    ref_2.owner as c3,
#    ref_2.optimize as c4,
#    ref_1.function_type as c5,
#    cast(nullif(ref_1.function_type, ref_1.function_id) as int) as c6,
#    ref_1.type_name as c7,
#    73 as c8,
#    ref_2.col2 as c9,
#    ref_1.col2 as c10,
#    ref_1.col1 as c11,
#    ref_1.col5 as c12,
#    ref_2.col3 as c13,
#    case when exists (
% sys.,	sys.,	.,	sys. # table_name
% c0,	c1,	c2,	c3 # name
% int,	int,	tinyint,	int # type
% 1,	1,	1,	1 # length
#select 
# subq_0.c0 as c0, 
# subq_0.c2 as c1, 
# subq_0.c1 as c2, 
# subq_0.c1 as c3, 
# cast(nullif(73,
# 73) as int) as c4, 
# subq_0.c2 as c5, 
# subq_0.c1 as c6, 
# subq_0.c1 as c7, 
# subq_0.c1 as c8, 
# subq_0.c0 as c9
#from 
# (select 
# ref_1.schema_name as c0, 
# cast(coalesce(ref_1.depend_type,
# case when true then ref_1.depend_type else ref_1.depend_type end
# ) as smallint) as c1, 
# ref_0.action as c2
# from 
# tmp.keys as ref_0
# right join sys.dependency_schemas_on_users as ref_1
# on (exists (
# select 
# ref_0.col1 as c0, 
# ref_1.col2 as c1
# from 
# tab1 as ref_2
% .,	.,	.,	.,	.,	.,	.,	.,	.,	. # table_name
% c0,	c1,	c2,	c3,	c4,	c5,	c6,	c7,	c8,	c9 # name
% int,	int,	smallint,	smallint,	int,	int,	smallint,	smallint,	smallint,	int # type
% 1,	1,	1,	1,	1,	1,	1,	1,	1,	1 # length
#SELECT subq_1.c0 AS c0, 
#       subq_1.c0 AS c1, 
#       subq_0.c0 AS c2, 
#       subq_1.c0 AS c3, 
#       subq_1.c0 AS c4, 
#       subq_0.c0 AS c5 
#FROM   (SELECT ref_0.function_type_name AS c0 
#        FROM   sys.function_types AS ref_0 
#        WHERE  false 
#        LIMIT  143) AS subq_0 
#       LEFT JOIN (SELECT ref_1.table_id AS c0 
#                  FROM   sys.table_partitions AS ref_1 
#                  WHERE  ( false ) 
#                         AND ( EXISTS 
#                         (SELECT ref_2.col0   AS c0, 
#                                 ref_1.col2 AS c1, 
% .,	.,	.,	.,	.,	. # table_name
% c0,	c1,	c2,	c3,	c4,	c5 # name
% int,	int,	int,	int,	int,	int # type
% 1,	1,	1,	1,	1,	1 # length
#select 
# 1
# from 
# tab1 as ref_0
# right join analytics as ref_1
# on (exists (
# select 
# 1
# from 
# tbl_ProductSales as ref_3
# where ref_1.aa is null))
# right join tab2 as ref_2
# on (ref_0.col1 = ref_2.col0 );
% . # table_name
% single_value # name
% tinyint # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
#select 
# 1
# from 
# tab1 as ref_0
# right join analytics as ref_1
# right join tab2 as ref_2
# on (exists (
# select 
# 1
# from 
# tbl_ProductSales as ref_3
# where ref_1.aa is null))
# on (ref_0.col1 = ref_2.col0 );
% . # table_name
% single_value # name
% tinyint # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#select 
# subq_0.c0 as c0, 
# subq_0.c0 as c1, 
# cast(coalesce(4,
# subq_0.c0) as int) as c2, 
# case when subq_0.c0 is null then subq_0.c0 else subq_0.c0 end
# as c3, 
# subq_0.c0 as c4, 
# subq_0.c0 as c5, 
# subq_0.c0 as c6, 
# subq_0.c0 as c7
#from 
# (select 
# ref_4.type as c0
# from 
# sys.storagemodel as ref_0
# right join sys.triggers as ref_1
# right join sys.environment as ref_2
# on (exists (
# select 
# ref_2.name as c0, 
# ref_2.value as c1
# from 
# sys.tbl_ProductSales as ref_3
# where ref_1.aa is null))
# on (ref_0.col1 = ref_2.col0 )
# inner join tab0 as ref_4
% sys.,	sys.,	.,	sys.,	sys.,	sys.,	sys.,	sys. # table_name
% c0,	c1,	c2,	c3,	c4,	c5,	c6,	c7 # name
% int,	int,	int,	int,	int,	int,	int,	int # type
% 1,	1,	1,	1,	1,	1,	1,	1 # length
#SELECT subq_1.c3 AS c0
#FROM
#  (SELECT 1 AS c0,
#          subq_0.c8 AS c1,
#          subq_0.c6 AS c2,
#          subq_0.c0 AS c3,
#          subq_0.c4 AS c4,
#          subq_0.c9 AS c5,
#          subq_0.c6 AS c6,
#          subq_0.c0 AS c7,
#          subq_0.c3 AS c8,
#          subq_0.c4 AS c9,
#          CASE
#              WHEN (94 IS NOT NULL)
#                   OR (subq_0.c0 IS NULL) THEN subq_0.c4
#              ELSE subq_0.c4
#          END AS c10,
#          subq_0.c5 AS c11,
#          subq_0.c4 AS c12
#   FROM
% . # table_name
% c0 # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#SELECT 1 FROM integers WHERE CASE WHEN EXISTS (SELECT 1 WHERE i IS NULL) THEN true ELSE true END;
% . # table_name
% single_value # name
% tinyint # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#select 
# subq_1.c1 as c0, 
# subq_1.c2 as c1, 
# subq_1.c2 as c2
#from 
# (select 
# subq_0.c9 as c0, 
# subq_0.c7 as c1, 
# subq_0.c3 as c2, 
# subq_0.c6 as c3
# from 
# (select 
# ref_0.depend_type as c0, 
# ref_0.depend_type as c1, 
# 87 as c2, 
# ref_0.index_type as c3, 
# ref_0.table_id as c4, 
# ref_0.index_id as c5, 
# ref_0.index_id as c6, 
# ref_0.table_name as c7, 
# ref_0.table_schema_id as c8, 
# ref_0.table_schema_id as c9
# from 
# sys.dependency_tables_on_indexes as ref_0
# where true) as subq_0
# where subq_0.c8 is not null
# limit 46) as subq_1
#where false; --empty on PostgreSQL
% sys.,	sys.,	sys. # table_name
% c0,	c1,	c2 # name
% int,	int,	int # type
% 1,	1,	1 # length
#select 
# subq_0.c4 as c0, 
# subq_0.c6 as c1, 
# subq_0.c2 as c2, 
# subq_0.c3 as c3, 
# subq_0.c5 as c4, 
# subq_0.c2 as c5, 
# subq_0.c3 as c6, 
# subq_0.c0 as c7
#from 
# (select 
# ref_0.type as c0, 
# ref_1.function_name as c1, 
# ref_2.function_type as c2, 
# ref_1.trigger_table_id as c3, 
# ref_0.storage as c4, 
# ref_0.type as c5, 
# ref_2.trigger_table_id as c6, 
# ref_1.function_schema_id as c7
# from 
# sys._columns as ref_0
# inner join sys.dependency_functions_on_triggers as ref_1
# on (true)
# right join LongTable as ref_2
# on (ref_0.col1 = ref_2.col6 )
# where (((ref_2.col5 is null) 
# and (true)) 
# and (true)) 
% .,	.,	.,	.,	.,	.,	.,	. # table_name
% c0,	c1,	c2,	c3,	c4,	c5,	c6,	c7 # name
% int,	int,	int,	int,	int,	int,	int,	int # type
% 1,	1,	1,	1,	1,	1,	1,	1 # length
#select 
# cast(coalesce(subq_1.c0,
# subq_1.c1) as int) as c0
#from 
# (select 
# subq_0.c6 as c0, 
# subq_0.c0 as c1
# from 
# (select 
# ref_1.ln as c0, 
# ref_1.ln as c1, 
# ref_0.name as c2, 
# ref_1.ln as c3, 
# ref_0.fullname as c4, 
# ref_1.sn as c5, 
# ref_0.default_schema as c6, 
# ref_1.sp as c7, 
# 5 as c8, 
# ref_1.ln as c9, 
# ref_1.ur as c10, 
# ref_0.name as c11, 
# ref_0.default_schema as c12
# from 
# sys.users as ref_0
# inner join bam.sq as ref_1
# on (ref_0.default_schema = ref_1.ln )
# where exists (
# select 
# ref_1.col4 as c0
% sys. # table_name
% c0 # name
% int # type
% 1 # length
#select 
# subq_2.c18 as c0, 
# subq_0.c0 as c1, 
# cast(coalesce(subq_0.c1,
# subq_2.c5) as int) as c2, 
# 92 as c3, 
# subq_0.c1 as c4, 
# subq_2.c21 as c5, 
# subq_2.c24 as c6, 
# subq_2.c11 as c7, 
# subq_2.c13 as c8, 
# subq_2.c16 as c9, 
# case when subq_2.c26 is null then subq_2.c20 else subq_2.c20 end
# as c10, 
# subq_0.c0 as c11, 
# subq_0.c0 as c12, 
# subq_0.c1 as c13, 
# subq_0.c1 as c14
#from 
# (select 
# ref_0.col7 as c0, 
# ref_0.col2 as c1
# from 
# sys.another_t as ref_0
# where (true) 
# and ((ref_0.col4 is not null) 
% sys.,	sys.,	sys.,	.,	sys.,	sys.,	sys.,	sys.,	sys.,	.,	.,	sys.,	sys.,	sys.,	sys. # table_name
% c0,	c1,	c2,	c3,	c4,	c5,	c6,	c7,	c8,	c9,	c10,	c11,	c12,	c13,	c14 # name
% int,	int,	int,	tinyint,	int,	int,	int,	int,	int,	tinyint,	int,	int,	int,	int,	int # type
% 1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1 # length
#SELECT
#        subq_2.c3 AS c0
#        ,subq_2.c6 AS c1
#    FROM
#        (
#            SELECT
#                    36 AS c0
#                    ,ref_0.cc AS c1
#                FROM
#                    analytics AS ref_0
#                WHERE
#                    FALSE LIMIT 32
#        ) AS subq_0 INNER JOIN (
#            SELECT
#                    ref_1.bb AS c0
#                    ,ref_1.cc AS c1
#                    ,ref_1.cc AS c2
#                    ,ref_1.aa AS c3
#                    ,ref_1.bb AS c4
#                    ,ref_1.aa AS c5
% .,	. # table_name
% c0,	c1 # name
% int,	int # type
% 1,	1 # length
#select 
# subq_1.c0 as c0
#from 
# (select 
# subq_0.c9 as c0
# from 
# (select 
# ref_3.aa as c0, 
# ref_3.cc as c1, 
# ref_2.col2 as c2, 
# ref_2.col2 as c3, 
# ref_0.col1 as c4, 
# ref_1.col3 as c5, 
# ref_3.aa as c6, 
# ref_1.col2 as c7, 
# ref_2.col2 as c8, 
# ref_1.col8 as c9, 
# ref_2.col1 as c10, 
# ref_0.col2 as c11, 
# ref_2.col0 as c12, 
# ref_0.col1 as c13, 
# ref_2.col1 as c14
# from 
# tab1 as ref_0
# left join another_t as ref_1
# on (ref_0.col2 is null)
# inner join tab0 as ref_2
# left join analytics as ref_3
# on (ref_2.col1 is not null)
% . # table_name
% c0 # name
% int # type
% 1 # length
#select 
# subq_1.c0 as c0
#from 
# (select 
# case when ((false) 
# or (subq_0.c3 is not null)) 
# and (true) then subq_0.c11 else subq_0.c11 end
# as c0, 
# case when subq_0.c0 is null then subq_0.c5 else subq_0.c5 end
# as c1, 
# subq_0.c6 as c2, 
# case when true then subq_0.c3 else subq_0.c3 end
# as c3, 
# subq_0.c3 as c4, 
# subq_0.c0 as c5, 
# subq_0.c6 as c6, 
# subq_0.c3 as c7, 
# subq_0.c8 as c8, 
# 42 as c9, 
# subq_0.c6 as c10
# from 
# (select 
# ref_0.col0 as c0, 
# 85 as c1, 
# ref_0.col1 as c2, 
# ref_0.col2 as c3, 
% . # table_name
% c0 # name
% int # type
% 1 # length
#SELECT
#        subq_1.c2 AS c0
#        ,subq_1.c0 AS c1
#    FROM
#        (
#            SELECT
#                    subq_0.c7 AS c0
#                    ,subq_0.c7 AS c1
#                    ,CASE
#                        WHEN TRUE
#                        THEN subq_0.c7
#                        ELSE subq_0.c7
#                    END AS c2
#                FROM
#                    (
#                        SELECT
#                                ref_0.col1 AS c0
#                                ,89 AS c1
#                                ,ref_0.col2 AS c2
% .,	sys. # table_name
% c0,	c1 # name
% varchar,	varchar # type
% 0,	0 # length
#select
#  subq_0.c1 as c0,
#  subq_0.c1 as c1,
#  subq_0.c1 as c2,
#  cast(
#    nullif(
#      subq_0.c3,
#      cast(
#        nullif(
#          subq_0.c2,
#          case when (
#            (subq_0.c1 is not null)
#            and (subq_0.c3 is not null)
#          )
#          or (
#            (
#              (subq_0.c4 is not null)
#              or (
#                (
#                  (
#                    (true)
#                    or (
#                      (
#                        exists (
#                          select
% .,	.,	.,	.,	. # table_name
% c0,	c1,	c2,	c3,	c4 # name
% int,	int,	int,	int,	int # type
% 1,	1,	1,	1,	1 # length
#select 
# 34 as c0, 
# ref_7.col1 as c1
#from 
# (select 
# cast(nullif(ref_1.bb,
# ref_0.col1) as int) as c0, 
# ref_1.bb as c1, 
# ref_0.col2 as c2, 
# ref_1.bb as c3, 
# ref_0.col2 as c4, 
# cast(nullif(ref_0.col0,
# ref_1.bb) as int) as c5, 
# ref_0.col1 as c6, 
# ref_1.bb as c7, 
# ref_0.col2 as c8, 
# ref_0.col0 as c9, 
# ref_1.cc as c10, 
# ref_0.col0 as c11, 
# ref_1.aa as c12
# from 
# tab0 as ref_0
# inner join analytics as ref_1
# on (((ref_1.aa is null) 
# or ((ref_1.bb is null) 
# or ((63 is null) 
# or ((ref_1.bb is not null) 
% .,	. # table_name
% c0,	c1 # name
% tinyint,	int # type
% 1,	1 # length
#ROLLBACK;

# 19:56:32 >  
# 19:56:32 >  "Done."
# 19:56:32 >  

