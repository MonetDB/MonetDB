Running database upgrade commands to update system tables.

Running database upgrade commands:
update sys._columns set type_digits = 7 where type = 'tinyint' and type_digits <> 7;
update sys._columns set type_digits = 15 where type = 'smallint' and type_digits <> 15;
update sys._columns set type_digits = 31 where type = 'int' and type_digits <> 31;
update sys._columns set type_digits = 63 where type = 'bigint' and type_digits <> 63;
update sys._columns set type_digits = 127 where type = 'hugeint' and type_digits <> 127;
update sys._columns set type = 'varchar' where type in ('clob', 'char') and table_id in (select id from sys._tables where system and name <> 'netcdf_files');
update sys.args set type_digits = 7 where type = 'tinyint' and type_digits <> 7;
update sys.args set type_digits = 15 where type = 'smallint' and type_digits <> 15;
update sys.args set type_digits = 31 where type = 'int' and type_digits <> 31;
update sys.args set type_digits = 63 where type = 'bigint' and type_digits <> 63;
update sys.args set type_digits = 127 where type = 'hugeint' and type_digits <> 127;
update sys.args set type = 'varchar' where type in ('clob', 'char');
drop aggregate median(decimal(18,3));
drop aggregate median_avg(decimal(18,3));
drop aggregate quantile(decimal(18,3), double);
drop aggregate quantile_avg(decimal(18,3), double);
create aggregate median(val DECIMAL(2)) returns DECIMAL(2)
 external name "aggr"."median";
GRANT EXECUTE ON AGGREGATE median(DECIMAL(2)) TO PUBLIC;
create aggregate median(val DECIMAL(4)) returns DECIMAL(4)
 external name "aggr"."median";
GRANT EXECUTE ON AGGREGATE median(DECIMAL(4)) TO PUBLIC;
create aggregate median(val DECIMAL(9)) returns DECIMAL(9)
 external name "aggr"."median";
GRANT EXECUTE ON AGGREGATE median(DECIMAL(9)) TO PUBLIC;
create aggregate median(val DECIMAL(18)) returns DECIMAL(18)
 external name "aggr"."median";
GRANT EXECUTE ON AGGREGATE median(DECIMAL(18)) TO PUBLIC;
create aggregate median_avg(val DECIMAL(2)) returns DOUBLE
 external name "aggr"."median_avg";
GRANT EXECUTE ON AGGREGATE median_avg(DECIMAL(2)) TO PUBLIC;
create aggregate median_avg(val DECIMAL(4)) returns DOUBLE
 external name "aggr"."median_avg";
GRANT EXECUTE ON AGGREGATE median_avg(DECIMAL(4)) TO PUBLIC;
create aggregate median_avg(val DECIMAL(9)) returns DOUBLE
 external name "aggr"."median_avg";
GRANT EXECUTE ON AGGREGATE median_avg(DECIMAL(9)) TO PUBLIC;
create aggregate median_avg(val DECIMAL(18)) returns DOUBLE
 external name "aggr"."median_avg";
GRANT EXECUTE ON AGGREGATE median_avg(DECIMAL(18)) TO PUBLIC;
create aggregate quantile(val DECIMAL(2), q DOUBLE) returns DECIMAL(2)
 external name "aggr"."quantile";
GRANT EXECUTE ON AGGREGATE quantile(DECIMAL(2), DOUBLE) TO PUBLIC;
create aggregate quantile(val DECIMAL(4), q DOUBLE) returns DECIMAL(4)
 external name "aggr"."quantile";
GRANT EXECUTE ON AGGREGATE quantile(DECIMAL(4), DOUBLE) TO PUBLIC;
create aggregate quantile(val DECIMAL(9), q DOUBLE) returns DECIMAL(9)
 external name "aggr"."quantile";
GRANT EXECUTE ON AGGREGATE quantile(DECIMAL(9), DOUBLE) TO PUBLIC;
create aggregate quantile(val DECIMAL(18), q DOUBLE) returns DECIMAL(18)
 external name "aggr"."quantile";
GRANT EXECUTE ON AGGREGATE quantile(DECIMAL(18), DOUBLE) TO PUBLIC;
create aggregate quantile_avg(val DECIMAL(2), q DOUBLE) returns DOUBLE
 external name "aggr"."quantile_avg";
GRANT EXECUTE ON AGGREGATE quantile_avg(DECIMAL(2), DOUBLE) TO PUBLIC;
create aggregate quantile_avg(val DECIMAL(4), q DOUBLE) returns DOUBLE
 external name "aggr"."quantile_avg";
GRANT EXECUTE ON AGGREGATE quantile_avg(DECIMAL(4), DOUBLE) TO PUBLIC;
create aggregate quantile_avg(val DECIMAL(9), q DOUBLE) returns DOUBLE
 external name "aggr"."quantile_avg";
GRANT EXECUTE ON AGGREGATE quantile_avg(DECIMAL(9), DOUBLE) TO PUBLIC;
create aggregate quantile_avg(val DECIMAL(18), q DOUBLE) returns DOUBLE
 external name "aggr"."quantile_avg";
GRANT EXECUTE ON AGGREGATE quantile_avg(DECIMAL(18), DOUBLE) TO PUBLIC;
drop function if exists sys.time_to_str(time with time zone, string) cascade;
drop function if exists sys.timestamp_to_str(timestamp with time zone, string) cascade;
create function time_to_str(d time, format string) returns string
 external name mtime."time_to_str";
create function time_to_str(d time with time zone, format string) returns string
 external name mtime."timetz_to_str";
create function timestamp_to_str(d timestamp with time zone, format string) returns string
 external name mtime."timestamptz_to_str";
grant execute on function time_to_str(time, string) to public;
grant execute on function time_to_str(time with time zone, string) to public;
grant execute on function timestamp_to_str(timestamp with time zone, string) to public;
update sys.functions set system = true where not system and schema_id = 2000 and name in ('time_to_str', 'timestamp_to_str', 'median', 'median_avg', 'quantile', 'quantile_avg');
drop function if exists sys.dump_database(boolean) cascade;
drop view sys.dump_comments;
drop view sys.dump_tables;
drop view sys.dump_functions;
drop view sys.dump_function_grants;
drop function if exists sys.describe_columns(string, string) cascade;
drop view sys.describe_functions;
drop view sys.describe_privileges;
drop view sys.describe_comments;
drop view sys.fully_qualified_functions;
drop view sys.describe_tables;
drop function if exists sys.describe_type(string, integer, integer) cascade;
CREATE FUNCTION sys.describe_type(ctype string, digits integer, tscale integer)
 RETURNS string
BEGIN
 RETURN sys.sql_datatype(ctype, digits, tscale, false, false);
END;
CREATE VIEW sys.describe_tables AS
 SELECT
 t.id o,
 s.name sch,
 t.name tab,
 ts.table_type_name typ,
 (SELECT
 ' (' ||
 GROUP_CONCAT(
 sys.DQ(c.name) || ' ' ||
 sys.describe_type(c.type, c.type_digits, c.type_scale) ||
 ifthenelse(c."null" = 'false', ' NOT NULL', '')
 , ', ') || ')'
 FROM sys._columns c
 WHERE c.table_id = t.id) col,
 CASE ts.table_type_name
 WHEN 'REMOTE TABLE' THEN
 sys.get_remote_table_expressions(s.name, t.name)
 WHEN 'MERGE TABLE' THEN
 sys.get_merge_table_partition_expressions(t.id)
 WHEN 'VIEW' THEN
 sys.schema_guard(s.name, t.name, t.query)
 ELSE
 ''
 END opt
 FROM sys.schemas s, sys.table_types ts, sys.tables t
 WHERE ts.table_type_name IN ('TABLE', 'VIEW', 'MERGE TABLE', 'REMOTE TABLE', 'REPLICA TABLE', 'UNLOGGED TABLE')
 AND t.system = FALSE
 AND s.id = t.schema_id
 AND ts.table_type_id = t.type
 AND s.name <> 'tmp';
CREATE VIEW sys.fully_qualified_functions AS
 WITH fqn(id, tpe, sig, num) AS
 (
 SELECT
 f.id,
 ft.function_type_keyword,
 CASE WHEN a.type IS NULL THEN
 sys.fqn(s.name, f.name) || '()'
 ELSE
 sys.fqn(s.name, f.name) || '(' || group_concat(sys.describe_type(a.type, a.type_digits, a.type_scale), ',') OVER (PARTITION BY f.id ORDER BY a.number)  || ')'
 END,
 a.number
 FROM sys.schemas s, sys.function_types ft, sys.functions f LEFT JOIN sys.args a ON f.id = a.func_id
 WHERE s.id= f.schema_id AND f.type = ft.function_type_id
 )
 SELECT
 fqn1.id id,
 fqn1.tpe tpe,
 fqn1.sig nme
 FROM
 fqn fqn1 JOIN (SELECT id, max(num) FROM fqn GROUP BY id)  fqn2(id, num)
 ON fqn1.id = fqn2.id AND (fqn1.num = fqn2.num OR fqn1.num IS NULL AND fqn2.num is NULL);
CREATE VIEW sys.describe_comments AS
 SELECT o.id AS id, o.tpe AS tpe, o.nme AS fqn, cm.remark AS rem
 FROM (
 SELECT id, 'SCHEMA', sys.DQ(name) FROM sys.schemas WHERE NOT system
 UNION ALL
 SELECT t.id, ifthenelse(ts.table_type_name = 'VIEW', 'VIEW', 'TABLE'), sys.FQN(s.name, t.name)
 FROM sys.schemas s JOIN sys._tables t ON s.id = t.schema_id JOIN sys.table_types ts ON t.type = ts.table_type_id
 WHERE NOT t.system
 UNION ALL
 SELECT c.id, 'COLUMN', sys.FQN(s.name, t.name) || '.' || sys.DQ(c.name) FROM sys.columns c, sys._tables t, sys.schemas s WHERE NOT t.system AND c.table_id = t.id AND t.schema_id = s.id
 UNION ALL
 SELECT idx.id, 'INDEX', sys.FQN(s.name, idx.name) FROM sys.idxs idx, sys._tables t, sys.schemas s WHERE NOT t.system AND idx.table_id = t.id AND t.schema_id = s.id
 UNION ALL
 SELECT seq.id, 'SEQUENCE', sys.FQN(s.name, seq.name) FROM sys.sequences seq, sys.schemas s WHERE seq.schema_id = s.id
 UNION ALL
 SELECT f.id, ft.function_type_keyword, qf.nme FROM sys.functions f, sys.function_types ft, sys.schemas s, sys.fully_qualified_functions qf
 WHERE NOT f.system AND f.type = ft.function_type_id AND f.schema_id = s.id AND qf.id = f.id
 ) AS o(id, tpe, nme)
 JOIN sys.comments cm ON cm.id = o.id;
CREATE VIEW sys.describe_privileges AS
 SELECT
 CASE
 WHEN o.tpe IS NULL AND pc.privilege_code_name = 'SELECT' THEN --GLOBAL privileges: SELECT maps to COPY FROM
 'COPY FROM'
 WHEN o.tpe IS NULL AND pc.privilege_code_name = 'UPDATE' THEN --GLOBAL privileges: UPDATE maps to COPY INTO
 'COPY INTO'
 ELSE
 o.nme
 END o_nme,
 coalesce(o.tpe, 'GLOBAL') o_tpe,
 pc.privilege_code_name p_nme,
 a.name a_nme,
 g.name g_nme,
 p.grantable grantable
 FROM
 sys.privileges p LEFT JOIN
 (
 SELECT t.id, s.name || '.' || t.name , 'TABLE'
 from sys.schemas s, sys.tables t where s.id = t.schema_id
 UNION ALL
 SELECT c.id, s.name || '.' || t.name || '.' || c.name, 'COLUMN'
 FROM sys.schemas s, sys.tables t, sys.columns c where s.id = t.schema_id AND t.id = c.table_id
 UNION ALL
 SELECT f.id, f.nme, f.tpe
 FROM sys.fully_qualified_functions f
 ) o(id, nme, tpe) ON o.id = p.obj_id,
 sys.privilege_codes pc,
 auths a, auths g
 WHERE
 p.privileges = pc.privilege_code_id AND
 p.auth_id = a.id AND
 p.grantor = g.id;
CREATE VIEW sys.describe_functions AS
 WITH func_args_all(func_id, number, max_number, func_arg) AS
 (
 SELECT
 func_id,
 number,
 max(number) OVER (PARTITION BY func_id ORDER BY number DESC),
 group_concat(sys.dq(name) || ' ' || sys.describe_type(type, type_digits, type_scale),', ') OVER (PARTITION BY func_id ORDER BY number)
 FROM sys.args
 WHERE inout = 1
 ),
 func_args(func_id, func_arg) AS
 (
 SELECT func_id, func_arg
 FROM func_args_all
 WHERE number = max_number
 ),
 func_rets_all(func_id, number, max_number, func_ret, func_ret_type) AS
 (
 SELECT
 func_id,
 number,
 max(number) OVER (PARTITION BY func_id ORDER BY number DESC),
 group_concat(sys.dq(name) || ' ' || sys.describe_type(type, type_digits, type_scale),', ') OVER (PARTITION BY func_id ORDER BY number),
 group_concat(sys.describe_type(type, type_digits, type_scale),', ') OVER (PARTITION BY func_id ORDER BY number)
 FROM sys.args
 WHERE inout = 0
 ),
 func_rets(func_id, func_ret, func_ret_type) AS
 (
 SELECT
 func_id,
 func_ret,
 func_ret_type
 FROM func_rets_all
 WHERE number = max_number
 )
 SELECT
 f.id o,
 s.name sch,
 f.name fun,
 CASE WHEN f.language IN (1, 2) THEN f.func ELSE 'CREATE ' || ft.function_type_keyword || ' ' || sys.FQN(s.name, f.name) || '(' || coalesce(fa.func_arg, '') || ')' || CASE WHEN f.type = 5 THEN ' RETURNS TABLE (' || coalesce(fr.func_ret, '') || ')' WHEN f.type IN (1,3) THEN ' RETURNS ' || fr.func_ret_type ELSE '' END || CASE WHEN fl.language_keyword IS NULL THEN '' ELSE ' LANGUAGE ' || fl.language_keyword END || ' ' || f.func END def
 FROM sys.functions f
 LEFT OUTER JOIN func_args fa ON fa.func_id = f.id
 LEFT OUTER JOIN func_rets fr ON fr.func_id = f.id
 JOIN sys.schemas s ON f.schema_id = s.id
 JOIN sys.function_types ft ON f.type = ft.function_type_id
 LEFT OUTER JOIN sys.function_languages fl ON f.language = fl.language_id
 WHERE s.name <> 'tmp' AND NOT f.system;
CREATE FUNCTION sys.describe_columns(schemaName string, tableName string)
 RETURNS TABLE(name string, type string, digits integer, scale integer, Nulls boolean, cDefault string, number integer, sqltype string, remark string)
BEGIN
 RETURN SELECT c.name, c."type", c.type_digits, c.type_scale, c."null", c."default", c.number, sys.describe_type(c."type", c.type_digits, c.type_scale), com.remark
 FROM sys._tables t, sys.schemas s, sys._columns c
 LEFT OUTER JOIN sys.comments com ON c.id = com.id
 WHERE c.table_id = t.id
 AND t.name = tableName
 AND t.schema_id = s.id
 AND s.name = schemaName
 ORDER BY c.number;
END;
CREATE VIEW sys.dump_function_grants AS
 WITH func_args_all(func_id, number, max_number, func_arg) AS
 (SELECT a.func_id,
 a.number,
 max(a.number) OVER (PARTITION BY a.func_id ORDER BY a.number DESC),
 group_concat(sys.describe_type(a.type, a.type_digits, a.type_scale), ', ') OVER (PARTITION BY a.func_id ORDER BY a.number)
 FROM sys.args a
 WHERE a.inout = 1),
 func_args(func_id, func_arg) AS
 (SELECT func_id, func_arg FROM func_args_all WHERE number = max_number)
 SELECT
 'GRANT ' || pc.privilege_code_name || ' ON ' || ft.function_type_keyword || ' '
 || sys.FQN(s.name, f.name) || '(' || coalesce(fa.func_arg, '') || ') TO '
 || ifthenelse(a.name = 'public', 'PUBLIC', sys.dq(a.name))
 || CASE WHEN p.grantable = 1 THEN ' WITH GRANT OPTION' ELSE '' END || ';' stmt,
 s.name schema_name,
 f.name function_name,
 a.name grantee
 FROM sys.schemas s,
 sys.functions f LEFT OUTER JOIN func_args fa ON f.id = fa.func_id,
 sys.auths a,
 sys.privileges p,
 sys.auths g,
 sys.function_types ft,
 sys.privilege_codes pc
 WHERE s.id = f.schema_id
 AND f.id = p.obj_id
 AND p.auth_id = a.id
 AND p.grantor = g.id
 AND p.privileges = pc.privilege_code_id
 AND f.type = ft.function_type_id
 AND NOT f.system
 ORDER BY s.name, f.name, a.name, g.name, p.grantable;
CREATE VIEW sys.dump_functions AS
 SELECT f.o o, sys.schema_guard(f.sch, f.fun, f.def) stmt,
 f.sch schema_name,
 f.fun function_name
 FROM sys.describe_functions f;
CREATE VIEW sys.dump_tables AS
 SELECT
 t.o o,
 CASE
 WHEN t.typ <> 'VIEW' THEN
 'CREATE ' || t.typ || ' ' || sys.FQN(t.sch, t.tab) || t.col || t.opt || ';'
 ELSE
 t.opt
 END stmt,
 t.sch schema_name,
 t.tab table_name
 FROM sys.describe_tables t;
CREATE VIEW sys.dump_comments AS
 SELECT 'COMMENT ON ' || c.tpe || ' ' || c.fqn || ' IS ' || sys.SQ(c.rem) || ';' stmt FROM sys.describe_comments c;
CREATE FUNCTION sys.dump_database(describe BOOLEAN) RETURNS TABLE(o int, stmt STRING)
BEGIN
 SET SCHEMA sys;
 TRUNCATE sys.dump_statements;
 INSERT INTO sys.dump_statements VALUES (1, 'START TRANSACTION;');
 INSERT INTO sys.dump_statements VALUES (2, 'SET SCHEMA "sys";');
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_create_roles;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_create_users;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_create_schemas;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_user_defined_types;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_add_schemas_to_users;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_grant_user_privileges;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_sequences;
 --functions and table-likes can be interdependent. They should be inserted in the order of their catalogue id.
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(ORDER BY stmts.o), stmts.s
 FROM (
 SELECT f.o, f.stmt FROM sys.dump_functions f
 UNION ALL
 SELECT t.o, t.stmt FROM sys.dump_tables t
 ) AS stmts(o, s);
 -- dump table data before adding constraints and fixing sequences
 IF NOT DESCRIBE THEN
 CALL sys.dump_table_data();
 END IF;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_start_sequences;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_column_defaults;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_table_constraint_type;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_indices;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_foreign_keys;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_partition_tables;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_triggers;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_comments;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_table_grants;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_column_grants;
 INSERT INTO sys.dump_statements SELECT (SELECT COUNT(*) FROM sys.dump_statements) + RANK() OVER(), stmt FROM sys.dump_function_grants;
 --TODO Improve performance of dump_table_data.
 --TODO loaders, procedures, window and filter sys.functions.
 --TODO look into order dependent group_concat
 INSERT INTO sys.dump_statements VALUES ((SELECT COUNT(*) FROM sys.dump_statements) + 1, 'COMMIT;');
 RETURN sys.dump_statements;
END;
GRANT SELECT ON sys.describe_tables TO PUBLIC;
GRANT SELECT ON sys.describe_comments TO PUBLIC;
GRANT SELECT ON sys.fully_qualified_functions TO PUBLIC;
GRANT SELECT ON sys.describe_privileges TO PUBLIC;
GRANT SELECT ON sys.describe_functions TO PUBLIC;
CREATE FUNCTION sys.check_constraint(sname STRING, cname STRING) RETURNS STRING EXTERNAL NAME sql."check";
grant execute on function sys.check_constraint to public;
update sys.functions set system = true where not system and schema_id = 2000 and name in ('dump_database', 'describe_columns', 'describe_type', 'check_constraint');
update sys._tables set system = true where not system and schema_id = 2000 and name in ('dump_comments', 'dump_tables', 'dump_functions', 'dump_function_grants', 'describe_functions', 'describe_privileges', 'describe_comments', 'fully_qualified_functions', 'describe_tables');

Running database upgrade commands:
create aggregate median(val DECIMAL(38)) returns DECIMAL(38)
 external name "aggr"."median";
GRANT EXECUTE ON AGGREGATE median(DECIMAL(38)) TO PUBLIC;
create aggregate median_avg(val DECIMAL(38)) returns DOUBLE
 external name "aggr"."median_avg";
GRANT EXECUTE ON AGGREGATE median_avg(DECIMAL(38)) TO PUBLIC;
create aggregate quantile(val DECIMAL(38), q DOUBLE) returns DECIMAL(38)
 external name "aggr"."quantile";
GRANT EXECUTE ON AGGREGATE quantile(DECIMAL(38), DOUBLE) TO PUBLIC;
create aggregate quantile_avg(val DECIMAL(38), q DOUBLE) returns DOUBLE
 external name "aggr"."quantile_avg";
GRANT EXECUTE ON AGGREGATE quantile_avg(DECIMAL(38), DOUBLE) TO PUBLIC;
grant execute on function sys.generate_series(hugeint, hugeint) to public;
grant execute on function sys.generate_series(hugeint, hugeint, hugeint) to public;
update sys.functions set system = true where system <> true and schema_id = 2000 and name in ('median', 'median_avg', 'quantile', 'quantile_avg');

Running database upgrade commands:
create function sys.generate_series(first date, "limit" date, stepsize interval month)
returns table (value date)
external name generator.series;
create function sys.generate_series(first date, "limit" date, stepsize interval day)
returns table (value date)
external name generator.series;
grant execute on function sys.generate_series(tinyint, tinyint) to public;
grant execute on function sys.generate_series(tinyint, tinyint, tinyint) to public;
grant execute on function sys.generate_series(smallint, smallint) to public;
grant execute on function sys.generate_series(smallint, smallint, smallint) to public;
grant execute on function sys.generate_series(int, int) to public;
grant execute on function sys.generate_series(int, int, int) to public;
grant execute on function sys.generate_series(bigint, bigint) to public;
grant execute on function sys.generate_series(bigint, bigint, bigint) to public;
grant execute on function sys.generate_series(real, real, real) to public;
grant execute on function sys.generate_series(double, double, double) to public;
grant execute on function sys.generate_series(decimal(10,2), decimal(10,2), decimal(10,2)) to public;
grant execute on function sys.generate_series(date, date, interval month) to public;
grant execute on function sys.generate_series(date, date, interval day) to public;
grant execute on function sys.generate_series(timestamp, timestamp, interval second) to public;
grant execute on function sys.generate_series(timestamp, timestamp, interval day) to public;
update sys.functions set system = true where system <> true and name = 'generate_series' and schema_id = 2000;

Running database upgrade commands:
drop view sys.sessions;
drop function sys.sessions();
create function sys.sessions()
 returns table(
  "sessionid" int,
  "username" string,
  "login" timestamp,
  "idle" timestamp,
  "optimizer" string,
  "sessiontimeout" int,
  "querytimeout" int,
  "workerlimit" int,
  "memorylimit" int,
  "language" string,
  "peer" string,
  "hostname" string,
  "application" string,
  "client" string,
  "clientpid" bigint,
  "remark" string
 )
 external name sql.sessions;
create view sys.sessions as select * from sys.sessions();
grant select on sys.sessions to public;
create procedure sys.setclientinfo(property string, value string)
 external name clients.setinfo;
grant execute on procedure sys.setclientinfo(string, string) to public;
create table sys.clientinfo_properties(prop varchar(40) NOT NULL, session_attr varchar(40) NOT NULL);
insert into sys.clientinfo_properties values
 ('ClientHostname', 'hostname'),
 ('ApplicationName', 'application'),
 ('ClientLibrary', 'client'),
 ('ClientPid', 'clientpid'),
 ('ClientRemark', 'remark');
grant select on sys.clientinfo_properties to public;
update sys.functions set system = true where schema_id = 2000 and name in ('setclientinfo', 'sessions');
update sys._tables set system = true where schema_id = 2000 and name in ('clientinfo_properties', 'sessions');

Running database upgrade commands:
alter table sys.clientinfo_properties SET READ ONLY;

Running database upgrade commands:
DROP TABLE sys.key_types;
CREATE TABLE sys.key_types (
	key_type_id   SMALLINT NOT NULL PRIMARY KEY,
	key_type_name VARCHAR(35) NOT NULL UNIQUE);
INSERT INTO sys.key_types VALUES
(0, 'Primary Key'),
(1, 'Unique Key'),
(2, 'Foreign Key'),
(3, 'Unique Key With Nulls Not Distinct'),
(4, 'Check Constraint');
GRANT SELECT ON sys.key_types TO PUBLIC;
UPDATE sys._tables SET system = true WHERE schema_id = 2000 AND name = 'key_types';

Running database upgrade commands:
ALTER TABLE sys.key_types SET READ ONLY;

Running database upgrade commands:
DROP VIEW information_schema.check_constraints CASCADE;
DROP VIEW information_schema.table_constraints CASCADE;
CREATE VIEW INFORMATION_SCHEMA.CHECK_CONSTRAINTS AS SELECT
  cast(NULL AS varchar(1)) AS CONSTRAINT_CATALOG,
  s."name" AS CONSTRAINT_SCHEMA,
  k."name" AS CONSTRAINT_NAME,
  cast(sys.check_constraint(s."name", k."name") AS varchar(2048)) AS CHECK_CLAUSE,
  t."schema_id" AS schema_id,
  t."id" AS table_id,
  t."name" AS table_name,
  k."id" AS key_id
 FROM (SELECT sk."id", sk."table_id", sk."name" FROM sys."keys" sk WHERE sk."type" = 4 UNION ALL SELECT tk."id", tk."table_id", tk."name" FROM tmp."keys" tk WHERE tk."type" = 4) k
 INNER JOIN (SELECT st."id", st."schema_id", st."name" FROM sys."_tables" st UNION ALL SELECT tt."id", tt."schema_id", tt."name" FROM tmp."_tables" tt) t ON k."table_id" = t."id"
 INNER JOIN sys."schemas" s ON t."schema_id" = s."id"
 ORDER BY s."name", t."name", k."name";
GRANT SELECT ON TABLE INFORMATION_SCHEMA.CHECK_CONSTRAINTS TO PUBLIC WITH GRANT OPTION;
CREATE VIEW INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS SELECT
  cast(NULL AS varchar(1)) AS CONSTRAINT_CATALOG,
  s."name" AS CONSTRAINT_SCHEMA,
  k."name" AS CONSTRAINT_NAME,
  cast(NULL AS varchar(1)) AS TABLE_CATALOG,
  s."name" AS TABLE_SCHEMA,
  t."name" AS TABLE_NAME,
  cast(CASE k."type" WHEN 0 THEN 'PRIMARY KEY' WHEN 1 THEN 'UNIQUE' WHEN 2 THEN 'FOREIGN KEY' WHEN 3 THEN 'UNIQUE NULLS NOT DISTINCT' WHEN 4 THEN 'CHECK' ELSE NULL END AS varchar(26)) AS CONSTRAINT_TYPE,
  cast('NO' AS varchar(3)) AS IS_DEFERRABLE,
  cast('NO' AS varchar(3)) AS INITIALLY_DEFERRED,
  cast('YES' AS varchar(3)) AS ENFORCED,
  t."schema_id" AS schema_id,
  t."id" AS table_id,
  k."id" AS key_id,
  k."type" AS key_type,
  t."system" AS is_system
 FROM (SELECT sk."id", sk."table_id", sk."name", sk."type" FROM sys."keys" sk UNION ALL SELECT tk."id", tk."table_id", tk."name", tk."type" FROM tmp."keys" tk) k
 INNER JOIN (SELECT st."id", st."schema_id", st."name", st."system" FROM sys."_tables" st UNION ALL SELECT tt."id", tt."schema_id", tt."name", tt."system" FROM tmp."_tables" tt) t ON k."table_id" = t."id"
 INNER JOIN sys."schemas" s ON t."schema_id" = s."id"
 ORDER BY s."name", t."name", k."name";
GRANT SELECT ON TABLE INFORMATION_SCHEMA.TABLE_CONSTRAINTS TO PUBLIC WITH GRANT OPTION;

UPDATE sys._tables SET system = true where system <> true
 and schema_id = (select s.id from sys.schemas s where s.name = 'information_schema')
 and name in ('check_constraints','table_constraints');

Running database upgrade commands:
create procedure sys.vacuum(sname string, tname string)
external name sql.vacuum;
create procedure sys.vacuum(sname string, tname string, interval int)
external name sql.vacuum;
create procedure sys.stop_vacuum(sname string, tname string)
external name sql.stop_vacuum;
create function sys.unclosed_result_sets()
returns table(
	"query_id" oid,
	"res_id" int
)
external name sql.unclosed_result_sets;
grant execute on function sys.unclosed_result_sets() to public;
update sys.functions set system = true where system <> true and schema_id = 2000 and name in ('vacuum', 'stop_vacuum', 'unclosed_result_sets');
drop view sys.dependencies_vw cascade;
drop view sys.ids cascade;
CREATE VIEW sys.ids (id, name, schema_id, table_id, table_name, obj_type, sys_table, system) AS
SELECT id, name, cast(null as int) as schema_id, cast(null as int) as table_id, cast(null as varchar(124)) as table_name, 'author' AS obj_type, 'sys.auths' AS sys_table, (name in ('public','sysadmin','monetdb','.snapshot')) AS system FROM sys.auths UNION ALL
SELECT id, name, cast(null as int) as schema_id, cast(null as int) as table_id, cast(null as varchar(124)) as table_name, ifthenelse(system, 'system schema', 'schema'), 'sys.schemas', system FROM sys.schemas UNION ALL
SELECT t.id, name, t.schema_id, t.id as table_id, t.name as table_name, cast(lower(tt.table_type_name) as varchar(40)), 'sys.tables', t.system FROM sys.tables t left outer join sys.table_types tt on t.type = tt.table_type_id UNION ALL
SELECT c.id, c.name, t.schema_id, c.table_id, t.name as table_name, ifthenelse(t.system, 'system column', 'column'), 'sys._columns', t.system FROM sys._columns c JOIN sys._tables t ON c.table_id = t.id UNION ALL
SELECT c.id, c.name, t.schema_id, c.table_id, t.name as table_name, 'column', 'tmp._columns', t.system FROM tmp._columns c JOIN tmp._tables t ON c.table_id = t.id UNION ALL
SELECT k.id, k.name, t.schema_id, k.table_id, t.name as table_name, ifthenelse(t.system, 'system key', 'key'), 'sys.keys', t.system FROM sys.keys k JOIN sys._tables t ON k.table_id = t.id UNION ALL
SELECT k.id, k.name, t.schema_id, k.table_id, t.name as table_name, 'key', 'tmp.keys', t.system FROM tmp.keys k JOIN tmp._tables t ON k.table_id = t.id UNION ALL
SELECT i.id, i.name, t.schema_id, i.table_id, t.name as table_name, ifthenelse(t.system, 'system index', 'index'), 'sys.idxs', t.system FROM sys.idxs i JOIN sys._tables t ON i.table_id = t.id UNION ALL
SELECT i.id, i.name, t.schema_id, i.table_id, t.name as table_name, 'index' , 'tmp.idxs', t.system FROM tmp.idxs i JOIN tmp._tables t ON i.table_id = t.id UNION ALL
SELECT g.id, g.name, t.schema_id, g.table_id, t.name as table_name, ifthenelse(t.system, 'system trigger', 'trigger'), 'sys.triggers', t.system FROM sys.triggers g JOIN sys._tables t ON g.table_id = t.id UNION ALL
SELECT g.id, g.name, t.schema_id, g.table_id, t.name as table_name, 'trigger', 'tmp.triggers', t.system FROM tmp.triggers g JOIN tmp._tables t ON g.table_id = t.id UNION ALL
SELECT f.id, f.name, f.schema_id, cast(null as int) as table_id, cast(null as varchar(124)) as table_name, cast(ifthenelse(f.system, 'system ', '') || lower(ft.function_type_keyword) as varchar(40)), 'sys.functions', f.system FROM sys.functions f left outer join sys.function_types ft on f.type = ft.function_type_id UNION ALL
SELECT a.id, a.name, f.schema_id, a.func_id as table_id, f.name as table_name, cast(ifthenelse(f.system, 'system ', '') || lower(ft.function_type_keyword) || ' arg' as varchar(44)), 'sys.args', f.system FROM sys.args a JOIN sys.functions f ON a.func_id = f.id left outer join sys.function_types ft on f.type = ft.function_type_id UNION ALL
SELECT id, name, schema_id, cast(null as int) as table_id, cast(null as varchar(124)) as table_name, 'sequence', 'sys.sequences', false FROM sys.sequences UNION ALL
SELECT o.id, o.name, pt.schema_id, pt.id, pt.name, 'partition of merge table', 'sys.objects', false FROM sys.objects o JOIN sys._tables pt ON o.sub = pt.id JOIN sys._tables mt ON o.nr = mt.id WHERE mt.type = 3 UNION ALL
SELECT id, sqlname, schema_id, cast(null as int) as table_id, cast(null as varchar(124)) as table_name, 'type', 'sys.types', (sqlname in ('inet','json','url','uuid')) FROM sys.types
 ORDER BY id;
GRANT SELECT ON sys.ids TO PUBLIC;
CREATE VIEW sys.dependencies_vw AS
SELECT d.id, i1.obj_type, i1.name,
       d.depend_id as used_by_id, i2.obj_type as used_by_obj_type, i2.name as used_by_name,
       d.depend_type, dt.dependency_type_name
  FROM sys.dependencies d
  JOIN sys.ids i1 ON d.id = i1.id
  JOIN sys.ids i2 ON d.depend_id = i2.id
  JOIN sys.dependency_types dt ON d.depend_type = dt.dependency_type_id
 ORDER BY id, depend_id;
GRANT SELECT ON sys.dependencies_vw TO PUBLIC;
update sys._tables set system = true where system <> true and schema_id = 2000 and name in ('ids', 'dependencies_vw');

