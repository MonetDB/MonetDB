from MonetDBtesting.sqltest import SQLTestCase

with SQLTestCase() as mdb1:
    with SQLTestCase() as mdb2:
        mdb1.connect(username="monetdb", password="monetdb")
        mdb2.connect(username="monetdb", password="monetdb")
        mdb1.execute('start transaction;').assertSucceeded()
        mdb1.execute("CREATE TABLE integers (i int);").assertSucceeded()
        mdb1.execute("insert into integers values (1),(2),(3),(NULL);").assertSucceeded()
        mdb1.execute("CREATE TABLE longs (i bigint);").assertSucceeded()
        mdb1.execute("CREATE TABLE doubles (d double precision);").assertSucceeded()
        mdb1.execute("insert into longs values (1),(2),(3);").assertSucceeded()
        mdb1.execute("insert into integers values (1),(2),(3);").assertSucceeded()
        mdb1.execute("alter table longs add primary key (i);").assertSucceeded()
        mdb1.execute("CREATE TABLE sys.myvar (c BIGINT);")
        mdb1.execute('commit;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('alter table integers add foreign key(i) references longs(i);').assertSucceeded()
        mdb2.execute('alter table integers add foreign key(i) references longs(i);').assertFailed(err_code="42000", err_message="ALTER TABLE: sys_integers_integers_i_fkey conflicts with another transaction")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute('create trigger ups after delete on integers referencing old row as old_row for each row insert into longs values(0);').assertSucceeded()
        mdb1.execute('create trigger ups2 after delete on integers referencing old row as old_row for each row insert into longs values(10);').assertSucceeded()
        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('create or replace trigger ups after delete on integers referencing old row as old_row for each row insert into longs values(1);').assertSucceeded()
        mdb2.execute('create or replace trigger ups after delete on integers referencing old row as old_row for each row insert into longs values(2);').assertFailed(err_code="42000", err_message="CREATE OR REPLACE TRIGGER: transaction conflict detected")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('drop trigger ups;').assertSucceeded()
        mdb2.execute("alter table doubles add primary key (d)").assertSucceeded()
        mdb2.execute('create or replace trigger ups after delete on integers referencing old row as old_row for each row insert into longs values(3);').assertFailed(err_code="42000", err_message="CREATE OR REPLACE TRIGGER: transaction conflict detected")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('create or replace trigger ups2 after delete on integers referencing old row as old_row for each row insert into longs values(15);').assertSucceeded()
        mdb2.execute('create table floats (f float);').assertSucceeded()
        mdb2.execute("insert into floats values (1),(2),(3);").assertSucceeded()
        mdb2.execute("create index myidx ON floats(f)").assertSucceeded()
        mdb2.execute("alter table floats alter f set not null").assertSucceeded()
        mdb2.execute("alter table floats alter f set default 1").assertSucceeded()
        mdb2.execute('drop trigger ups2;').assertFailed(err_code="42000", err_message="DROP TRIGGER: transaction conflict detected")
        mdb2.execute('rollback;').assertSucceeded()
        mdb1.execute('drop trigger ups2;').assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('CREATE TYPE myurl EXTERNAL NAME url;').assertSucceeded()
        mdb2.execute('CREATE TYPE myurl EXTERNAL NAME url;').assertFailed(err_code="42000", err_message="CREATE TYPE: transaction conflict detected")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute("INSERT INTO sys.myvar VALUES ((SELECT COUNT(*) FROM sys.roles));").assertRowCount(1)
        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('CREATE ROLE myrole;').assertSucceeded()
        mdb2.execute('CREATE ROLE myrole;').assertFailed(err_code="42000", err_message="CREATE ROLE: failed due to conflict with another transaction")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('commit;').assertFailed() # Not sure here

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('CREATE schema mysch AUTHORIZATION myrole;').assertSucceeded()
        mdb2.execute('CREATE schema mysch AUTHORIZATION myrole;').assertFailed(err_code="42000", err_message="CREATE SCHEMA: transaction conflict detected")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute("CREATE USER dummyuser WITH PASSWORD 'ups' NAME 'ups' SCHEMA mysch;").assertSucceeded()
        mdb2.execute("CREATE USER dummyuser WITH PASSWORD 'ups' NAME 'ups' SCHEMA mysch;").assertFailed(err_code="42M31", err_message="CREATE USER: user 'dummyuser' already exists")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute("GRANT myrole TO dummyuser;").assertSucceeded()
        mdb2.execute("GRANT myrole TO dummyuser;").assertFailed(err_code="42000", err_message="GRANT: failed due to conflict with another transaction")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('commit;').assertFailed() # Not sure here
        # The current setup gives a duplicate entry in the 'roles' table, so that cannot happen
        mdb1.execute('SELECT CAST(COUNT(*) - (SELECT c FROM sys.myvar) AS BIGINT) FROM sys.roles;').assertSucceeded().assertDataResultMatch([(1,)])

        mdb1.execute('start transaction;').assertSucceeded()
        mdb1.execute('DROP USER dummyuser;').assertSucceeded()
        mdb1.execute('DROP SCHEMA mysch;').assertSucceeded()
        mdb1.execute('DROP ROLE myrole;').assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()

        mdb1.execute("TRUNCATE sys.myvar;")
        mdb1.execute("INSERT INTO sys.myvar VALUES ((SELECT COUNT(*) FROM sys.comments));").assertRowCount(1)
        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('COMMENT ON TABLE "sys"."integers" IS \'something\';').assertSucceeded()
        mdb2.execute('COMMENT ON TABLE "sys"."integers" IS \'somethingelse\';').assertFailed(err_code="42000", err_message="Comment on failed due to conflict with another transaction")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('commit;').assertFailed() # Not sure here
        # The current setup gives a duplicate entry in the 'comments' table, so that cannot happen
        mdb1.execute('SELECT CAST(COUNT(*) - (SELECT c FROM sys.myvar) AS BIGINT) FROM sys.comments;').assertSucceeded().assertDataResultMatch([(1,)])

        # Since Jan2022 we allow concurrent analyze statements
        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('ANALYZE "sys"."integers";').assertSucceeded()
        mdb2.execute('ANALYZE "sys"."integers";').assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('commit;').assertSucceeded()

        mdb1.execute('create merge table parent(a int);').assertSucceeded()
        mdb1.execute('create table child1(c int);').assertSucceeded()
        mdb1.execute('create table child2(c int);').assertSucceeded()
        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute("ALTER TABLE parent ADD TABLE child1;").assertSucceeded()
        mdb2.execute("ALTER TABLE parent ADD TABLE child2;").assertFailed(err_code="42000", err_message="ALTER TABLE: transaction conflict detected")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()
        mdb1.execute('start transaction;').assertSucceeded()
        mdb1.execute('ALTER TABLE parent DROP TABLE child1;').assertSucceeded()
        mdb1.execute('DROP TABLE parent;').assertSucceeded()
        mdb1.execute('DROP TABLE child1;').assertSucceeded()
        mdb1.execute('DROP TABLE child2;').assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()

        mdb1.execute('create merge table parent(a int);').assertSucceeded()
        mdb1.execute('create table child(c int);').assertSucceeded()
        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute("ALTER TABLE parent ADD TABLE child;").assertSucceeded()
        mdb2.execute("ALTER TABLE parent ADD TABLE child;").assertFailed(err_code="42000", err_message="ALTER TABLE: transaction conflict detected")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()
        mdb1.execute('start transaction;').assertSucceeded()
        mdb1.execute('ALTER TABLE parent DROP TABLE child;').assertSucceeded()
        mdb1.execute('DROP TABLE parent;').assertSucceeded()
        mdb1.execute('DROP TABLE child;').assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()

        mdb1.execute('create merge table parent(a int) PARTITION BY RANGE ON (a);').assertSucceeded()
        mdb1.execute('create table child1(c int);').assertSucceeded()
        mdb1.execute('create table child2(c int);').assertSucceeded()
        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute("ALTER TABLE parent ADD TABLE child1 AS PARTITION FROM '1' TO '2';").assertSucceeded()
        mdb2.execute('create table myx (a int);').assertSucceeded()
        mdb2.execute('drop table myx;').assertSucceeded()
        mdb2.execute("ALTER TABLE parent ADD TABLE child2 AS PARTITION FROM '0' TO '4';").assertFailed(err_code="42000", err_message="ALTER TABLE: failed due to conflict with another transaction")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()
        mdb1.execute('start transaction;').assertSucceeded()
        mdb1.execute('ALTER TABLE parent DROP TABLE child1;').assertSucceeded()
        mdb1.execute('DROP TABLE parent;').assertSucceeded()
        mdb1.execute('DROP TABLE child1;').assertSucceeded()
        mdb1.execute('DROP TABLE child2;').assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()

        mdb1.execute('create merge table parent1(a int) PARTITION BY RANGE ON (a);').assertSucceeded()
        mdb1.execute('create merge table parent2(a int) PARTITION BY RANGE ON (a);').assertSucceeded()
        mdb1.execute('create table child(c int);').assertSucceeded()
        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb2.execute('create table myx (a int);').assertSucceeded()
        mdb2.execute('drop table myx;').assertSucceeded()
        mdb1.execute("ALTER TABLE parent1 ADD TABLE child AS PARTITION FROM '1' TO '2';").assertSucceeded()
        mdb2.execute("ALTER TABLE parent2 ADD TABLE child AS PARTITION FROM '0' TO '4';").assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('commit;').assertFailed(err_code="40001", err_message="COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead")
        mdb1.execute('start transaction;').assertSucceeded()
        mdb1.execute('ALTER TABLE parent1 DROP TABLE child;').assertSucceeded()
        mdb1.execute('DROP TABLE parent1;').assertSucceeded()
        mdb1.execute('DROP TABLE parent2;').assertSucceeded()
        mdb1.execute('DROP TABLE child;').assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('CREATE FUNCTION myfunc() RETURNS INT RETURN 1;').assertSucceeded()
        mdb2.execute('create table myx (a int);').assertSucceeded()
        mdb2.execute('drop table myx;').assertSucceeded()
        mdb2.execute('CREATE FUNCTION myfunc() RETURNS INT RETURN 2;').assertFailed(err_code="42000", err_message="CREATE FUNCTION: transaction conflict detected")
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('rollback;').assertSucceeded()
        mdb1.execute('DROP FUNCTION myfunc;').assertSucceeded()

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('insert into longs values (4),(5),(6);').assertSucceeded()
        mdb2.execute('insert into longs values (5),(6),(7);').assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('commit;').assertFailed(err_code="40001", err_message="COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead") # Duplicate values on the primary key 'i' from 'longs'
        mdb1.execute('SELECT i FROM longs order by i;').assertSucceeded().assertDataResultMatch([(1,),(2,),(3,),(4,),(5,),(6,)])

        mdb1.execute('start transaction;').assertSucceeded()
        mdb2.execute('start transaction;').assertSucceeded()
        mdb1.execute('delete from longs where i > 3;').assertRowCount(3)
        mdb2.execute('insert into integers values (4);').assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()
        mdb2.execute('commit;').assertFailed(err_code="40001", err_message="COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead") # The foreign key value 4 doesn't exist on the primary key
        mdb1.execute('SELECT i FROM longs order by i;').assertSucceeded().assertDataResultMatch([(1,),(2,),(3,)])

        mdb1.execute('start transaction;').assertSucceeded()
        mdb1.execute('DROP TYPE myurl;').assertSucceeded()
        mdb1.execute("drop table integers;").assertSucceeded()
        mdb1.execute("drop table longs;").assertSucceeded()
        mdb1.execute("drop table doubles;").assertSucceeded()
        mdb1.execute('DROP TABLE sys.myvar;').assertSucceeded()
        mdb1.execute('commit;').assertSucceeded()
