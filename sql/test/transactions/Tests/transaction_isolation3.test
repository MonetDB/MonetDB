@connection(id=mdb1, username=monetdb, password=monetdb)
statement ok
create table w (i int)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2, username=monetdb, password=monetdb)
statement ok
start transaction

@connection(id=mdb1)
statement ok
alter table w add column j int

@connection(id=mdb2)
statement error 42000!ALTER TABLE: sys_w_j conflicts with another transaction
alter table w add column j int

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement ok
rollback

@connection(id=mdb1)
statement ok
CREATE TABLE notpossible (i int, j int)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
insert into notpossible values (5,1),(5,2),(5,3)

@connection(id=mdb2)
statement ok
alter table notpossible add primary key (i)

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
CREATE TABLE integers (i int, j int)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
alter table integers add primary key (i)

@connection(id=mdb2)
statement ok
insert into integers values (5,1),(5,2),(5,3)

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
insert into integers values (6,NULL),(7,NULL),(8,NULL)

@connection(id=mdb2)
statement ok
alter table integers alter j set not null

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
truncate table integers

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
alter table integers alter j set not null

@connection(id=mdb2)
statement ok
insert into integers values (6,NULL),(7,NULL),(8,NULL)

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
create schema ups

@connection(id=mdb1)
statement ok
create merge table parent1(a int) PARTITION BY RANGE ON (a)

@connection(id=mdb1)
statement ok
create table child1(c int)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
ALTER TABLE parent1 ADD TABLE child1 AS PARTITION FROM '1' TO '2'

@connection(id=mdb2)
statement ok
alter table child1 set schema ups

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
create merge table parent2(a int) PARTITION BY RANGE ON (a)

@connection(id=mdb1)
statement ok
create table child2(c int)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
ALTER TABLE parent2 ADD TABLE child2 AS PARTITION FROM '1' TO '2'

@connection(id=mdb2)
statement ok
insert into child2 values (3)

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
create table x(y int, z int)

@connection(id=mdb1)
statement ok
insert into x values (1, 1)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
create view myv(a,b) as select y, z from x

@connection(id=mdb2)
statement ok
alter table x drop column y

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
query II nosort
select * from myv
----
1
1

@connection(id=mdb1)
statement ok
create table ups.no (a int, b int)

@connection(id=mdb1)
statement ok
insert into ups.no values (2, 2)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
create function sys.another() returns table(i int) begin return select a from ups.no; end

@connection(id=mdb2)
statement ok
alter table ups.no drop column a

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
query I nosort
select * from another()
----
2

@connection(id=mdb1)
statement ok
CREATE TABLE y (i int)

@connection(id=mdb1)
statement ok
CREATE TABLE integers2 (i int, j int)

@connection(id=mdb1)
statement ok
insert into integers2 values (1,1),(2,2),(3,3)

@connection(id=mdb1)
statement ok
alter table integers2 add primary key (i)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
alter table y add constraint nono foreign key(i) references integers2(i)

@connection(id=mdb2)
statement ok
insert into y values (4)

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
create function pain() returns int return 1

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
create view myv2(a) as select pain()

@connection(id=mdb2)
statement ok
drop function pain()

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
query I nosort
select * from myv2
----
1

@connection(id=mdb1)
statement ok
CREATE TABLE longs (i bigint)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
create or replace trigger myt after insert on integers referencing new row as new_row for each row insert into longs values(16)

@connection(id=mdb2)
statement ok
drop table longs

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
insert into integers values (4,4)

@connection(id=mdb1)
query I nosort
select * from longs
----
16

@connection(id=mdb1)
statement ok
create table z (i int)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
create view myv3(a) as select i from z

@connection(id=mdb2)
statement ok
alter table z rename to zz

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
create table zzz (i int)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
alter table zzz rename to aaa

@connection(id=mdb2)
statement ok
create view myv8(a) as select i from zzz

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
create table ww(y int, z int)

@connection(id=mdb1)
statement ok
insert into ww values (1, 1)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
create view myv4(a,b) as select y, z from ww

@connection(id=mdb2)
statement ok
alter table ww rename column y to yy

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
query II nosort
select * from myv4
----
1
1

@connection(id=mdb1)
statement ok
create table bbb(y int, z int)

@connection(id=mdb1)
statement ok
insert into bbb values (1, 1)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
alter table bbb rename column y to yy

@connection(id=mdb2)
statement ok
create view myv9(a,b) as select y, z from bbb

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
create table zz(y int, z int)

@connection(id=mdb1)
statement ok
insert into zz values (1, 1)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
create view myv5(a,b) as select y, z from zz

@connection(id=mdb2)
statement ok
alter table zz set schema ups

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
query II nosort
select * from myv5
----
1
1

@connection(id=mdb1)
statement ok
create table xx(y int, z int)

@connection(id=mdb1)
statement ok
insert into xx values (1, 1)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
alter table xx set schema ups

@connection(id=mdb2)
statement ok
create view myv6(a,b) as select y, z from sys.xx

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
create table fine(y int, z int)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
alter table fine drop column y

@connection(id=mdb2)
statement ok
create view myv7(a,b) as select y, z from sys.fine

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
create table fine2(y int, z int)

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb2)
statement ok
start transaction

@connection(id=mdb1)
statement ok
create view myv10(a,b) as select y, z from fine2

@connection(id=mdb2)
statement ok
alter table fine2 drop column y

@connection(id=mdb1)
statement ok
commit

@connection(id=mdb2)
statement error 40001!COMMIT: transaction is aborted because of concurrency conflicts, will ROLLBACK instead
commit

@connection(id=mdb1)
statement ok
start transaction

@connection(id=mdb1)
statement ok
DROP TABLE w

@connection(id=mdb1)
statement ok
drop table notpossible

@connection(id=mdb1)
statement ok
drop table y

@connection(id=mdb1)
statement ok
drop table integers2

@connection(id=mdb1)
statement ok
drop trigger myt

@connection(id=mdb1)
statement ok
drop table longs

@connection(id=mdb1)
statement ok
drop table integers

@connection(id=mdb1)
statement ok
drop function another

@connection(id=mdb1)
statement ok
DROP VIEW myv5

@connection(id=mdb1)
statement ok
drop table zz

@connection(id=mdb1)
statement ok
drop table ups.xx

@connection(id=mdb1)
statement ok
drop table ups.no

@connection(id=mdb1)
statement ok
drop schema ups

@connection(id=mdb1)
statement ok
ALTER TABLE parent1 DROP TABLE child1

@connection(id=mdb1)
statement ok
DROP TABLE parent1

@connection(id=mdb1)
statement ok
DROP TABLE child1

@connection(id=mdb1)
statement ok
DROP TABLE parent2

@connection(id=mdb1)
statement ok
DROP TABLE child2

@connection(id=mdb1)
statement ok
DROP VIEW myv

@connection(id=mdb1)
statement ok
DROP TABLE x

@connection(id=mdb1)
statement ok
DROP VIEW myv3

@connection(id=mdb1)
statement ok
DROP TABLE z

@connection(id=mdb1)
statement ok
DROP VIEW myv4

@connection(id=mdb1)
statement ok
DROP TABLE ww

@connection(id=mdb1)
statement ok
DROP VIEW myv2

@connection(id=mdb1)
statement ok
DROP FUNCTION pain()

@connection(id=mdb1)
statement ok
DROP TABLE fine

@connection(id=mdb1)
statement ok
DROP TABLE aaa

@connection(id=mdb1)
statement ok
DROP TABLE bbb

@connection(id=mdb1)
statement ok
DROP VIEW myv10

@connection(id=mdb1)
statement ok
DROP TABLE fine2

@connection(id=mdb1)
statement ok
commit

