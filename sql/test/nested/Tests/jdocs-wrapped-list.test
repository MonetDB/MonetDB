## in this test we the list member of the json document is wrapped
## around act_list composite type e.g. "actions":{"list":[...]}

statement ok
create type elem_t as (key text, val int)

statement ok
create type list_obj_t as (elem elem_t)

statement ok
create type act_list as (list list_obj_t[])

statement ok
create type jdoc_t as (name text, id int, actions act_list)

statement ok
create table jdocs (jd jdoc_t)

query T nosort
select cast('{"name":"test_one","id":42,"actions":{"list":[{"elem":{"key":"ping","val":10}},{"elem":{"key":"pong","val":11}}]}}' as json)
----
{"name":"test_one","id":42,"actions":{"list":[{"elem":{"key":"ping","val":10}},{"elem":{"key":"pong","val":11}}]}}

statement ok
insert into jdocs select cast('{"name":"test_one","id":42,"actions":{"list":[{"elem":{"key":"ping","val":10}},{"elem":{"key":"pong","val":11}}]}}' as json)

query T nosort
select cast('{"name":"test_two","id":43,"actions":{"list":[{"elem":{"key":"tic","val":20}}, {"elem":{"key":"tac","val":21}}] }}' as json)
----
{"name":"test_two","id":43,"actions":{"list":[{"elem":{"key":"tic","val":20}},{"elem":{"key":"tac","val":21}}]}}

statement ok
insert into jdocs select cast('{"name":"test_two","id":43,"actions":{"list":[{"elem":{"key":"tic","val":20}}, {"elem":{"key":"tac","val":21}}] }}' as json)

query TIT nosort
select jd.name, jd.id, ua.elem from jdocs, unnest(jd.actions.list) as ua
----
test_one
42
("ping", 10)
test_one
42
("pong", 11)
test_two
43
("tic", 20)
test_two
43
("tac", 21)

query TITI nosort
select jd.name, jd.id, ua.elem.key, ua.elem.val from jdocs, unnest(jd.actions.list) as ua
----
test_one
42
ping
10
test_one
42
pong
11
test_two
43
tic
20
test_two
43
tac
21

