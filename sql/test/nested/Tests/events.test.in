statement ok
CREATE TYPE kv AS (
    key VARCHAR,
    value VARCHAR
)

statement ok
CREATE TYPE oelement AS (
    type VARCHAR,
    id VARCHAR,
    attributes kv[]
)

statement ok
CREATE TYPE ecommerce_type AS (
    actionfields kv[],
    objects oelement[]
)

statement ok
CREATE TABLE events(
    eventid VARCHAR,
    jodpsid VARCHAR,
    jodpuid VARCHAR,
    event VARCHAR,
    "timestamp" TIMESTAMP WITH TIME ZONE,
    label VARCHAR,
    value INTEGER,
    screen_height VARCHAR,
    screen_width VARCHAR,
    user_agent VARCHAR,
    language VARCHAR,
    browser VARCHAR,
    ga_cid VARCHAR,        -- Google Analytics Client ID
    category VARCHAR,
    action VARCHAR,
    location kv[],
    "user" kv[],           -- Use quotes as 'user' is a reserved keyword
    event_context kv[],
    component kv[],
    queries kv[],
    ecommerce ecommerce_type,
    timestamp_processed TIMESTAMP WITH TIME ZONE,
    banner kv[],
    bloomreach kv[],
    promos kv[],
    search kv[],
    filters kv[],
    message kv[],
    device kv[]
)

statement ok
insert into events select * from read_ndjson(r'$TSTSRCDIR/events.ndjson')

statement ok
CREATE OR REPLACE FUNCTION pcre_match(s string, pattern string) RETURNS boolean EXTERNAL NAME pcre."match"

# this is not exactly the functionality intended
# in the large query to follow
statement ok
create or replace function REGEXP_EXTRACT(s string, pattern string)
returns string
begin
    if (pcre_match(s, pattern))
    then return s;
    else return null;
    end if;
end

query TTTTTT
WITH base AS (
    SELECT
        timestamp,
        user_agent,
        event,
        CASE WHEN l.key = 'pageType' THEN l.value END AS pagetype,
        CASE WHEN u.key = 'customerType' THEN u.value END AS customertype,
        CASE WHEN u.key = 'customerid' THEN u.value END AS customerid,
        CASE WHEN eal.key = 'brand' THEN eal.value END AS ecom_attributes_brand
    FROM events
        left join unnest(location) as l on true
        left join unnest(ecommerce.objects) as eol on true
        left join unnest(eol.attributes) as eal on true
        cross join unnest("user") as u
    WHERE cast(timestamp as date) = date'2024-11-30')
, last_datapoints AS (
    SELECT
        customerid,
        timestamp,
        event,
        max(pagetype) as pagetype,
        max(user_agent) as user_agent,
        max(customertype) as customertype,
        max(ecom_attributes_brand) as ecom_attributes_brand
    FROM base
    group by customerid, timestamp, event
)
select event,
    IFNULL(REGEXP_EXTRACT(user_agent, '.*Edg.*'), 'No edge') as edge_user_agent,
    cast(timestamp as date) as date,
    customertype,
    count(distinct(customerid)) as customers,
    count(distinct(pagetype)) as pagetypes
from (
    SELECT *,
    ROW_NUMBER() OVER (PARTITION BY event ORDER BY timestamp ASC) as row_num
    FROM last_datapoints
)
where row_num=1
group by 1, 2, 3, 4
order by 3 desc
----
