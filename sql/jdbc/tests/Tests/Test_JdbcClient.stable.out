stdout of test 'Test_JdbcClient` in directory 'sql/jdbc/tests` itself:


# 18:15:39 >  
# 18:15:39 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=31817" "--set" "mapi_usock=/var/tmp/mtest-15181/.s.monetdb.31817" "--set" "monet_prompt=" "--forcemito" "--dbpath=/export/scratch1/dinther/INSTALL/var/MonetDB/mTests_sql_jdbc_tests" "--set" "embedded_c=true"
# 18:15:39 >  

# MonetDB 5 server v11.33.12 (hg id: d8c48170bbe6+)
# This is an unreleased version
# Serving database 'mTests_sql_jdbc_tests', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 128bit integers
# Found 31.305 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2020 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://catskill.da.cwi.nl:31817/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-15181/.s.monetdb.31817
# MonetDB/GIS module loaded
# SQL catalog created, loading sql scripts once
# MonetDB/SQL module loaded


# 18:15:40 >  
# 18:15:40 >  "./Test_JdbcClient.SQL.sh" "Test_JdbcClient"
# 18:15:40 >  


Usage java -jar jdbcclient.jre8.jar
		[-h host[:port]] [-p port] [-f file] [-u user]
		[-l language] [-d database] [-e] [-D [table]] [-X<opt>]
		| [--help] | [--version]
or using long option equivalents --host --port --file --user --language
--dump --echo --database.
Arguments may be written directly after the option like -p50000.

If no host and port are given, localhost and 50000 are assumed.
An .monetdb file may exist in the user's home directory.  This file can contain
preferences to use each time JdbcClient is started.  Options given on the
command line override the preferences file.  The .monetdb file syntax is
<option>=<value> where option is one of the options host, port, file, mode
debug, or password.  Note that the last one is perilous and therefore not
available as command line option.
If no input file is given using the -f flag, an interactive session is
started on the terminal.

OPTIONS
-h --host     The hostname of the host that runs the MonetDB database.  A port
              number can be supplied by use of a colon, i.e. -h somehost:12345.
-p --port     The port number to connect to.
-f --file     A file name to use either for reading or writing.  The file will
              be used for writing when dump mode is used (-D --dump).  In read
              mode, the file can also be an URL pointing to a plain text file
              that is optionally gzip compressed.
-u --user     The username to use when connecting to the database.
-d --database Try to connect to the given database (only makes sense if
              connecting to monetdbd).
-l --language Use the given language, defaults to 'sql'.
--help        This help screen.
--version     Display driver version and exit.
-e --echo     Also outputs the contents of the input file, if any.
-q --quiet    Suppress printing the welcome header.
-D --dump     Dumps the given table(s), or the complete database if none given.
-Xoutput      The output mode when dumping.  Default is sql, xml may be used for
              an experimental XML output.
-Xhash        Use the given hash algorithm during challenge response.  Supported
              algorithm names: SHA1, MD5, plain.
-Xdebug       Writes a transmission log to disk for debugging purposes.  If a
              file name is given, it is used, otherwise a file called
              monet<timestamp>.log is created.  A given file never be
              overwritten; instead a unique variation of the file is used.
-Xbatching    Indicates that a batch should be used instead of direct
              communication with the server for each statement.  If a number is
              given, it is used as batch size.  i.e. 8000 would execute the
              contents on the batch after each 8000 statements read.  Batching
              can greatly speedup the process of restoring a database dump.

# 18:15:40 >  
# 18:15:40 >  java nl.cwi.monetdb.client.JdbcClient -h catskill -p 31817 -d mTests_sql_jdbc_tests -f /export/scratch1/dinther/dev/sql/jdbc/tests/Tests/JdbcClient_create_tables.sql
# 18:15:40 >  

Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful

# 18:15:40 >  
# 18:15:40 >  java nl.cwi.monetdb.client.JdbcClient -h catskill -p 31817 -d mTests_sql_jdbc_tests -f /export/scratch1/dinther/dev/sql/jdbc/tests/Tests/JdbcClient_inserts_selects.sql
# 18:15:40 >  

Operation successful
1 affected row
1 affected row
1 affected row
1 affected row
1 affected row
1 affected row
1 affected row
1 affected row
1 affected row
1 affected row
1 affected row
1 affected row
1 affected row
1 affected row
+------+---------+-----------+--------+----------+
| id   | subject | predicate | object | explicit |
+======+=========+===========+========+==========+
|    1 |       1 |         1 |      1 | false    |
|    2 |       1 |         1 |      2 | false    |
|    3 |       1 |         2 |      1 | false    |
|    4 |       2 |         1 |      1 | false    |
|    5 |       1 |         2 |      2 | false    |
|    6 |       2 |         2 |      1 | false    |
|    7 |       2 |         2 |      2 | false    |
+------+---------+-----------+--------+----------+
7 rows
+------+---------+-----------+--------+
| id   | subject | predicate | object |
+======+=========+===========+========+
|    1 |       1 |         1 |      1 |
|    2 |       2 |         2 |      2 |
|    3 |       1 |         2 |      2 |
|    4 |       2 |         2 |      1 |
|    5 |       2 |         1 |      1 |
|    6 |       1 |         2 |      1 |
|    7 |       1 |         1 |      2 |
+------+---------+-----------+--------+
7 rows
7 affected rows
+------+---------+-----------+--------+----------+
| id   | subject | predicate | object | explicit |
+======+=========+===========+========+==========+
|    1 |       1 |         1 |      1 | false    |
|    2 |       1 |         1 |      2 | false    |
|    3 |       1 |         2 |      1 | false    |
|    4 |       2 |         1 |      1 | false    |
|    5 |       1 |         2 |      2 | false    |
|    6 |       2 |         2 |      1 | false    |
|    7 |       2 |         2 |      2 | false    |
+------+---------+-----------+--------+----------+
7 rows
+---------+--------+-----------+-----------+
| subject | counts | min_value | max_value |
+=========+========+===========+===========+
|       1 |      4 |         1 |         1 |
|       2 |      3 |         2 |         2 |
+---------+--------+-----------+-----------+
2 rows
+-----------+--------+-----------+-----------+
| predicate | counts | min_value | max_value |
+===========+========+===========+===========+
|         1 |      3 |         1 |         1 |
|         2 |      4 |         2 |         2 |
+-----------+--------+-----------+-----------+
2 rows
+--------+--------+-----------+-----------+
| object | counts | min_value | max_value |
+========+========+===========+===========+
|      1 |      4 |         1 |         1 |
|      2 |      3 |         2 |         2 |
+--------+--------+-----------+-----------+
2 rows
Operation successful

# 18:15:40 >  
# 18:15:40 >  java nl.cwi.monetdb.client.JdbcClient -h catskill -p 31817 -d mTests_sql_jdbc_tests -D
# 18:15:40 >  

START TRANSACTION;

SET SCHEMA "sys";

CREATE MERGE TABLE "sys"."mt" (
	"id" INTEGER       NOT NULL,
	"nm" VARCHAR(123)  NOT NULL,
	CONSTRAINT "mt_id_pkey" PRIMARY KEY ("id")
);

CREATE REMOTE TABLE "sys"."remt" (
	"id" INTEGER       NOT NULL,
	"nm" VARCHAR(123)  NOT NULL,
	CONSTRAINT "remt_id_pkey" PRIMARY KEY ("id")
) ON 'mapi:monetdb://localhost:42001/mdb3';

CREATE REPLICA TABLE "sys"."replt" (
	"id" INTEGER       NOT NULL,
	"nm" VARCHAR(123)  NOT NULL,
	CONSTRAINT "replt_id_pkey" PRIMARY KEY ("id")
);

CREATE STREAM TABLE "sys"."strt" (
	"id" INTEGER       NOT NULL,
	"nm" VARCHAR(123)  NOT NULL,
	CONSTRAINT "strt_id_pkey" PRIMARY KEY ("id")
);


CREATE TABLE "sys"."allnewtriples" (
	"id"        INTEGER       NOT NULL,
	"subject"   INTEGER       NOT NULL,
	"predicate" INTEGER       NOT NULL,
	"object"    INTEGER       NOT NULL,
	"explicit"  BOOLEAN       NOT NULL,
	CONSTRAINT "allnewtriples_id_pkey" PRIMARY KEY ("id"),
	CONSTRAINT "unique_key" UNIQUE ("subject", "predicate", "object")
);
CREATE INDEX "allnewtriples_object_idx" ON "sys"."allnewtriples" ("object");
CREATE INDEX "allnewtriples_predicate_idx" ON "sys"."allnewtriples" ("predicate");
CREATE INDEX "allnewtriples_subject_idx" ON "sys"."allnewtriples" ("subject");

INSERT INTO "sys"."allnewtriples" VALUES (1, 1, 1, 1, false);
INSERT INTO "sys"."allnewtriples" VALUES (2, 1, 1, 2, false);
INSERT INTO "sys"."allnewtriples" VALUES (3, 1, 2, 1, false);
INSERT INTO "sys"."allnewtriples" VALUES (4, 2, 1, 1, false);
INSERT INTO "sys"."allnewtriples" VALUES (5, 1, 2, 2, false);
INSERT INTO "sys"."allnewtriples" VALUES (6, 2, 2, 1, false);
INSERT INTO "sys"."allnewtriples" VALUES (7, 2, 2, 2, false);

CREATE TABLE "sys"."foreign" (
	"id"        INTEGER       NOT NULL,
	"subject"   INTEGER       NOT NULL,
	"predicate" INTEGER       NOT NULL,
	"object"    INTEGER       NOT NULL,
	CONSTRAINT "foreign_id_fkey" FOREIGN KEY ("id") REFERENCES "sys"."allnewtriples" ("id"),
	CONSTRAINT "foreign_subject_predicate_object_fkey" FOREIGN KEY ("subject", "predicate", "object") REFERENCES "sys"."allnewtriples" ("subject", "predicate", "object")
);

INSERT INTO "sys"."foreign" VALUES (1, 1, 1, 1);
INSERT INTO "sys"."foreign" VALUES (2, 2, 2, 2);
INSERT INTO "sys"."foreign" VALUES (3, 1, 2, 2);
INSERT INTO "sys"."foreign" VALUES (4, 2, 2, 1);
INSERT INTO "sys"."foreign" VALUES (5, 2, 1, 1);
INSERT INTO "sys"."foreign" VALUES (6, 1, 2, 1);
INSERT INTO "sys"."foreign" VALUES (7, 1, 1, 2);

CREATE TABLE "sys"."triples" (
	"id"        INTEGER       NOT NULL,
	"subject"   INTEGER       NOT NULL,
	"predicate" INTEGER       NOT NULL,
	"object"    INTEGER       NOT NULL,
	"explicit"  BOOLEAN       NOT NULL,
	CONSTRAINT "triples_subject_predicate_object_unique" UNIQUE ("subject", "predicate", "object")
);
CREATE INDEX "triples_object_idx" ON "sys"."triples" ("object");
CREATE INDEX "triples_predicate_idx" ON "sys"."triples" ("predicate");
CREATE INDEX "triples_predicate_object_idx" ON "sys"."triples" ("predicate", "object");
CREATE INDEX "triples_subject_idx" ON "sys"."triples" ("subject");
CREATE INDEX "triples_subject_object_idx" ON "sys"."triples" ("subject", "object");
CREATE INDEX "triples_subject_predicate_idx" ON "sys"."triples" ("subject", "predicate");

INSERT INTO "sys"."triples" VALUES (1, 1, 1, 1, false);
INSERT INTO "sys"."triples" VALUES (2, 1, 1, 2, false);
INSERT INTO "sys"."triples" VALUES (3, 1, 2, 1, false);
INSERT INTO "sys"."triples" VALUES (4, 2, 1, 1, false);
INSERT INTO "sys"."triples" VALUES (5, 1, 2, 2, false);
INSERT INTO "sys"."triples" VALUES (6, 2, 2, 1, false);
INSERT INTO "sys"."triples" VALUES (7, 2, 2, 2, false);

create or replace view object_stats as select "object", cast(count(*) as bigint) as counts, min("object") as min_value, max("object") as max_value from "triples" group by "object" order by "object"
;

create view predicate_stats as select "predicate", cast(count(*) as bigint) as counts, min("predicate") as min_value, max("predicate") as max_value from "triples" group by "predicate" order by "predicate"
;

create view subject_stats as select "subject", cast(count(*) as bigint) as counts, min("subject") as min_value, max("subject") as max_value from "triples" group by "subject" order by "subject"
;

COMMIT;

# 18:15:41 >  
# 18:15:41 >  java nl.cwi.monetdb.client.JdbcClient -h catskill -p 31817 -d mTests_sql_jdbc_tests -f /export/scratch1/dinther/dev/sql/jdbc/tests/Tests/JdbcClient_drop_tables.sql
# 18:15:41 >  

Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful
Operation successful

# 18:15:41 >  
# 18:15:41 >  "Done."
# 18:15:41 >  

