statement ok
i1 := inet.new("127.0.0.1")

query T rowsort
io.print(i1)
----
127.0.0.1

statement ok
i2 := inet.new("192.168.0.0/24")

query T rowsort
io.print(i2)
----
192.168.0.0/24

statement ok
i3 := inet.new("192.168/16")

query T rowsort
io.print(i3)
----
192.168.0.0/16

statement ok
i4 := inet.new("192.168.0.3/24")

query T rowsort
io.print(i4)
----
192.168.0.3/24

query T nosort
i5 := inet.new("/0");
catch ParseException:str;
io.printf("Caught parse exception\n");
exit ParseException;
----
Caught parse exception

query T rowsort
io.print(i5)
----
NULL

statement ok
i6 := inet.new("127/32")

query T rowsort
io.print(i6)
----
127.0.0.0

statement ok
i7 := inet.new("127.0.0.0")

query T rowsort
io.print(i7)
----
127.0.0.0

statement ok
e := inet.<(i2, i3)

query T rowsort
io.print(e)
----
false

statement ok
e := inet.>(i2, i3)

query T rowsort
io.print(e)
----
true

statement ok
e := inet.=(i6, i1)

query T rowsort
io.print(e)
----
false

statement ok
e := inet.=(i6, i7)

query T rowsort
io.print(e)
----
true

statement ok
e := inet.<<(i4, i3)

query T rowsort
io.print(e)
----
true

statement ok
e := inet.>>=(i6, i7)

query T rowsort
io.print(e)
----
true

