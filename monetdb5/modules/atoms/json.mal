# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2020 MonetDB B.V.

atom json:str;

command fromstr()
address JSONfromString
comment "Validate a string to be JSON compliant. A NOOP if valid json, NULL otherwise.";

command tostr()
address JSONtoString
comment "Convert JSON to its string equivalent. Dealing with escape characters";

command new(j:str):json
address JSONstr2json
comment "Convert string to its JSON. Dealing with escape characters";

command calc.json(j:str):json
address JSONstr2json
comment "Convert string to its JSON. Dealing with escape characters";

command calc.json(j:json):json
address JSONstr2json
comment "Convert JSON to JSON. Dealing with escape characters";

command str(j:json):str
address JSONjson2str
comment "Convert JSON to its string equivalent. Dealing with escape characters";

command text(j:json):str
address JSONjson2text
comment "Convert JSON values to their plain string equivalent.";

command text(j:json,s:str):str
address JSONjson2textSeparator
comment "Convert JSON values to their plain string equivalent, injecting a separator.";

command number(j:json):dbl
address JSONjson2number
comment "Convert simple JSON values to a double, return nil upon error.";

command integer(j:json):lng
address JSONjson2integer
comment "Convert simple JSON values to an integer, return nil upon error.";

pattern dump(j:json):void
address JSONdump;

command filter(name:json, pathexpr:str) :json
address JSONfilter
comment "Filter all members of an object by a path expression, returning an array.
Non-matching elements are skipped.";

command filter(name:json, idx:bte) :json
address JSONfilterArray_bte;
command filter(name:json, idx:bte,other:str) :json
address JSONfilterArrayDefault_bte;
command filter(name:json, idx:sht) :json
address JSONfilterArray_sht;
command filter(name:json, idx:sht,other:str) :json
address JSONfilterArrayDefault_sht;
command filter(name:json, idx:int) :json
address JSONfilterArray_int;
command filter(name:json, idx:int, other:str) :json
address JSONfilterArrayDefault_int;
command filter(name:json, idx:lng) :json
address JSONfilterArray_lng;
command filter(name:json, idx:lng, other:str) :json
address JSONfilterArrayDefault_lng
comment "Extract a single array element";

command isvalid(val:json):bit
address JSONisvalid
comment "Validate the string as a valid JSON document";

command isobject(val:json):bit
address JSONisobject
comment "Validate the string as a valid JSON object";

command isarray(val:json):bit
address JSONisarray
comment "Validate the string as a valid JSON array";

command isvalid(val:str):bit
address JSONisvalid
comment "Validate the string as a valid JSON document";

command isobject(val:str):bit
address JSONisobject
comment "Validate the string as a valid JSON object";

command isarray(val:str):bit
address JSONisarray
comment "Validate the string as a valid JSON array";

command length(val:json):int
address JSONlength
comment "Returns the number of elements in the outermost JSON object.";

pattern unfold(val:json)(k:bat[:str],v:bat[:json])
address JSONunfold
comment "Expands the outermost JSON object into key-value pairs.";

pattern unfold(val:json)(o:bat[:oid],k:bat[:str],v:bat[:json])
address JSONunfold
comment "Expands the outermost JSON object into key-value pairs.";

pattern fold(o:bat[:oid],k:bat[:str],v:bat[:any]):json
address JSONfold
comment "Combine the key-value pairs into a single json object list.";

pattern fold(k:bat[:str],v:bat[:any]):json
address JSONfold
comment "Combine the key-value pairs into a single json object list.";

pattern fold(v:bat[:any]):json
address JSONfold
comment "Combine the value list into a single json array object.";

command keyarray(val:json):json
address JSONkeyArray
comment "Expands the outermost JSON object keys into a JSON value array.";

command valuearray(val:json):json
address JSONvalueArray
comment "Expands the outermost JSON object values into a JSON value array.";

command keys(val:json):bat[:str]
address JSONkeyTable
comment "Expands the outermost JSON object names.";

command values(val:json):bat[:json]
address JSONvalueTable
comment "Expands the outermost JSON values.";

command output(b:bat[:any_1]):str
address JSONtextString
comment "Pack the values into a single json structure";

command suboutput(b:bat[:any_1], gid:bat[:oid], ext:bat[:lng], flg:bit):bat[:str]
address JSONtextGrouped
comment "Pack the values into a json structure";

command prelude()
address JSONprelude;

pattern renderobject(val:any...):json
address JSONrenderobject;

pattern renderarray(val:any...):json
address JSONrenderarray;

command aggr.jsonaggr(val:bat[:str]):str
address JSONgroupStr
comment "Aggregate the string values to array.";

command aggr.jsonaggr(val:bat[:dbl]):str
address JSONgroupStr
comment "Aggregate the double values to array.";

command aggr.subjsonaggr(val:bat[:str],g:bat[:oid],e:bat[:any_1], skip_nils:bit) :bat[:str]
address JSONsubjson
comment "Grouped aggregation of values.";

command aggr.subjsonaggr(val:bat[:dbl],g:bat[:oid],e:bat[:any_1], skip_nils:bit) :bat[:str]
address JSONsubjson
comment "Grouped aggregation of values.";

command aggr.subjsonaggr(val:bat[:str],g:bat[:oid],e:bat[:any_1],s:bat[:oid], skip_nils:bit) :bat[:str]
address JSONsubjsoncand
comment "Grouped aggregation of values with candidates list.";

command aggr.subjsonaggr(val:bat[:dbl],g:bat[:oid],e:bat[:any_1],s:bat[:oid], skip_nils:bit) :bat[:str]
address JSONsubjsoncand
comment "Grouped aggregation of values with candidates list.";

module calc;

pattern ==(l:json,r:json):bit
address CMDvarEQ
comment "Return V1 == V2";

pattern ==(l:json,r:json,nil_matches:bit):bit
address CMDvarEQ
comment "Return V1 == V2";

pattern !=(l:json,r:json):bit
address CMDvarNE
comment "Return V1 != V2";

pattern !=(l:json,r:json,nil_matches:bit):bit
address CMDvarNE
comment "Return V1 != V2";

pattern <(l:json,r:json):bit
address CMDvarLT
comment "Return V1 < V2";

pattern <=(l:json,r:json):bit
address CMDvarLE
comment "Return V1 <= V2";

pattern >(l:json,r:json):bit
address CMDvarGT
comment "Return V1 > V2";

pattern >=(l:json,r:json):bit
address CMDvarGE
comment "Return V1 >= V2";

module batcalc;

pattern ==(b1:bat[:json],b2:bat[:json]) :bat[:bit]
address CMDbatEQ
comment "Return B1 == B2";

pattern ==(b1:bat[:json],b2:bat[:json],nil_matches:bit) :bat[:bit]
address CMDbatEQ
comment "Return B1 == B2";

pattern !=(b1:bat[:json],b2:bat[:json]) :bat[:bit]
address CMDbatNE
comment "Return B1 != B2";

pattern !=(b1:bat[:json],b2:bat[:json],nil_matches:bit) :bat[:bit]
address CMDbatNE
comment "Return B1 != B2";

pattern <(b1:bat[:json],b2:bat[:json]) :bat[:bit]
address CMDbatLT
comment "Return B1 < B2";

pattern <=(b1:bat[:json],b2:bat[:json]) :bat[:bit]
address CMDbatLE
comment "Return B1 <= B2";

pattern >(b1:bat[:json],b2:bat[:json]) :bat[:bit]
address CMDbatGT
comment "Return B1 > B2";

pattern >=(b1:bat[:json],b2:bat[:json]) :bat[:bit]
address CMDbatGE
comment "Return B1 >= B2";

json.prelude();
