module mosaic;

pattern compress(b:bat[:any_1], prop:str):bat[:any_1]
address MOScompress
comment "Apply dynamic compression over chunks";

pattern compress(b:bat[:any_1]) :bat[:any_1]
address MOScompress
comment "Apply dynamic compression producing a temporary";

command decompress(b:bat[:any_1]) :bat[:any_1]
address MOSdecompress
comment "Apply dynamic decompression over chunks producing a temporary version";

command select(b:bat[:any_1], low:any_1, high:any_1, li:bit, hi:bit, anti:bit) :bat[:oid]
address MOSselect1;

command select(b:bat[:any_1], low:any_1, high:any_1, li:bit, hi:bit, anti:bit, unknown:bit) :bat[:oid]
address MOSselect1nil;

command select(b:bat[:any_1], cand:bat[:oid], low:any_1, high:any_1, li:bit, hi:bit, anti:bit) :bat[:oid]
address MOSselect2;

command select(b:bat[:any_1], cand:bat[:oid], low:any_1, high:any_1, li:bit, hi:bit, anti:bit, unknown:bit) :bat[:oid]
address MOSselect2nil;

pattern thetaselect(b:bat[:any_1], low:any_1, oper:str) :bat[:oid]
address MOSthetaselect;

pattern thetaselect(b:bat[:any_1], c:bat[:oid], low:any_1, oper:str) :bat[:oid]
address MOSthetaselect;

pattern projection(b:bat[:oid], cand:bat[:any_1]) :bat[:any_1]
address MOSprojection;

pattern join(l:bat[:any_1],r:bat[:any_1],sl:bat[:oid],sr:bat[:oid],nil_matches:bit,estimate:lng) (:bat[:oid],:bat[:oid])
address MOSjoin
comment "join operation mimicking algebra.join based on nested loop join with compressed side in the inner loop.";

pattern join(l:bat[:any_1],r:bat[:any_1],sl:bat[:oid],sr:bat[:oid],nil_matches:bit,estimate:lng, COUI:bit) (:bat[:oid],:bat[:oid])
address MOSjoin
comment "Same as above but when the COUI flag is set to true, it puts the compressed side in the outer loop.";
