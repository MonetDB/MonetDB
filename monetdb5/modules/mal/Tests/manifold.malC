# the multiplex code blocks.

t0:= alarm.usec();
b:= bat.new(:dbl);

INT_MAX := 2147483647;
dbgmsk_restore := mdb.getDebug();
dbgmsk_unset := 8+8388608;
dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
mdb.setDebug(dbgmsk_set);

r:= mmath.srand(0);
barrier i:= 0:lng;
	k:= mmath.rand();
	l:= calc.dbl(k);
	bat.append(b,l);
	redo i:= iterator.next(1:lng,10000:lng);
exit i;

mdb.setDebug(dbgmsk_restore);
mdb.setDebug(dbgmsk_set);

t0:= alarm.usec();
z:bat[:dbl]:= mal.manifold("mmath","sin",b);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#mal.manifold(sin) %d\n",d0);
s:= aggr.sum(z);
io.printf("#sum %f\n",s);


#x:bat[:dbl]:= mal.multiplex("mmath","sin",b);
t0:= alarm.usec();
x:= bat.new(:dbl);
barrier j:= 0@0;
	ii:= algebra.fetch(b,j);
	d:= mmath.sin(ii);
	bat.append(x,d);
	redo j:= iterator.next(1@0,10000@0);
exit j;
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#mal.multiplex(sin) %d\n",d0);
s:= aggr.sum(x);
io.printf("#sum %f\n",s);


t0:= alarm.usec();
x:= batmmath.sin(b);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#mmath.sin() %d\n",d0);
s:= aggr.sum(x);
io.printf("#sum %f\n",s);
