# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2020 MonetDB B.V.

module remote;

command prelude():void
address RMTprelude
comment "initialise the remote module";

command epilogue():void
address RMTepilogue
comment "release the resources held by the remote module";

command resolve(pattern:str):bat[:str]
address RMTresolve
comment "resolve a pattern against Merovingian and return the URIs";

command connect(uri:str, user:str, passwd:str):str
address RMTconnect
comment "returns a newly created connection for uri, using user name and password";
command connect(uri:str, user:str, passwd:str, scen:str):str
address RMTconnectScen
comment "returns a newly created connection for uri, using user name, password and scenario";
pattern connect(table:str, schen:str):str
address RMTconnectTable
comment "return a newly created connection for a table. username and password should be in the vault";

command disconnect(conn:str):void
address RMTdisconnect
comment "disconnects the connection pointed to by handle (received from a call to connect()";

pattern get(conn:str, ident:str):any
address RMTget
comment "retrieves a copy of remote object ident";

pattern put(conn:str, object:any):str
address RMTput
comment "copies object to the remote site and returns its identifier";

pattern register(conn:str, mod:str, fcn:str):void
address RMTregister
comment "register <mod>.<fcn> at the remote site";

pattern exec(conn:str, mod:str, func:str):str
address RMTexec
comment "remotely executes <mod>.<func> and returns the handle to its result";
pattern exec(conn:str, mod:str, func:str):str...
address RMTexec
comment "remotely executes <mod>.<func> and returns the handle to its result";
pattern exec(conn:str, mod:str, func:str, :str...):str
address RMTexec
comment "remotely executes <mod>.<func> using the argument list of remote objects and returns the handle to its result";
pattern exec(conn:str, mod:str, func:str, :str...):str...
address RMTexec
comment "remotely executes <mod>.<func> using the argument list of remote objects and returns the handle to its result";
command isalive(conn:str):int
address RMTisalive
comment "check if conn is still valid and connected";

pattern batload(tt:any_1, size:int):bat[:any_1]
address RMTbatload
comment "create a BAT of the given type and size, and load values from the input stream";

pattern batbincopy(b:bat[:any]):void
address RMTbincopyto
comment "dump BAT b in binary form to the stream";
pattern batbincopy():bat[:any]
address RMTbincopyfrom
comment "store the binary BAT data in the BBP and return as BAT";

pattern bintype():void
address RMTbintype
comment "print the binary type of this mserver5";

command register_supervisor(sup_uuid:str, query_uuid:str):int
address RMTregisterSupervisor
comment "Register the supervisor uuid at a remote site";

remote.prelude();
