stdout of test 'FTexample` in directory 'monetdb5/optimizer` itself:


# 23:53:03 >  
# 23:53:03 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  FTexample.mal </dev/null
# 23:53:03 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_optimizer', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:33204/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-32050/.s.monetdb.33204
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded


# 23:59:48 >  
# 23:59:48 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-32050" "--port=33204"
# 23:59:48 >  

#mdb.List("user","test");
function user.test(s:str):wrd;          	#[0]  0 <- 1 
    b:bat[:oid,:str] := bat.new(:oid,:str);	#[1] CMDBATnew 2 <- 3 4 
    bat.append(b:bat[:oid,:str],"hello":str);	#[2] BKCappend_val_wrap 5 <- 2 6 
    z:bat[:oid,:oid] := algebra.subselect(b:bat[:oid,:str],s:str,s:str,true:bit,true:bit,false:bit);	#[3] ALGsubselect1 7 <- 2 1 1 8 9 10 
    i:wrd := aggr.count(z:bat[:oid,:oid]);	#[4] ALGcount_bat 11 <- 7 
    return test:wrd := i:wrd;           	#[5]  0 <- 11 
end user.test;                          	#[6]  
#mdb.List("user","test");
factory user.test(s:str):wrd;           	#[0]  0 <- 1 
    b:bat[:oid,:str] := bat.new(:oid,:str);	#[1] CMDBATnew 2 <- 3 4 
    bat.append(b:bat[:oid,:str],"hello":str);	#[2] BKCappend_val_wrap 5 <- 2 6 
barrier always:bit := true:bit;         	#[3]  12 <- 8 
    z:bat[:oid,:oid] := algebra.subselect(b:bat[:oid,:str],s:str,s:str,true:bit,true:bit,false:bit);	#[4] ALGsubselect1 7 <- 2 1 1 8 9 10 
    i:wrd := aggr.count(z:bat[:oid,:oid]);	#[5] ALGcount_bat 11 <- 7 
    yield test:wrd := i:wrd;            	#[6]  0 <- 11 
    redo always:bit;                    	#[7]  12 
exit always:bit;                        	#[8]  12 
    return test:wrd := test:wrd;        	#[9]  0 <- 0 
end user.test;                          	#[10]  

# 23:53:03 >  
# 23:53:03 >  Done.
# 23:53:03 >  

