# The first MAL compiler test
# the result is retained in MCCtst903.c
# which can be compiled and linked with the system.


function tst903();
    t0:= alarm.usec();
    b:= bat.new(:lng);
    barrier i:= 0:lng;
        k:= mmath.rand();
        l:= calc.lng(k);
        bat.append(b,l);
        redo i:= iterator.next(1:lng,1000000:lng);
    exit i;
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#loop %d",d0);
    #setReadMode(b);
    mx:= aggr.max(b); 
    #io.printf("max %d",mx);
    mi:= aggr.min(b); 
    #io.printf(" min %d\n",mi);
    t0:= alarm.usec();
    c:= algebra.copy(b);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#copy %d",d0);
    cnt:= aggr.count(c);
    io.printf("#count %d\n",cnt);
    t0:= alarm.usec();
    z:= algebra.select(b,nil:bat[:oid],25:lng,25:lng,true,true,false);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#select none %d",d0);
    cnt:= aggr.count(z);
    io.printf(" count %d\n",cnt);
    t0:= alarm.usec();
    z2:= algebra.select(b,nil:bat[:oid],mi,mx,true,true,false);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#select all %d",d0);
    cnt:= aggr.count(z2);
    io.printf(" count %d\n",cnt);
    rng:= mx-mi;
    r2:= rng/20;
    r3:= mi+r2;
    t0:= alarm.usec();
    z3:= algebra.select(b,nil:bat[:oid],mi,r3,true,true,false);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#select 0.05 %d",d0);
    cnt:= aggr.count(z3);
    io.printf(" count %d\n",cnt);
    r2:= rng/10;
    r3:= mi+r2;
    t0:= alarm.usec();
    z4:= algebra.select(b,nil:bat[:oid],mi,r3,true,true,false);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#select 0.1 %d",d0);
    cnt:= aggr.count(z4);
    io.printf(" count %d\n",cnt);
    r2:= rng/5;
    r3:= mi+r2;
    t0:= alarm.usec();
    z5:= algebra.select(b,nil:bat[:oid],mi,r3,true,true,false);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#select 0.2 %d",d0);
    cnt:= aggr.count(z5);
    io.printf(" count %d\n",cnt);
    r3:= r3+r2;
    t0:= alarm.usec();
    z6:= algebra.select(b,nil:bat[:oid],mi,r3,true,true,false);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#select 0.4 %d",d0);
    cnt:= aggr.count(z6);
    io.printf(" count %d\n",cnt);
    r3:= r3+r2;
    t0:= alarm.usec();
    z7:= algebra.select(b,nil:bat[:oid],mi,r3,true,true,false);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#select 0.6 %d",d0);
    cnt:= aggr.count(z7);
    io.printf(" count %d\n",cnt);
    r3:= r3+r2;
    t0:= alarm.usec();
    z8:= algebra.select(b,nil:bat[:oid],mi,r3,true,true,false);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#select 0.8 %d",d0);
    cnt:= aggr.count(z8);
    io.printf(" count %d\n",cnt);
    r3:= r3+r2;
    t0:= alarm.usec();
    z9:= algebra.select(b,nil:bat[:oid],mi,r3,true,true,false);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#select 1.0 %d",d0);
    cnt:= aggr.count(z9);
    io.printf(" count %d\n",cnt);
    t0:= alarm.usec();
    s:= algebra.sort(b,false,false,false);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#tail sort %d",d0);
end tst903;

optimizer.reorder("user","tst903");
optimizer.garbageCollector("user","tst903");
mdb.list("user","tst903");
