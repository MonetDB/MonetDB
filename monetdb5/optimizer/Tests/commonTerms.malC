# handle the duplicates in this code block
function user.s4_1():void;
 X_41:bat[:timestamp] := bat.new(nil:timestamp);
 X_46:bat[:bit] := batcalc.>=(X_41, "2019-03-10 10:00:00.000":timestamp);
 X_51:bat[:bit] := batcalc.<(X_41, "2019-03-10 10:00:00.000":timestamp);
 X_53:bat[:bit] := batcalc.and(X_46, X_51);
 X_55:bat[:bit] := batcalc.isnil(X_53);
 X_66:bat[:bit] := batcalc.ifthenelse(X_55, false:bit, X_53);
 X_69:bat[:timestamp] := mal.manifold("mtime":str, "timestamp_add_msec_interval":str, X_41, -28800000:lng);

 X_74:bat[:bit] := batcalc.>=(X_41, "2019-03-10 10:00:00.000":timestamp);
 X_77:bat[:bit] := batcalc.<(X_41, "2019-11-03 09:00:00.000":timestamp);
 X_78:bat[:bit] := batcalc.and(X_74, X_77);
 X_79:bat[:bit] := batcalc.isnil(X_78);
 X_93:bat[:bit] := batcalc.ifthenelse(X_79, false:bit, X_78);
 X_95:bat[:timestamp] := mal.manifold("mtime":str, "timestamp_add_msec_interval":str, X_41, -25200000:lng);
 X_98:bat[:timestamp] := batcalc.ifthenelse(X_93, X_95, X_69);
 X_99:bat[:timestamp] := batcalc.ifthenelse(X_66, X_69, X_98);
 X_102:bat[:str] := mal.manifold("mtime":str, "timestamp_to_str":str, X_99, "%W":str);

 X_1851:bat[:bit] := batcalc.<(X_41:bat[:timestamp], "2006-10-29 09:00:00.000":timestamp);
 X_1863:bat[:bit] := batcalc.<(X_41:bat[:timestamp], "2006-10-29 09:00:00.000":timestamp);
 X_1873:bat[:bit] := batcalc.>=(X_41:bat[:timestamp], "2006-10-29 09:00:00.000":timestamp);
 X_648:bat[:bit] := batcalc.<(X_41:bat[:timestamp], "2006-10-29 09:00:00.000":timestamp);
 X_660:bat[:bit] := batcalc.<(X_41:bat[:timestamp], "2006-10-29 09:00:00.000":timestamp);
 X_669:bat[:bit] := batcalc.>=(X_41:bat[:timestamp], "2006-10-29 09:00:00.000":timestamp);

end user.s4_1;

optimizer.multiplex("user","s4_1");
optimizer.commonTerms("user","s4_1");
mdb.List("user","s4_1");
