stdout of test 'inline00` in directory 'monetdb5/optimizer` itself:


# 00:18:07 >  
# 00:18:07 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=31500 --set xrpc_port=46952 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline00.mal
# 00:18:07 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_optimizer', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:31052/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-8467/.s.monetdb.31052
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded


# 16:09:46 >  
# 16:09:46 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-32223" "--port=39816"
# 16:09:46 >  

inline function user.help():void;       	#[0] (0)  0 
    b:bat[:int] := bat.new(:int);       	#[1] (0) CMDBATnew 1 <- 2 
    c:bat[:int] := bat.new(:int);       	#[2] (0) CMDBATnew 3 <- 2 
    bat.append(b:bat[:int], 1:int);     	#[3] (0) BKCappend_val_wrap 4 <- 1 5 
barrier (y:oid, z:int) := iterator.new(b:bat[:int]);	#[4] (0) ITRbunIterator 6 7 <- 1 
    io.print(y:oid);                    	#[5] (0) IOprint_val 8 <- 6 
catch MALException:str;                 	#[6] (0)  9 
exit MALException:str;                  	#[7] (0)  9 
exit (y:oid, z:int);                    	#[8] (0)  6 7 
barrier (x:oid, z:int) := iterator.new(c:bat[:int]);	#[9] (0) ITRbunIterator 10 7 <- 3 
    io.print(x:oid);                    	#[10] (0) IOprint_val 11 <- 10 
    redo (x:oid, z:int) := iterator.next(c:bat[:int]);	#[11] (0) ITRbunNext 10 7 <- 3 
catch MALException:str;                 	#[12] (0)  9 
exit MALException:str;                  	#[13] (0)  9 
exit (x:oid, z:int);                    	#[14] (0)  10 7 
end user.help;                          	#[15] (0)  
function user.qry():void;               	#[0] (0)  0 
    X_2:bat[:int] := bat.new(:int);     	#[1] (0) CMDBATnew 3 <- 4 
    X_4:bat[:int] := bat.new(:int);     	#[2] (0) CMDBATnew 5 <- 4 
    bat.append(X_2:bat[:int], 1:int);   	#[3] (0) BKCappend_val_wrap 6 <- 3 7 
barrier (X_7:oid, X_8:int) := iterator.new(X_2:bat[:int]);	#[4] (0) ITRbunIterator 8 9 <- 3 
    io.print(X_7:oid);                  	#[5] (0) IOprint_val 10 <- 8 
catch MALException:str;                 	#[6] (0)  11 
exit MALException:str;                  	#[7] (0)  11 
exit (X_7:oid, X_8:int);                	#[8] (0)  8 9 
barrier (X_10:oid, X_8:int) := iterator.new(X_4:bat[:int]);	#[9] (0) ITRbunIterator 12 9 <- 5 
    io.print(X_10:oid);                 	#[10] (0) IOprint_val 13 <- 12 
    redo (X_10:oid, X_8:int) := iterator.next(X_4:bat[:int]);	#[11] (0) ITRbunNext 12 9 <- 5 
catch MALException:str;                 	#[12] (0)  11 
exit MALException:str;                  	#[13] (0)  11 
exit (X_10:oid, X_8:int);               	#[14] (0)  12 9 
end user.qry;                           	#[15] (0)  

# 00:18:07 >  
# 00:18:07 >  Done.
# 00:18:07 >  

