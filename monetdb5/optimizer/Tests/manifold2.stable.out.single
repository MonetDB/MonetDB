stdout of test 'manifold2` in directory 'monetdb5/optimizer` itself:


# 09:02:36 >  
# 09:02:36 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33759" "--set" "mapi_usock=/var/tmp/mtest-28130/.s.monetdb.33759" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/default//Linux/var/MonetDB/mTests_monetdb5_optimizer" "manifold2.mal"
# 09:02:36 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_optimizer', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:33759/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-28130/.s.monetdb.33759
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

#    z:bat[:dbl] := mal.multiplex("calc":str,"max":str,b:bat[:dbl],b2:bat[:dbl]);

# 12:52:57 >  
# 12:52:57 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "--host=/var/tmp/mtest-23074" "--port=30414"
# 12:52:57 >  

function user.tst(b:bat[:dbl], b2:bat[:dbl]):void;	#[0] (0)  0 <- 1 2 
    c:lng := aggr.count(b:bat[:dbl]);   	#[1] (0) ALGcount_bat 3 <- 1 
    c2:lng := aggr.count(b2:bat[:dbl]); 	#[2] (0) ALGcount_bat 4 <- 2 
    X_3:bat[:dbl] := bat.new(nil:dbl);  	#[3] (0) CMDBATnew 9 <- 10 
barrier (X_6:oid, X_7:dbl) := iterator.new(b:bat[:dbl]);	#[4] (0) ITRbunIterator 12 13 <- 1 
    X_9:dbl := algebra.fetch(b2:bat[:dbl], X_6:oid);	#[5] (0) ALGfetchoid 15 <- 2 12 
    X_11:dbl := calc.max(X_7:dbl, X_9:dbl);	#[6] (0) CALCmax 17 <- 13 15 
    X_3:bat[:dbl] := bat.append(X_3:bat[:dbl], X_11:dbl);	#[7] (0) BKCappend_val_wrap 9 <- 9 17 
    redo (X_6:oid, X_7:dbl) := iterator.next(b:bat[:dbl]);	#[8] (0) ITRbunNext 12 13 <- 1 
exit (X_6:oid, X_7:dbl);                	#[9] (0)  12 13 
    z:bat[:dbl] := X_3:bat[:dbl];       	#[10] (0)  5 <- 9 
    io.print(z:bat[:dbl], b:bat[:dbl], b2:bat[:dbl]);	#[11] (0) IOtable 8 <- 5 1 2 
end user.tst;                           	#[12] (0)  
#multiplex            actions= 1 time=101 usec 
#[ 1]     b (0,0,0) =  :bat[:dbl]  
#[ 2]    b2 (0,0,0) =  :bat[:dbl]  
#[ 5]     z (0,0,0) =  :bat[:dbl]  
#[ 6]   X_0 (0,0,0) = "calc" :str  constant 
#[ 7]   X_1 (0,0,0) = "max" :str  constant 
#[ 9]   X_3 (0,0,0) =  :bat[:dbl]  
#[10]   X_4 (0,0,0) = nil :dbl  constant 
#[12]   X_6 (0,0,0) =  :oid  
#[13]   X_7 (0,0,0) =  :dbl  
#[15]   X_9 (0,0,0) =  :dbl  
#[17]  X_11 (0,0,0) =  :dbl  
function user.tst(b:bat[:dbl], b2:bat[:dbl]):void;	#[0] (0)  0 <- 1 2 
    c:lng := aggr.count(b:bat[:dbl]);   	#[1] (0) ALGcount_bat 3 <- 1 
    c2:lng := aggr.count(b2:bat[:dbl]); 	#[2] (0) ALGcount_bat 4 <- 2 
    X_3:bat[:dbl] := bat.new(nil:dbl);  	#[3] (0) CMDBATnew 9 <- 10 
barrier (X_6:oid, X_7:dbl) := iterator.new(b:bat[:dbl]);	#[4] (0) ITRbunIterator 12 13 <- 1 
    X_9:dbl := algebra.fetch(b2:bat[:dbl], X_6:oid);	#[5] (0) ALGfetchoid 15 <- 2 12 
    X_11:dbl := calc.max(X_7:dbl, X_9:dbl);	#[6] (0) CALCmax 17 <- 13 15 
    X_3:bat[:dbl] := bat.append(X_3:bat[:dbl], X_11:dbl);	#[7] (0) BKCappend_val_wrap 9 <- 9 17 
    redo (X_6:oid, X_7:dbl) := iterator.next(b:bat[:dbl]);	#[8] (0) ITRbunNext 12 13 <- 1 
exit (X_6:oid, X_7:dbl);                	#[9] (0)  12 13 
    z:bat[:dbl] := X_3:bat[:dbl];       	#[10] (0)  5 <- 9 
    io.print(z:bat[:dbl], b:bat[:dbl], b2:bat[:dbl]);	#[11] (0) IOtable 8 <- 5 1 2 
end user.tst;                           	#[12] (0)  
#multiplex            actions= 1 time=101 usec 

# 09:02:36 >  
# 09:02:36 >  "Done."
# 09:02:36 >  

