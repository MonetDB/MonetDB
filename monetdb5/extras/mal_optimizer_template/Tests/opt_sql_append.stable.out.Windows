#set optimizer = 'sequential_pipe'; -- to get predictable errors
#create table ttt (a int, b int, c int);
#select optimizer;
% .%2 # table_name
% %2 # name
% varchar # type
% 15 # length
[ "sequential_pipe"	]
#select def from optimizers() where name = optimizer;
% .%1 # table_name
% def # name
% clob # type
% 626 # length
[ "optimizer.inline();optimizer.remap();optimizer.costModel();optimizer.coercions();optimizer.aliases();optimizer.evaluate();optimizer.emptybind();optimizer.deadcode();optimizer.pushselect();optimizer.aliases();optimizer.mergetable();optimizer.bincopyfrom();optimizer.parappend();optimizer.aliases();optimizer.constants();optimizer.commonTerms();optimizer.projectionpath();optimizer.deadcode();optimizer.reorder();optimizer.matpack();optimizer.querylog();optimizer.multiplex();optimizer.generator();optimizer.profiler();optimizer.candidates();optimizer.deadcode();optimizer.postfix();optimizer.wlc();optimizer.garbageCollector();"	]
#explain copy into ttt from E'\\tmp/xyz';
% .explain # table_name
% mal # name
% clob # type
% 280 # length
function user.main():void;
    querylog.define("explain copy into ttt from E\\'\\\\\\\\tmp/xyz\\';":str, "sequential_pipe":str, 22:int);
    X_183:int := sql.mvc();
    (X_206:bat[:int], X_207:bat[:int], X_208:bat[:int]) := sql.copy_from(0x0000000005E3D310:ptr, "|":str, "\n":str, nil:str, "null":str, "\\tmp/xyz":str, -1:lng, 0:lng, 0:int, nil:str, 0:int, 1:int);
    X_209:lng := aggr.count(X_206:bat[:int]);
    X_210:lng := sql.claim(X_183:int, "sys":str, "ttt":str, X_209:lng);
    (X_237:int, X_236:ptr, X_241:ptr, X_244:ptr) := sql.append_prep(X_183:int, "sys":str, "ttt":str, "averylongcolumnnametomakeitlargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee":str, "b":str, "c":str);
    X_239:ptr := sql.append_exec(X_236:ptr, X_210:lng, X_206:bat[:int]);
    X_242:ptr := sql.append_exec(X_241:ptr, X_210:lng, X_207:bat[:int]);
    X_245:ptr := sql.append_exec(X_244:ptr, X_210:lng, X_208:bat[:int]);
    X_220:int := sql.append_finish(X_237:int, X_239:ptr, X_242:ptr, X_245:ptr);
    sql.affectedRows(X_220:int, X_209:lng);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=0 usec 
#costmodel            actions= 1 time=0 usec 
#coercion             actions=12 time=0 usec 
#aliases              actions=12 time=0 usec 
#evaluate             actions= 0 time=0 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=0 usec 
#aliases              actions= 0 time=0 usec 
#mergetable           actions= 0 time=0 usec 
#deadcode             actions= 0 time=0 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=0 usec 
#commonTerms          actions= 0 time=0 usec 
#projectionpath       actions= 0 time=0 usec 
#deadcode             actions= 0 time=0 usec 
#reorder              actions= 1 time=0 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=0 usec 
#profiler             actions= 1 time=0 usec 
#candidates           actions= 1 time=0 usec 
#deadcode             actions= 0 time=0 usec 
#postfix              actions= 0 time=0 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=0 usec 
#total                actions=27 time=0 usec 
#explain copy into ttt from E'a:\\tmp/xyz';
% .explain # table_name
% mal # name
% clob # type
% 280 # length
function user.main():void;
    querylog.define("explain copy into ttt from E\\'a:\\\\\\\\tmp/xyz\\';":str, "sequential_pipe":str, 22:int);
    X_266:int := sql.mvc();
    (X_289:bat[:int], X_290:bat[:int], X_291:bat[:int]) := sql.copy_from(0x0000000005E3D310:ptr, "|":str, "\n":str, nil:str, "null":str, "a:\\tmp/xyz":str, -1:lng, 0:lng, 0:int, nil:str, 0:int, 1:int);
    X_292:lng := aggr.count(X_289:bat[:int]);
    X_293:lng := sql.claim(X_266:int, "sys":str, "ttt":str, X_292:lng);
    (X_320:int, X_319:ptr, X_324:ptr, X_327:ptr) := sql.append_prep(X_266:int, "sys":str, "ttt":str, "averylongcolumnnametomakeitlargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee":str, "b":str, "c":str);
    X_322:ptr := sql.append_exec(X_319:ptr, X_293:lng, X_289:bat[:int]);
    X_325:ptr := sql.append_exec(X_324:ptr, X_293:lng, X_290:bat[:int]);
    X_328:ptr := sql.append_exec(X_327:ptr, X_293:lng, X_291:bat[:int]);
    X_303:int := sql.append_finish(X_320:int, X_322:ptr, X_325:ptr, X_328:ptr);
    sql.affectedRows(X_303:int, X_292:lng);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions=11 time=7 usec 
#aliases              actions=12 time=0 usec
#evaluate             actions= 0 time=5 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=3 usec 
#aliases              actions= 0 time=1 usec 
#mergetable           actions= 0 time=14 usec 
#deadcode             actions= 0 time=5 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=4 usec 
#commonTerms          actions= 0 time=2 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=11 usec 
#deadcode             actions= 0 time=3 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions=1 time=0 usec 
#candidates           actions=1 time=1 usec 
#wlc                  actions= 0 time=1 usec 
#garbagecollector     actions= 1 time=58 usec 
#total                actions=24 time=200 usec 
#start transaction;
#create local temp table "opt_pipe_name" ("opt_pipe_name" string);
#insert into "opt_pipe_name" values ((select optimizer));
[ 1	]
#set optimizer = substring((select def from optimizers() where name = (select opt_pipe_name from "opt_pipe_name")),0,
#                length((select def from optimizers() where name = (select opt_pipe_name from "opt_pipe_name")))-length('optimizer.garbageCollector();')) || 'optimizer.sql_append();optimizer.garbageCollector();';
#select optimizer;
% .%2 # table_name
% %2 # name
% varchar # type
% 6 # length
[ "user_0"	]
#select def from optimizers() where name = optimizer;
% .%1 # table_name
% def # name
% clob # type
% 649 # length
[ "optimizer.inline();optimizer.remap();optimizer.costModel();optimizer.coercions();optimizer.aliases();optimizer.evaluate();optimizer.emptybind();optimizer.deadcode();optimizer.pushselect();optimizer.aliases();optimizer.mergetable();optimizer.bincopyfrom();optimizer.parappend();optimizer.aliases();optimizer.constants();optimizer.commonTerms();optimizer.projectionpath();optimizer.deadcode();optimizer.reorder();optimizer.matpack();optimizer.querylog();optimizer.multiplex();optimizer.generator();optimizer.profiler();optimizer.candidates();optimizer.deadcode();optimizer.postfix();optimizer.wlc();optimizer.sql_append();optimizer.garbageCollector();"	]
#rollback;
#explain copy into ttt from E'\\tmp/xyz';
% .explain # table_name
% mal # name
% clob # type
% 280 # length
function user.main():void;
    querylog.define("explain copy into ttt from E\\'\\\\\\\\tmp/xyz\\';":str, "user_0":str, 22:int);
    X_746:int := sql.mvc();
    (X_769:bat[:int], X_770:bat[:int], X_771:bat[:int]) := sql.copy_from(0x0000000005E3D310:ptr, "|":str, "\n":str, nil:str, "null":str, "\\tmp/xyz":str, -1:lng, 0:lng, 0:int, nil:str, 0:int, 1:int);
    X_772:lng := aggr.count(X_769:bat[:int]);
    X_773:lng := sql.claim(X_746:int, "sys":str, "ttt":str, X_772:lng);
    (X_800:int, X_799:ptr, X_804:ptr, X_807:ptr) := sql.append_prep(X_746:int, "sys":str, "ttt":str, "averylongcolumnnametomakeitlargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee":str, "b":str, "c":str);
    X_802:ptr := sql.append_exec(X_799:ptr, X_773:lng, X_769:bat[:int]);
    X_805:ptr := sql.append_exec(X_804:ptr, X_773:lng, X_770:bat[:int]);
    X_808:ptr := sql.append_exec(X_807:ptr, X_773:lng, X_771:bat[:int]);
    X_783:int := sql.append_finish(X_800:int, X_802:ptr, X_805:ptr, X_808:ptr);
    sql.affectedRows(X_783:int, X_772:lng);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=0 usec 
#costmodel            actions= 1 time=0 usec 
#coercion             actions=12 time=0 usec 
#aliases              actions=12 time=0 usec 
#evaluate             actions= 0 time=0 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=0 usec 
#aliases              actions= 0 time=0 usec 
#mergetable           actions= 0 time=0 usec 
#deadcode             actions= 0 time=0 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=0 usec 
#commonTerms          actions= 0 time=0 usec 
#projectionpath       actions= 0 time=0 usec 
#deadcode             actions= 0 time=0 usec 
#reorder              actions= 1 time=0 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=0 usec 
#profiler             actions= 1 time=0 usec 
#candidates           actions= 1 time=0 usec 
#deadcode             actions= 0 time=0 usec 
#postfix              actions= 0 time=0 usec 
#wlc                  actions= 0 time=0 usec 
#optimizer.sql_append actions= 1 time=0 usec 
#garbagecollector     actions= 1 time=0 usec 
#total                actions=28 time=0 usec 
#explain copy into ttt from 'Z:/tmp/xyz';
% .explain # table_name
% mal # name
% clob # type
% 280 # length
function user.main():void;
    querylog.define("explain copy into ttt from \\'Z:/tmp/xyz\\';":str, "user_0":str, 22:int);
    X_830:int := sql.mvc();
    (X_853:bat[:int], X_854:bat[:int], X_855:bat[:int]) := sql.copy_from(0x0000000005E3D310:ptr, "|":str, "\n":str, nil:str, "null":str, "Z:/tmp/xyz":str, -1:lng, 0:lng, 0:int, nil:str, 0:int, 1:int);
    X_856:lng := aggr.count(X_853:bat[:int]);
    X_857:lng := sql.claim(X_830:int, "sys":str, "ttt":str, X_856:lng);
    (X_884:int, X_883:ptr, X_888:ptr, X_891:ptr) := sql.append_prep(X_830:int, "sys":str, "ttt":str, "averylongcolumnnametomakeitlargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee":str, "b":str, "c":str);
    X_886:ptr := sql.append_exec(X_883:ptr, X_857:lng, X_853:bat[:int]);
    X_889:ptr := sql.append_exec(X_888:ptr, X_857:lng, X_854:bat[:int]);
    X_892:ptr := sql.append_exec(X_891:ptr, X_857:lng, X_855:bat[:int]);
    X_867:int := sql.append_finish(X_884:int, X_886:ptr, X_889:ptr, X_892:ptr);
    sql.affectedRows(X_867:int, X_856:lng);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions=11 time=6 usec 
#evaluate             actions= 0 time=3 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 0 time=2 usec 
#aliases              actions= 0 time=0 usec 
#mergetable           actions= 0 time=11 usec 
#deadcode             actions= 0 time=3 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=4 usec 
#commonTerms          actions= 0 time=2 usec 
#projectionpath       actions= 0 time=2 usec 
#reorder              actions= 1 time=10 usec 
#deadcode             actions= 0 time=3 usec 
#matpack              actions= 0 time=1 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions=1 time=0 usec 
#candidates           actions=1 time=0 usec 
#wlc                  actions= 0 time=0 usec 
#optimizer.sql_append actions= 1 time=3 usec 
#garbagecollector     actions= 1 time=59 usec 
#total                actions=25 time=186 usec 
#drop table ttt;
