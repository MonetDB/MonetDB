#create table ttt (a int, b int, c int);
#select optimizer;
% .%2 # table_name
% %2 # name
% varchar # type
% 15 # length
[ "sequential_pipe"	]
#select def from optimizers() where name = optimizer;
% .%1 # table_name
% def # name
% clob # type
% 626 # length
[ "optimizer.inline();optimizer.remap();optimizer.costModel();optimizer.coercions();optimizer.aliases();optimizer.evaluate();optimizer.emptybind();optimizer.pushselect();optimizer.aliases();optimizer.mergetable();optimizer.bincopyfrom();optimizer.parappend();optimizer.deadcode();optimizer.aliases();optimizer.constants();optimizer.commonTerms();optimizer.projectionpath();optimizer.deadcode();optimizer.reorder();optimizer.matpack();optimizer.querylog();optimizer.multiplex();optimizer.generator();optimizer.profiler();optimizer.candidates();optimizer.deadcode();optimizer.postfix();optimizer.wlc();optimizer.garbageCollector();"	]
#explain copy into ttt from '/tmp/xyz';
% .explain # table_name
% mal # name
% clob # type
% 274 # length
function user.main():void;
    querylog.define("explain copy into ttt from \\'/tmp/xyz\\';":str, "sequential_pipe":str, 22:int);
    X_4:int := sql.mvc();
    (X_27:bat[:int], X_28:bat[:int], X_29:bat[:int]) := sql.copy_from(0x7ffb40161430:ptr, "|":str, "\n":str, nil:str, "null":str, "/tmp/xyz":str, -1:lng, 0:lng, 0:int, nil:str, 0:int, 1:int);
    X_30:lng := aggr.count(X_27:bat[:int]);
    X_31:lng := sql.claim(X_4:int, "sys":str, "ttt":str, X_30:lng);
    (X_86:int, X_85:ptr, X_90:ptr, X_93:ptr) := sql.append_prep(X_4:int, "sys":str, "ttt":str, "averylongcolumnnametomakeitlargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee":str, "b":str, "c":str);
    X_88:ptr := sql.append_exec(X_85:ptr, X_31:lng, X_27:bat[:int]);
    X_91:ptr := sql.append_exec(X_90:ptr, X_31:lng, X_28:bat[:int]);
    X_94:ptr := sql.append_exec(X_93:ptr, X_31:lng, X_29:bat[:int]);
    X_41:int := sql.append_finish(X_86:int, X_88:ptr, X_91:ptr, X_94:ptr);
    sql.affectedRows(X_41:int, X_30:lng);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=1 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#aliases              actions=11 time=4 usec 
#evaluate             actions= 0 time=3 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=6 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=3 usec 
#commonTerms          actions= 0 time=1 usec 
#projectionpath       actions= 0 time=1 usec 
#deadcode             actions= 0 time=2 usec 
#reorder              actions= 1 time=7 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=0 usec 
#deadcode             actions= 0 time=2 usec 
#postfix              actions= 0 time=1 usec 
#wlc                  actions= 0 time=0 usec 
#garbagecollector     actions= 1 time=13 usec 
#total                actions=27 time=96 usec 
#start transaction;
#create local temp table "opt_pipe_name" ("opt_pipe_name" string);
#insert into "opt_pipe_name" values ((select optimizer));
[ 1	]
#set optimizer = substring((select def from optimizers() where name = (select opt_pipe_name from "opt_pipe_name")),0,
#                length((select def from optimizers() where name = (select opt_pipe_name from "opt_pipe_name")))-length('optimizer.garbageCollector();')) || 'optimizer.sql_append();optimizer.garbageCollector();';
#select optimizer;
% .%2 # table_name
% %2 # name
% varchar # type
% 6 # length
[ "user_0"	]
#select def from optimizers() where name = optimizer;
% .%1 # table_name
% def # name
% clob # type
% 649 # length
[ "optimizer.inline();optimizer.remap();optimizer.costModel();optimizer.coercions();optimizer.aliases();optimizer.evaluate();optimizer.emptybind();optimizer.pushselect();optimizer.aliases();optimizer.mergetable();optimizer.bincopyfrom();optimizer.parappend();optimizer.deadcode();optimizer.aliases();optimizer.constants();optimizer.commonTerms();optimizer.projectionpath();optimizer.deadcode();optimizer.reorder();optimizer.matpack();optimizer.querylog();optimizer.multiplex();optimizer.generator();optimizer.profiler();optimizer.candidates();optimizer.deadcode();optimizer.postfix();optimizer.wlc();optimizer.sql_append();optimizer.garbageCollector();"	]
#rollback;
#explain copy into ttt from '/tmp/xyz';
% .explain # table_name
% mal # name
% clob # type
% 274 # length
function user.main():void;
    querylog.define("explain copy into ttt from \\'/tmp/xyz\\';":str, "user_0":str, 22:int);
    X_4:int := sql.mvc();
    (X_27:bat[:int], X_28:bat[:int], X_29:bat[:int]) := sql.copy_from(0x7ffb40161430:ptr, "|":str, "\n":str, nil:str, "null":str, "/tmp/xyz":str, -1:lng, 0:lng, 0:int, nil:str, 0:int, 1:int);
    X_30:lng := aggr.count(X_27:bat[:int]);
    X_31:lng := sql.claim(X_4:int, "sys":str, "ttt":str, X_30:lng);
    (X_87:int, X_86:ptr, X_91:ptr, X_94:ptr) := sql.append_prep(X_4:int, "sys":str, "ttt":str, "averylongcolumnnametomakeitlargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee":str, "b":str, "c":str);
    X_89:ptr := sql.append_exec(X_86:ptr, X_31:lng, X_27:bat[:int]);
    X_92:ptr := sql.append_exec(X_91:ptr, X_31:lng, X_28:bat[:int]);
    X_95:ptr := sql.append_exec(X_94:ptr, X_31:lng, X_29:bat[:int]);
    X_41:int := sql.append_finish(X_87:int, X_89:ptr, X_92:ptr, X_95:ptr);
    sql.affectedRows(X_41:int, X_30:lng);
end user.main;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=0 usec 
#costmodel            actions= 1 time=0 usec 
#coercion             actions=11 time=2 usec 
#aliases              actions=11 time=3 usec 
#evaluate             actions= 0 time=1 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 0 time=4 usec 
#aliases              actions= 0 time=1 usec 
#mergetable           actions= 0 time=11 usec 
#deadcode             actions= 0 time=2 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 0 time=2 usec 
#commonTerms          actions= 0 time=1 usec 
#projectionpath       actions= 0 time=1 usec 
#deadcode             actions= 0 time=2 usec 
#reorder              actions= 1 time=6 usec 
#matpack              actions= 0 time=0 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=0 usec 
#candidates           actions= 1 time=0 usec 
#deadcode             actions= 0 time=2 usec 
#postfix              actions= 0 time=1 usec 
#wlc                  actions= 0 time=1 usec 
#optimizer.sql_append actions= 0 time=2 usec 
#garbagecollector     actions= 1 time=13 usec 
#total                actions=28 time=93 usec 
#drop table ttt;
