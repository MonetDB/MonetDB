stdout of test 'tst830` in directory 'monetdb5/mal` itself:


# 08:49:52 >  
# 08:49:52 >   mserver5 "--config=/ufs/mk/monet5//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm"    --set mapi_open=true --set xrpc_open=true --set mapi_port=35798 --set xrpc_port=44801 --set monet_prompt= --trace  --dbname=mTests_src_mal  /ufs/mk/monet5/Linux/mTests/src/mal/tst830.mal
# 08:49:52 >  

# MonetDB server v5.13.0, based on kernel v1.31.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:37997/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-13998/.s.monetdb.37997
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded


# 11:35:27 >  
# 11:35:27 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "--host=/var/tmp/mtest-13954" "--port=38078"
# 11:35:27 >  

function user.foo():void;               	#[0] (0)  0 
    pw:str := clients.backendsum("Pmonetdb":str);	#[1] (0) CLTbackendsum 1 <- 2 
    id:oid := clients.addUser("monetdb":str, pw:str);	#[2] (0) CLTaddUser 3 <- 4 1 
catch MALException:str;                 	#[3] (0)  5 
    io.printf("0: %s\n":str, MALException:str);	#[4] (0) IOprintf 6 <- 7 5 
exit MALException:str;                  	#[5] (0)  5 
# should print 1@0 or something 
    id:oid := clients.addUser("test":str, pw:str);	#[7] (0) CLTaddUser 3 <- 9 1 
    io.print(id:oid);                   	#[8] (0) IOprint_val 10 <- 3 
# this should work also 
    id:oid := clients.addUser("checkpoint":str, pw:str);	#[10] (0) CLTaddUser 3 <- 12 1 
    io.print(id:oid);                   	#[11] (0) IOprint_val 13 <- 3 
# do a simple listing of users known 
    (u:bat[:oid], n:bat[:str]) := clients.getUsers();	#[13] (0) CLTgetUsers 15 16 
    io.print(u:bat[:oid], n:bat[:str]); 	#[14] (0) IOtable 17 <- 15 16 
# should work, we're the admin here 
    clients.removeUser("checkpoint":str);	#[16] (0) CLTremoveUser 19 <- 12 
# do a simple listing of users known 
    (u:bat[:oid], n:bat[:str]) := clients.getUsers();	#[18] (0) CLTgetUsers 15 16 
    io.print(u:bat[:oid], n:bat[:str]); 	#[19] (0) IOtable 21 <- 15 16 
# forcefully set the password of the user test 
    clients.setPassword("test":str, pw:str);	#[21] (0) CLTsetPassword 23 <- 9 1 
# now try to set the password for ourself, should fail 
    clients.setPassword("monetdb":str, pw:str);	#[23] (0) CLTsetPassword 25 <- 4 1 
catch InvalidCredentialsException:str;  	#[24] (0)  26 
    io.printf("1: %s\n":str, InvalidCredentialsException:str);	#[25] (0) IOprintf 27 <- 28 26 
exit InvalidCredentialsException:str;   	#[26] (0)  26 
#	# change our own password,            
#	mypw := clients.backendsum("monetdb"); 
#	clients.changePassword(mypw, pw);     
#	# try it again, should fail...        
#	clients.changePassword(mypw, pw);     
#catch InvalidCredentialsException:str; 
#	io.printf("2: %s\n",InvalidCredentialsException); 
#	InvalidCredentialsException:= nil:str; 
#exit InvalidCredentialsException;      
# all should fail 
    clients.checkPermission("monetdb":str, "Pmonetdb":str);	#[37] (0) CLTcheckPermission 39 <- 40 41 
catch InvalidCredentialsException:str;  	#[38] (0)  26 
    io.printf("3: %s\n":str, InvalidCredentialsException:str);	#[39] (0) IOprintf 42 <- 43 26 
    InvalidCredentialsException:str := nil:str;	#[40] (0)  26 <- 44 
exit InvalidCredentialsException:str;   	#[41] (0)  26 
    clients.checkPermission("monetdb":str, "x":str);	#[42] (0) CLTcheckPermission 45 <- 40 46 
catch InvalidCredentialsException:str;  	#[43] (0)  26 
    io.printf("4: %s\n":str, InvalidCredentialsException:str);	#[44] (0) IOprintf 47 <- 48 26 
    InvalidCredentialsException:str := nil:str;	#[45] (0)  26 <- 44 
exit InvalidCredentialsException:str;   	#[46] (0)  26 
    clients.checkPermission("x":str, "Pmonetdb":str);	#[47] (0) CLTcheckPermission 49 <- 46 41 
catch InvalidCredentialsException:str;  	#[48] (0)  26 
    io.printf("5: %s\n":str, InvalidCredentialsException:str);	#[49] (0) IOprintf 50 <- 51 26 
    InvalidCredentialsException:str := nil:str;	#[50] (0)  26 <- 44 
exit InvalidCredentialsException:str;   	#[51] (0)  26 
end user.foo;                           	#[52] (0)  
0: MALException:addUser:user 'monetdb' already exists
[ 1@0 ]
[ 2@0 ]
#--------------------------#
# h	t	t  # name
# void	void	str  # type
#--------------------------#
[ 0@0,	0@0,	"monetdb"  ]
[ 1@0,	1@0,	"test"  ]
[ 2@0,	2@0,	"checkpoint"  ]
#--------------------------#
# h	t	t  # name
# void	void	str  # type
#--------------------------#
[ 0@0,	0@0,	"monetdb"  ]
[ 1@0,	1@0,	"test"  ]
1: InvalidCredentialsException:setPassword:The administrator cannot set its own password, use changePassword instead
3: InvalidCredentialsException:checkCredentials:invalid credentials for user 'monetdb'
4: InvalidCredentialsException:checkCredentials:invalid credentials for user 'monetdb'
5: InvalidCredentialsException:checkCredentials:invalid credentials for user 'x'

# 08:49:53 >  
# 08:49:53 >  Done.
# 08:49:53 >  

