stdout of test 'tst901` in directory 'monetdb5/mal` itself:


# 08:01:33 >  
# 08:01:33 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst901.mal </dev/null
# 08:01:33 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_mal', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:30001/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11334/.s.monetdb.30001
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded


# 22:45:31 >  
# 22:45:31 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-7101" "--port=34631"
# 22:45:31 >  

function user.foo():void;               	#[0] (0)  0 
    b:bat[:int] := bat.new(:int);       	#[1] (0) CMDBATnew 1 <- 2 
barrier i:int := 0:int;                 	#[2] (0)  3 <- 4 
    bat.append(b:bat[:int], i:int);     	#[3] (0) BKCappend_val_wrap 5 <- 1 3 
    redo i:int := iterator.next(1:int, 10:int);	#[4] (0) ITRnext_int 3 <- 6 7 
exit i:int;                             	#[5] (0)  3 
    c:bat[:int] := algebra.copy(b:bat[:int]);	#[6] (0) ALGcopy 8 <- 1 
    io.print(c:bat[:int]);              	#[7] (0) IOprint_val 9 <- 8 
    x:bat[:int] := batcalc.+(b:bat[:int], c:bat[:int], nil:BAT, nil:BAT);	#[8] (0) CMDbatADDsignal 10 <- 1 8 11 12 
    io.print(x:bat[:int]);	#[9] (0) IOprint_val 13 <- 10 
    x:bat[:int] := batcalc.+(b:bat[:int], 1:int, nil:BAT);	#[10] (0) CMDbatADDsignal 10 <- 1 6 11 
    io.print(x:bat[:int]);	#[11] (0) IOprint_val 14 <- 10 
    x:bat[:int] := batcalc.*(b:bat[:int], c:bat[:int], nil:BAT, nil:BAT);	#[12] (0) CMDbatMULsignal 10 <- 1 8 11 11 
    io.print(x:bat[:int]);	#[13] (0) IOprint_val 15 <- 10 
    y:bat[:bit] := batcalc.==(b:bat[:int], b:bat[:int], nil:BAT, nil:BAT);	#[14] (0) CMDbatEQ 16 <- 1 1 11 11 
    io.print(y:bat[:bit]);	#[15] (0) IOprint_val 17 <- 16 
    y:bat[:bit] := batcalc.==(b:bat[:int], x:bat[:int], nil:BAT, nil:BAT);	#[16] (0) CMDbatEQ 16 <- 1 10 11 11 
    io.print(y:bat[:bit]);	#[17] (0) IOprint_val 18 <- 16 
    z:bat[:bit] := batcalc.not(y:bat[:bit], nil:BAT);	#[18] (0) CMDbatNOT 19 <- 16 11 
    io.print(z:bat[:bit]);	#[19] (0) IOprint_val 20 <- 19 
end user.foo;                           	#[20] (0)  
#--------------------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  2	  ]
[ 2@0,	  4	  ]
[ 3@0,	  6	  ]
[ 4@0,	  8	  ]
[ 5@0,	  10	  ]
[ 6@0,	  12	  ]
[ 7@0,	  14	  ]
[ 8@0,	  16	  ]
[ 9@0,	  18	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]
[ 5@0,	  6	  ]
[ 6@0,	  7	  ]
[ 7@0,	  8	  ]
[ 8@0,	  9	  ]
[ 9@0,	  10	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  4	  ]
[ 3@0,	  9	  ]
[ 4@0,	  16	  ]
[ 5@0,	  25	  ]
[ 6@0,	  36	  ]
[ 7@0,	  49	  ]
[ 8@0,	  64	  ]
[ 9@0,	  81	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  true	  ]
[ 2@0,	  true	  ]
[ 3@0,	  true	  ]
[ 4@0,	  true	  ]
[ 5@0,	  true	  ]
[ 6@0,	  true	  ]
[ 7@0,	  true	  ]
[ 8@0,	  true	  ]
[ 9@0,	  true	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  true	  ]
[ 2@0,	  false	  ]
[ 3@0,	  false	  ]
[ 4@0,	  false	  ]
[ 5@0,	  false	  ]
[ 6@0,	  false	  ]
[ 7@0,	  false	  ]
[ 8@0,	  false	  ]
[ 9@0,	  false	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ 0@0,	  false	  ]
[ 1@0,	  false	  ]
[ 2@0,	  true	  ]
[ 3@0,	  true	  ]
[ 4@0,	  true	  ]
[ 5@0,	  true	  ]
[ 6@0,	  true	  ]
[ 7@0,	  true	  ]
[ 8@0,	  true	  ]
[ 9@0,	  true	  ]

# 08:01:33 >  
# 08:01:33 >  Done.
# 08:01:33 >  

