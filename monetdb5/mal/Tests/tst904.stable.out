stdout of test 'tst904` in directory 'monetdb5/mal` itself:


# 08:01:36 >  
# 08:01:36 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst904.mal </dev/null
# 08:01:36 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_mal', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:30001/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11334/.s.monetdb.30001
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded


# 22:45:39 >  
# 22:45:39 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-7101" "--port=34631"
# 22:45:39 >  

function user.foo():void;               	#[0] (0)  0 
    clients.setListing(15:int);         	#[1] (0) CLTsetListing 1 <- 2 
    b:bat[:lng] := bat.new(:lng);       	#[2] (0) CMDBATnew 3 <- 4 
    i:lng := -1:lng;                    	#[3] (0)  5 <- 6 
barrier i:lng := 0:lng;                 	#[4] (0)  5 <- 7 
    bat.append(b:bat[:lng], i:lng);     	#[5] (0) BKCappend_val_wrap 8 <- 3 5 
    redo i:lng := iterator.next(1:lng, 10:lng);	#[6] (0) ITRnext_lng 5 <- 9 10 
exit i:lng;                             	#[7] (0)  5 
    io.print(b:bat[:lng]);              	#[8] (0) IOprint_val 11 <- 3 
    c:int := 1:int;                     	#[9] (0)  12 <- 13 
    X_13:bat[:lng] := bat.new(nil:lng); 	#[10] (0) CMDBATnew 18 <- 19 
barrier (X_16:oid, X_17:lng) := iterator.new(b:bat[:lng]);	#[11] (0) ITRbunIterator 21 22 <- 3 
    X_19:lng := calc.+(X_17:lng, c:int);	#[12] (0) CMDvarADDsignal 24 <- 22 12 
    X_13:bat[:lng] := bat.append(X_13:bat[:lng], X_19:lng);	#[13] (0) BKCappend_val_wrap 18 <- 18 24 
    redo (X_16:oid, X_17:lng) := iterator.next(b:bat[:lng]);	#[14] (0) ITRbunNext 21 22 <- 3 
exit (X_16:oid, X_17:lng);              	#[15] (0)  21 22 
    xz:bat[:lng] := X_13:bat[:lng];     	#[16] (0)  14 <- 18 
    io.print(xz:bat[:lng]);             	#[17] (0) IOprint_val 17 <- 14 
end user.foo;                           	#[18] (0)  
#--------------------------#
# h	t  # name
# void	lng  # type
#--------------------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
#-----------------#
# h	tmp_5	  # name
# lng	lng	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]
[ 5@0,	  6	  ]
[ 6@0,	  7	  ]
[ 7@0,	  8	  ]
[ 8@0,	  9	  ]
[ 9@0,	  10	  ]

# 08:01:36 >  
# 08:01:36 >  Done.
# 08:01:36 >  

