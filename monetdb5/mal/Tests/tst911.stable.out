stdout of test 'tst911` in directory 'monetdb5/mal` itself:


# 08:01:40 >  
# 08:01:40 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst911.mal </dev/null
# 08:01:40 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_mal', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:30001/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11334/.s.monetdb.30001
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded


# 22:45:41 >  
# 22:45:41 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-7101" "--port=34631"
# 22:45:41 >  

function user.foo():void;               	#[0] (0)  0 
    b:bat[:lng] := bat.new(:lng);       	#[1] (0) CMDBATnew 1 <- 2 
    INT_MAX:int := 2147483647:int;      	#[2] (0)  3 <- 4 
    dbgmsk_restore:int := mdb.getDebug();	#[3] (0) MDBgetDebug 5 
    dbgmsk_unset:int := calc.+(8:int, 8388608:int);	#[4] (0) CMDvarADDsignal 6 <- 7 8 
    dbgmsk_keep:int := calc.xor(INT_MAX:int, dbgmsk_unset:int);	#[5] (0) CMDvarXOR 9 <- 3 6 
    dbgmsk_set:int := calc.and(dbgmsk_restore:int, dbgmsk_keep:int);	#[6] (0) CMDvarAND 10 <- 5 9 
    mdb.setDebug(dbgmsk_set:int);       	#[7] (0) MDBsetDebug 11 <- 10 
    r:void := mmath.srand(0:int);       	#[8] (0) MATHsrandint 12 <- 13 
barrier i:lng := 0:lng;                 	#[9] (0)  14 <- 15 
    k:int := mmath.rand();              	#[10] (0) MATHrandint 16 
    l:lng := calc.lng(k:int);           	#[11] (0) CMDvarCONVERT 17 <- 16 
    bat.append(b:bat[:lng], l:lng);     	#[12] (0) BKCappend_val_wrap 18 <- 1 17 
    redo i:lng := iterator.next(1:lng, 1000000:lng);	#[13] (0) ITRnext_lng 14 <- 19 20 
exit i:lng;                             	#[14] (0)  14 
    mdb.setDebug(dbgmsk_restore:int);   	#[15] (0) MDBsetDebug 21 <- 5 
    t0:lng := alarm.usec();             	#[16] (0) ALARMusec 22 
barrier doit:bit := true:bit;           	#[17] (0)  23 <- 24 
    t:bat[:oid] := algebra.select(b:bat[:lng], nil:bat[:oid], 256000:lng, 266000:lng, true:bit, true:bit, false:bit);	#[18] (0) ALGselect2 25 <- 1 26 27 28 24 24 29 
exit doit:bit;                          	#[19] (0)  23 
    t1:lng := alarm.usec();             	#[20] (0) ALARMusec 30 
    base:lng := calc.-(t1:lng, t0:lng); 	#[21] (0) CMDvarSUBsignal 31 <- 30 22 
    io.printf("#select direct %d usec\n":str, base:lng);	#[22] (0) IOprintf 32 <- 33 31 
    user.choptest(b:bat[:lng], 100000:lng, base:lng);	#[23] (0)  34 <- 1 35 31 
    user.choptest(b:bat[:lng], 10000:lng, base:lng);	#[24] (0)  36 <- 1 37 31 
    user.choptest(b:bat[:lng], 1000:lng, base:lng);	#[25] (0)  38 <- 1 39 31 
    user.choptest(b:bat[:lng], 100:lng, base:lng);	#[26] (0)  40 <- 1 41 31 
end user.foo;                           	#[27] (0)  
#select direct 4533 usec
#chopped at 100000 5256 723  at 72.300003 usec
#chopped at 10000 6061 1528  at 15.280000 usec
#chopped at 1000 15929 11396  at 11.396000 usec
#chopped at 100 113924 109391  at 10.939100 usec

# 22:45:43 >  
# 22:45:43 >  "Done."
# 22:45:43 >  

