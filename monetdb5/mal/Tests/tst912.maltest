statement ok
factory getChunk(b:bat[:lng], size:lng)(bb:bit,c:bat[:lng]);

statement ok
    (chk,c):= iterator.new(b,size);

statement ok
INT_MAX := 2147483647;

statement ok
dbgmsk_restore := mdb.getDebug();

statement ok
dbgmsk_unset := 8+8388608;

statement ok
dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);

statement ok
dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);

statement ok
mdb.setDebug(dbgmsk_set);

statement ok
barrier allways:= chk>=0;
    yield (bb,c):= (true,c);
    (chk,c):= iterator.next(b,size);
    redo allways:= chk>=0;
exit allways;
mdb.setDebug(dbgmsk_restore);
    io.print("#factory done\n");
    return (bb,c):= (false,c);
end getChunk;
function choptest(b:bat[:lng], size:lng, base:lng);
    t0:= alarm.usec();
    INT_MAX := 2147483647;
    dbgmsk_restore := mdb.getDebug();
    dbgmsk_unset := 8+8388608;
    dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
    dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
    mdb.setDebug(dbgmsk_set);
    barrier (tst,c):= user.getChunk(b,size);
        t:= algebra.select(c,nil:bat[:oid], 256000:lng,266000:lng,true,true,false);
        redo (tst,c):= user.getChunk(b,size);
    exit (tst,c);

statement ok
    mdb.setDebug(dbgmsk_restore);

statement ok
    t1:= alarm.usec();

statement ok
    d0:= t1-t0;

statement ok
    i:= 1000000:lng/size;

statement ok
    if:= calc.flt(i);

statement ok
    df:= calc.flt(d0);

statement ok
    f:= df/if;

statement ok
    io.printf("#chopped at %d",size);

statement ok
    io.printf(" at %f usec\n",f);

statement ok
end choptest;

statement ok
b:= bat.new(:lng);

statement ok
INT_MAX := 2147483647;

statement ok
dbgmsk_restore := mdb.getDebug();

statement ok
dbgmsk_unset := 8+8388608;

statement ok
dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);

statement ok
dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);

statement ok
mdb.setDebug(dbgmsk_set);

statement ok
r:= mmath.srand(0);

