stdout of test 'tst810` in directory 'monetdb5/mal` itself:


# 16:18:09 >  
# 16:18:09 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/scratch/mk/current//Linux/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=32494" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_mal" "tst810.mal"
# 16:18:09 >  

# MonetDB 5 server v11.10.0
# This is an unreleased version
# Serving database 'mTests_mal', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.620 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rocks019.scilens:32494/
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded


# 10:38:22 >  
# 10:38:22 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-864" "--port=33541"
# 10:38:22 >  

function user.foo():void;               	#[0] (0)  0 
    b:bat[:int] := bat.new(:int);       	#[1] (0) CMDBATnew 1 <- 2 
    bat.append(b:bat[:int], 1:int);     	#[2] (0) BKCappend_val_wrap 3 <- 1 4 
    bat.append(b:bat[:int], 2:int);     	#[3] (0) BKCappend_val_wrap 5 <- 1 6 
    bat.append(b:bat[:int], 3:int);     	#[4] (0) BKCappend_val_wrap 7 <- 1 8 
    bat.append(b:bat[:int], 4:int);     	#[5] (0) BKCappend_val_wrap 9 <- 1 10 
    bat.append(b:bat[:int], 5:int);     	#[6] (0) BKCappend_val_wrap 11 <- 1 12 
    bat.append(b:bat[:int], 6:int);     	#[7] (0) BKCappend_val_wrap 13 <- 1 14 
    bat.append(b:bat[:int], 7:int);     	#[8] (0) BKCappend_val_wrap 15 <- 1 16 
    bat.append(b:bat[:int], 8:int);     	#[9] (0) BKCappend_val_wrap 17 <- 1 18 
    bat.append(b:bat[:int], 9:int);     	#[10] (0) BKCappend_val_wrap 19 <- 1 20 
    io.print(b:bat[:int]);              	#[11] (0) IOprint_val 21 <- 1 
    slice1:bat[:int] := algebra.slice(b:bat[:int], 0@0:oid, 4@0:oid);	#[12] (0) ALGslice_oid 22 <- 1 23 24 
    io.print(slice1:bat[:int]);         	#[13] (0) IOprint_val 25 <- 22 
    slice2:bat[:int] := algebra.slice(b:bat[:int], 5@0:oid, nil:oid);	#[14] (0) ALGslice_oid 26 <- 1 27 28 
    io.print(slice2:bat[:int]);         	#[15] (0) IOprint_val 29 <- 26 
end user.foo;                           	#[16] (0)  
#--------------------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]
[ 5@0,	  6	  ]
[ 6@0,	  7	  ]
[ 7@0,	  8	  ]
[ 8@0,	  9	  ]
#-----------------#
# t	h	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	5  ]
#--------------------------#
# h	t  # name
# void	int	  # type
#--------------------------#
[ 5@0,	6  ]
[ 6@0,	7  ]
[ 7@0,	8  ]
[ 8@0,	9  ]

# 16:18:09 >  
# 16:18:09 >  "Done."
# 16:18:09 >  

