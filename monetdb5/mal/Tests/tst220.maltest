statement ok
function steal(bb:bat[:any_2]) :bat[:any_2];
	i:= bbp.getLRefCount(bb);
	io.printf("enter function refcount =%d[2,3]\n",i);
	loc:= bb;
	i:= bbp.getLRefCount(bb);
	io.printf("local in function refcount =%d[3,4]\n",i);
	return bb;
end steal

statement ok
function createone():bat[:str];
	b:= bat.new(:str);
	return b;
end createone

statement ok
	b:= bat.new(:str)

statement ok
	i:= bbp.getLRefCount(b)

query T rowsort
	io.printf("refcount =%d[1]\n",i)
----
refcount =1[1]

statement ok
	bat.append(b,"bat B")

query IT rowsort
	io.print(b)
----
0
bat B

statement ok
	i:= bbp.getLRefCount(b)

query T rowsort
	io.printf("refcount =%d[1]\n",i)
----
refcount =2[1]

statement ok
	b2:= b

statement ok
	i:= bbp.getLRefCount(b)

query T rowsort
	io.printf("after assignment refcount =%d[2]\n",i)
----
after assignment refcount =3[2]

statement ok
	b3:= b

statement ok
	cnt:= aggr.count(b3)

statement ok
	i:= bbp.getLRefCount(b)

query T rowsort
	io.printf("after 2nd assignment refcount =%d[3]\n",i)
----
after 2nd assignment refcount =4[3]

statement ok
	b3:= user.createone()

statement ok
	i:= bbp.getLRefCount(b)

query T rowsort
	io.printf("after 3rd assignment refcount =%d[2]\n",i)
----
after 3rd assignment refcount =3[2]

statement ok
	i:= bbp.getLRefCount(b3)

query T rowsort
	io.printf("assignment refcount =%d[1]\n",i)
----
assignment refcount =1[1]

statement ok
	b4:= algebra.select(b,nil:bat[:oid],"bat C","bat C",true,true,false)

statement ok
	b5:=algebra.projection(b4,b)

query IT rowsort
	io.print(b5)
----

statement ok
	i:= bbp.getLRefCount(b)

query T rowsort
	io.printf("after 4rd assignment refcount =%d[2]\n",i)
----
after 4rd assignment refcount =3[2]

statement ok
	b2:= b3

statement ok
	i:= bbp.getLRefCount(b)

query T rowsort
	io.printf("after 5rd assignment refcount =%d[1]\n",i)
----
after 5rd assignment refcount =2[1]

query T rowsort
	io.printf("call function\n")
----
call function

query T rowsort
	d:= user.steal(b)
----
local in function refcount =4[3,4]

statement ok
	i:= bbp.getLRefCount(b)

query T rowsort
	io.printf("return from function refcount =%d[2]\n",i)
----
return from function refcount =3[2]

query T rowsort
	io.printf("check self replacement, overrule refcount!\n")
----
check self replacement, overrule refcount!

query T rowsort
	b:= user.steal(b)
----
local in function refcount =5[3,4]

statement ok
	i:= bbp.getLRefCount(b)

query T rowsort
	io.printf("return from function refcount =%d[2]\n",i)
----
return from function refcount =3[2]

