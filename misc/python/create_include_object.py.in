#!@PYTHON@

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2022 MonetDB B.V.

import os
import sys
import argparse
import re

def open_convert_file(srcfile):
    if os.path.isfile(srcfile):
        with open(srcfile, 'r') as f:
            try:
                content = f.read()
            except UnicodeDecodeError as err:
                print("Conversion error: {0}".format(err))
                sys.exit(1)
        return content
    else:
        raise FileNotFoundError


def write_c_file(module_name, language, buffer_as_array, length, c_filename):
    # [NOTE]: also escape the { and } character in the strings
    with open(c_filename, 'w') as f:
        write = f.write
        write("unsigned char _{mod}_{lang}[{length}] = {{\n".format(
            mod=module_name,
            lang=language,
            length=length+1))
        if length >= 65535:
            for line in buffer_as_array:
                for c in line:
                    write("'")
                    if c == '\\':
                        write(r"\\")
                    elif c == "'":
                        write(r"\'")
                    else:
                        write(c)
                    write("',")
                write("'\\n',\n")
            write("'\\0'\n")
        else:
            for line in buffer_as_array:
                write('"')
                write(line.replace('\\', r'\\').replace('"', r'\"'))
                write('\\n"\n')
        write('};\n')
        write("#include \"monetdb_config.h\"\n")
        write("#include \"{lang}_import.h\"\n".format(lang=language))
        write("#ifdef _MSC_VER\n")
        write("#undef read\n")
        write("#pragma section(\".CRT$XCU\",read)\n")
        write("#endif\n")
        write("LIB_STARTUP_FUNC(init_{mod}_{lang})\n"
              "{{ {lang}_register(\"{mod}\", _{mod}"
              "_{lang}); }}\n".format(mod=module_name, lang=language))

def mal2c(content):
    comment_or_empty = re.compile('^[ \t]*(#|$)')
    space = re.compile('[ \t]+')
    c_array = []
    length = 0
    for line in content.split('\n'):
        if comment_or_empty.match(line):
            continue
        line = space.sub(' ', line)
        line = line.strip()
        if not line:
            continue
        c_array.append(line)
        length += len(line) + 1 # include newline in length calculation
    return c_array, length


def sql2c(content):
    comment_or_empty = re.compile('^[ \t]*(--|#|$)')
    comment = re.compile(r'/\*.*?\*/|--.*')
    c_array = []
    length = 0
    for line in content.split('\n'):
        if comment_or_empty.match(line):
            continue
        line = comment.sub('', line)
        line = line.rstrip()
        if line.startswith('include '):
            continue
        if not line:
            continue
        c_array.append(line)
        length += len(line) + 1 # include newline in length calculation
    return c_array, length


def create_c_sourcefile(srcfile, lang, mod, c_filename):
    content = open_convert_file(srcfile)
    if lang == 'mal':
       buffer_as_array, length = mal2c(content)
    elif lang == 'sql':
       buffer_as_array, length = sql2c(content)
    else:
        return
    write_c_file(mod, lang, buffer_as_array, length, c_filename)

def copy2c(content):
    return ",".join(str(ord(c)) for c in content) + ","

def txt2c(content, sql):
    buffer = bytearray()

    i = 0
    cur_state = 0

    endloop = len(content) - 1

    # STATES 0 - OK, 1 in # comment, 2 between comment keyword and comment block (removing comments),
    # 3 inside address comment block (removing comments),
    # 4 inside whitespaces
    while i < endloop:
        c = content[i]

        if cur_state == 1:  # inside an hashtag comment
            if c == '\n':
                cur_state = 0
            i += 1
            continue
        elif cur_state == 2:  # before entering a MAL comment, and removing it
            if c == '"':
                cur_state = 3
            i += 1
            continue
        elif cur_state == 3:  # inside a MAL comment, and removing it
            if c == '\\':
                i += 2
            elif c == '"':
                cur_state = 0
                i += 1
            else:
                i += 1
            continue
        elif cur_state == 4:  # inside whitespaces
            if c not in (' ', '\t', '\n'):
                cur_state = 0
                continue
            i += 1
            continue

        if c == '#':
            cur_state = 1
            i += 1
            continue
        elif 0 and c == 'c' and i + 8 < endloop and content[i:i+7] == 'comment' and content[i-1].isspace() and content[i+7].isspace():
            cur_state = 2
            i += 6
            continue
        if sql:
            if i+2 < endloop and content[i:i+2] == '--':
                i += 2
                cur_state = 1 # remove comment
                continue
        if not sql and c == 'i' and i + 8 < endloop and content[i:i+7] == 'include' and content[i-1].isspace() and content[i+7].isspace():
                cur_state = 1 # remove include line from mal
                i += 7
                continue

        buffer.append(ord(c))

        if c in (' ', '\t', '\n'):
            cur_state = 4
        i += 1

    if len(buffer) < 0: # nothing to add, ie return error
        sys.exit(-1)
    buffer_as_string = ",".join(str(c) for c in buffer) + ','
    #return buffer
    return buffer_as_string

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("name", help="The name of the module to convert")
    parser.add_argument("language",
                        help="The language of the file to convert",
                        choices=['mal', 'sql'])
    parser.add_argument("filename", help="The name of the file to convert")
    parser.add_argument("c_filename", help="The name of the c file to output")
    args=parser.parse_args()

    try:
        create_c_sourcefile(args.filename,
                            args.language,
                            args.name,
                            args.c_filename)
    except FileNotFoundError:
        print("Source file {0} not found.".format(args.name))


if __name__ == '__main__':
    main()
