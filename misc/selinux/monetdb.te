# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2022 MonetDB B.V.

policy_module(monetdb, 1.1)
# The above line declares that this file is a SELinux policy file. Its
# name is monetdb, so the file should be saved as monetdb.te

# Declare the system types and classes we're using.
require {
	type proc_net_t;
	type tmp_t;
	type var_t;
	type var_lib_t;
	type user_home_t;
	type user_home_dir_t;
	type unconfined_service_t;	# for EPEL 7
	type proc_t;			# for EPEL 7
	type cgroup_t;
	class dir { read };
	class fd { use };
	class fifo_file { getattr read write };
	class file { entrypoint execute getattr manage_file_perms map open read };
	class netlink_selinux_socket create_socket_perms;
	class process { rlimitinh siginh signal sigchld sigkill transition };
	class tcp_socket create_stream_socket_perms;
	class udp_socket create_stream_socket_perms;
	class unix_dgram_socket create_socket_perms;
	class unix_stream_socket { connectto create_stream_socket_perms getopt read shutdown write };
}

# First, we declare the monetdbd_t domain, used for the "monetdbd"
# process.  Because it is launched by systemd, we tell the policy that
# monetdbd_exec_t (the context of monetdbd), when launched by systemd,
# should transition to monetdbd_t.
type monetdbd_t;		# monetdbd when run by systemd
type monetdbd_exec_t;		# /usr/bin/monetdbd
init_daemon_domain(monetdbd_t, monetdbd_exec_t)

# monetdbd_t must be allowed to execute mserver5 which has context
# mserver5_exec_t which must then transition to the mserver5_t domain
type mserver5_t;		# mserver5 when run by monetdbd (monetdbd_t)
type mserver5_exec_t;		# /usr/bin/mserver5
init_daemon_domain(mserver5_t, mserver5_exec_t)
# see https://selinuxproject.org/page/NB_Domain_and_Object_Transitions#Domain_Transition
allow monetdbd_t mserver5_t:process transition;
allow monetdbd_t mserver5_exec_t:file { execute open read getattr };
allow mserver5_t mserver5_exec_t:file { entrypoint read execute };
type_transition monetdbd_t mserver5_exec_t:process mserver5_t;

# monetdbd must be allowed to kill the server it started
allow monetdbd_t mserver5_t:process sigkill;
# on EPEL 7 we need these as well
allow mserver5_t monetdbd_t:process sigchld;
allow monetdbd_t unconfined_service_t:process signal;
allow mserver5_t proc_t:file { open read getattr };      # read /proc/meminfo

# declare a type for the systemd unit file (monetdbd.service)
type monetdbd_unit_file_t;
systemd_unit_file(monetdbd_unit_file_t)

# declare a type for the log files
type monetdbd_log_t;
logging_log_file(monetdbd_log_t)
manage_dirs_pattern(monetdbd_t, monetdbd_log_t, monetdbd_log_t)
manage_files_pattern(monetdbd_t, monetdbd_log_t, monetdbd_log_t)
logging_log_filetrans(monetdbd_t, monetdbd_log_t, { file dir })

# the context used for the MonetDB database files
type mserver5_db_t;
files_type(mserver5_db_t)
manage_files_pattern(mserver5_t, mserver5_db_t, mserver5_db_t)
manage_dirs_pattern(mserver5_t, mserver5_db_t, mserver5_db_t)
manage_files_pattern(monetdbd_t, mserver5_db_t, mserver5_db_t)
manage_dirs_pattern(monetdbd_t, mserver5_db_t, mserver5_db_t)
allow mserver5_t mserver5_db_t:file { map };

# the context used for the configuration files
type monetdbd_etc_t;
files_config_file(monetdbd_etc_t)
read_files_pattern(monetdbd_t, monetdbd_etc_t, monetdbd_etc_t)
read_lnk_files_pattern(monetdbd_t, monetdbd_etc_t, monetdbd_etc_t)

# the context used for the PID file
type monetdbd_var_run_t;
files_pid_file(monetdbd_var_run_t)
init_daemon_run_dir(monetdbd_var_run_t, "monetdb")
manage_dirs_pattern(monetdbd_t, monetdbd_var_run_t, monetdbd_var_run_t)
manage_files_pattern(monetdbd_t, monetdbd_var_run_t, monetdbd_var_run_t)

# context for .merovingian_lock file
type monetdbd_lock_t;
files_lock_file(monetdbd_lock_t)
allow monetdbd_t monetdbd_lock_t:file manage_file_perms;
files_lock_filetrans(monetdbd_t, monetdbd_lock_t, file, ".merovingian_lock")

# context for .gdk_lock file inside the database
# these files get locked by mserver5, but also by monetdbd
type mserver5_lock_t;
files_lock_file(mserver5_lock_t)
allow mserver5_t mserver5_lock_t:file manage_file_perms;
files_lock_filetrans(mserver5_t, mserver5_lock_t, file, ".gdk_lock")
allow monetdbd_t mserver5_lock_t:file manage_file_perms;
files_lock_filetrans(monetdbd_t, mserver5_lock_t, file, ".gdk_lock")

# other required permissions
dev_read_rand(monetdbd_t)
sysnet_dns_name_resolve(monetdbd_t)
corenet_udp_bind_generic_node(monetdbd_t)
corenet_tcp_bind_generic_node(monetdbd_t)
allow monetdbd_t self:tcp_socket create_stream_socket_perms;
allow monetdbd_t self:udp_socket create_stream_socket_perms;
allow monetdbd_t self:unix_dgram_socket create_socket_perms;
allow monetdbd_t self:unix_stream_socket { create_stream_socket_perms connectto };
allow monetdbd_t self:netlink_selinux_socket create_socket_perms;
allow monetdbd_t proc_net_t:file read;
manage_dirs_pattern(monetdbd_t, tmp_t, tmp_t)
manage_sock_files_pattern(monetdbd_t, tmp_t, tmp_t)
manage_sock_files_pattern(monetdbd_t, mserver5_db_t, mserver5_db_t)

dev_read_rand(mserver5_t)
allow mserver5_t monetdbd_t:fd { use };
allow monetdbd_t mserver5_t:process { rlimitinh siginh signal };
dev_rw_null(mserver5_t)
sysnet_dns_name_resolve(mserver5_t)
corenet_udp_bind_generic_node(mserver5_t)
corenet_tcp_bind_generic_node(mserver5_t)
allow mserver5_t self:tcp_socket create_stream_socket_perms;
allow mserver5_t self:udp_socket create_stream_socket_perms;
allow mserver5_t self:unix_dgram_socket create_socket_perms;
allow mserver5_t self:unix_stream_socket { create_stream_socket_perms connectto };
allow mserver5_t self:netlink_selinux_socket create_socket_perms;
manage_dirs_pattern(mserver5_t, tmp_t, tmp_t)
manage_sock_files_pattern(mserver5_t, tmp_t, tmp_t)
allow mserver5_t tmp_t:file create;
manage_sock_files_pattern(mserver5_t, mserver5_db_t, mserver5_db_t)
allow mserver5_t monetdbd_t:fifo_file { read write getattr ioctl };
allow mserver5_t monetdbd_t:unix_stream_socket { read write getopt shutdown };
allow mserver5_t var_t:dir { read };
allow mserver5_t var_lib_t:dir { read };
# we want to be able to read some cgroup files
fs_search_cgroup_dirs(mserver5_t);
fs_read_cgroup_files(mserver5_t);
allow mserver5_t cgroup_t:dir search;
allow mserver5_t self:process execmem;
allow monetdbd_t var_t:dir { read };
allow monetdbd_t var_lib_t:dir { read };
gen_tunable(mserver5_can_read_home, false)
tunable_policy(`mserver5_can_read_home', `
    userdom_search_user_home_dirs(mserver5_t)
    allow mserver5_t user_home_t:file read_file_perms;
    allow mserver5_t user_home_dir_t:dir search;
')
allow monetdbd_t mserver5_t:unix_stream_socket { connectto };
